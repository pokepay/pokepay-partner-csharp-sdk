// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestGetCustomerAccounts
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task GetCustomerAccounts0()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "8b7283ce-bdbe-4487-8dc4-4e63b89682f5"
                );
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts1()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "8b7283ce-bdbe-4487-8dc4-4e63b89682f5"
                ) {
                    Email = "Wxfr4xKRRC@5UPf.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts2()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "8b7283ce-bdbe-4487-8dc4-4e63b89682f5"
                ) {
                    Tel = "049161302",
                    Email = "JmxAhDpklt@xfpG.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts3()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "8b7283ce-bdbe-4487-8dc4-4e63b89682f5"
                ) {
                    ExternalId = "gKz",
                    Tel = "03370396804",
                    Email = "XPCbHnT3R8@fCd8.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts4()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "8b7283ce-bdbe-4487-8dc4-4e63b89682f5"
                ) {
                    Status = "pre-closed",
                    ExternalId = "15VzfSNwUPij0JCeKaErwIngTct5VctC8ahSG576Yk267hNuqs",
                    Tel = "01-55-5577",
                    Email = "I0fcKmGRUw@7sMh.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts5()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "8b7283ce-bdbe-4487-8dc4-4e63b89682f5"
                ) {
                    IsSuspended = false,
                    Status = "active",
                    ExternalId = "W8ODbHk",
                    Tel = "024-082-320",
                    Email = "mObvnHUjDT@SSci.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts6()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "8b7283ce-bdbe-4487-8dc4-4e63b89682f5"
                ) {
                    CreatedAtTo = "2019-07-14T22:00:44.000000+09:00",
                    IsSuspended = true,
                    Status = "active",
                    ExternalId = "3PX7IImkvl5vCAHh7QD95u0YIcm0Sp",
                    Tel = "022516-8947",
                    Email = "kJp5ENq52O@LTcJ.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts7()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "8b7283ce-bdbe-4487-8dc4-4e63b89682f5"
                ) {
                    CreatedAtFrom = "2016-09-06T20:46:33.000000+09:00",
                    CreatedAtTo = "2017-03-18T07:26:03.000000+09:00",
                    IsSuspended = true,
                    Status = "pre-closed",
                    ExternalId = "sa7zuy1tusd",
                    Tel = "071-69745487",
                    Email = "fKkMLwrBpO@RQ9L.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts8()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "8b7283ce-bdbe-4487-8dc4-4e63b89682f5"
                ) {
                    PerPage = 558,
                    CreatedAtFrom = "2023-08-19T01:07:14.000000+09:00",
                    CreatedAtTo = "2025-03-19T19:50:42.000000+09:00",
                    IsSuspended = true,
                    Status = "active",
                    ExternalId = "KRmCd4nadmeyKnqGyqpn3W7S",
                    Tel = "0314-77713",
                    Email = "jd8QPzbjt0@rt7U.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts9()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "8b7283ce-bdbe-4487-8dc4-4e63b89682f5"
                ) {
                    Page = 1301,
                    PerPage = 4462,
                    CreatedAtFrom = "2021-05-24T20:37:01.000000+09:00",
                    CreatedAtTo = "2024-10-03T17:56:05.000000+09:00",
                    IsSuspended = true,
                    Status = "suspended",
                    ExternalId = "ZGbvG",
                    Tel = "076-9211-591",
                    Email = "6an4P1AnQA@LadF.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
