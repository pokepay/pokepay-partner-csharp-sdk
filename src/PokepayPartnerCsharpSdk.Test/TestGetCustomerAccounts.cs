// DO NOT EDIT: File is generated by code generator.
#nullable enable
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestGetCustomerAccounts
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task GetCustomerAccounts0()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "572384d4-2c88-4b68-8352-d47cc05309be"
                );
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts1()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "572384d4-2c88-4b68-8352-d47cc05309be"
                ) {
                    Email = "cEAVa4Jmfj@oJZ9.com"
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts2()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "572384d4-2c88-4b68-8352-d47cc05309be"
                ) {
                    Tel = "05-8392-004",
                    Email = "SP5BpfA0dY@cuMm.com"
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts3()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "572384d4-2c88-4b68-8352-d47cc05309be"
                ) {
                    ExternalId = "pa4aDHWm3",
                    Tel = "02760480",
                    Email = "Rhz83lKq4W@p1hK.com"
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts4()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "572384d4-2c88-4b68-8352-d47cc05309be"
                ) {
                    IsSuspended = true,
                    ExternalId = "lNvpHM0s",
                    Tel = "0404-495603",
                    Email = "qWqC0qUtLa@g9ad.com"
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts5()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "572384d4-2c88-4b68-8352-d47cc05309be"
                ) {
                    CreatedAtTo = "2023-10-16T20:08:04.000000+09:00",
                    IsSuspended = true,
                    ExternalId = "xARTcCtKjz1M2kusM3cVDMOGMtpxWNvKR6G",
                    Tel = "030673-399",
                    Email = "mBaUIu6lQI@yVND.com"
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts6()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "572384d4-2c88-4b68-8352-d47cc05309be"
                ) {
                    CreatedAtFrom = "2021-10-16T15:01:53.000000+09:00",
                    CreatedAtTo = "2023-09-03T13:13:32.000000+09:00",
                    IsSuspended = true,
                    ExternalId = "S46oTXBYnbHbMuAdnXANiixumuncg7egxc7L05i8jkZ1Waa6",
                    Tel = "0566-7209858",
                    Email = "hbgsnyiHZ1@n3qw.com"
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts7()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "572384d4-2c88-4b68-8352-d47cc05309be"
                ) {
                    PerPage = 364,
                    CreatedAtFrom = "2017-04-07T08:32:00.000000+09:00",
                    CreatedAtTo = "2020-08-18T08:01:52.000000+09:00",
                    IsSuspended = true,
                    ExternalId = "QhfSXAhy6Q6NsE0G4ETHn0hBw4No1YX",
                    Tel = "0977-293-831",
                    Email = "IQORsTn19L@t83I.com"
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts8()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "572384d4-2c88-4b68-8352-d47cc05309be"
                ) {
                    Page = 4254,
                    PerPage = 8836,
                    CreatedAtFrom = "2024-09-29T07:20:14.000000+09:00",
                    CreatedAtTo = "2024-12-19T22:16:30.000000+09:00",
                    IsSuspended = false,
                    ExternalId = "sZzwHUgb2qqrLtRpMZnFJMuPuuYDxHZdnikAchiJbVP3ZTnJx",
                    Tel = "068-41298",
                    Email = "hQa29Ltqbz@IUCt.com"
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
