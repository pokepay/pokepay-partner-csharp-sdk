// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestGetCustomerAccounts
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task GetCustomerAccounts0()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "a28d009c-c959-4752-8d6f-334e4cb4e0ff"
                );
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts1()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "a28d009c-c959-4752-8d6f-334e4cb4e0ff"
                ) {
                    Email = "8ciCbZWnzc@DnK4.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts2()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "a28d009c-c959-4752-8d6f-334e4cb4e0ff"
                ) {
                    Tel = "05014-3682",
                    Email = "EWGQmIqwq8@0GWY.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts3()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "a28d009c-c959-4752-8d6f-334e4cb4e0ff"
                ) {
                    ExternalId = "Cdqp3aMw45RftnlC",
                    Tel = "088180521115",
                    Email = "dtFEN83UK6@KJ48.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts4()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "a28d009c-c959-4752-8d6f-334e4cb4e0ff"
                ) {
                    Status = "active",
                    ExternalId = "qLWZU1lTgJBoEtylA7LcgVEYNBH5KGkiTeGr",
                    Tel = "0416-246",
                    Email = "PcxbP00J7Q@mpOV.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts5()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "a28d009c-c959-4752-8d6f-334e4cb4e0ff"
                ) {
                    IsSuspended = true,
                    Status = "suspended",
                    ExternalId = "7MePtYYSm3L3WBUYIGLXhu0DvMLxvuDjJfJx",
                    Tel = "043-72-8897",
                    Email = "yccRVuXaxH@AAzt.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts6()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "a28d009c-c959-4752-8d6f-334e4cb4e0ff"
                ) {
                    CreatedAtTo = "2022-12-13T00:29:39.000000+09:00",
                    IsSuspended = true,
                    Status = "active",
                    ExternalId = "rbX507aitxdTcYjjC",
                    Tel = "054148-3831",
                    Email = "bWjjaocKJS@9JHl.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts7()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "a28d009c-c959-4752-8d6f-334e4cb4e0ff"
                ) {
                    CreatedAtFrom = "2017-10-01T13:26:52.000000+09:00",
                    CreatedAtTo = "2018-08-22T20:48:06.000000+09:00",
                    IsSuspended = true,
                    Status = "suspended",
                    ExternalId = "ltjjmodDQEUxDaghv7DnSC5Rfu0C0uKFwmpPkP",
                    Tel = "0725-3782545",
                    Email = "FSpI6jwJUU@xrUc.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts8()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "a28d009c-c959-4752-8d6f-334e4cb4e0ff"
                ) {
                    PerPage = 7205,
                    CreatedAtFrom = "2017-04-22T17:37:23.000000+09:00",
                    CreatedAtTo = "2025-05-12T16:44:37.000000+09:00",
                    IsSuspended = true,
                    Status = "suspended",
                    ExternalId = "2A200gV6FxYfWwCiS0MuCLswxDV9drgRKhLSvZ2KQORxM",
                    Tel = "0829-60503660",
                    Email = "W2y8KrZ8xM@lNal.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts9()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "a28d009c-c959-4752-8d6f-334e4cb4e0ff"
                ) {
                    Page = 7768,
                    PerPage = 461,
                    CreatedAtFrom = "2023-06-28T00:01:54.000000+09:00",
                    CreatedAtTo = "2023-05-08T22:24:36.000000+09:00",
                    IsSuspended = true,
                    Status = "pre-closed",
                    ExternalId = "8s14cZJ7e4Q9GCUyL2v9u3mWzZwKqxzujrUlmkKRd",
                    Tel = "08-9962435",
                    Email = "8WCqGZQWNe@d5BL.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
