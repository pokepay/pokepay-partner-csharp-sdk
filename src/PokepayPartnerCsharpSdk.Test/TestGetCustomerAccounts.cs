// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestGetCustomerAccounts
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task GetCustomerAccounts0()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "87519240-e4d3-49f3-8ae5-0bfc7ae8703f"
                );
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts1()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "87519240-e4d3-49f3-8ae5-0bfc7ae8703f"
                ) {
                    Email = "HLp5K9kuBt@m41x.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts2()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "87519240-e4d3-49f3-8ae5-0bfc7ae8703f"
                ) {
                    Tel = "017-2140114",
                    Email = "boH7C2HKos@6Uqr.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts3()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "87519240-e4d3-49f3-8ae5-0bfc7ae8703f"
                ) {
                    ExternalId = "MJyf0M1cLCVKpzUouBaexX",
                    Tel = "028-269-425",
                    Email = "77aghCTpMo@c8CI.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts4()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "87519240-e4d3-49f3-8ae5-0bfc7ae8703f"
                ) {
                    Status = "active",
                    ExternalId = "uaGEbNVaZSbM2FkM4gHM4fhzUQPgBD",
                    Tel = "08-294-282",
                    Email = "b1Q2tVadST@M7WC.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts5()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "87519240-e4d3-49f3-8ae5-0bfc7ae8703f"
                ) {
                    IsSuspended = true,
                    Status = "active",
                    ExternalId = "U5IfjEXVtCG1",
                    Tel = "03933880813",
                    Email = "Gl8ytKhkkr@6EGj.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts6()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "87519240-e4d3-49f3-8ae5-0bfc7ae8703f"
                ) {
                    CreatedAtTo = "2024-11-09T19:36:40.000000+09:00",
                    IsSuspended = true,
                    Status = "active",
                    ExternalId = "4X4UuJzZqFQZgacAD1",
                    Tel = "0658-0321",
                    Email = "68L1dIHn3e@DBt3.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts7()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "87519240-e4d3-49f3-8ae5-0bfc7ae8703f"
                ) {
                    CreatedAtFrom = "2017-10-29T18:46:53.000000+09:00",
                    CreatedAtTo = "2020-03-02T23:44:56.000000+09:00",
                    IsSuspended = false,
                    Status = "pre-closed",
                    ExternalId = "BSrhA1N42a0iXPFZiooloM3gEmFprAh",
                    Tel = "02228743-6739",
                    Email = "LxqWYynLE3@Gn9w.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts8()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "87519240-e4d3-49f3-8ae5-0bfc7ae8703f"
                ) {
                    PerPage = 3994,
                    CreatedAtFrom = "2021-06-13T22:05:57.000000+09:00",
                    CreatedAtTo = "2019-06-09T15:27:00.000000+09:00",
                    IsSuspended = false,
                    Status = "suspended",
                    ExternalId = "AzwX3drF",
                    Tel = "055-8016717",
                    Email = "235RIJu5bt@Z0Nx.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts9()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "87519240-e4d3-49f3-8ae5-0bfc7ae8703f"
                ) {
                    Page = 7641,
                    PerPage = 7829,
                    CreatedAtFrom = "2017-06-03T07:38:46.000000+09:00",
                    CreatedAtTo = "2024-04-19T20:36:37.000000+09:00",
                    IsSuspended = true,
                    Status = "suspended",
                    ExternalId = "pLlcqEeGIYF",
                    Tel = "077560-829",
                    Email = "ElD6EMf3DX@Gbtm.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
