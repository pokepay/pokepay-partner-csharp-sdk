// DO NOT EDIT: File is generated by code generator.
#nullable enable
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestGetCustomerAccounts
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task GetCustomerAccounts0()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "7f94c950-6ed6-47a1-b8d4-2c8895d41b68"
                );
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts1()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "7f94c950-6ed6-47a1-b8d4-2c8895d41b68"
                ) {
                    Email = "CRcEAVa4Jm@fjoJ.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts2()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "7f94c950-6ed6-47a1-b8d4-2c8895d41b68"
                ) {
                    Tel = "07915737-6839",
                    Email = "BqxPDSP5Bp@fA0d.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts3()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "7f94c950-6ed6-47a1-b8d4-2c8895d41b68"
                ) {
                    ExternalId = "cuMmHpa4aDHWm32hBFhI0DxRhz",
                    Tel = "038101710",
                    Email = "lNvpHM0s7D@d9Uu.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts4()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "7f94c950-6ed6-47a1-b8d4-2c8895d41b68"
                ) {
                    IsSuspended = true,
                    ExternalId = "qWqC0qUtLag9adxARTcCtKjz1M2kusM3c",
                    Tel = "04-52-8842",
                    Email = "pxWNvKR6Gc@p6PW.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts5()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "7f94c950-6ed6-47a1-b8d4-2c8895d41b68"
                ) {
                    CreatedAtTo = "2020-11-24T10:08:23.000000+09:00",
                    IsSuspended = false,
                    ExternalId = "NymBaUIu6lQIyVNDYRttS46oTXBYnbHbMuAdnXANii",
                    Tel = "05-838-7657",
                    Email = "xc7L05i8jk@Z1Wa.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts6()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "7f94c950-6ed6-47a1-b8d4-2c8895d41b68"
                ) {
                    CreatedAtFrom = "2022-05-27T02:04:46.000000+09:00",
                    CreatedAtTo = "2016-12-11T21:40:59.000000+09:00",
                    IsSuspended = true,
                    ExternalId = "Ag",
                    Tel = "0003-858-273",
                    Email = "nyiHZ1n3qw@k3r3.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts7()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "7f94c950-6ed6-47a1-b8d4-2c8895d41b68"
                ) {
                    PerPage = 1312,
                    CreatedAtFrom = "2025-04-07T11:12:06.000000+09:00",
                    CreatedAtTo = "2022-09-25T01:02:12.000000+09:00",
                    IsSuspended = false,
                    ExternalId = "hfSXAhy6Q6NsE0G4ET",
                    Tel = "06827149",
                    Email = "XyGaN9eZjS@IQOR.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts8()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "7f94c950-6ed6-47a1-b8d4-2c8895d41b68"
                ) {
                    Page = 7156,
                    PerPage = 8998,
                    CreatedAtFrom = "2022-02-19T23:34:45.000000+09:00",
                    CreatedAtTo = "2020-09-19T13:48:01.000000+09:00",
                    IsSuspended = true,
                    ExternalId = "9L",
                    Tel = "080-9236601",
                    Email = "psZzwHUgb2@qqrL.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
