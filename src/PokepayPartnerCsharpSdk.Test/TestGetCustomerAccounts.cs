// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestGetCustomerAccounts
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task GetCustomerAccounts0()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "fa3c7e89-ee9b-4cf1-a8da-f41d665d9e7d"
                );
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts1()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "fa3c7e89-ee9b-4cf1-a8da-f41d665d9e7d"
                ) {
                    Email = "xnvSD0LOat@fDyh.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts2()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "fa3c7e89-ee9b-4cf1-a8da-f41d665d9e7d"
                ) {
                    Tel = "0981418368",
                    Email = "khnsgFhZ8V@jqE7.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts3()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "fa3c7e89-ee9b-4cf1-a8da-f41d665d9e7d"
                ) {
                    ExternalId = "3qYPKK",
                    Tel = "0675398063",
                    Email = "IsAKollXBO@G7aJ.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts4()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "fa3c7e89-ee9b-4cf1-a8da-f41d665d9e7d"
                ) {
                    Status = "suspended",
                    ExternalId = "Tu4GFh5st3gJ",
                    Tel = "0288-99-486",
                    Email = "NyginjDP2g@Q8nw.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts5()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "fa3c7e89-ee9b-4cf1-a8da-f41d665d9e7d"
                ) {
                    IsSuspended = false,
                    Status = "suspended",
                    ExternalId = "rhhWJ9ixAuq3I3ww0z8WUOVxnZtDaCeB6mc307Y",
                    Tel = "038886-736",
                    Email = "tEMijt0JRs@TMs4.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts6()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "fa3c7e89-ee9b-4cf1-a8da-f41d665d9e7d"
                ) {
                    CreatedAtTo = "2021-01-07T13:23:11.000000+09:00",
                    IsSuspended = true,
                    Status = "active",
                    ExternalId = "9sk3Qb2RX",
                    Tel = "008-10635136",
                    Email = "nkyJ25W5EO@quNS.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts7()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "fa3c7e89-ee9b-4cf1-a8da-f41d665d9e7d"
                ) {
                    CreatedAtFrom = "2021-03-20T02:50:45.000000+09:00",
                    CreatedAtTo = "2022-04-06T01:10:17.000000+09:00",
                    IsSuspended = true,
                    Status = "pre-closed",
                    ExternalId = "1i0K9YDwfcksdy3DzwCz6yVmPNgWNYS",
                    Tel = "06-5630203",
                    Email = "G8ZzpMnHST@Ppfx.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts8()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "fa3c7e89-ee9b-4cf1-a8da-f41d665d9e7d"
                ) {
                    PerPage = 454,
                    CreatedAtFrom = "2020-04-14T12:06:05.000000+09:00",
                    CreatedAtTo = "2022-11-07T21:33:36.000000+09:00",
                    IsSuspended = false,
                    Status = "suspended",
                    ExternalId = "ixrhkqBEiyvFlwLNjI93cojkxsrw0PTd",
                    Tel = "06568-2728",
                    Email = "tjZzfboJ02@SH0z.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetCustomerAccounts9()
        {
            try {
                Request.GetCustomerAccounts request = new Request.GetCustomerAccounts(
                    "fa3c7e89-ee9b-4cf1-a8da-f41d665d9e7d"
                ) {
                    Page = 8218,
                    PerPage = 2813,
                    CreatedAtFrom = "2020-01-21T06:34:25.000000+09:00",
                    CreatedAtTo = "2023-04-08T22:14:17.000000+09:00",
                    IsSuspended = false,
                    Status = "suspended",
                    ExternalId = "Woca66hAtvmZZ24CX",
                    Tel = "0095-052-595",
                    Email = "jjUolvygiY@PeoX.com",
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
