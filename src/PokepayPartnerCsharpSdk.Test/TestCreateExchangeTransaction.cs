// DO NOT EDIT: File is generated by code generator.
#nullable enable
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateExchangeTransaction
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateExchangeTransaction0()
        {
            try {
                Request.CreateExchangeTransaction request = new Request.CreateExchangeTransaction(
                    "06a5d2f3-24ff-4667-bc8c-65ce1140d986",
                    "da109100-e2fa-4783-9783-8f2f87ea64e6",
                    "f970404d-f9bd-4e3e-8b56-45d980d67ece",
                    6534
                );
                Response.Transaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateExchangeTransaction1()
        {
            try {
                Request.CreateExchangeTransaction request = new Request.CreateExchangeTransaction(
                    "06a5d2f3-24ff-4667-bc8c-65ce1140d986",
                    "da109100-e2fa-4783-9783-8f2f87ea64e6",
                    "f970404d-f9bd-4e3e-8b56-45d980d67ece",
                    6534
                ) {
                    RequestId = "367806f4-330f-45a5-9195-2ba133f57846",
                };
                Response.Transaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateExchangeTransaction2()
        {
            try {
                Request.CreateExchangeTransaction request = new Request.CreateExchangeTransaction(
                    "06a5d2f3-24ff-4667-bc8c-65ce1140d986",
                    "da109100-e2fa-4783-9783-8f2f87ea64e6",
                    "f970404d-f9bd-4e3e-8b56-45d980d67ece",
                    6534
                ) {
                    Description = "ORiCKaN1GSBkTmsnETZgON7wI25X",
                    RequestId = "87cb461b-ae44-4a7e-b4cc-0117b77b58c4",
                };
                Response.Transaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
