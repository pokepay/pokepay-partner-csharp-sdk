// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateExchangeTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateExchangeTransaction0()
        {
            try {
                Request.CreateExchangeTransaction request = new Request.CreateExchangeTransaction(
                    "a925076a-ae23-4594-ae46-9e69dbeb0065",
                    "40fa2a5a-4e26-49c4-afb5-ec34d89f1f13",
                    "b74e926c-cde8-48a1-b8a7-c6bc9e570582",
                    7082.0
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateExchangeTransaction1()
        {
            try {
                Request.CreateExchangeTransaction request = new Request.CreateExchangeTransaction(
                    "a925076a-ae23-4594-ae46-9e69dbeb0065",
                    "40fa2a5a-4e26-49c4-afb5-ec34d89f1f13",
                    "b74e926c-cde8-48a1-b8a7-c6bc9e570582",
                    7082.0
                ) {
                    RequestId = "c202c7c7-8b61-4936-a6d9-db5c7a264d59",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateExchangeTransaction2()
        {
            try {
                Request.CreateExchangeTransaction request = new Request.CreateExchangeTransaction(
                    "a925076a-ae23-4594-ae46-9e69dbeb0065",
                    "40fa2a5a-4e26-49c4-afb5-ec34d89f1f13",
                    "b74e926c-cde8-48a1-b8a7-c6bc9e570582",
                    7082.0
                ) {
                    Description = "MzVwAJ0HRTFpWJXZGmWqN77w0Q1Ot8EtJQluSf7GOadAFAbfMb41YJUViAlmbIfAK6M4PhxyauLpUKZDfQhEUVoIYHwy4q9O75KKeOBOmyxdEMHu9iAtgLaIpPc40U2dvd2R9afrCPLftHEKvGgnndOhBnlkThaDih",
                    RequestId = "7bf9874e-22ca-4764-a7b5-bacea528d75f",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
