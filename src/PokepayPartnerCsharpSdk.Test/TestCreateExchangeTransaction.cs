// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateExchangeTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateExchangeTransaction0()
        {
            try {
                Request.CreateExchangeTransaction request = new Request.CreateExchangeTransaction(
                    "6373594a-a452-436a-865f-171ecd816541",
                    "72627670-5eff-46e4-885b-40cff6e43f79",
                    "5041eb3a-7fb1-4c6a-a2e7-79937259d73a",
                    4307
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateExchangeTransaction1()
        {
            try {
                Request.CreateExchangeTransaction request = new Request.CreateExchangeTransaction(
                    "6373594a-a452-436a-865f-171ecd816541",
                    "72627670-5eff-46e4-885b-40cff6e43f79",
                    "5041eb3a-7fb1-4c6a-a2e7-79937259d73a",
                    4307
                ) {
                    RequestId = "7e70d01c-cdce-4f7b-8405-9706d19a91dc",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateExchangeTransaction2()
        {
            try {
                Request.CreateExchangeTransaction request = new Request.CreateExchangeTransaction(
                    "6373594a-a452-436a-865f-171ecd816541",
                    "72627670-5eff-46e4-885b-40cff6e43f79",
                    "5041eb3a-7fb1-4c6a-a2e7-79937259d73a",
                    4307
                ) {
                    Description = "dueD0txYLB4DLzJcJBlvBjFi0WCnj88J8ZaK1PrrbVrjYEFofQJvooJsV6q3MQ6iDi4rYQ3HiQF2KLrWZCS",
                    RequestId = "645dc153-9777-4f28-966b-f706871fb6f4",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
