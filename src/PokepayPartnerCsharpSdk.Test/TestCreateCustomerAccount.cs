// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCustomerAccount
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCustomerAccount0()
        {
            try {
                Request.CreateCustomerAccount request = new Request.CreateCustomerAccount(
                    "dc0ea13a-107d-40a3-b5c1-1dabeb46555c"
                );
                Response.AccountWithUser response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCustomerAccount1()
        {
            try {
                Request.CreateCustomerAccount request = new Request.CreateCustomerAccount(
                    "dc0ea13a-107d-40a3-b5c1-1dabeb46555c"
                ) {
                    ExternalId = "VxmHyBghlZnDdBflKlYlq",
                };
                Response.AccountWithUser response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCustomerAccount2()
        {
            try {
                Request.CreateCustomerAccount request = new Request.CreateCustomerAccount(
                    "dc0ea13a-107d-40a3-b5c1-1dabeb46555c"
                ) {
                    AccountName = "5UTqJ2bi6ZVwvd89bZp6kT7s2KmoPRcI2pZZAKAN8SpIk2awt37A3NLd178uOQ5xtJsTofxSHU68mwv6uYuaHb6ac224PjLaJmfSIISuFEEpZ8mJGDFjsEkVxN5Jo4g9NIzKth0zr8t3gryhz0GCX9EC7",
                    ExternalId = "Wco6UClVfx6G1rpgmWeeM8YUNgreSdVJIQN5oCyRRoFKJHne0B",
                };
                Response.AccountWithUser response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCustomerAccount3()
        {
            try {
                Request.CreateCustomerAccount request = new Request.CreateCustomerAccount(
                    "dc0ea13a-107d-40a3-b5c1-1dabeb46555c"
                ) {
                    UserName = "Rg2JKRD7BQA3dovBY3tIWBsI0fgDsvLsiDIbkzy1xU7oMQPQQlCuLP4",
                    AccountName = "xynVfh0vhW36F3a9Z61qBXFjrlqebg75hVNJzpVsMeyPULGkwXSNIdQdUhytxbmqY8p6fv6oJOI1JXQn8d6GNi1tbphwVDbzdK3toR0982bjuqxDMyjlLEdJG1f8x58SuDtUELoz3AIU15tXzXkiX2VxrCw3XsHZXg0LhLHIlSlCLFobYyOAafCnLZjdw169",
                    ExternalId = "0zAWPV7mfUCHuiEMRMuBru9QqHFlo8FW",
                };
                Response.AccountWithUser response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
