// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCustomerAccount
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCustomerAccount0()
        {
            try {
                Request.CreateCustomerAccount request = new Request.CreateCustomerAccount(
                    "9ea63d41-5b13-47b0-a670-866a6022989d"
                );
                Response.AccountWithUser response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCustomerAccount1()
        {
            try {
                Request.CreateCustomerAccount request = new Request.CreateCustomerAccount(
                    "9ea63d41-5b13-47b0-a670-866a6022989d"
                ) {
                    ExternalId = "P8brtod3YnAiCIkSypj1vjJ0K",
                };
                Response.AccountWithUser response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCustomerAccount2()
        {
            try {
                Request.CreateCustomerAccount request = new Request.CreateCustomerAccount(
                    "9ea63d41-5b13-47b0-a670-866a6022989d"
                ) {
                    AccountName = "aM1Fy5VoqcXXfO61KLAAfGemN8l0TLvRpH3xmXE3ArrhHwEEGbfOLKuzG2Jl4w6l1W4GblgDCw8b6zT4wcqPzys6tY38zEuu2paKTEel6f4TyPVz53GAmtaTg1dbQ90mbhRVlZX96bVjoMs9WiaW1lPQyW5DFViJE3eIa9oheZxjBXO5G8Dpfs0SnzhG6Hasusaguw",
                    ExternalId = "eQGWL0TMIblxqDPVjZvUS",
                };
                Response.AccountWithUser response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCustomerAccount3()
        {
            try {
                Request.CreateCustomerAccount request = new Request.CreateCustomerAccount(
                    "9ea63d41-5b13-47b0-a670-866a6022989d"
                ) {
                    UserName = "gIFGA6aguVLD3txMfkxPE6SOoBQlKuVG5QrNTP0vlfxUDX6Wl0oVNzn1It5oOVkl3qQmpZL",
                    AccountName = "cDQLvQzbNGgD4B6lj3el9pTxgxpjAYYkPXPNKCjT8YJve5Ihkxari1xQlLbZl9rorPOqw18nxUWPKI3Z6Z1SZNM5Ulbf7eFWQnn35P7G2tmZDkPKUpuuvMpP",
                    ExternalId = "dnPWPzk0qNZPlMi8Xnz8Lo1oaP",
                };
                Response.AccountWithUser response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
