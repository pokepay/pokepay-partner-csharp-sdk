// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListAccountExpiredBalances
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListAccountExpiredBalances0()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "fe9c645c-8ad2-4e99-82ea-cdd47e3ca2e6"
                );
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountExpiredBalances1()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "fe9c645c-8ad2-4e99-82ea-cdd47e3ca2e6"
                ) {
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountExpiredBalances2()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "fe9c645c-8ad2-4e99-82ea-cdd47e3ca2e6"
                ) {
                    ExpiresAtTo = "2016-09-23T13:25:47.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountExpiredBalances3()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "fe9c645c-8ad2-4e99-82ea-cdd47e3ca2e6"
                ) {
                    ExpiresAtFrom = "2022-02-12T01:00:45.000000+09:00",
                    ExpiresAtTo = "2018-11-27T01:58:43.000000+09:00",
                    Direction = "asc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountExpiredBalances4()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "fe9c645c-8ad2-4e99-82ea-cdd47e3ca2e6"
                ) {
                    PerPage = 1360,
                    ExpiresAtFrom = "2022-08-23T03:44:38.000000+09:00",
                    ExpiresAtTo = "2017-06-19T19:13:07.000000+09:00",
                    Direction = "asc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountExpiredBalances5()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "fe9c645c-8ad2-4e99-82ea-cdd47e3ca2e6"
                ) {
                    Page = 945,
                    PerPage = 1133,
                    ExpiresAtFrom = "2016-02-18T13:35:31.000000+09:00",
                    ExpiresAtTo = "2023-09-25T12:13:15.000000+09:00",
                    Direction = "asc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
