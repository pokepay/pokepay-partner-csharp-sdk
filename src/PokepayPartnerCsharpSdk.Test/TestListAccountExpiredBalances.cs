// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListAccountExpiredBalances
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListAccountExpiredBalances0()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "1395c3b0-3227-4847-b485-d25fcda949fd"
                );
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountExpiredBalances1()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "1395c3b0-3227-4847-b485-d25fcda949fd"
                ) {
                    Direction = "asc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountExpiredBalances2()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "1395c3b0-3227-4847-b485-d25fcda949fd"
                ) {
                    ExpiresAtTo = "2016-12-05T14:11:55.000000+09:00",
                    Direction = "asc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountExpiredBalances3()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "1395c3b0-3227-4847-b485-d25fcda949fd"
                ) {
                    ExpiresAtFrom = "2024-05-08T18:48:53.000000+09:00",
                    ExpiresAtTo = "2025-01-11T13:02:08.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountExpiredBalances4()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "1395c3b0-3227-4847-b485-d25fcda949fd"
                ) {
                    PerPage = 6193,
                    ExpiresAtFrom = "2019-01-16T17:00:54.000000+09:00",
                    ExpiresAtTo = "2022-10-20T15:33:42.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountExpiredBalances5()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "1395c3b0-3227-4847-b485-d25fcda949fd"
                ) {
                    Page = 3229,
                    PerPage = 3545,
                    ExpiresAtFrom = "2019-04-01T22:27:42.000000+09:00",
                    ExpiresAtTo = "2018-06-03T18:12:31.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
