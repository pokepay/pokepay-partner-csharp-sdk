// DO NOT EDIT: File is generated by code generator.
#nullable enable
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListAccountExpiredBalances
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListAccountExpiredBalances0()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "c3851eee-c081-4e48-9428-8ce6203ac303"
                );
                Response.PaginatedAccountBalance response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountExpiredBalances1()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "c3851eee-c081-4e48-9428-8ce6203ac303"
                ) {
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountExpiredBalances2()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "c3851eee-c081-4e48-9428-8ce6203ac303"
                ) {
                    ExpiresAtTo = "2023-10-14T15:41:08.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountExpiredBalances3()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "c3851eee-c081-4e48-9428-8ce6203ac303"
                ) {
                    ExpiresAtFrom = "2016-02-07T23:51:43.000000+09:00",
                    ExpiresAtTo = "2023-06-26T07:13:08.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountExpiredBalances4()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "c3851eee-c081-4e48-9428-8ce6203ac303"
                ) {
                    PerPage = 1280,
                    ExpiresAtFrom = "2017-09-19T20:56:50.000000+09:00",
                    ExpiresAtTo = "2021-05-01T18:07:44.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountExpiredBalances5()
        {
            try {
                Request.ListAccountExpiredBalances request = new Request.ListAccountExpiredBalances(
                    "c3851eee-c081-4e48-9428-8ce6203ac303"
                ) {
                    Page = 7954,
                    PerPage = 183,
                    ExpiresAtFrom = "2017-07-15T07:24:12.000000+09:00",
                    ExpiresAtTo = "2018-02-11T05:24:08.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
