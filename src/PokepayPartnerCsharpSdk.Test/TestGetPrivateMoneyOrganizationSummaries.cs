// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestGetPrivateMoneyOrganizationSummaries
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries0()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "25c2238f-cf81-4930-aefa-23951ca983f1"
                );
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries1()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "25c2238f-cf81-4930-aefa-23951ca983f1"
                ) {
                    Page = 3863,
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries2()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "25c2238f-cf81-4930-aefa-23951ca983f1"
                ) {
                    PerPage = 4164,
                    Page = 1671,
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries3()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "25c2238f-cf81-4930-aefa-23951ca983f1"
                ) {
                    From = "2023-02-24T15:38:45.000000Z",
                    To = "2020-06-01T22:27:12.000000Z",
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries4()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "25c2238f-cf81-4930-aefa-23951ca983f1"
                ) {
                    From = "2022-04-29T04:44:50.000000Z",
                    To = "2023-02-28T01:22:24.000000Z",
                    Page = 2940,
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries5()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "25c2238f-cf81-4930-aefa-23951ca983f1"
                ) {
                    From = "2020-06-22T06:48:08.000000Z",
                    To = "2023-10-27T22:37:01.000000Z",
                    PerPage = 1815,
                    Page = 1792,
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
