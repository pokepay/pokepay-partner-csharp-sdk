// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestGetPrivateMoneyOrganizationSummaries
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries0()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "168c7a5a-3c81-48fb-971e-43fb064270ba"
                );
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries1()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "168c7a5a-3c81-48fb-971e-43fb064270ba"
                ) {
                    Page = 3593,
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries2()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "168c7a5a-3c81-48fb-971e-43fb064270ba"
                ) {
                    PerPage = 4592,
                    Page = 4345,
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries3()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "168c7a5a-3c81-48fb-971e-43fb064270ba"
                ) {
                    From = "2017-11-20T11:19:01.000000+09:00",
                    To = "2019-01-30T16:04:04.000000+09:00",
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries4()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "168c7a5a-3c81-48fb-971e-43fb064270ba"
                ) {
                    From = "2019-11-28T22:06:10.000000+09:00",
                    To = "2019-05-26T17:15:29.000000+09:00",
                    Page = 4414,
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries5()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "168c7a5a-3c81-48fb-971e-43fb064270ba"
                ) {
                    From = "2023-06-10T02:42:06.000000+09:00",
                    To = "2022-07-28T22:31:31.000000+09:00",
                    PerPage = 1356,
                    Page = 2895,
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
