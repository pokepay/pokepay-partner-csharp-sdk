// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestGetPrivateMoneyOrganizationSummaries
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries0()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "5cc3d9e0-b990-4b5f-b4c2-00ef99c743a2"
                );
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries1()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "5cc3d9e0-b990-4b5f-b4c2-00ef99c743a2"
                ) {
                    Page = 3575,
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries2()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "5cc3d9e0-b990-4b5f-b4c2-00ef99c743a2"
                ) {
                    PerPage = 786,
                    Page = 9388,
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries3()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "5cc3d9e0-b990-4b5f-b4c2-00ef99c743a2"
                ) {
                    From = "2021-07-08T02:56:08.000000Z",
                    To = "2023-06-06T23:02:57.000000Z",
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries4()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "5cc3d9e0-b990-4b5f-b4c2-00ef99c743a2"
                ) {
                    From = "2023-06-27T10:38:34.000000Z",
                    To = "2022-11-02T13:31:55.000000Z",
                    Page = 2674,
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries5()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "5cc3d9e0-b990-4b5f-b4c2-00ef99c743a2"
                ) {
                    From = "2025-05-13T01:22:33.000000Z",
                    To = "2022-12-20T19:43:54.000000Z",
                    PerPage = 3692,
                    Page = 7864,
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
