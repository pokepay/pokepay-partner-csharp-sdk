// DO NOT EDIT: File is generated by code generator.
#nullable enable
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestGetPrivateMoneyOrganizationSummaries
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries0()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "6b7a04ad-85a9-4b1b-9a80-e539aca2378a"
                );
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries1()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "6b7a04ad-85a9-4b1b-9a80-e539aca2378a"
                ) {
                    Page = 9105
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries2()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "6b7a04ad-85a9-4b1b-9a80-e539aca2378a"
                ) {
                    PerPage = 641,
                    Page = 6468
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries3()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "6b7a04ad-85a9-4b1b-9a80-e539aca2378a"
                ) {
                    From = "2022-07-06T14:09:18.000000+09:00",
                    To = "2021-11-09T22:37:26.000000+09:00"
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries4()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "6b7a04ad-85a9-4b1b-9a80-e539aca2378a"
                ) {
                    From = "2021-09-29T21:17:45.000000+09:00",
                    To = "2021-05-23T00:51:32.000000+09:00",
                    Page = 6239
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetPrivateMoneyOrganizationSummaries5()
        {
            try {
                Request.GetPrivateMoneyOrganizationSummaries request = new Request.GetPrivateMoneyOrganizationSummaries(
                    "6b7a04ad-85a9-4b1b-9a80-e539aca2378a"
                ) {
                    From = "2020-04-04T08:32:16.000000+09:00",
                    To = "2017-02-04T15:50:33.000000+09:00",
                    PerPage = 1712,
                    Page = 9748
                };
                Response.PaginatedPrivateMoneyOrganizationSummaries response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
