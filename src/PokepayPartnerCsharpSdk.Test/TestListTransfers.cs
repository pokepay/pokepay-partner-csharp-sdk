// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransfers
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransfers0()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers();
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers1()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    Description = "Y0O7hAmZ8lZf1X3iI0Rt8TKWS5LgYNN88qePtwU0CUm9cSeeycXyRLv6j0yXEmz9d4Z8H5faLiDcBKr7jV2QnswdqVW7MmYDn2Cd1Cf1ivgDwauGnuMMGcirrdWDzAN5KI2usB1LYu2wHgDKY4Fn2",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers2()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    TransferTypes = new string[]{"expire", "exchange", "topup"},
                    Description = "jnaqOVkKmNKDadNDVQWhGVYLQjez7B5UI6cLBwx48Ht8UB8scttAagOgl8LUIpKFL4TyH9v6YBOA0Jm0oRxaORKrHp0u5McyOYYwMB",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers3()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    TransactionTypes = new string[]{"cashback", "exchange", "payment", "transfer", "topup"},
                    TransferTypes = new string[]{"payment", "expire"},
                    Description = "unFc8kTceU01oihU1ukAZ9S60yBWpCYCB0RurGufnbwsw9sh4xOBr2LjutXEVYFKRuBLNrDpJiTx5QkbFtCf63icFKZAdizpwcO3vKn9nkdLcDQnjXc9O5bW1hSelq4rLXE5GhXndnhvOqXJQViKzOoEnv",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers4()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    IsModified = true,
                    TransactionTypes = new string[]{"topup", "expire", "cashback"},
                    TransferTypes = new string[]{"coupon", "transfer", "cashback", "campaign", "exchange"},
                    Description = "NMAMOg8wACbnxMajQSWwTzMkuUxSlXy583o9Tt2i9AnCNLrbEXEtPKMB95dzInwoZdJfoiON2zwLITAlvvzXDFvRt9nhhBTYnHa2Em4bxIOuKzWQ4vowh7ro1VRcdunSGfYIV5F53WgH3pMYPvozgPaOV3z0KESOU75pq4CIH6AcRQxD2",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers5()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    PrivateMoneyId = "fc5b46be-38cb-453b-bacf-62a47ea38b82",
                    IsModified = false,
                    TransactionTypes = new string[]{"transfer", "payment"},
                    TransferTypes = new string[]{"transfer", "payment", "exchange", "topup", "cashback", "campaign", "coupon", "expire"},
                    Description = "nUlBfeRJN86XZ8MMKAElkts501BCpDT0IK8cHrkuabtBJ6PGSUCpJ8qXIGrWXTyyeQyignPlTi",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers6()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    TransactionId = "a7cd37a6-cb6a-4cd9-b5fc-9316a2d50eda",
                    PrivateMoneyId = "7f0c0ac8-a670-46e7-9eef-15944c05e08d",
                    IsModified = true,
                    TransactionTypes = new string[]{"expire", "exchange", "topup", "cashback", "transfer", "payment"},
                    TransferTypes = new string[]{"expire", "transfer", "coupon", "topup", "payment"},
                    Description = "XOd05sYz53M4YTLgWkcDUnUOS6W0QiQG67QDvkHKJGG064A8gYbU6HYrcXpumSS5VBXMSgZovhsgS2MRDbqdmmOpdt",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers7()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    CustomerName = "XK9qXcNj",
                    TransactionId = "e9b9896f-ec79-4463-8cf0-1be0818346ca",
                    PrivateMoneyId = "a3da54b7-05e3-4694-b9e0-a3ff5dc8f3af",
                    IsModified = true,
                    TransactionTypes = new string[]{"payment", "cashback", "topup"},
                    TransferTypes = new string[]{"cashback", "campaign", "payment"},
                    Description = "Nv0l24HP5uiWdutXAWqB9yeEoNPHRmBGItMbDjsoG5M",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers8()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    CustomerId = "343af555-5485-4b7e-8c09-ad98642c8dc5",
                    CustomerName = "M4fW9pxRZtdcu8XJQHkfakB0aC8kVfsjQRo3zpM3nx8uYkQz55S57w68P78yTcyXZpywpY08TYknZAIKuyTFy5xFikgJicMZMycXXcEIda3dBVypgOsYn2WQnwJHXQxXzc4A8wh7gAFITzOAAOQJg9Oh2auryJ2",
                    TransactionId = "1fdb3c50-c233-4594-b4a4-e6bac9b78461",
                    PrivateMoneyId = "9de0385b-9830-4008-b603-a3562e60aa19",
                    IsModified = false,
                    TransactionTypes = new string[]{"topup", "transfer", "payment", "cashback", "exchange", "expire"},
                    TransferTypes = new string[]{"payment", "coupon", "topup", "campaign"},
                    Description = "lDTch40KKKiKcUgCcD7fX9bf4L",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers9()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    ShopName = "Cyf0eVYP4aqdWYvOrZh0NTnjUJCf",
                    CustomerId = "01e0703e-3f19-4c74-85da-5e6a0e3d76a0",
                    CustomerName = "Vs2d5vRgcGbKeZlZqB2psUdL",
                    TransactionId = "63159a95-4edb-406d-8601-1bfcd07434a0",
                    PrivateMoneyId = "b6e6b7db-80aa-499c-acab-2ae8079bbe12",
                    IsModified = false,
                    TransactionTypes = new string[]{"cashback", "payment", "exchange", "expire", "transfer", "topup"},
                    TransferTypes = new string[]{"campaign", "transfer", "exchange", "coupon"},
                    Description = "PNDmzj290wJZkzSMfmtvFUfDQxuBXN034Zdo",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers10()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    ShopId = "8d7e5e9b-1023-45cc-bbe4-6bbf3b242487",
                    ShopName = "4i80zZ33xQziiqa3EuSkQAUcwvDgT4VE1LicnwFGMcMyXtfVnAGd5C0",
                    CustomerId = "395cba2f-4edf-41db-b2d2-23f452aa4d93",
                    CustomerName = "2gHljaDtbS4yxYgEhmVh6zYo3fbXHgMfqJ0cHvGZQlz4M6rl1f7UuygJ41S0I6STgnvSdLhSR97TXnFdVK4sfcLhCaqXczcdSt",
                    TransactionId = "e2e81bdb-dd11-4461-a7e7-3b8e9ebcaeb1",
                    PrivateMoneyId = "13bf6a8a-aef6-4c47-88b4-146644ef7a01",
                    IsModified = true,
                    TransactionTypes = new string[]{"transfer", "expire", "cashback", "exchange"},
                    TransferTypes = new string[]{"exchange", "expire", "campaign", "cashback"},
                    Description = "kxclpPtoC7n8GmpifcECcbW0mlgUX28FFq2j9lS8PpiuVFdUMowgIab78cSG99s9Vp",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers11()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    PerPage = 9789,
                    ShopId = "4fa01e17-dd83-48de-86a4-d8106048b145",
                    ShopName = "Q76OqR8Q7tVmvUSDE8mmrs55OMJeCHwasrMHKJT3uPhUS0cVlVaPnE3abZXqCvAKmgWjgX9Ti4WyWcqHB24vmDTPYLXv1frw5wyVC5qvr6o4FCT5j8rsjY9cpv34s2hTCU0SneIvVSZBVxygSowk3kXVOQTBeh2r4sBu7kVFQMdc4NDeFNhEdkkj41P3GGDEQwvqCnVv8CKTGrsu8gxXwZPxWmz1tdEF59T",
                    CustomerId = "61945506-4a97-4a3b-accc-1b13f22e3c39",
                    CustomerName = "gEDK6ugnLWbg2Tb6fGTjM9R1OyQgYICs6ngcxphPe9ueURNiFDfV0lv3VIztjUGxzOanFtlgDVs2J9gua21r3lDUrK9nuMkug7Gp37bh8ChsBYqLB",
                    TransactionId = "3e790ded-57e7-475e-ab85-1909a386f097",
                    PrivateMoneyId = "92f71c94-571e-482d-99b8-1c4b65bc7385",
                    IsModified = false,
                    TransactionTypes = new string[]{"cashback", "payment", "exchange", "transfer"},
                    TransferTypes = new string[]{"exchange", "payment"},
                    Description = "5l9zVSVcd",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers12()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    Page = 995,
                    PerPage = 7531,
                    ShopId = "7b9c522d-928b-4864-8ca4-1ea4f6ce64f3",
                    ShopName = "UEHzopaLDNVuH70bYD4ksD1DDjxxxwCywIqGoumS0ONfS4gXhCpQJ9pkUVe2QL678KP2GbOeMEECRq2Mt87ixZ1uPbXYMM84XWa1SLb19JqJX2miM2yGBXhjmZ3y7yE2p3bryaEEiC96QkBWHsDT68ayVc2jvZYfbvlOzcyvD8rSkMdIB5dH4Og3s3MUdhivDOr4CXK5mknUhFpbNzpLZ9mnF3ABrv7HGktQSRwDoLwivCyCuwGDi",
                    CustomerId = "fb3dc4e0-afaf-48ff-8818-48f90b331fc4",
                    CustomerName = "uGWbB1lIozgMQnP3JHUv1ejFluL624IRfH48Sn30ha3y4VCHYzkvl888Tayn7o3POQyGZVBOObErnR1NpQUycxcVerfjdpHXXnAOphnO1GW5OjJL0dllmY9GFDfuAxggvckSOPDJw9CkmDWrk882jFoUIZcdpzA5eskflsrA6l10jMeftsLbN7YLTMabSSD",
                    TransactionId = "bffb60ad-7c0d-46e4-8828-1ef2ffd53a68",
                    PrivateMoneyId = "34fdd221-3d65-493c-9072-852ae2af836b",
                    IsModified = true,
                    TransactionTypes = new string[]{"payment", "topup", "cashback", "transfer"},
                    TransferTypes = new string[]{"cashback"},
                    Description = "ecL3598cz3R9qtyLcDUf6thGauifMlthJvyzlrJClJZHI2ZFoWoc8Hg8t4lvnTydZcxzfWstSt1P5gswUpAKjsXpfq3zqqDqBFIMDVbC62OPC4yHrG0sZGkpv",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers13()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    To = "2021-10-06T17:17:03.000000+09:00",
                    Page = 9783,
                    PerPage = 820,
                    ShopId = "6518f4cd-26e5-4753-abd3-b4c36a533a61",
                    ShopName = "rkcrpGghUDptzENrfik4kY0Lrvf0bmrDFD76iPWqjzxuIVhgl6K3RXb3szbmCgJ7kICaxFUsR0DRVHXSjtDal0WEBFZVu1aWIWBKVQuhlr0qcWK68AamazLL0MKydWa0WHlU2ySu8lRsPaBFzaZq",
                    CustomerId = "75155676-d65d-411c-aa99-390ae469c4dc",
                    CustomerName = "k6DdqUev2vwU4J89rdBqg8WQrCezBQ1G77NBE0IFSHERUllKJRzrfQE2ZNbKvKEYVn0lBf82ZUsKBLwlggXLxmvJtQLzTTP9g8at3C2lIKzwS7ouqPAKwt4rkheIEjAIKwwt2nHnnBEue3sD1De8GaomEpTvBLLZ1peSSIhyaR5RlsGFsjiq5Q6Ebw0TgUn52GNG9nwPRIFVgb2Kk1VyEFEJvolHAFAaDrX",
                    TransactionId = "abfc0da2-c5d7-460a-bcdc-ebac8816aaa1",
                    PrivateMoneyId = "43577cea-78b1-484b-be61-e713f63fcd34",
                    IsModified = false,
                    TransactionTypes = new string[]{"exchange", "topup", "expire"},
                    TransferTypes = new string[]{"coupon", "exchange", "expire", "transfer", "topup", "campaign"},
                    Description = "MbyFILhZpy4ioo7KLsygYohsd0lMISSpPEUaO7tcvvcLnuDyesow7KZgSaJJ6dNsjHqwa8gkFFAgKCJbvBjKjnbWKYZndiovHor1msSgSh8cbgL645UNNAIz9PnJZn6j98J3MkHtm3lwHng3miZjbSibmQrfP9TG5iyIu8QtnxZ2NJ8eQE",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers14()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    From = "2023-06-17T23:21:11.000000+09:00",
                    To = "2020-01-03T02:00:14.000000+09:00",
                    Page = 7797,
                    PerPage = 1721,
                    ShopId = "bb20d170-d78c-4331-a3e0-dca2a680467d",
                    ShopName = "1ZpgQuuEzGEs6KdCTmQ8liPPLyv3XPnvN3QO12g9dC",
                    CustomerId = "19db03b6-fc78-4025-bf4d-652c186cd2d6",
                    CustomerName = "MoR2U6GijT7SraQUDZb3Wp3vob10SJfdrcYe6Ljj4M02jREgr7rviyMYRFppm5jNMVoNSWJrhQnVXkYVD9JABy9seCfVgh7yhUKeosXpQK3qEtpBn6JLvirBQUEZ8l1smHE9IUroXuMLlbogcuPi6K",
                    TransactionId = "2fc5fee2-1e22-4524-8d81-16fc95c2529a",
                    PrivateMoneyId = "a7e0d8ea-708e-4435-a757-4c286732ac6b",
                    IsModified = false,
                    TransactionTypes = new string[]{"cashback", "transfer", "payment", "expire", "topup", "exchange"},
                    TransferTypes = new string[]{"expire", "campaign", "transfer", "exchange", "payment", "topup", "cashback", "coupon"},
                    Description = "IdhdaZVMrSOniQactTzg7d3Tq2mFPrJ2X2MXO2Uh5uJoSfGmlZap",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
