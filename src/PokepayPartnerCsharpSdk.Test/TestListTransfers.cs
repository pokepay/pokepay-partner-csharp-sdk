// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransfers
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransfers0()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers();
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers1()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    Description = "MjiTbw5qIaEWDgv4wc5zwrtn7Ie6RgrwNJC45HvX85vtWOOUXmr46cVz1e8RZZjg8jsmDnAhSbRM8UfK93x1Af",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers2()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    TransferTypes = new string[]{"topup", "cashback", "exchange", "transfer", "campaign", "payment", "coupon", "expire"},
                    Description = "8sFK1Ad0L9Q779OTnbbCekVYUC5I5fsbNpoe8ZCvXNmhfVM218e",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers3()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    TransactionTypes = new string[]{"payment"},
                    TransferTypes = new string[]{"payment", "exchange", "expire", "campaign"},
                    Description = "BFvN2TzJv1CRYhyYgvlMLVxXwFExaZ4xKW4dBsuT1e42mlcUVfNYF6hkYHjX7OakS3fFIxZBfzc5HOucSEilNXjQFX3wKmnpLb83HOepJdfn6OM1nT8gTcey70jFNOnl",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers4()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    IsModified = false,
                    TransactionTypes = new string[]{"exchange", "expire", "cashback"},
                    TransferTypes = new string[]{"campaign", "exchange", "cashback", "expire", "payment", "transfer"},
                    Description = "xlQ3wJwISaSGZKKYrqMU1bsm1WHjvTkX44fjH7TEzTDMmI7lE532raFlOqHJKTXGGDrMtxOO7mIDhT58ysPc7KSzxho2LaJQnSZPCdLERhQtXLJK0wys0jUgfy9z4leACCcwQNZE2zqsKhmSz4kijVCZU3lKGhLtQREzYwJu81cCp",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers5()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    PrivateMoneyId = "0f287210-4467-44b3-9224-4b0c18c6fe81",
                    IsModified = false,
                    TransactionTypes = new string[]{"transfer"},
                    TransferTypes = new string[]{"transfer", "expire", "topup", "cashback", "exchange"},
                    Description = "nSxqF9cGWJBbouI6ACMPo4HWZ3S4bpsOBlCCJFoEPWjF1v5MqD8CxgF5lk6Iz6y7y75WY7LofuNn",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers6()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    TransactionId = "09b71e2f-28d5-484e-9427-992a5b116cc3",
                    PrivateMoneyId = "6607519a-dda8-4f69-9dc8-96587ff072ce",
                    IsModified = false,
                    TransactionTypes = new string[]{"exchange", "payment"},
                    TransferTypes = new string[]{"exchange", "expire", "coupon", "cashback", "topup", "transfer"},
                    Description = "O7o0QjucKGAWC1dW4DKTVILqYrqh0tnedzULV2YvQ2toO18VWjzD04Xs9s9Im92GxZPPNilhGXk1yP5EAgrZoG1NJZg9fN15OkpyJPIjYSUmhv3irKPKkYvpOzr1BqmARGqHnpBCMUITkwWbuoBEs77XsvtZ8UVjP9MxqrS6z73vGySVVHsuWuO2",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers7()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    CustomerName = "Jd2FMvjefBphco6IYxIZZ3qYI5B",
                    TransactionId = "8b3e9995-398b-4712-9ed2-3210ebf366ee",
                    PrivateMoneyId = "69e70b5b-157d-489a-9110-01d9a871b5dc",
                    IsModified = false,
                    TransactionTypes = new string[]{},
                    TransferTypes = new string[]{"topup", "exchange", "expire", "transfer"},
                    Description = "7zMnG9ixD",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers8()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    CustomerId = "cc1a06e0-7866-4203-af0e-af87c7a86050",
                    CustomerName = "zO9xkNT87sFYN8gJVFJL9KwakQPZkAGahbOwIwcA5czZ66qvCZZPgX0sMRkYVpDRHGqodWD5OUuYOYnYkD7gzsil3glcEgVGtS7mIrzk3xvclVUnTKptRaAnhP1MBrmVOchcCeWLTLlYhg76WBIUlAUq2mhLoeJupXBhWxYGB5uMF3otBF1qZ7YIFkea7CpHQZF6OTsgGXO1bx9jaboIiwVqpbRKVS2HCm3ImphZMySPkUjwQ5dA",
                    TransactionId = "59fd28dd-207e-4b33-a3f8-9490ec0d8fcc",
                    PrivateMoneyId = "871be145-e90c-4630-b53e-81b2038746ff",
                    IsModified = true,
                    TransactionTypes = new string[]{"expire", "cashback", "topup", "payment", "exchange"},
                    TransferTypes = new string[]{"exchange", "payment", "topup"},
                    Description = "j7YJFkBm",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers9()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    ShopName = "60Cfy12uPpjTmsaGIqcMwYzUXtZxVYpLVhT041UL66HKPvkLaXmUHNUzBNRFlF",
                    CustomerId = "c3b25bfb-387d-44ab-87c6-37136aa0e67c",
                    CustomerName = "Gs7sUzJWAFBocxGQdC9LTcq7Vs277bN9KQf8zBnxanZynms5nFheareSJ5lGBUiBEdvrSGrWdN3hou1GhIyAm8JsYralYfI1O0IbVZX7GwPZyKVYZdZIE2C",
                    TransactionId = "69569a22-80dd-4aa5-b488-a2ef3053cf94",
                    PrivateMoneyId = "6017f5f5-0c41-4dc8-bb88-5d2258559b94",
                    IsModified = false,
                    TransactionTypes = new string[]{"expire", "payment", "exchange", "transfer", "topup", "cashback"},
                    TransferTypes = new string[]{"exchange", "payment", "cashback", "transfer", "campaign"},
                    Description = "yGdB5hyNsRxGEhQZArjjbBvW0eTDuDwA1DQU4aWFM1",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers10()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    ShopId = "9d5e3e64-cce7-4a9e-8075-446c47b062d4",
                    ShopName = "lBg42YmECP18333vgeMq97U4OOfJvB8E7X41ci6MLdzWvOy1YzP1WuEh6FMfcNeCp9nXxdiNzzZnRwU5zkbobaqTvWJSDd3sor9PtLqrF1rMlLjg8LzqOa25I11qoetf1HKUUjLoNtV8DjJJE",
                    CustomerId = "1e78bed1-8a8a-4df7-9fc9-adffaa3cff88",
                    CustomerName = "ClTysMfMrwGZ0QCwQOeu3jsVi8eytx8RTqvmP8wh59Dg0bE5YWheP6a3kzxKKtVCEcf3fHpjYEnmvobDUeWdE4mdljxHuAMNuiW7LRVNjubabqHDUlTr0PK67dgbN2X2Ddx2tk37Y7liXXBzxLNZeoEHRL5dVOCs56YaGmraaY",
                    TransactionId = "cac1c434-9b82-46c6-8464-05e6c5ad33e1",
                    PrivateMoneyId = "cc29e120-e12f-4ce6-8b73-6826ed24d46a",
                    IsModified = false,
                    TransactionTypes = new string[]{"payment", "cashback", "topup"},
                    TransferTypes = new string[]{"exchange", "coupon"},
                    Description = "Hw6nUSNYATzOsVapXItBncuaAcAERkunkbu7PRbVKuu",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers11()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    PerPage = 4207,
                    ShopId = "a07a2f87-d4af-4389-9233-d42fe31414fd",
                    ShopName = "8h3KtaeJDrj3FnmL",
                    CustomerId = "a12a3662-c76c-48c2-a863-180d1f108a69",
                    CustomerName = "u2415TfLvnwc7eAh7ZuXV3uKQTqMetNcXsSxnj1PPKl7llHw",
                    TransactionId = "68cbddd5-ee69-4fd4-8281-1d13ccb8e812",
                    PrivateMoneyId = "b561e593-c981-40fa-b921-fa9ee2c5417c",
                    IsModified = false,
                    TransactionTypes = new string[]{"expire", "exchange", "topup"},
                    TransferTypes = new string[]{"cashback", "payment", "exchange"},
                    Description = "YE0HUgqwmYMIXh01wgvQslTLtQjOUfrDv0ah0zxYrJ6gZ4Vd0FLITC8vNaA",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers12()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    Page = 4479,
                    PerPage = 2634,
                    ShopId = "3192a535-9862-485b-b488-0e29096feaf9",
                    ShopName = "BKaa1tZGtSvcRElJChc6GAwkTf1hSXAZWuafxCczhFxWh6WqV5jg1GsUXLsIIbvMX",
                    CustomerId = "b09260a0-1d50-4fdc-8637-21dcc58930c5",
                    CustomerName = "09zN6mJvFojCS2Vx60IG4C8WcaGxbzmz9EsgdMmhURxbK00Xc0rFa8KRghhKo6M71MvArbdbZk19e7VJ1pqHZLuiRw89OMcwytVp5KaclSrQoDB0ZurESeKqnbbq4ByOhGy2P3I7hSvujFLbqhcS7uwBjkfOM2fiOvqWyL91oO4b4cAOEf6hELlo2HKzmn33UYAIJwn7FquAt4y6wYwRptM70N6O0CG1UGyw98jJ",
                    TransactionId = "4a5cd54a-4a3d-4702-a13e-c210e9f49555",
                    PrivateMoneyId = "7442fc6f-50b0-42e5-982b-a68cbd88b0df",
                    IsModified = true,
                    TransactionTypes = new string[]{"expire", "cashback", "payment", "topup"},
                    TransferTypes = new string[]{},
                    Description = "rPCH8utZzY5cxniSTbd2YOt5DCsCJuQ1VKhjOQ9j1dTVCVZnutYFtpHqrmNAwpbH7xg84zD24z9B5iMtP5Mdx9TiUFZRBB4H2WMN3dx0RhAW1A41KlXFGNo84lZhcfkT4Gnqoif59oAPAVik75eL3qzL0X4Qy6v4tJ0wEBlu5jExEXLFEIGufmo2P1mmgANaqKffRN",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers13()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    To = "2016-12-08T13:41:36.000000+09:00",
                    Page = 3117,
                    PerPage = 90,
                    ShopId = "f00cc70c-87f1-465f-8ff8-cf55724919a8",
                    ShopName = "D5kBG8tcjEOFHyegu31rbt9IT9QjWw9k2hpBShUmBMJdda7Mo4kdcQNoYGA0xDYkojodofsuDvehpINVGxEXMLckN5j9AbaoQxKASdp8rj7cFpi5uistUVz2NUntW2",
                    CustomerId = "52365b4c-4e21-463c-9973-295b8ce6cba8",
                    CustomerName = "0EAfEPJDhVRyJ1TQGNFXI3IiLxup60EdVrLgx5Cs6ml5ZQJpTgQd4d16qlZOTAONJERRiI8pd0F1IUcIVsbQccEJp54FnagZ1PjQWdNjDWhRcZi78nNacKq4TllQhLVflaX4eUFJlJjKo2T8PNQO7WuL519ok9IFeOK9JqXwVUc8DwymZQ5tJhEfBOc3a3e7L5Ri",
                    TransactionId = "b16b68bb-369f-4161-b1d1-23293d15068f",
                    PrivateMoneyId = "8f8facd1-5e06-411f-a459-467540db41cc",
                    IsModified = true,
                    TransactionTypes = new string[]{"expire", "payment", "cashback", "exchange", "transfer"},
                    TransferTypes = new string[]{"exchange", "coupon"},
                    Description = "sl6zC9MPZ7mAlHPdtXu4NtMlEcElx4EqnyfcBGYAeZGfeegnF0Y028OhO8miam2AhtUw5xutI",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfers14()
        {
            try {
                Request.ListTransfers request = new Request.ListTransfers() {
                    From = "2016-03-16T19:01:38.000000+09:00",
                    To = "2021-09-09T23:26:27.000000+09:00",
                    Page = 4156,
                    PerPage = 4266,
                    ShopId = "7b7b05f3-bfd4-4f71-b770-fbba672be133",
                    ShopName = "pjG5Ao14zahwUoSoTZUzF8ZLz83FFy3scY22Y5GLnW0jXWdSdqajsTvLIHnn77SWBes4AUVFodBDXWwML9PILa9tZE5W7disljJtN5WIIVVcKLaUbuHR12BJ3tlQ9AzChVSKOmCTWvnWVaOiAo8FIf6SRLPhfUQQwuultSjkUMrxzOcBxWb21QZug05F2Njqg6nh3EPOzwuvEw4ji7WXenUK",
                    CustomerId = "f7d06740-ff84-418b-8d93-23c591dab29a",
                    CustomerName = "9jbv9YWN1j5GW3d0fQK204iMLEWI3OQAAVjHT",
                    TransactionId = "2ebfd32f-db8a-4a4c-8813-71d7d0eb102c",
                    PrivateMoneyId = "db76b035-9e94-4156-8c70-2b32cf4a68bf",
                    IsModified = false,
                    TransactionTypes = new string[]{"transfer", "topup", "expire"},
                    TransferTypes = new string[]{"exchange", "coupon"},
                    Description = "jLAetpYoEuUMsDj09qCHMPCk7FH91acfxmXWmYZ9wnGOd",
                };
                Response.PaginatedTransfers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
