// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateShopV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateShopV20()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "rIQgwx8oosJLK5Rq67VXMpZGMSz7kvOMHYRjzAZw05Ty0nenwzHOaIVwMTjPFMGevwVMeZt8EqIvyxvlj5KalqxA7HuqvdSNveWzWI5L6stQvZvR"
                );
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV21()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "rIQgwx8oosJLK5Rq67VXMpZGMSz7kvOMHYRjzAZw05Ty0nenwzHOaIVwMTjPFMGevwVMeZt8EqIvyxvlj5KalqxA7HuqvdSNveWzWI5L6stQvZvR"
                ) {
                    CanTopupPrivateMoneyIds = new string[]{"f262b24a-eccc-47ec-ae90-0b8764f2cc08", "3c5f8333-3a89-4743-add6-2dfea6aa3ced"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV22()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "rIQgwx8oosJLK5Rq67VXMpZGMSz7kvOMHYRjzAZw05Ty0nenwzHOaIVwMTjPFMGevwVMeZt8EqIvyxvlj5KalqxA7HuqvdSNveWzWI5L6stQvZvR"
                ) {
                    PrivateMoneyIds = new string[]{"c07e791a-ed9d-4b8c-ba2c-25b2e5c299e2"},
                    CanTopupPrivateMoneyIds = new string[]{"48f8b063-dac8-4027-ad32-9e13a8e9ff9d", "a7d2d517-0a78-48d6-8248-f27ccfcf66d4", "ce8435e2-6980-4ee9-9ecf-7ac89747eba7", "040818a2-ca12-4c59-8d14-c35cfb9a6262"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV23()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "rIQgwx8oosJLK5Rq67VXMpZGMSz7kvOMHYRjzAZw05Ty0nenwzHOaIVwMTjPFMGevwVMeZt8EqIvyxvlj5KalqxA7HuqvdSNveWzWI5L6stQvZvR"
                ) {
                    OrganizationCode = "DNw10---4I2pkH9-qesj5GI3Cn-O44h",
                    PrivateMoneyIds = new string[]{"76c8a505-8cae-45fc-ab98-3cff297e204d", "9fa9bf6e-8cd1-4a67-87fe-748794bec38a", "68e9eee6-e923-4b80-84c5-b0ec34a738aa", "69b41feb-c2d3-4c63-b4b5-85ab2524b040", "70ff18b6-06f4-4342-b340-a0d1ddca0c76", "c9972c9b-1e40-40d9-aa11-9ef99ada8138", "726c386d-86fb-4f55-92aa-c900b238a3e7", "85387fc4-5679-4c95-982e-f88edbd9fc51", "96307f3a-62a3-4314-9907-e9cffa824d8e", "410d95aa-ce18-4f01-9373-ddae58e2a968"},
                    CanTopupPrivateMoneyIds = new string[]{"ffe5c119-a6f0-4bbd-87cd-3a43a5991e6b", "e7b36fe5-cdb1-48b0-bc9b-4fe647f7b7c1", "24258720-61f0-460b-9523-df996eb7d1a0", "4825f44b-468b-49a9-aaad-bc2239143f14", "33e6eac2-20a5-4dc8-bc6e-582c4257fdc1", "53068fed-b364-446c-8b7f-499172302a69", "c11e435c-358b-41d5-9d6a-ac820e483308", "459707b9-7cca-4371-a9fb-1f1614f4f9fc"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV24()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "rIQgwx8oosJLK5Rq67VXMpZGMSz7kvOMHYRjzAZw05Ty0nenwzHOaIVwMTjPFMGevwVMeZt8EqIvyxvlj5KalqxA7HuqvdSNveWzWI5L6stQvZvR"
                ) {
                    ExternalId = "anI",
                    OrganizationCode = "02na---BtXh-gQ----cb",
                    PrivateMoneyIds = new string[]{"6608ae1e-43fb-40ba-8108-d1efdbb8fbfe", "6ee8ecf3-d0f8-4963-9594-e9dff17a2eb6", "3ca01b7b-a9d7-4f31-9e3d-6f761f295128", "a3889abb-4bc6-489b-a24d-854bbc16bd27", "99ef0b4e-db39-4ca8-8035-a3aa9afa5497", "df32ea32-e4bf-4f56-af55-6a6424bf17d1", "d2de9c33-f25f-4e7c-be06-043c38df0a8b", "da44ad74-38b6-4b08-b33f-a20975566c9c"},
                    CanTopupPrivateMoneyIds = new string[]{"54220f70-fb7f-4b79-b3e7-d55e4b891b07", "9be76b1c-eaa0-4232-98a2-4b301af29e24", "edb863a1-ea3e-437d-be28-921afe0124e6", "18357c09-dc87-404e-a80d-186859bca0d0", "61fbb49c-cf68-413d-a546-a24b2c6462b8", "59754bed-56d5-4cf7-b1de-56bb5ebb88aa", "b9884ddc-c534-41f3-a7e6-d3a14cbd45bd"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV25()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "rIQgwx8oosJLK5Rq67VXMpZGMSz7kvOMHYRjzAZw05Ty0nenwzHOaIVwMTjPFMGevwVMeZt8EqIvyxvlj5KalqxA7HuqvdSNveWzWI5L6stQvZvR"
                ) {
                    Email = "xVOVqIgogo@brlT.com",
                    ExternalId = "BvrKruisPGcjRxKz0hnHtPEmOFzy",
                    OrganizationCode = "6--U",
                    PrivateMoneyIds = new string[]{"273a1055-52f9-41ab-898a-fb92aeaec7be", "825cb285-ed59-4d79-9c99-71d588823b92", "1d74d32d-4013-4412-adf7-98f73b77d640", "e23a95f9-6b53-4913-98b9-68c288d4ec35", "4503ea0d-0868-437d-bb40-cc2a049a38f4", "05dc09e7-f84e-4a26-89c4-9170d50f833d", "1dd249d5-f62a-4480-b08a-72fa0b4a49cb", "c90b550e-5da9-4f09-b9ea-fd3b12029433", "e9424542-bdc5-4c3f-b659-9ffe03d4033e"},
                    CanTopupPrivateMoneyIds = new string[]{},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV26()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "rIQgwx8oosJLK5Rq67VXMpZGMSz7kvOMHYRjzAZw05Ty0nenwzHOaIVwMTjPFMGevwVMeZt8EqIvyxvlj5KalqxA7HuqvdSNveWzWI5L6stQvZvR"
                ) {
                    Tel = "0742390910",
                    Email = "9vMfjs9RSV@IuRL.com",
                    ExternalId = "amUgod9vJRM",
                    OrganizationCode = "0P-En--Zn-CZ--ga-2-0-GW",
                    PrivateMoneyIds = new string[]{"98660730-7e5f-47a4-96d5-be2eac867b2f", "879529cd-6635-4077-869b-8c85531ee314", "da86bba6-4401-411e-9ae7-2001bba2d575", "fa9ad6e5-069a-4324-8a0d-25b6daf0f915", "e5440eb7-56e5-4515-83a8-e3a66b346db0"},
                    CanTopupPrivateMoneyIds = new string[]{"0b79398a-736c-42f2-85ac-e3fb7e5a415d", "36716a4f-bbaa-443e-b88a-e345aad3351b", "9762407c-71a9-471b-89b3-2a4cff19c8b7", "ecc0c5e7-5bd7-46b6-b0d6-4aad8e7a594f", "9f064d0d-1c78-41ae-875a-ed340a127980", "92260b6a-52d2-45c6-82ce-ee61099aa936", "db08c67f-f71d-4884-a4e8-2229e710127b", "5dce3125-3a6f-4b42-8f1b-957e241fd294", "274689e9-4268-469b-93a0-be5b18b1a2ff"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV27()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "rIQgwx8oosJLK5Rq67VXMpZGMSz7kvOMHYRjzAZw05Ty0nenwzHOaIVwMTjPFMGevwVMeZt8EqIvyxvlj5KalqxA7HuqvdSNveWzWI5L6stQvZvR"
                ) {
                    Address = "dHvejLf7HUNUhMpEnczyOhMWAPbHXytdjUT8FkE6WXDem2rgSzz35aQ4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FCZ7wQECuEigH9",
                    Tel = "01954828",
                    Email = "NBtq0Hlr5V@UDcR.com",
                    ExternalId = "WhcWE5Ed0Dp6qm5en",
                    OrganizationCode = "TN--q7nM5--75977R-",
                    PrivateMoneyIds = new string[]{"a77b594a-11aa-4bcd-a72c-67092f5a4f3e", "b27c909d-1f69-42d7-9076-3ab5f1fc8993", "1d88bd09-efe4-4da4-96c1-e0a00300c1e2"},
                    CanTopupPrivateMoneyIds = new string[]{"bc9dc455-6820-4b42-9714-86f4692c00e1", "f1b0431b-0336-45b8-b61b-8009606f5a21", "5b87c228-cf0c-4e86-b708-e0dd0d3c7e9f", "d967bdb9-0919-4b4b-8e67-ec73fa6e7f1a", "3d0360ef-c02c-4691-8a98-5f8ddb82cb1c", "4f5f7864-fd92-4a0e-92d7-ff54a62ded31", "3954f6eb-3950-4736-b492-e663456a4b22", "a3e61823-7b05-42e8-9a1d-1ecc35e0572b"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV28()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "rIQgwx8oosJLK5Rq67VXMpZGMSz7kvOMHYRjzAZw05Ty0nenwzHOaIVwMTjPFMGevwVMeZt8EqIvyxvlj5KalqxA7HuqvdSNveWzWI5L6stQvZvR"
                ) {
                    PostalCode = "524-0957",
                    Address = "XAsCUOeSILicKJugP",
                    Tel = "013-7477048",
                    Email = "5lpizelx6Z@w3AN.com",
                    ExternalId = "kreMSnigb4Yb3t6kmvyhjD7Y1lgzqI",
                    OrganizationCode = "q0",
                    PrivateMoneyIds = new string[]{"f43a7baf-a0ef-4c23-9db0-60fcb6157943"},
                    CanTopupPrivateMoneyIds = new string[]{"6b3661c8-0960-41b1-ab15-1d305711bcc7", "4e9936d1-6b62-4a39-975f-c0364fdf18ca", "e73755fa-3863-455e-a57d-da1679da01e6", "52e812b7-d326-4c66-a0b3-45c8ec500426"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
