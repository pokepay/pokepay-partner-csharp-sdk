// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateShopV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateShopV20()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "qAAv5kTFYl5jpQrCuOsWKcmP5yuzEjontrdPMljWFJoKsCnzrzalAGF7T42EmVSW7un4vMOMoAZeyMzKVCGIey8Qb59RSWvmTJBzCphTQsifj"
                );
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV21()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "qAAv5kTFYl5jpQrCuOsWKcmP5yuzEjontrdPMljWFJoKsCnzrzalAGF7T42EmVSW7un4vMOMoAZeyMzKVCGIey8Qb59RSWvmTJBzCphTQsifj"
                ) {
                    CanTopupPrivateMoneyIds = new string[]{},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV22()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "qAAv5kTFYl5jpQrCuOsWKcmP5yuzEjontrdPMljWFJoKsCnzrzalAGF7T42EmVSW7un4vMOMoAZeyMzKVCGIey8Qb59RSWvmTJBzCphTQsifj"
                ) {
                    PrivateMoneyIds = new string[]{"38597847-b126-45dd-8202-0ceb3c3abb6e", "4136b467-5582-48a2-89c1-b8c75bb5541b", "ed8fca5f-e535-4cd9-b614-48fe6344b68f", "060c7caa-ba82-4040-a2d4-043abff9fb9f", "2a79282b-92b9-4fc1-9888-493858a89897"},
                    CanTopupPrivateMoneyIds = new string[]{"2ce15aa1-b762-4829-9d34-3882b6fa0a69", "90edd20f-92d4-4bfb-a2d7-095da974fa8a", "fc3a44ee-9342-4a38-9cd2-b87b992ac065", "0b833124-469a-4741-8e8c-80e126b53e05", "240bb81e-3f89-4b7d-a2b9-a312a542d4b0", "b510d6c3-7fd9-4182-9bf3-b3bb676942cf", "89e38477-908c-497d-85b6-a1ccf975231d", "080704ca-e9b4-4a81-8e20-d6546ec3befb", "e7c4e251-2dbb-4181-b3b8-9c4d4622487d"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV23()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "qAAv5kTFYl5jpQrCuOsWKcmP5yuzEjontrdPMljWFJoKsCnzrzalAGF7T42EmVSW7un4vMOMoAZeyMzKVCGIey8Qb59RSWvmTJBzCphTQsifj"
                ) {
                    OrganizationCode = "ibTo8S-456-Mgg3-Pn--",
                    PrivateMoneyIds = new string[]{"10719ed4-4ff2-4c44-adfe-87ed4c71bf90", "e619109d-d773-468b-8a53-19a0cd5d31f6", "4517204e-6653-4a7f-b818-33bbd77a648f", "f27362f7-9683-4617-860d-768da60013de", "b1aeb86a-769e-48e7-9657-6e326b6850ce", "560a9274-2fcd-413e-92df-1962357b6d77", "aff73361-7e9e-4157-a6fe-838308387bbc", "2283f2f8-c219-4572-9de4-ea2c6490d7ba", "a85f09ac-c25d-4ab0-b423-084b1475edf1", "260ad2ce-09e4-4ced-a99a-6a21327cf760"},
                    CanTopupPrivateMoneyIds = new string[]{"d060b1eb-5725-4b29-8658-c18097cf19eb"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV24()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "qAAv5kTFYl5jpQrCuOsWKcmP5yuzEjontrdPMljWFJoKsCnzrzalAGF7T42EmVSW7un4vMOMoAZeyMzKVCGIey8Qb59RSWvmTJBzCphTQsifj"
                ) {
                    ExternalId = "ZNVpQq",
                    OrganizationCode = "j2--e8-e5X--",
                    PrivateMoneyIds = new string[]{"d8e8d229-ab09-4469-b09b-74d4670c81a0", "91ebabc9-1402-4fbd-9b92-41cbf856e396", "a5046d85-f4d9-4a5b-8c3c-0bfe6b2ed655", "58307e6c-19bd-4d07-9672-eb5e1a1808d7", "47bc10ca-6cc9-4d82-81a5-b4ef662e95ae"},
                    CanTopupPrivateMoneyIds = new string[]{"28fc464e-e859-4c49-b03e-9cb3ae56a4e9"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV25()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "qAAv5kTFYl5jpQrCuOsWKcmP5yuzEjontrdPMljWFJoKsCnzrzalAGF7T42EmVSW7un4vMOMoAZeyMzKVCGIey8Qb59RSWvmTJBzCphTQsifj"
                ) {
                    Email = "QdaKT0f4kh@pFM0.com",
                    ExternalId = "chj7qeEU4",
                    OrganizationCode = "9---m",
                    PrivateMoneyIds = new string[]{"5d05fbf6-216f-438e-89e1-631bf5523107", "17647ba3-d9aa-43c7-8304-5eb16b45a3ff", "918db6b3-b3d7-40af-a787-e0e3d027d2a7", "ac0c7e97-7a86-4a0f-9c34-00ffd5344664", "31ca9bc1-8d2b-4470-a94c-785c7b78a865", "1e508ef7-d085-4e47-b6a0-1c44d20bd31b", "2d3e40ea-ae12-4b18-ba17-3daf864a33c3", "efa80529-cf71-4afe-a280-c1dc1ab1bd7f", "c190ba57-c59e-4d0b-affe-6240750425db"},
                    CanTopupPrivateMoneyIds = new string[]{},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV26()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "qAAv5kTFYl5jpQrCuOsWKcmP5yuzEjontrdPMljWFJoKsCnzrzalAGF7T42EmVSW7un4vMOMoAZeyMzKVCGIey8Qb59RSWvmTJBzCphTQsifj"
                ) {
                    Tel = "0087-209499",
                    Email = "WSktuP38Lr@5vt6.com",
                    ExternalId = "1qZ1UduEuTbC2kwzz2TenmMl2a0DnKCS",
                    OrganizationCode = "5-A-3qt--0-M-Bvq-51-ww-W",
                    PrivateMoneyIds = new string[]{"aee94f26-83bc-4771-8429-35c999d509f8"},
                    CanTopupPrivateMoneyIds = new string[]{"47820721-3c81-40ff-b4fa-8edd4f89b715", "ddb7bdea-a708-4131-a4ce-344b46aad769"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV27()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "qAAv5kTFYl5jpQrCuOsWKcmP5yuzEjontrdPMljWFJoKsCnzrzalAGF7T42EmVSW7un4vMOMoAZeyMzKVCGIey8Qb59RSWvmTJBzCphTQsifj"
                ) {
                    Address = "iBGAlLBdss19u26VxGmSlKElDat5ENhTY9URgXR0MyZl9fFiPZRosLJVHNBfa4ScUisjfM07Gsr7107ipfX4tk83rcDJOBBIIWCmIDzjqdPquSO6z2IzllcUFAWjo7G0X0oYJl57aA1kLnMkU92WC5TmF2ijq36GleUfR75k9RNmaM4hdn9gleLA0oC1",
                    Tel = "0862-390218",
                    Email = "cZS6tS1HZY@13PV.com",
                    ExternalId = "80nFwUx",
                    OrganizationCode = "e1Gg-X---572",
                    PrivateMoneyIds = new string[]{"3e8f7be7-965c-45ae-95a1-a80e8e063c96", "2ecf08f7-454a-4c34-a2a4-52c17b2b6d57", "b2370a51-2d12-4ca9-aaa6-e90d82d93de3", "401fac7f-e830-4597-b727-f2916ab0ebe2", "10be73cd-b2af-4175-b8f3-0b32c5a6ae44", "e7bbfe14-8c6a-43ec-b9f9-75a83f3100f0", "99e32dde-bf87-40bf-9099-ed3b7d338881", "4fe58239-5e8c-4752-a33e-af48c0c61f7e", "a6a40f48-1d3c-4530-b80e-2297e5b1d48c"},
                    CanTopupPrivateMoneyIds = new string[]{"50cffaf3-bc7f-45d2-8770-419ee1c0089d", "4976ee29-6a9b-464f-b52a-fd9f4bf3e721"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV28()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "qAAv5kTFYl5jpQrCuOsWKcmP5yuzEjontrdPMljWFJoKsCnzrzalAGF7T42EmVSW7un4vMOMoAZeyMzKVCGIey8Qb59RSWvmTJBzCphTQsifj"
                ) {
                    PostalCode = "5941419",
                    Address = "m5L4XpbzGEJxRjyNGKzYh3tHPNjIH8KcJTYiMOsbyOc",
                    Tel = "0614295-2594",
                    Email = "ljiFoewBFW@ShAs.com",
                    ExternalId = "EL26LATpf0",
                    OrganizationCode = "2jmMm-g-uMdka-7-XgKxZ-8-0NimhyII",
                    PrivateMoneyIds = new string[]{"98b34d90-d8a8-4aaa-8d75-ebe81c77f0a0", "827f5686-3817-4187-9bd6-48c459d55bb8", "894db78d-203a-46b2-b406-6fdb428ca699", "e128fd6d-8a36-428b-a5e7-b3533be02ce8", "0a786e5a-bb42-4b99-a1e3-8d522b263868", "28b73ed2-b971-408f-8c7d-baf16f814333", "ee9712b1-2fd3-4639-b96f-55b9be0973fe", "1cb029e4-ae84-4f11-aa95-2c3444c7946b", "cf5c2694-0e54-42c5-a13d-4a7231fef425", "6a2fa3ca-e7a1-469e-9656-3ebde9b3e1e8"},
                    CanTopupPrivateMoneyIds = new string[]{"9cc91bef-1d8f-4357-bd53-acaaf8c595fb", "06517742-bae5-450c-a402-4a08a35c7a74", "dfad851b-556c-4a21-9564-c5a585cee40c", "50a65892-065b-4bb9-9010-0a1bb58cb009", "d0bcc633-0d4a-4e9a-80e9-d9c875e07383", "bd194966-2318-4e15-b572-511089b991b6"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
