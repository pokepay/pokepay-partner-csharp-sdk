// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateShopV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateShopV20()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "UPoxQ"
                );
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV21()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "UPoxQ"
                ) {
                    CanTopupPrivateMoneyIds = new string[]{"a7f28eca-028b-43dc-b984-54ffee4912ee", "c0e8005b-0131-42c9-9696-665756129d53", "839fa4c6-6149-4347-9efc-73d51800feac", "86f4faa9-e0f1-49ca-b407-dc0b6240edce", "c7a2a4ae-ea36-4ffa-b688-ddf3618c221d", "565fb399-5e94-40da-a8dc-669f9d216544"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV22()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "UPoxQ"
                ) {
                    PrivateMoneyIds = new string[]{"0ad34525-b13c-4160-aeae-f397d604ca9f", "ca4ab405-9d44-427c-ba3d-7387387edd47", "04ce2571-f3e5-431f-82ed-b7eba702d8cf", "19c928d2-f40c-4744-8f9c-c708da68251d", "14ca9fc4-677a-4c3d-8afe-817c958d2647", "5bb1c4da-1b88-4bbf-b954-bd4d3989d0b0", "1f445d54-56f9-4653-be0d-338c296aae97", "8be5636a-04c1-4eec-9657-48c4e51d0972", "4d16846a-94f3-4378-a330-82d5bbfaa117"},
                    CanTopupPrivateMoneyIds = new string[]{"1135cfa4-8c4e-483c-a488-c54f574a10a5", "47702bc3-ce08-478e-9665-6679738bffff", "3fce89eb-af46-4979-aae6-08d0fc62fceb", "26e689f1-7114-44df-b85b-f2c95aa8b759", "84ec8d2b-ce2b-4a2b-ac43-0bee8dea6b01", "c8f7522b-6b17-4549-852a-4c0c13106022", "9beb1566-af3b-4f99-bed6-526aefacabdc", "2b8d7679-9083-49e8-9549-377ab8a2f803", "725ae484-e12b-4ff6-b3f7-6321dce2e8dd"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV23()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "UPoxQ"
                ) {
                    OrganizationCode = "-zf-Joy0-qd03y5ug-G-F-9i--8aG",
                    PrivateMoneyIds = new string[]{"10014421-2a2c-418d-960a-5d578855b799", "e431dda1-00d0-47b7-9faf-87a9a140c29b", "396ed696-d8e1-4936-b724-d215a107cf33", "1e8bcee0-8321-4e36-b626-5d09acd234e3", "c8dfc5c8-13d7-4c08-a83f-f26b107fef01", "9c080817-aad9-43eb-8183-91364cb3e5f4", "13ae9a3c-5bf2-4619-a19e-8b68a4e9cd62", "987e07d3-cf39-4c74-ad0a-992ca5e99d8b"},
                    CanTopupPrivateMoneyIds = new string[]{"0d99ef26-fcfe-449e-9069-2225d7f9497f", "be4477ee-dda6-49ea-894e-e27ab7163cbc"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV24()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "UPoxQ"
                ) {
                    ExternalId = "WZdpxUSeeatx",
                    OrganizationCode = "Uzsz-b----K6-lPLRR6l4--jJ-64",
                    PrivateMoneyIds = new string[]{"278fd604-0695-4596-863d-5e9c14a9f426", "c8bd9ea3-2969-45d3-a07e-206f23024e2b", "9de1aa6c-5eec-4f23-85f5-ba7e473c9e70", "ccbe9105-7ce7-4b4c-9a29-76bd8d819f7c", "b75e3e9f-3294-4c10-b44a-2b1a57f62c69"},
                    CanTopupPrivateMoneyIds = new string[]{"95c84b40-9503-4a9a-bdf4-ff2d34fc2643", "971c0765-fb95-44dc-84d3-86483b49e313", "a62cacc4-9c33-4f12-83b2-c99296d1ed2c"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV25()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "UPoxQ"
                ) {
                    Email = "YnEIi9qrFh@HU4U.com",
                    ExternalId = "hBkt",
                    OrganizationCode = "--Pk9K--30l--4Gechy-69V---A--g-f",
                    PrivateMoneyIds = new string[]{"7a193dfa-ea29-48b8-9c6f-2a5c125a2fa7", "7643b853-7f46-4625-91e5-5a471c2005a4", "012d146f-7894-4a53-9cc7-a09e71fd3afe", "fbbbfe18-6a82-4233-89eb-aa7dcf8a2da1", "7eb8478a-08b8-4e12-beb1-02794502eb34", "8691124c-9937-42fe-ab0c-a66fb88774b3"},
                    CanTopupPrivateMoneyIds = new string[]{"bd062dc7-b2cd-4592-b355-aa4b05062cc2", "a76b459c-1558-4714-8d06-fcaf3eeb6384", "c8cdbc4a-411e-40dc-89ef-b1403cad4be0", "d0be6079-aa63-42f0-b397-b9107e0317c0", "a42a0379-1ddb-45b4-8cf9-fdcce7b9a25a", "56f24c3b-be46-4978-9275-dbf50335ccc6", "8040264c-59df-49c1-be02-c6a3b1075f8c"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV26()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "UPoxQ"
                ) {
                    Tel = "054912941",
                    Email = "pnJ8Uw7M1C@vtXb.com",
                    ExternalId = "cAQ9ViIsv",
                    OrganizationCode = "K-9-7-50",
                    PrivateMoneyIds = new string[]{"7ff643ce-2433-43bc-8c83-a2a12571c404", "a20bb6d6-00e9-484a-8c53-9a87e367a1ba", "77213390-28b1-4b64-a6ad-f220774e8a11", "9656ac8b-25f0-4fe9-9c75-fe754e6c3436", "064fec23-2f4a-4fad-a381-c6a28816bea4"},
                    CanTopupPrivateMoneyIds = new string[]{"10c940e5-769e-4979-b324-c4ca780ddf83", "2f2b553f-6e35-4dfd-8105-1bd507a545d2", "1df8198a-5d20-47b2-9e23-6aa7e2b38c37", "9522ee61-8a9d-46fc-a33f-9000548d7c85", "95e29fef-16ec-4f73-b84f-f4a6e5d20dcc", "7d93758a-3340-4101-a6de-8e81bdef7846", "a9cf22ce-d568-4397-991d-2522674a54f6"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV27()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "UPoxQ"
                ) {
                    Address = "qrdgeoTKVw3QKHsut3xFubILPZVISKCKpUoBc7VjLNhPbQNBNhem8RljnuLcC94xG8sb1tOVm7p5XAwHfSXk3eOR6TecHTnhwvZsEsT85OfQ8lzdmqxGSg8e3RhOb5BMcQPLOIjmc8VMDMHWqGdZh4akYykFCJxLZHGXI2AIAE56GVf0Gw7kmQ3kNPt7OvjdgkL3FTfLMcm3icBM39ZlgHnODxDuH",
                    Tel = "0266-1510749",
                    Email = "oSer58JP7C@ddvY.com",
                    ExternalId = "G2P4sGsjZKQxe7fKpax0Uc45ft1",
                    OrganizationCode = "--K-td-5c-10",
                    PrivateMoneyIds = new string[]{"db90af9f-6e3e-4355-8d6e-40e6176c6b1a", "2ffaad79-6d64-45aa-8a44-be69bf94ef44", "1be47e08-700d-4578-b5e7-7b0627c92659", "eed45f95-84c4-4015-be39-0a2815d2640b", "dd659ae5-f904-4676-9ee6-1fc474a1cb7c", "40ff6db1-83ab-4b0a-900b-344ad1452091", "cf11a7f4-f2e4-4019-8fb3-9bd358d47364"},
                    CanTopupPrivateMoneyIds = new string[]{"d2bee54d-3224-44f5-a90b-4b03f9291a2e", "cf7fba49-62ae-4550-b8af-ac87ef9412d8", "c9029991-20cc-4686-9850-b617e2a798af", "c3150647-00a6-4b7c-9d11-e1d8d0d06a22", "ed2a6d65-8593-433a-80ba-d28ae46b2261", "320aa770-cf3b-439f-9a34-13344c05fb29", "363c9919-e1b7-4960-aae5-9adf6d65ee06", "911b6109-4b20-434c-9e65-dfe70b25bedf", "d0e86188-9d12-47b5-bd26-e0e4aaf58b58"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV28()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "UPoxQ"
                ) {
                    PostalCode = "6871901",
                    Address = "MdbxSiedHtUdWqjwNZ6SqXcjRYXWjjppT0r9xvCuvBOfsidrDI9VlsfxLxW5axZvNGABU1Kq4dKF1bCFldqrEeXCX83UsZSPbix6b1Za3ly7V1xEBLXcDk2ABcz8aQVQ46LRceMuSvImdDq9y3aEus7kZPbP6pY7uTyJAbvra0dcpr2XBaxBtLUqtpR4s1JU0lVQ2",
                    Tel = "0930-3076-929",
                    Email = "oiJUtnz4tP@DjzG.com",
                    ExternalId = "1vMI9teS2",
                    OrganizationCode = "-322",
                    PrivateMoneyIds = new string[]{"82f45bad-1717-455c-a8f3-edf9d4f55639", "17684739-fce5-4359-83d5-acd87e194477"},
                    CanTopupPrivateMoneyIds = new string[]{"7240c943-e845-4029-ad05-5d2b62393526", "abdd92df-c10d-4b67-b207-5478a5428b0e", "6d17a47b-0833-4a9f-8ae2-bd242d824d8e", "ff1525b6-8f29-4f66-a7da-55c2084180c7", "ddb8b7ec-0385-4335-a94e-083b6abe6c40", "f9436f22-9e8f-4167-9762-c49089d25cdf", "cd3b914f-e629-4776-a069-05024f7d3704", "25967165-4327-4cb5-9c3e-a4bfced431b1", "a9001a39-2ef3-46c0-82b5-8b90625ddaab", "fdf223c1-74d4-4192-9faf-d0e6d4b83caf"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
