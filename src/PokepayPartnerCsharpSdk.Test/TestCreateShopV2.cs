// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateShopV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateShopV20()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk"
                );
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV21()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk"
                ) {
                    CanTopupPrivateMoneyIds = new string[]{"dcce315f-b75d-4d8a-a2d7-bf54d811acf0", "858c4786-e2b6-4fb6-af69-075bdbebcd47", "4218636a-1cb1-4b97-866c-28d26acc9652", "bf4ddf7c-702f-4a90-b958-e27eade269e0", "ce2d24a8-c4f5-407b-8d56-502cdec1c4fb", "b49877aa-e363-4ea5-b392-14b2f67f27bf", "b564977a-558b-48e5-85d1-67053a715351", "31671d62-0d7f-4dd1-9c2a-8ff74bbd3162"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV22()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk"
                ) {
                    PrivateMoneyIds = new string[]{"a61be5b1-57a5-46ba-9b7a-11553dff8544", "c176bcea-8e81-4166-b921-ee2a0a670ec7", "07888f02-f470-469f-8013-09ceda0ab7a6", "9b808ede-a46b-4849-abe9-c302bb4d1e55", "be90d044-f75b-4c98-ae76-63f3a20de583", "02e384ba-90ab-4764-a530-6037edd0abbd"},
                    CanTopupPrivateMoneyIds = new string[]{"61975b82-fb33-4dc7-b9bc-bc992baf89ad", "4f181a86-371e-4492-a212-914532d85de4", "0a36cb74-3723-4fb6-8747-b2815639014a", "800c3331-f2c7-43a2-986f-a535fed953e0", "3c81bd2e-0088-41ba-8fd5-9e50f857f684", "3e6f4da2-c72d-45ab-9f00-f606e6296a10", "5d819c26-09e9-41c6-adca-13aa72f645f5", "b025251a-4ebe-4e53-a372-e145caab20c7", "c74dc1e3-bf59-4cb5-89b6-599d5fe21176"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV23()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk"
                ) {
                    OrganizationCode = "-C4NW2-lp-y-ge7f5Nil9--5c",
                    PrivateMoneyIds = new string[]{"53d9c527-dad7-4833-866b-9cd79641807f", "3added3e-959a-4469-8d39-acdaf1094468", "386e4949-19fb-4f3a-af6f-d18f52fd75ea", "246c5cd6-700f-4e5a-afc1-24f02d046b65", "21623f30-970f-4256-a306-840e7b90fcc1", "c2944358-17ba-4102-964a-99292d8c8fce"},
                    CanTopupPrivateMoneyIds = new string[]{"429113fd-da05-438a-9b04-db9c2bcb1895", "7b87f493-5001-49ce-9020-12b83332cf27", "60a4fcb1-c009-4ccc-87c9-aefb536ecf8b", "37e0b234-92af-4cb4-b8a4-c68d0b751e27", "c2cc8abb-c67f-424c-b36d-782dda1c5723", "ace724a1-1ce6-4b28-b2c0-1bc63082dc0a", "609b06d0-549c-4110-b582-e0c5058bd53c"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV24()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk"
                ) {
                    ExternalId = "OVKpPzDCyUBg3VaVg5lQKirhrBQImBbF",
                    OrganizationCode = "-qCy0-6Qi-2Eu-gw-HYu",
                    PrivateMoneyIds = new string[]{"270f1533-b398-4c12-8bee-dfbdd5cc43ca", "918098f9-b1f9-4910-8e65-e0b793dc68df", "a5baeebe-17b4-4f51-9ca7-9215b4de44c0", "ab30f4b2-a297-4c18-bb90-4400a84f51e2", "c8b08476-c0a3-4cba-8526-83de622ce946"},
                    CanTopupPrivateMoneyIds = new string[]{"99eed397-6ee0-4fc4-af81-bd6bc48a3601", "caaf65ae-3af5-4f25-af64-ba0c1156adfa", "68c06994-dfd0-4507-9fd3-38810804a9b7", "38b7981e-9550-460e-924a-67300ec6d1fd"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV25()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk"
                ) {
                    Email = "9whlF6CVlM@KFHk.com",
                    ExternalId = "HEGRWUBVUZa1rmAxzFUF6",
                    OrganizationCode = "P-",
                    PrivateMoneyIds = new string[]{"8c7d46d3-3f18-467f-a96a-4b8a600daa44", "ed8a4f16-96f8-4f74-b8f2-4267e97de3f3", "29784c37-bc2d-40e5-88fe-09307dbe535e", "90b4bce4-5312-4e1c-abe9-3edbe62b54c1", "69ed5fc1-f2e1-471a-b86a-81774aaaf1d8", "7095212f-e4b6-4c89-9da6-5929da76f9c6", "d197d8cc-b543-4942-9fdf-805b0b52ae31", "3edce63e-ad18-4858-86de-f4dd9016afec", "51201c76-217a-4605-8211-4461d2af427a", "2a1d33be-2e53-4fc3-8528-c23dc72335fb"},
                    CanTopupPrivateMoneyIds = new string[]{"c2d4fb9f-b731-4be8-bd60-3ac523fc7c0c", "ef8f2447-5086-4da0-bcb2-db2780e079c5", "c3867c06-2791-476b-abdd-065e7e5e540c", "d15debd0-0532-4a0d-ae56-942545d41008", "a926f31d-6a49-4916-90f9-aa02547bc73e", "48a18b37-8d7b-4d48-be89-a085f1ee2557", "fde796b7-db24-4fc5-9ee5-91a70488dd5c", "cf62acb7-30a8-49a9-bef3-ba6b0eff43c2", "d3beb8b9-c73a-4edd-a008-7bbc7537621f", "345c0d12-b142-4029-8228-74b1531a389e"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV26()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk"
                ) {
                    Tel = "0335871",
                    Email = "30l6vspNWH@9u8x.com",
                    ExternalId = "q2mxjIub5W9d4fa79SnOHSfjKk",
                    OrganizationCode = "0-L---u--n-6--ED9",
                    PrivateMoneyIds = new string[]{"6fe2a41a-c9a5-4c85-9b51-1a56f3a4382a", "5a103506-7942-4106-8d06-e2b6b4616a82", "1ee4c331-8905-45b5-8253-3682b12dcacc", "ce27ae52-5154-4042-b49c-9ef0df91e49c"},
                    CanTopupPrivateMoneyIds = new string[]{"9daa9bf0-836a-4f62-9e74-4c02af17e701", "8b5851b6-9517-429d-ab1d-b5d1cd633afd", "ea31d584-b21c-48ff-a0c8-5a17ba55870e", "cc0b6365-b4af-4a44-aea8-2b4b1de69cac", "e4b0b583-3981-4c78-9ed8-6296ac1c47e4", "b3ee081f-6bc5-4fe7-a68a-836029533db3", "ce16574f-c6ff-4d97-b8fb-c928745d48df", "a31d4647-846c-4ef3-9ae1-9d5661afcb24"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV27()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk"
                ) {
                    Address = "pjoQ6ffYAe6kpXiCTiSBUIe5iqIMOcjyqBKlSFGLuqDn2oMYRFh8cqnV2spFoKb7jYgx3gTJKy6dBb3ykYYV",
                    Tel = "044796154",
                    Email = "GYQa0QPCC6@0HT3.com",
                    ExternalId = "9N8hkxoSQFYDUU0HuG332kYdREQC",
                    OrganizationCode = "7X3u--QRhnw-uws",
                    PrivateMoneyIds = new string[]{"ff96f8fa-1aa3-4899-9a5f-dd7025556a15", "390ea6de-ee08-45b0-80e7-87aa0f144269", "14e7b178-3bf3-4304-8299-b24bd12b845a"},
                    CanTopupPrivateMoneyIds = new string[]{},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV28()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "YxaSuFevcjssU2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS9O2M3fskqX8Wbk"
                ) {
                    PostalCode = "753-2948",
                    Address = "QDv9TW3tonru5DxxR1kiR4daTST401zYU9O5bmxo5R8HDeIrg38UDixRQOsOxJyiut30oRsSLi4FAWjvNFlMGhO7MjoFiHLtN9Yqy7R5Sel4rqjqD6mB2gz0FIdNSbIrXOBo1I3rdkLB5vuUQlHHWHdfJKJGJOe4o3A7",
                    Tel = "047-0365719",
                    Email = "MQbpvWdRIf@0j2N.com",
                    ExternalId = "Gpd9kTg7fbzWuGj28bjzoMkUfQZyG6ql9kvI",
                    OrganizationCode = "-kA-d-vVP24Hv5n4i--Ni-9-Jl-68--B",
                    PrivateMoneyIds = new string[]{"5b22f3de-40f4-4db9-bee6-5bcd910fc4df"},
                    CanTopupPrivateMoneyIds = new string[]{"4799467f-8c8e-4e32-94e8-ea642c57b6fd", "3e93a12c-0980-4397-861b-c6d2adad19ff", "deea532f-a234-4cdc-9a82-8eae337654c7", "bee6e6ed-b31d-49c3-b39c-fb6c375ec5d9", "bfd7fa9a-5453-46dc-a46b-a27e07ce50d2", "fd5eae2c-fde4-44bd-89c8-2e6c8c30a3c2", "61a7f96f-a5b7-4490-a95c-884da1852dc7"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
