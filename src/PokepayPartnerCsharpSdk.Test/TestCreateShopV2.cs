// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateShopV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateShopV20()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "zsHeGAPXssRdmEt2NWN50CK30hf1GnwgDXI91ZrYH3OtCy3uULs8zvstT1TR"
                );
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV21()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "zsHeGAPXssRdmEt2NWN50CK30hf1GnwgDXI91ZrYH3OtCy3uULs8zvstT1TR"
                ) {
                    CanTopupPrivateMoneyIds = new string[]{"aab71a14-f9b7-4bfd-823b-032aa22ef2d3", "8c9aaaf8-3ac3-44b6-b20a-0f40a3d0ecb2", "39104318-6d14-491e-b163-0e043bc1f8fc", "55f0b02d-11c3-4ecd-8b86-61656d1dfaad"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV22()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "zsHeGAPXssRdmEt2NWN50CK30hf1GnwgDXI91ZrYH3OtCy3uULs8zvstT1TR"
                ) {
                    PrivateMoneyIds = new string[]{"73816d6d-c98c-4174-b3ca-dfa354bbd061", "aeb16793-9d32-417b-8f4b-6a1669d8e562", "5fc05134-e5d5-4159-988b-1860f4d8d6b7", "3121ecc6-e88a-409f-9187-1f5e504b065d", "0aeaa7fe-1c17-4ddb-b3f2-bf6226e21cf9", "9f6c2944-ab8c-4afd-bcb7-d83beb0c5b81", "5529a8cf-bde7-472a-bf2c-21eacde6e6ae", "345a633a-c03c-4f5e-9a8a-da4afa68637a", "4eb7ad87-31f1-421e-8ac4-1d4ba1e971f7"},
                    CanTopupPrivateMoneyIds = new string[]{"143e64b1-e0e0-40bc-989d-9a7efd3957a0", "621909a2-6054-42cc-99f5-56589037039b", "eec70777-b47a-4ff6-8a15-8df70ec43a1d", "c03571df-56b8-4c60-90aa-7f6d49a5e51b", "6715962d-f5ba-4184-894a-d510408dae8e", "4c29473c-bcda-463a-a360-f3165cd42a2d", "1357f9ac-41b8-437e-aae0-6d7b5ce129bf", "3fd8ac98-ce4d-4d6b-859b-eced6e34eab0", "7bfd3982-7c34-48f6-8f3b-836bc0fe5e4a", "8e39882a-6b7f-443f-980b-9ef9cd5010f6"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV23()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "zsHeGAPXssRdmEt2NWN50CK30hf1GnwgDXI91ZrYH3OtCy3uULs8zvstT1TR"
                ) {
                    OrganizationCode = "dp-M-RLJ7y-6tCP-JRtx-",
                    PrivateMoneyIds = new string[]{"0159576e-79e3-4cce-85a1-5d6cb2137e60", "a822fca1-33be-4523-89f8-9365472e0a19", "b46ba7cb-afa9-41a4-835a-7a7c537b5ee8", "77b627fc-dfab-402c-a7b3-118ce7f12cf3", "e97ab53e-dffa-4bac-9e17-8de45c6ece99", "e06a4ffd-de3a-4e28-8590-f5688df4148b", "b16c79f6-4d87-4707-9ceb-fc27b51fd94a"},
                    CanTopupPrivateMoneyIds = new string[]{"515893c2-3dd4-489b-85b7-8333c3deb3be", "5b15cfdd-799f-46ee-b43b-8274a45015d9", "84c53b90-030c-4f7a-965a-f7219d8a2a04", "2018adcb-a514-4617-a227-e2218c0af0a7", "08c65a6d-b787-4ccc-a02c-d674063c849a", "ff0afe53-0a3c-41a0-a6ce-00b8af749661", "365acb57-e531-4608-a882-56c0942cbdad", "4cc8359f-fcbd-4aad-aa04-0010ef022c10", "9a74866d-36d8-4993-8e65-efdb446c9014"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV24()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "zsHeGAPXssRdmEt2NWN50CK30hf1GnwgDXI91ZrYH3OtCy3uULs8zvstT1TR"
                ) {
                    ExternalId = "7fk5b3vyMSoNizotcgVara18urhL7V",
                    OrganizationCode = "d-B-01uTm-U-xd9-6-",
                    PrivateMoneyIds = new string[]{"3629c43f-735b-488d-a783-3481dea4e898", "c50fb9d9-4ba3-4044-a192-5eae291d411e", "898db5db-b7da-4591-b77c-28cb81ce2c77", "f90e7811-aa53-423b-844d-7e60aaa84e43"},
                    CanTopupPrivateMoneyIds = new string[]{"bd6d17ea-8a3e-4c0a-9961-bec0452d4003", "4459c874-8628-4ede-adfe-06ff08697a1c", "1339672b-b0ba-41ee-be92-1eb5444a2985"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV25()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "zsHeGAPXssRdmEt2NWN50CK30hf1GnwgDXI91ZrYH3OtCy3uULs8zvstT1TR"
                ) {
                    Email = "OtebGXuCeA@fxzc.com",
                    ExternalId = "BlbzC",
                    OrganizationCode = "bTmJV-V-O-1DF-s-Uo-XO-1T0csgG",
                    PrivateMoneyIds = new string[]{"36c646a6-843f-4fa1-ba1a-25be9737af71", "e73bf3ef-53f8-413a-8c96-86f1755bf971", "3f1cfee2-f15e-4732-afb2-d590ccf44d2f", "136bf86b-337d-4c8f-a5a8-1d91e3a9475e", "0080d4c9-e061-4db6-b6dc-1a719371a345", "7260f6f7-75d5-4b1c-8527-2ac89f3e47e3", "ab89c871-cc96-48a3-a003-7293b8df8c3d"},
                    CanTopupPrivateMoneyIds = new string[]{"f10b7f98-ee89-41db-a902-81122b87d506", "c6cc40a8-7fac-44f6-b828-2d11dc7e912d", "add87244-17da-4a31-9f8a-79fef3f9250b"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV26()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "zsHeGAPXssRdmEt2NWN50CK30hf1GnwgDXI91ZrYH3OtCy3uULs8zvstT1TR"
                ) {
                    Tel = "03-199-058",
                    Email = "YMVv1ZLTga@jYai.com",
                    ExternalId = "4uVd7FM7VjIB44rF0PBUNgrv7Ksvf",
                    OrganizationCode = "F3C-8-U-8sUa-3-kvk-85-5",
                    PrivateMoneyIds = new string[]{"1b60b28a-d32e-46a8-8d0c-b285c4a1d853", "d9e2a1fa-555d-4ae1-a38e-11fe168b55fe", "cbadc341-2da7-4d0c-aca6-9e973477be94", "8f31d117-063e-4ff2-9804-4bed4a07ee7d", "fa9af12d-3ad5-4e56-a29e-a168d63d4c81"},
                    CanTopupPrivateMoneyIds = new string[]{"042068f9-c9af-4d50-b3fd-54f09900f7ce", "d2d1a2b5-7a84-4919-ae9e-95fa0736ef03"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV27()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "zsHeGAPXssRdmEt2NWN50CK30hf1GnwgDXI91ZrYH3OtCy3uULs8zvstT1TR"
                ) {
                    Address = "pSihez3LWuGJO5z8Njxff",
                    Tel = "0311294557",
                    Email = "GdPRt4c8of@wRIV.com",
                    ExternalId = "lHlbmwDckHFHjZ66jReSwbuMXsfhaLK5",
                    OrganizationCode = "ji05L05-iN7-FMs75-o-O-3T9Q-5t--0",
                    PrivateMoneyIds = new string[]{"389df6ce-ce2b-4bf4-b070-1315975d0bc3"},
                    CanTopupPrivateMoneyIds = new string[]{"7e1832aa-01de-4219-b04e-10929521168d", "00a6524a-d9d0-4bfe-88e9-f251d5385641", "00c20536-87d2-49e9-b467-bec4462c38dc", "c9270f5d-c3c4-458d-b744-5000aa8a2766", "37a47fc5-7658-40c7-958f-c7c5a8506640", "32cceed8-9009-4464-a733-b1c48931c08f", "39b9d918-c46c-4398-b449-7e6598db636e", "a1792a6f-78a6-4ca0-8b0e-818704be0479"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShopV28()
        {
            try {
                Request.CreateShopV2 request = new Request.CreateShopV2(
                    "zsHeGAPXssRdmEt2NWN50CK30hf1GnwgDXI91ZrYH3OtCy3uULs8zvstT1TR"
                ) {
                    PostalCode = "8259709",
                    Address = "YJ8mOFtZ3kAkd3WfWs0xHNjn39jjdPrbBGw50uIzzbW1UI7PEvGJBhLvRr1n8GJPcJ9pUpceVw180Wqd9PXNXjLXigvyNvr9ExjZvA",
                    Tel = "089210-501",
                    Email = "T3uLEAHRCL@4jMQ.com",
                    ExternalId = "Tef5nWfoCAaIVv9rQ0xN",
                    OrganizationCode = "y2xB-Q-a9obY6s-pu6km--n-q2",
                    PrivateMoneyIds = new string[]{"671ffdc2-db9c-44bc-af4b-64000fc9bc50", "42762ebe-8f66-47c9-9fd1-0ae40f600ec5", "dd0da454-7cfe-41c2-874c-6346faf15677", "ba927987-f61b-4b8f-80e6-a91e03f44e93", "9ad611b2-2b82-417a-b33d-130c1f04668a", "8fc7fa7e-01e5-45b1-9ed1-86652b668796", "498bf6d3-b74c-484e-9f99-8b0b71782653"},
                    CanTopupPrivateMoneyIds = new string[]{"5f222e51-d826-4568-b26d-5fc775342714", "03f66676-2f92-4f84-9659-645612f94631"},
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
