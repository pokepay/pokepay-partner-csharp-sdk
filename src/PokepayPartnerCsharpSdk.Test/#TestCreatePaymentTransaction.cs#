// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreatePaymentTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreatePaymentTransaction0()
        {
            try {
                Request.CreatePaymentTransaction request = new Request.CreatePaymentTransaction(
                    "72eb3c2c-8c93-4f56-9365-264bab09ef93",
                    "ee90f458-2b0d-48d6-bbd4-2a793f4bd44e",
                    "ecc7f6d2-14fb-47f5-b64e-8a41e3c20229",
                    7125
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreatePaymentTransaction1()
        {
            try {
                Request.CreatePaymentTransaction request = new Request.CreatePaymentTransaction(
                    "72eb3c2c-8c93-4f56-9365-264bab09ef93",
                    "ee90f458-2b0d-48d6-bbd4-2a793f4bd44e",
                    "ecc7f6d2-14fb-47f5-b64e-8a41e3c20229",
                    7125
                ) {
                    RequestId = "caaed78e-be70-4d36-ac89-c0a64bc1ca0a",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreatePaymentTransaction2()
        {
            try {
                Request.CreatePaymentTransaction request = new Request.CreatePaymentTransaction(
                    "72eb3c2c-8c93-4f56-9365-264bab09ef93",
                    "ee90f458-2b0d-48d6-bbd4-2a793f4bd44e",
                    "ecc7f6d2-14fb-47f5-b64e-8a41e3c20229",
                    7125
                ) {
                    Products = new object[]{
                      new Dictionary<string, object>(){
                        {"jan_code","abc"},
                        {"name","name1"},
                        {"unit_price",100},
                        {"price",100},
                        {"is_discounted",false},
                        {"other","{}"}
                      },
                      },
                      new Dictionary<string, object>(){
                        {"jan_code","abc"},
                        {"name","name1"},
                        {"unit_price",100},
                        {"price",100},
                        {"is_discounted",false},
                        {"other","{}"}
                      }
                    },
                    RequestId = "375e0e3f-d49f-4d1b-8364-25e1c287d7f7",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreatePaymentTransaction3()
        {
            try {
                Request.CreatePaymentTransaction request = new Request.CreatePaymentTransaction(
                    "72eb3c2c-8c93-4f56-9365-264bab09ef93",
                    "ee90f458-2b0d-48d6-bbd4-2a793f4bd44e",
                    "ecc7f6d2-14fb-47f5-b64e-8a41e3c20229",
                    7125
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    Products = new object[]{new Dictionary<string, object>(){{"jan_code","abc"}, {"name","name1"}, {"unit_price",100}, {"price",100}, {"is_discounted",false}, {"other","{}"}}, new Dictionary<string, object>(){{"jan_code","abc"}, {"name","name1"}, {"unit_price",100}, {"price",100}, {"is_discounted",false}, {"other","{}"}}, new Dictionary<string, object>(){{"jan_code","abc"}, {"name","name1"}, {"unit_price",100}, {"price",100}, {"is_discounted",false}, {"other","{}"}}, new Dictionary<string, object>(){{"jan_code","abc"}, {"name","name1"}, {"unit_price",100}, {"price",100}, {"is_discounted",false}, {"other","{}"}}, new Dictionary<string, object>(){{"jan_code","abc"}, {"name","name1"}, {"unit_price",100}, {"price",100}, {"is_discounted",false}, {"other","{}"}}, new Dictionary<string, object>(){{"jan_code","abc"}, {"name","name1"}, {"unit_price",100}, {"price",100}, {"is_discounted",false}, {"other","{}"}}},
                    RequestId = "edfecf7c-6781-488d-8d75-c0e2f323c41d",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreatePaymentTransaction4()
        {
            try {
                Request.CreatePaymentTransaction request = new Request.CreatePaymentTransaction(
                    "72eb3c2c-8c93-4f56-9365-264bab09ef93",
                    "ee90f458-2b0d-48d6-bbd4-2a793f4bd44e",
                    "ecc7f6d2-14fb-47f5-b64e-8a41e3c20229",
                    7125
                ) {
                    Description = "jQ03lDRu1dHypEu4pqRk9KXy",
                    Metadata = "{\"key\":\"value\"}",
                    Products = new object[]{new Dictionary<string, object>(){{"jan_code","abc"}, {"name","name1"}, {"unit_price",100}, {"price",100}, {"is_discounted",false}, {"other","{}"}}, new Dictionary<string, object>(){{"jan_code","abc"}, {"name","name1"}, {"unit_price",100}, {"price",100}, {"is_discounted",false}, {"other","{}"}}, new Dictionary<string, object>(){{"jan_code","abc"}, {"name","name1"}, {"unit_price",100}, {"price",100}, {"is_discounted",false}, {"other","{}"}}, new Dictionary<string, object>(){{"jan_code","abc"}, {"name","name1"}, {"unit_price",100}, {"price",100}, {"is_discounted",false}, {"other","{}"}}, new Dictionary<string, object>(){{"jan_code","abc"}, {"name","name1"}, {"unit_price",100}, {"price",100}, {"is_discounted",false}, {"other","{}"}}, new Dictionary<string, object>(){{"jan_code","abc"}, {"name","name1"}, {"unit_price",100}, {"price",100}, {"is_discounted",false}, {"other","{}"}}, new Dictionary<string, object>(){{"jan_code","abc"}, {"name","name1"}, {"unit_price",100}, {"price",100}, {"is_discounted",false}, {"other","{}"}}, new Dictionary<string, object>(){{"jan_code","abc"}, {"name","name1"}, {"unit_price",100}, {"price",100}, {"is_discounted",false}, {"other","{}"}}, new Dictionary<string, object>(){{"jan_code","abc"}, {"name","name1"}, {"unit_price",100}, {"price",100}, {"is_discounted",false}, {"other","{}"}}},
                    RequestId = "eecf1f7e-aaf7-4b0b-b89a-cd669deb41c1",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
