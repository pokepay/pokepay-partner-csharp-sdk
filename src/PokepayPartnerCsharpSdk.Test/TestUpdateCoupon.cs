// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCoupon0()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 1126,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon1()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 1366,
                    Name = "oQrzXbRnunreG6k2a6uUVPAvsda5jaSZbWCSepQRJhxhRwvRgHx3QMJyiYGDmd59t7OrCcXLNNFlRvpDGsPsNPsOl5yvxxoqGz3R",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon2()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 1936,
                    Description = "OPIiAPAHlZ5Hu4jlpHkzxoYX2dBrltgbAoVxNlZ74ZGDGGk0NXgTg6gBVDqwXnhX1yBJonGWXE7T6pcqpSJu2Phxsu6X6yoa6ToRRpEF96R1yKKKaW3QkptQLZ4GW685TaJ",
                    Name = "HGsMzclTwaQfPJApcpSFgNsg0iduMerNIi",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon3()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 2281,
                    DiscountUpperLimit = 8629,
                    Description = "fhNs3PlYFQOYxNTTZgQGcyGMidmq3NPeGSjNJPl3IkWmftNwYT8AsLMyOThbk2lmmI8Ed7s7r6X05TVPEqyU8nmgr8tnMV2tpncMeLaj6Eg7",
                    Name = "nm9I7n5wJLFqEZhX6Iem1hniS6eTglBN8UnpYpRyEyQgVDg0hyabxPIIWnrADOehKQdRcOXhQxc4PPx",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon4()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 5969,
                    StartsAt = "2017-09-07T10:20:19.000000+09:00",
                    DiscountUpperLimit = 60,
                    Description = "c42RdURSrUOrfC2nGNat4rmKbVTNKWOg1qVxbIn",
                    Name = "ZWMlOT5z5woCc8pEGWjmS0osyR2KF2P7CvJ5vSh9EDNQnOLRlkak10UdVnAId59JeVIWApoE7ASo2Gb6Dm321lTOY",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon5()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 8932,
                    EndsAt = "2018-01-14T18:29:25.000000+09:00",
                    StartsAt = "2024-09-16T20:22:52.000000+09:00",
                    DiscountUpperLimit = 2539,
                    Description = "0Zx9KGSerQ8tLdvIVIFuFFgH87Npf4V8FLO8eFvUA7RMtkRY85MHJOf6IX9yC8rniKyUmZ69MPGmala8R9YrMzkNwRhiUARrX3lhcxeZi0qCyU8o37589VTcSpJiAtUW1a6pkFXZnzXLQ4QIKUXI7a6DkF7Y6IGO52wpYNL1qX8GbNXEsgcyODgjJXJsvkaXr6xaPn5fj223d",
                    Name = "O8HtR2goX6Pmf7DAkFPPeLimmPE0ZHmdgsZ7cyIf2baUhcbkA3cqEZLbFrIxZwzt749xWU8kJDQcKJR",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon6()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 451,
                    DisplayStartsAt = "2018-05-18T17:42:00.000000+09:00",
                    EndsAt = "2017-05-25T02:00:37.000000+09:00",
                    StartsAt = "2021-05-31T15:21:22.000000+09:00",
                    DiscountUpperLimit = 7002,
                    Description = "aYHozfUSXmJDhvRQzxqiTmIaYWpMzjd4TcI8q8z67xr7kHPL5Hi6p1iqgkHrv6cFC69V5PBnvm83YnErfeiF6useFmUN3",
                    Name = "CZ3PImi2wTVdKFFFCXfBJAR2BgMXyiurnuOg01A0dkCbFsIgxF8RpzgCYCjyBfcG22a8Turetbf",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon7()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 6610,
                    DisplayEndsAt = "2022-12-14T00:25:00.000000+09:00",
                    DisplayStartsAt = "2024-02-11T00:56:43.000000+09:00",
                    EndsAt = "2021-03-11T00:18:36.000000+09:00",
                    StartsAt = "2020-11-25T05:13:49.000000+09:00",
                    DiscountUpperLimit = 4345,
                    Description = "71IntHmaYrdJoPC41v8KrW2lOWdfricVCL67XZFwrxrcu6XaqhvvqKdGKpb",
                    Name = "kyf1dWBGI58EOPl3jgij7IaQ4cHmsmj1MnHbebgx27cx4nnHSwdIgWqx8bObAQ09PnefS5j1KcYZH6kNX2tCYZfyQfNmJsa7CLdtgJ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon8()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 2956,
                    IsDisabled = true,
                    DisplayEndsAt = "2018-02-23T17:10:27.000000+09:00",
                    DisplayStartsAt = "2024-06-05T07:24:09.000000+09:00",
                    EndsAt = "2024-12-26T02:10:51.000000+09:00",
                    StartsAt = "2018-01-16T04:58:02.000000+09:00",
                    DiscountUpperLimit = 4558,
                    Description = "dJbvy2FlWDkJtqK3kayxzVhbgoN2mzq8b098jzs18YvxUrbqKAQduefJMhLLQpMvmOWqkZbMCQg2QUS89ibyhd",
                    Name = "3tF7KFPc5udhFJMqccrWi0F0CNl4sbRyKhz7Y7hCkXJ6yyJwjYXToSfi4WKrzETfba7FJPOk",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon9()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 7611,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2017-06-18T22:45:59.000000+09:00",
                    DisplayStartsAt = "2023-07-02T04:45:19.000000+09:00",
                    EndsAt = "2019-08-07T22:24:05.000000+09:00",
                    StartsAt = "2024-07-20T03:58:17.000000+09:00",
                    DiscountUpperLimit = 5401,
                    Description = "z5XjLGvju2YbolmjHzjeNjEmX30wir1xMVyCXOPOanJl94iBnHR6oDkebBzkX0A3CfX5ss7yhIv8LgomWFmHKNQvsCAkUchhFveMGDDWD7O6WuTs4gv6eXnMfNGg8fhxQ7v0PiANrLrUNYP9kPAjLQPaC3KsfXNe1mgygEtaenRVsp3AxmR4KrtS8po0ZZi6ABdi09pYTULtQLqvaZpgkN6yKCkbsOpn0GBtVQ3V8",
                    Name = "PITcDtPClfID8uPwdbaKTg7KLZeECBmO8lIxZxffiNO26mW5znNZ22umoTCfZcCpIAbgloZQS2irm6YNDKbL",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon10()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 3225,
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-03-08T07:43:41.000000+09:00",
                    DisplayStartsAt = "2020-03-05T06:37:24.000000+09:00",
                    EndsAt = "2016-10-17T20:08:10.000000+09:00",
                    StartsAt = "2021-08-03T17:43:25.000000+09:00",
                    DiscountUpperLimit = 7316,
                    Description = "VFl21CdCaYxGKhixmc3fIHHfhjZoOjF3FdjrY4gPDA17Wzbd0M2iQVGHJJtyXR0ZMWs2cHp3UWhyNJSXEQQMmBUIEOp46ijevmqEck7fgAotkae5RFqM1jAFvVRqoCCL3XTTq0lHm5zn7FVkvVdA00Sr0dI7apPREwiHGiDPAsmzp3Xpc7DFLgNY9RzLE8HaRJLtDlYh9hld6",
                    Name = "nahuQqK3kzLJnBcG2cdFIxlBavkOlJWLvBerqW",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon11()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 9906,
                    Code = "vRDSFddg",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2018-03-11T09:18:08.000000+09:00",
                    DisplayStartsAt = "2017-12-31T00:41:38.000000+09:00",
                    EndsAt = "2020-11-13T18:36:22.000000+09:00",
                    StartsAt = "2019-10-07T12:56:51.000000+09:00",
                    DiscountUpperLimit = 4425,
                    Description = "neuQvrGNmFFjBpQ16iAIL2vXy3BeYg2Hb8rsTwhxD5QHhkZKjcmSrouERjQTug0bq1Vx9jq",
                    Name = "SXI1Srly73xHxUBcknLOxhIMo9FzDj31LOww7pPUbTIEbU7t9ak4tLMhSCN1dLufqIaq9VPZZcaxGHdqDxpHv2rrXeDHksE3",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon12()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 7724,
                    UsageLimit = 3175,
                    Code = "trp",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2017-05-24T12:36:49.000000+09:00",
                    DisplayStartsAt = "2017-10-08T16:19:43.000000+09:00",
                    EndsAt = "2023-08-10T09:27:07.000000+09:00",
                    StartsAt = "2017-06-21T19:00:56.000000+09:00",
                    DiscountUpperLimit = 5122,
                    Description = "ENv1FNXfWHeuzkZQpRI7lkkRZic2G2ZBJ7VxnuYxQLXM3ULhLaDQIZPLWOSTxiuGfyEnhDlZe306zyRiggMAbDct2Tc9Ew4vhdkl2CqDs2FpSU7DRyfsVjoTvIr0yy6ZUZKy3eLuUBKBEThM4qULaICy8wljqT77vIZIOwmTsNLjmoaN9EjEZqCNPFkEA1bTr9cUa91Tf5",
                    Name = "GZnSgQ3EubsJLK8Um6mUpnjjvpN8q7uPu2SSxrWQeXIsIjuZV6cnJ0733A244SAHQtqNgoC9MqFpCNOr0YEP9Dnz0l7KOAPeT",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon13()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 1276,
                    MinAmount = 2877,
                    UsageLimit = 5625,
                    Code = "mMiWLn",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2024-07-12T00:44:33.000000+09:00",
                    DisplayStartsAt = "2022-11-11T10:28:36.000000+09:00",
                    EndsAt = "2023-03-23T08:19:33.000000+09:00",
                    StartsAt = "2019-01-30T06:01:31.000000+09:00",
                    DiscountUpperLimit = 9831,
                    Description = "Lzotf7NqBARSCikx6UYhQeGMkeRiCYcoRDXTsPVJwnN2rF93lIuvSHta7GSQZVxz1KR894lZ9VSDqzw1PIiG1hENZ6vYGmJyJOrpsfnMGyPjhGHLYlN44j48kFu0j5sXKpCCUYwKr7tPXqAbYyBisKhueiIE2AygZQaqD8Cj3PoWn0EwPPPiAppJUkgpGKZxfGv7f2efWLBuoE7oCizs2uOz8wg5GLOa91",
                    Name = "kCWJsTkX6nrFPEkmljb7uVlMngVZAUee2SyG4ZBAk0UkxRecrVYFxbhExkdFnrXV",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon14()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 4918,
                    IsShopSpecified = true,
                    MinAmount = 6513,
                    UsageLimit = 9126,
                    Code = "aTptheWGc",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-08-01T04:14:51.000000+09:00",
                    DisplayStartsAt = "2019-02-13T18:23:27.000000+09:00",
                    EndsAt = "2015-11-25T13:03:02.000000+09:00",
                    StartsAt = "2024-05-20T13:07:47.000000+09:00",
                    DiscountUpperLimit = 3531,
                    Description = "Evx7XRuXWBEpavpBrb9pesZ5eME1Mr5ROBJaf5XSRYDNdcplI5RLNThD9q0qaszdVnhnZyrtiwZRNWdnCofniiwdfeqfebfkNDm3oF2ataT9OfhqZxb7b4iykxxtmifABAuHo2oHHwZtwKC8PkyRJ5ceIUWl47QI0GC03gYQhbfhoVOPkrFiHKfy47LItbf6X4VQowHns1mzUp0aXAc0BCldlcXLE2nOoB0vBdcUvYdiluu9JduxjpixIU7I",
                    Name = "f38UEiWiADNzpuMzZinePNL4H03UBRk3YZDcnHcGV2Eb0w9BEQ09gLVdbciiE8t8GIV0hcQdRP1L7XsUnuC3rlK",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon15()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 5576,
                    AvailableShopIds = new string[]{},
                    IsShopSpecified = false,
                    MinAmount = 5789,
                    UsageLimit = 541,
                    Code = "lgLgGSA",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-04-16T13:29:42.000000+09:00",
                    DisplayStartsAt = "2023-02-26T10:07:07.000000+09:00",
                    EndsAt = "2024-12-06T11:21:18.000000+09:00",
                    StartsAt = "2022-06-24T21:04:42.000000+09:00",
                    DiscountUpperLimit = 2028,
                    Description = "vycDFRdT1noFbdLqDAPaRkYrJF1mE1eSKUkKsnlVtHjyCIXkY8oot3LmcGMHuBLU1XObgsGBvMKyiANRk1iVPR82kaW0N51uohQXRLiYxqdf2FEFHz6oq2sbhaYLwMKAeP33VXIJ2jyUenRGIISPjnPqHL85BvlvP",
                    Name = "ZSvKeAsNDZw8WCA39ayjalHDaKGIh4LPWzKlWLZSyYC0i4VvWDcTAWCSRztH88kN9oH9uMSuZFo",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon16()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 7370,
                    StorageId = "72d1c685-5c85-466e-bcc9-fd8cd8583ab7",
                    AvailableShopIds = new string[]{"f3290b5d-73e1-4cdc-b022-08c25bbea6d2", "cb13dd6c-fb97-4660-89cd-5e6aad88926b"},
                    IsShopSpecified = true,
                    MinAmount = 2118,
                    UsageLimit = 6692,
                    Code = "DPCcsdJjE",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2018-04-30T10:29:29.000000+09:00",
                    DisplayStartsAt = "2024-05-20T09:46:56.000000+09:00",
                    EndsAt = "2019-06-10T04:00:21.000000+09:00",
                    StartsAt = "2016-02-22T17:48:53.000000+09:00",
                    DiscountUpperLimit = 3736,
                    Description = "ajecnNxLmQpE2gnV4atvHUZybrT5IwlSgRvgwaMfz4V2UawZBGipNwSefuRv4MjrfYEURhY624dPTZJCDM93mO3JOCZaNHcr2MNti4q4Ih6Zz9TvY58HRlLQstyZ4RDyx8Hv",
                    Name = "RPa1HluwcjmQzBfuQZUDwaQEQuavMP2ZIpNld",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon17()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 7980,
                    DiscountPercentage = 7363.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon18()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 9045,
                    DiscountPercentage = 8524.0,
                    Name = "2snM86pCX7Shz",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon19()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 4735,
                    DiscountPercentage = 464.0,
                    Description = "8acZSdNDnuezhnxabXDMAEQnl4v3dY7I3g7oKOrLuTg9Y4f3yPj6FZBzP261DSj1nSXq9grSvdC4Ui3RYHNCEfUVshwF0TcPmlbS5z9PcXwZaXLd5ZVKRB4D291ufqSasid118dLiq5sambxzGsxH4ezIX3bP7bOTNoAkl01gWhk4499zcP3RU5fs8dlYRQH7VJ7N6t",
                    Name = "SK9srEAZopgTsoYb0X9n7qurGPx8R6Pgafky",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon20()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 7174,
                    DiscountPercentage = 8906.0,
                    DiscountUpperLimit = 4391,
                    Description = "2GvsLHrt3tFmIeyrXlZqgV4OYXJSfgrpgecUFAgluk9S3X3em1vwlOGieEQvPnM41yHkDV3Wr7ifXXQXMO6IDOICqfKaqKav1bOiU4a486fWouenSeGJuFxJDSERPQ44vjuW9SnvNYhcIHducu5EqU2KR7NzkiGYsa6mDyRWG9rEhdWOKsRC93RMEddpUyvEpSi6SIIHH2Pteqn9c48lf0SlhJn468PymuvbRvfFqPfynrjc",
                    Name = "9JWVf1PoVYbaHJbixv1WrvyjpoxaKAVnqOHGUn5iRgL4A4Z5ZdFTR0ztRx2PLozrC0q2aUNjwI3C7SlSly",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon21()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 9175,
                    DiscountPercentage = 359.0,
                    StartsAt = "2017-05-11T16:55:30.000000+09:00",
                    DiscountUpperLimit = 8152,
                    Description = "UQ58sBnhaEXAyIyaay2Syor3HyxNBH1CnACjKH1DdYiF8IztKeOSqjRQGitjxX4zx1YTGzACUOEkDzfpISMlgsgi",
                    Name = "r9kGjU18VufdqvafACSJ0Ljzyu4i0lnPjZT3OHrOeCqPlHfmF4U5a9Nhx2UqiDLG1RGl9Bv3AyyoJoq0jAqBuePyrr8V2GO97hPpZXOPrgZ5qwflcYY",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon22()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 7839,
                    DiscountPercentage = 2495.0,
                    EndsAt = "2025-06-11T16:30:26.000000+09:00",
                    StartsAt = "2019-08-24T10:13:33.000000+09:00",
                    DiscountUpperLimit = 4886,
                    Description = "oUcAew1GGeXdneaWItVBtSv4swUJGYTHferlbDdZIOLS7ZBU4DJ3rKLRUer8QIJ1pW9y0ClIoWDzzZIzMd9T5AhgGU16mPKVlopPtJHqj4FrU0GATxweKVDBhar7TIWshlZZvb6weD7doNRdOVifA9xsWDU1KcZfZT0N13EiTbZ3qKh2Cfuj0CZjqihxKWyc8ZhTPprcPW",
                    Name = "OExl4ITZ5drRmXErRa0MPjJl6u8AP4bW8fjw9bqUk78JvmSjnPgsoEmgTZ1V5ev1iTuAgGUOT",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon23()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 2580,
                    DiscountPercentage = 7622.0,
                    DisplayStartsAt = "2020-06-29T02:48:36.000000+09:00",
                    EndsAt = "2017-07-02T12:58:16.000000+09:00",
                    StartsAt = "2023-10-29T21:00:44.000000+09:00",
                    DiscountUpperLimit = 2991,
                    Description = "nilDhThMx8K7Pdt6LlXogE3PADm6rXD0fWogbyOzGXITgfFno8OSbD1Wd1mKf1AP68p94mD9XU09Q6LuIs2iWPXZeAxVOUjGCIinXD4apQotgIEEofvEiRLJXZm0u9i3HWKXB6TRuW0mkj7e07plcKWHU9RJNboWtUpXW0wwiYq9cM8bc518R116IZYeGT5jhL8uveRI4oecOteOcLHYvcpwvQ2YfdzFun4DXZPwvYvIiuFnaN48xlCqycqF",
                    Name = "GDLa4yVPeF69H596dCbIOmyUhK0CSwKIwMwViK4fG7Fc9REsiKb0cBS4UBXWPfCuKM8tHQ0CvifWfoFpur0rV234f",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon24()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 6260,
                    DiscountPercentage = 1230.0,
                    DisplayEndsAt = "2017-06-30T06:17:17.000000+09:00",
                    DisplayStartsAt = "2022-10-30T05:03:59.000000+09:00",
                    EndsAt = "2016-03-13T01:15:18.000000+09:00",
                    StartsAt = "2021-07-02T16:32:38.000000+09:00",
                    DiscountUpperLimit = 8584,
                    Description = "x6spDLxxQF1Kcv76R0HIaP4e4KOcYIV5s2ymG7B8b6LXQIMQCkABhfpM6",
                    Name = "ST85405ZOvS4IHggroJKwFy95VhpvfGI54x3BIeeuI0Dzb9KKXYbimBbM8uB",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon25()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 7689,
                    DiscountPercentage = 851.0,
                    IsDisabled = false,
                    DisplayEndsAt = "2016-10-10T00:43:43.000000+09:00",
                    DisplayStartsAt = "2016-10-14T06:24:45.000000+09:00",
                    EndsAt = "2022-01-27T09:53:57.000000+09:00",
                    StartsAt = "2022-10-14T07:45:02.000000+09:00",
                    DiscountUpperLimit = 8498,
                    Description = "CM05QBSxuCoxxbinPNbRpDbrTPEyH7aTvsWfRsqhhPSpBlCTigFBuSz2oH9Z7QmzHPG7tK3eGQ7vTrgTAU8dRvDZvDfCrW2PZPwZjUYam7VooRWoZu1esharkMkBfkZvAVLC8hOGRbctGMaQag5GoyRZe5uMk2s5UYZs6l4R3uCzlK4OQ38GxdpGfoOY5q5kdjZ",
                    Name = "szTJ7T7cUbWAHtw671TbjRwIORvReW61K3DtQPZS9qBNxfdFITulxmlfw3O4jwhlBm5vPfWds3rQF6a2ui0TKfONPPqjjgce0tFAe9pNPpPgafJuVkZ0VDuY",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon26()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 8823,
                    DiscountPercentage = 4573.0,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2019-10-21T01:12:45.000000+09:00",
                    DisplayStartsAt = "2022-05-22T23:33:22.000000+09:00",
                    EndsAt = "2023-07-23T06:52:04.000000+09:00",
                    StartsAt = "2020-04-07T23:58:49.000000+09:00",
                    DiscountUpperLimit = 8061,
                    Description = "lkxITV6tqhNK32VPRMPHp4EILwXoAEpFcwhc3odWL0dVvk1PVwCL0XiSM6JFuORoZjqPMZ2lHD25dVONreqGMOk9o37Ot0mnEpSEoLOlUCegdlqafvkpEPNFdyzKn5vWJuUG53eT3jXuipX7pGx91ZtbDqAiSQVIQNYbT",
                    Name = "f37GCYehwnzWe0Ln13BCdKsBR9dqxB0EeN",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon27()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 4139,
                    DiscountPercentage = 3442.0,
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2018-05-10T15:58:56.000000+09:00",
                    DisplayStartsAt = "2021-05-20T21:26:42.000000+09:00",
                    EndsAt = "2025-07-18T12:51:53.000000+09:00",
                    StartsAt = "2020-01-04T23:51:26.000000+09:00",
                    DiscountUpperLimit = 2199,
                    Description = "eKR0XYMGFmmPsaVc9agIfM5IgckburfSGNYf7J4xubsDSoAQ1qAhQO8MY90hCQgMXIWOHtILFQ2LUvSTNYRzq2p9FWaqmelIQ1RdRRtpUH1BCFcA3tPjkoyh8yLqKiuMLU0mG5Q3V9ItMj9pEqOKCvBlvuAdAJMO6IlYqwARFGtAh",
                    Name = "w4BMj5dAxtZ4L3qTgLkJNvynQXG0SEoRF2iMz",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon28()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 6733,
                    DiscountPercentage = 2566.0,
                    Code = "1p3WudHaFq",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-04-08T20:23:34.000000+09:00",
                    DisplayStartsAt = "2025-06-23T11:32:55.000000+09:00",
                    EndsAt = "2018-01-12T20:19:42.000000+09:00",
                    StartsAt = "2024-11-13T00:44:09.000000+09:00",
                    DiscountUpperLimit = 4911,
                    Description = "wNHrtp3MXNfbR77FQeUUAZ0azeUeq6MXegmCoPfQ3OZHG2PhWYd54f4OKvKfsg5BwLwRIE9bnA0yVvQjIqFwcTbCuxX8Te6ZOBsrbd90n2pBARZM8GzcLF8gtXuoeb",
                    Name = "r3zkszhUouCt9VgQ3dsuHl9NYnAnmkYmoiM",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon29()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 8407,
                    DiscountPercentage = 7884.0,
                    UsageLimit = 5212,
                    Code = "EWwgU",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-11-06T01:34:40.000000+09:00",
                    DisplayStartsAt = "2019-02-03T04:43:53.000000+09:00",
                    EndsAt = "2024-06-24T00:41:35.000000+09:00",
                    StartsAt = "2025-01-26T22:32:05.000000+09:00",
                    DiscountUpperLimit = 2111,
                    Description = "j2UpPHbz2K7hqhIHJTCO4BKJ5N2AYie7STzSQA2cDPRjVz26rZdeYyGAyHYcG0R4glQlb6Ev5YkxeSdN",
                    Name = "q5sm9cHG7pUIM8jZ04",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon30()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 8443,
                    DiscountPercentage = 4396.0,
                    MinAmount = 3237,
                    UsageLimit = 706,
                    Code = "v9pb0",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-04-15T13:29:04.000000+09:00",
                    DisplayStartsAt = "2024-01-07T06:13:17.000000+09:00",
                    EndsAt = "2025-02-12T18:15:33.000000+09:00",
                    StartsAt = "2019-01-24T01:05:55.000000+09:00",
                    DiscountUpperLimit = 7588,
                    Description = "zXNRFrTpbo0kfxCFtrjTaHeiHdhj53nf2xbaJBS7TX4mm",
                    Name = "9E4QS6ZEw9K5WYLNqUZtz5d9h24kSBlxuBKwxG4lgGqL8iZhpvFoA8J5vR4th4OC5ZN7B0NT2CtMnQtcpfNicGVhW4yUzgsD6kEEZVvd",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon31()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 5810,
                    DiscountPercentage = 2380.0,
                    IsShopSpecified = false,
                    MinAmount = 6114,
                    UsageLimit = 3048,
                    Code = "N",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-04-30T19:41:26.000000+09:00",
                    DisplayStartsAt = "2017-02-12T02:26:14.000000+09:00",
                    EndsAt = "2022-06-12T12:20:23.000000+09:00",
                    StartsAt = "2019-10-04T15:42:39.000000+09:00",
                    DiscountUpperLimit = 3676,
                    Description = "uuTaAnFeXVzsPqJaVYNcQPoehliwVDKvWUGiup5wSVIYcPRp0YdicsG4eefdcP6FrD3Uv3p8mowdyPN3F0Ch6iwOtYLpAZyk",
                    Name = "00gRtDaWC6zinkLP42aFlyD9A5wNlxgw6klr2PMu3dK2PcsSyOLaGRQyeI",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon32()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 2342,
                    DiscountPercentage = 7062.0,
                    AvailableShopIds = new string[]{"3703acae-7630-4717-8515-986582b7d16b", "1e86c6fb-7974-44c1-942a-1f2559a4d51a", "761889de-ed30-4008-ad64-918c09035e48", "1df4188c-e3c9-4a94-87a6-ad5396c3cc5b", "bd5ece88-854a-4b68-b416-555c969f9075", "5b28bb9a-aa97-4bbb-90b2-5225e3150e16"},
                    IsShopSpecified = true,
                    MinAmount = 3068,
                    UsageLimit = 8847,
                    Code = "HkQ33wGuKe",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2017-05-01T02:07:01.000000+09:00",
                    DisplayStartsAt = "2021-04-05T05:37:55.000000+09:00",
                    EndsAt = "2021-11-02T23:50:14.000000+09:00",
                    StartsAt = "2017-01-31T10:41:12.000000+09:00",
                    DiscountUpperLimit = 5284,
                    Description = "xyPggXikUygQLdtpYPjbfNBvGFT3vKgqpXJfGtqlRZh4q4lV1sMnqynpV9AfcDYmohxDmhjfHFXXcsAegCHlzCQ4mMLjaJ7P4vdX1Mbpl53Hm3XsFGlzTKiUnnWGOF6l2MS7H3zkejJ3l0ckAgNjFhRa8b7bwLH",
                    Name = "0Y3h3osyqMfvozNHqoEhmZw3z3NYd",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon33()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountAmount = 285,
                    DiscountPercentage = 8339.0,
                    StorageId = "93759274-9bdc-4a91-b618-a7945fdf8c37",
                    AvailableShopIds = new string[]{"8ff4ea04-04c0-4b25-b31a-eb5dfb9a9ae8", "594f0127-6a45-46b5-b8b9-b1166d14c937"},
                    IsShopSpecified = true,
                    MinAmount = 2528,
                    UsageLimit = 6848,
                    Code = "OOncAt",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2025-04-06T14:44:44.000000+09:00",
                    DisplayStartsAt = "2024-05-03T13:17:47.000000+09:00",
                    EndsAt = "2018-09-30T15:55:18.000000+09:00",
                    StartsAt = "2021-07-03T01:10:59.000000+09:00",
                    DiscountUpperLimit = 830,
                    Description = "GTHXefiZ2keupAiUzQH2jF7FFokS8MmQ4h2gqv981Ws9YLY8dHt9E73kW6a",
                    Name = "Y6EZfaqDgJ4U352fME5ZGT9xeSNbVGmp3wTKnfTl2HHmqJW8NwuuzSEsfpH5icHblunWyydUIMVkGrdezRcY54mzmUNeV9",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon34()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 6391.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon35()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 6525.0,
                    Name = "pUQGhi",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon36()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 6138.0,
                    Description = "ShkmSSRLlUTO8Yn4Ehkmkd1whvZy7JO11RN1ft4",
                    Name = "mQRpxg2ulQDVpOB9sGNE3J",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon37()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 9331.0,
                    DiscountUpperLimit = 2893,
                    Description = "RLkl2VzHVo48djKcG",
                    Name = "Ng7ZDIpHIVvdV0CCbrEk97W7mpZSJZH60ROYNngFOQSuMb8UFgkuQq45n7kblj6tNwEXOjCYaqDJHTZ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon38()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 1068.0,
                    StartsAt = "2023-03-24T10:30:18.000000+09:00",
                    DiscountUpperLimit = 5926,
                    Description = "LaYtb1d6bFKGl1a57vfcVsadef0QTs4NdIQJ8u37arn4SEC7nk8fOYzjhGZdfRkVW5",
                    Name = "wkiWzlxKrI8njzzCP",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon39()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 7542.0,
                    EndsAt = "2023-07-28T18:31:08.000000+09:00",
                    StartsAt = "2022-12-26T13:35:09.000000+09:00",
                    DiscountUpperLimit = 4873,
                    Description = "jPoddpH56tydfJtYkY7borGJu0c40IZBSz3xgHZ1AwI56XAlhQfS61G30fOhiGmUQKhgk8rE02yVoc52Z3vyhghCdmzJtJ74sr02ysQDbmwMYcxda3nQ9vNVbAAxigCK9UZen6YA205uuvZuSB1BMULXYo1JgaecTKuC09rzIhq2DyHZcV47STQDStRGlwvlC2OnF2I4ah",
                    Name = "d2dOtqHrvyJBCpPik4bnPEThVDg0mONPiUpx3rlgwrst6SasOh77PjEf5mDaER2JL7lgpiLxyx1VV7KI8rkSEUF",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon40()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 4970.0,
                    DisplayStartsAt = "2023-06-30T18:25:19.000000+09:00",
                    EndsAt = "2018-10-19T11:13:09.000000+09:00",
                    StartsAt = "2016-02-27T04:45:52.000000+09:00",
                    DiscountUpperLimit = 4739,
                    Description = "CX0aD6e5glCCCvcQ19I6FvC9NxCfGioP8ql7EbkMN6iUYqLxyZrUbidly0idO6zPlME3RDSkhYmlQYiWsj7N4Fl6u74FFr1WgNjNg75d9SRzrcYyD3VWAvE1ORjth88kCLo33HUGqinjvY7PZQWM1UUAjQFCZ970DiUBbhZmV0tnOGG4wgnMfuRtWPOwsbPmAP",
                    Name = "w0p35zoMfVcMiHySsmEvqOXL7QRSKR0w2CCHgv9zgIMFmS1aFdoYgD4pGvNKrG3QK4DdZDGtlxt77guCnOurnFOncxB7",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon41()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 7245.0,
                    DisplayEndsAt = "2019-04-05T07:03:51.000000+09:00",
                    DisplayStartsAt = "2021-11-03T23:28:20.000000+09:00",
                    EndsAt = "2019-12-15T13:15:25.000000+09:00",
                    StartsAt = "2025-05-09T04:28:53.000000+09:00",
                    DiscountUpperLimit = 29,
                    Description = "cIhl5krj4fUOq1CfGNWOmY9BNDa4lsA",
                    Name = "nksuOxf5H67glsfyGprIcledj6Q4HlSPmG2dYTF6G2v4m0xIBXPBFhUZBK",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon42()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 8580.0,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-08-13T05:49:54.000000+09:00",
                    DisplayStartsAt = "2021-07-29T23:14:55.000000+09:00",
                    EndsAt = "2018-08-07T01:08:11.000000+09:00",
                    StartsAt = "2017-01-20T07:35:42.000000+09:00",
                    DiscountUpperLimit = 2993,
                    Description = "vcFwiG3mV5fMSQGlOFPOD1DwxfMIJh9PMyfiAiomxyfLxf6P0yt3LJN3iuqW8IkBGnI2XGSI3ME3dlOUM5zmN4DfU",
                    Name = "Xy1vsnxoPK69IsTkobSdBWGUgz7ABeOoF1KY5kpCb2JyoP4yBqxAiO7ueazhP37wsqrFmJCeeWgWxqmHNZgeaKsfcVAKqJfwFGOm52fSuxrDhSlDe",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon43()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 3848.0,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-09-16T02:34:34.000000+09:00",
                    DisplayStartsAt = "2021-02-12T09:46:25.000000+09:00",
                    EndsAt = "2016-10-23T14:11:41.000000+09:00",
                    StartsAt = "2018-03-10T05:15:06.000000+09:00",
                    DiscountUpperLimit = 7874,
                    Description = "zKYSfcBh1D5sUrSootpe20jcqcZ3HSb0rMXqrJXLnOyOeK8L5EUKWT2iLaoSdw2VurlXSDOuQp0lYPeII6EwfFijJFVA3ab9C6ctEeyipLfKzp97Aq3GUnVpzvs157Y8GdJ1rvuNwESNxQESeWBgCXbn3NwATBR1MaBuOQVi6XMiRuZ8oB0IDGCHwWGj8gE6UYTOW",
                    Name = "aT0isvx3X6LX",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon44()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 9186.0,
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-08-13T13:35:42.000000+09:00",
                    DisplayStartsAt = "2020-04-15T12:40:12.000000+09:00",
                    EndsAt = "2017-01-21T13:01:42.000000+09:00",
                    StartsAt = "2023-10-11T20:36:35.000000+09:00",
                    DiscountUpperLimit = 7830,
                    Description = "EwKpLvw7pA1p8PIGB8Xw2QDtjrwTOzsXGLRtNlkFbOOpxTB83XJbwaKtSCRS7RLF6xVw7lfVwBVTXP6qZLs6GTPh5NmeBq8lyAKr6wMvo14AhOeNi6OzsriWDLxfNSUPmakx1IPfgNhRn6r3ZVMLOHyfH13L2trA0yGdnwXAxGXrVKMtbThrB9rVCG2SpxPxBbgSux4dxfWUtsoweZt7WfphbE0UIgKJ9Z",
                    Name = "NiWsTP9RrAbwE6mhdPQ6lsSaBHTfAsntm3Ri0odG5Im30O2NXXaS",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon45()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 2373.0,
                    Code = "qY7Eo",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2024-12-01T00:44:59.000000+09:00",
                    DisplayStartsAt = "2023-03-17T13:22:48.000000+09:00",
                    EndsAt = "2021-05-07T23:27:22.000000+09:00",
                    StartsAt = "2020-11-25T09:17:30.000000+09:00",
                    DiscountUpperLimit = 8378,
                    Description = "BwBWhe5fSdTd39SVyWyaTYUWgIqJazsARut1kZkwK0apLdjSjxmJgqGT2TnQcLSftuxW5t04YuaG",
                    Name = "P2D0rpTQfrQPMcMZdFyjLON8Ocqreu3",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon46()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 3375.0,
                    UsageLimit = 5870,
                    Code = "B",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-04-30T20:26:01.000000+09:00",
                    DisplayStartsAt = "2019-08-20T23:47:43.000000+09:00",
                    EndsAt = "2018-04-27T15:57:29.000000+09:00",
                    StartsAt = "2018-12-06T11:22:42.000000+09:00",
                    DiscountUpperLimit = 1923,
                    Description = "iFpc3binQQ1fNRYDMtwKPKMI794p3eAFhGKrX15HVfX9LnP92WocVDB4oYvpIk5AVZAm3Z1d39PY46fQnE4uLf3L1wVMdAT2zsULrJ7kHKCySmA7jTtNXXTKQH59OFm7pYZmp5IimBraQsMGASBzErfhKFgiKCbJ0YrISDLYpJeaO3MdKw9Ca0fDKU8lcojMPtQNq5kZD383MeRE4ocaDU88k4WxdaR7vLeaXnPLM3pRnDfb",
                    Name = "ootEVlmDVKJd6QA1pTyhDfgAPDvC7ES4Lk4KPIz9kPFuJQbdgh4YEoOV3HEsv5f",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon47()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 8515.0,
                    MinAmount = 573,
                    UsageLimit = 1462,
                    Code = "CH96",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2016-05-21T09:21:01.000000+09:00",
                    DisplayStartsAt = "2022-09-21T18:23:05.000000+09:00",
                    EndsAt = "2017-08-27T07:09:28.000000+09:00",
                    StartsAt = "2020-05-14T00:24:26.000000+09:00",
                    DiscountUpperLimit = 9155,
                    Description = "dstCfraFvFoFH234Ho0fPGACUwgOCcSeRjPc5YesYOsFUMeDpISXfpzHKm66qyjENphsgf",
                    Name = "VxNeZkS",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon48()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 8003.0,
                    IsShopSpecified = false,
                    MinAmount = 4697,
                    UsageLimit = 5025,
                    Code = "A97fxv2",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2019-11-29T01:40:00.000000+09:00",
                    DisplayStartsAt = "2021-09-21T02:40:41.000000+09:00",
                    EndsAt = "2016-02-20T23:56:18.000000+09:00",
                    StartsAt = "2024-11-29T10:33:49.000000+09:00",
                    DiscountUpperLimit = 4505,
                    Description = "2o2MP4GWIMni2L9UtViIKIv0gzzpGWl1CkyZxbY8aX2uVXR3Xf7kRglo7yoUZBUovBHGb",
                    Name = "kKF0XMAYYDDJKXICYQUfntTLNIuYDkdtucxJUHaYMJQ73Q9BIld21vuf9MfDy9p3C0bZoGV5GWAQcGARQ5SFMowmLbUwlTUtUapOx0nG6zXz7zWgBp",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon49()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 6550.0,
                    AvailableShopIds = new string[]{"d573d001-820c-4269-9c9c-9576edb7d301", "6b919922-5778-474e-a535-3455f7bd8dc8"},
                    IsShopSpecified = false,
                    MinAmount = 7464,
                    UsageLimit = 9617,
                    Code = "jhqkjP9I",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-02-12T02:05:25.000000+09:00",
                    DisplayStartsAt = "2025-05-08T03:28:04.000000+09:00",
                    EndsAt = "2019-08-07T15:19:49.000000+09:00",
                    StartsAt = "2018-10-10T01:34:05.000000+09:00",
                    DiscountUpperLimit = 3365,
                    Description = "CUxtyh9KLEADMxLGFcmLLAgFwowMfd5Hgcy4PIfgEOPJiuSAI3wdGhoR4YLd9PGseZNLOSXxzZjsgYqlv4lS7JmDio8Y",
                    Name = "exI6lAj7RwUkuKKzTBzLC9N3S3s3ZTNWTohRFFh4bR3dyNU2kHj11X28ple28x2ieTa5qfwK1MGnTi36SIaSUJUyfL",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon50()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "ff380b2e-d78c-4ca7-9063-defb993ef71c"
                ) {
                    DiscountPercentage = 8919.0,
                    StorageId = "cb010321-4115-43c2-983c-6439340440bf",
                    AvailableShopIds = new string[]{"665147b2-402d-449c-a0f6-852cd45fb8a1", "8a36ab5f-b182-4363-be47-bff9b7f68633", "b6853099-c4d5-4f7b-930a-026c79836abf"},
                    IsShopSpecified = false,
                    MinAmount = 5315,
                    UsageLimit = 315,
                    Code = "aOpM4ij",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2016-01-05T18:22:56.000000+09:00",
                    DisplayStartsAt = "2018-08-30T00:40:22.000000+09:00",
                    EndsAt = "2022-10-14T10:54:26.000000+09:00",
                    StartsAt = "2022-07-04T14:19:50.000000+09:00",
                    DiscountUpperLimit = 5071,
                    Description = "lH7MdwvXQvHKr6YD2UzCXZj4yIHE67mSnCRlAzKmvF67uY58W9tBgUg25dAuMaeoiZYeTMxvhI4pGmgDP",
                    Name = "gEeOPxPjZEzGWoDa3UZOzRAl1qTt1B6rriWxLrRQUs5RH97nvyJWaupWKtn8RQMwmeoz5yZ8yOBaLxcTyNGPrgCblDLImKl7QnpsFc1E",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
