// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCoupon0()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 5191,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon1()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 2959,
                    Name = "fIfeAIGZfO7OrSr8B2QPQ9Y2Rpsj0heI",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon2()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 9777,
                    Description = "cWBx1T31cQtfbPCATbfETgM8KooCtS8z1fc4bmpdjKCTfj1GK9RSuRp80JIGIfZb0zQJuIdXR7obZEoGLvyrYRSePLUjWmS1Vfe4rF1Hr4pu5zkebHCqAbvDaj08T6AqfU9VC96cIIeErItINWil5tFd5fwAxEmAXCuaDk4OeOYMd636fXlQmJ9z2bnV3FEVOMMOncgSgfpnmC2KuXyRgGfUfNENrDu8T1J2YZjgzjmCRB6Bb",
                    Name = "dWS6JCIu",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon3()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 2989,
                    DiscountUpperLimit = 6293,
                    Description = "5OFNrZXER72QaNrZpzYfcTDxwidoKxhgH4IlA44068ievlutMBS788il7UEqSzLy9xJxJq4hHbOAXXYVgVjKzFhmxuYV64qe5o2B2OlLXdk5kJbuw4YuJbyUdwtweakDyg0TFsZujDlCiTABlfIhphFt9MZHKK4Bljx7sJ424DF7dkePprAJuqXJLC9DlGjqYc53kHtf9cD7bpNKlOmIqFEpEzlkbZXsHeK96",
                    Name = "7zZjofXop8q4Bfps6VchHwOSBaSPaNKxM4bPYPan8UYIRAISeS032nbwP9uwXrTBWthKP8SFB1epaCsenfT",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon4()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 9558,
                    StartsAt = "2025-03-15T18:20:56.000000Z",
                    DiscountUpperLimit = 8218,
                    Description = "MgJI5wZ1cKhV863o3fLMEPLjDOHvTYhO06QE7ACXnugqJAsKtBEhfGR87GnzBbDtq5K3lfoJShMC6uD2oZ5QpD7GXwDffXUtXBf9of2MaByNhkorzLzXS7sax7iYOPlAj5UlMDxo6iDarlMDzJC7wMAkFYNemkzZpvDvog0lglLv2T90aOF7qLZJG6mWFW8mYG8iBpA9wK7FerKmMDJDN9kjnEAtWkM10yTZC3mt5NbCfjtxFXhJHy",
                    Name = "Zxe38yvM1SEczLfO3bcMSuKdq3FslGbkH",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon5()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 7687,
                    EndsAt = "2024-05-09T02:17:10.000000Z",
                    StartsAt = "2022-02-20T18:19:01.000000Z",
                    DiscountUpperLimit = 958,
                    Description = "hxbbT2umORVj1yDfkPqeu7VGzhCxzDjEPJsArCV0qEvJPpVoq77PuYo1FVSdDE8cTf3i5qFGBCHYpL8ODBvwgaMAc0JPVvhl1tkrYQHQhhRs2PIaofbMQ1Wyxx6iPX8wNVpCNUyiEzApKM66ZkEOto1oTpzcZyDOIWVw",
                    Name = "oFQcmGYbDKlivyrCrMwSNsOLmKdqXCCeTbwp9jz",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon6()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 65,
                    DisplayStartsAt = "2021-06-03T04:32:45.000000Z",
                    EndsAt = "2021-06-18T15:44:43.000000Z",
                    StartsAt = "2020-03-03T13:28:57.000000Z",
                    DiscountUpperLimit = 4325,
                    Description = "ybVqp1YrzurkqIAwcJ63x2Wplk",
                    Name = "qrFdjX6CETl764u1bEUuZsZXEigsXHGq2ofRToY5BXgCj",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon7()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 3785,
                    DisplayEndsAt = "2024-11-13T20:09:29.000000Z",
                    DisplayStartsAt = "2020-12-08T07:46:34.000000Z",
                    EndsAt = "2022-05-18T05:31:53.000000Z",
                    StartsAt = "2020-05-07T19:52:35.000000Z",
                    DiscountUpperLimit = 8590,
                    Description = "XmOEMtSXxzZokGYkRiArikW",
                    Name = "ZSvWA49o8HQUEwyp",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon8()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 6721,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-06-25T15:59:22.000000Z",
                    DisplayStartsAt = "2023-01-31T02:27:56.000000Z",
                    EndsAt = "2023-03-07T17:36:27.000000Z",
                    StartsAt = "2024-01-19T13:32:35.000000Z",
                    DiscountUpperLimit = 6150,
                    Description = "gSDOAS6m6W4ycEKeHr4636lRXTr2iPpZt0j1CI3l6J30qBjXV2f99mPOolq1eiW9RuNHXLsbYmrfHwiW6AehvKLu9jSykyDMxjQhXvqsNkUwpnxOJbMzTMi5NaDqvIkEgkU1iGJo4Veu1nD62pEennAfXO8IbuWWi93UYO",
                    Name = "WoEzm8A2AGl9yivXZBxfQ6TXMiAoASOIgsAFMRnA6RqJv3Yoi1HNQ6SUUxfHdkFZrSjoj4E906hjOODSKfXhRhf12fH18u3lWSr6bxBxhq8hzLJKGl7pegu99iL",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon9()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 8236,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-02-18T15:51:40.000000Z",
                    DisplayStartsAt = "2023-05-25T13:25:27.000000Z",
                    EndsAt = "2022-12-25T17:05:32.000000Z",
                    StartsAt = "2025-10-19T18:16:29.000000Z",
                    DiscountUpperLimit = 8163,
                    Description = "eRH09p3Djf3UXXM3TuFXvJTrk8Ursx5VM8uakcEIyxQz7D46SGfEdpD0URVkFLTmlxp8SI9cXescrmSD5nkp7THGlyH3t2HB4wHFbCGx0Xzqx2wtaKpu1qdmiKn22F3ctIsxTTV24W3iMjgCaf4v1F7zb24",
                    Name = "TvVYyzGoNYLIXxqonkMGqX",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon10()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 6892,
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2025-05-06T23:59:55.000000Z",
                    DisplayStartsAt = "2023-09-26T04:04:26.000000Z",
                    EndsAt = "2024-12-23T14:16:50.000000Z",
                    StartsAt = "2022-03-19T23:37:53.000000Z",
                    DiscountUpperLimit = 6391,
                    Description = "p9nn9cv0p2uygmHKqGnnOeMtFto3ZtBMyDD0JldWFE85",
                    Name = "jbUaTENhmx5ChLqBvfWnrg6wEB880lMBDEtofOwuX4DmXscPUoeV1XH78h5Guqwmdx9H0OP7RXsy9p5y2A7XdzXIFXZ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon11()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 5390,
                    Code = "bjsii",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-03-01T21:18:37.000000Z",
                    DisplayStartsAt = "2023-06-05T01:45:34.000000Z",
                    EndsAt = "2020-12-20T19:43:37.000000Z",
                    StartsAt = "2025-02-15T19:31:27.000000Z",
                    DiscountUpperLimit = 5528,
                    Description = "XZ0lFTg0",
                    Name = "buQwKeaQ4HWfPuDn8vtLGTKy9baAXpUrNxQgJv2d",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon12()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 7857,
                    UsageLimit = 6890,
                    Code = "Dvx",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-05-13T20:18:21.000000Z",
                    DisplayStartsAt = "2022-03-07T15:34:04.000000Z",
                    EndsAt = "2021-01-27T16:37:18.000000Z",
                    StartsAt = "2021-05-18T05:10:41.000000Z",
                    DiscountUpperLimit = 9448,
                    Description = "M2eopmIlmvqzqnGOYbg6rdqjemTbEPE7it6nxw8VlzyCNbz8zcALV0qfahEqSWpbWk8lIjmXf3crokuVBQQlsA8T5nZUMuDqspHuPmGiUoPteza9Foxx3GETJuunMNM7JUVu7YgDI0zSm6",
                    Name = "cU49za1QJALcpDZJ7YKoaGZqFQRMYj7eI0OiTgfPr68fP2A8RCqV",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon13()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 9225,
                    MinAmount = 5907,
                    UsageLimit = 7530,
                    Code = "MZulltZtjg",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-02-19T06:13:26.000000Z",
                    DisplayStartsAt = "2021-09-15T03:46:42.000000Z",
                    EndsAt = "2022-05-18T07:31:16.000000Z",
                    StartsAt = "2020-03-07T16:49:15.000000Z",
                    DiscountUpperLimit = 1459,
                    Description = "QgsidEuf2NvBHeZX8hYKnrzJWptMhyWUi64YZ",
                    Name = "GeyCSFHt3mcrCB8tq8q2IVY2UPxEK8mwHnigIC2xteLEmOps6u4P22rjT4dupTBgLrwJlYmSqD3jh0KtoQaeaW3v7wYe7b9HTOa",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon14()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 7829,
                    IsShopSpecified = true,
                    MinAmount = 4727,
                    UsageLimit = 428,
                    Code = "mOJ",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-07-14T04:13:02.000000Z",
                    DisplayStartsAt = "2020-01-21T11:29:07.000000Z",
                    EndsAt = "2023-08-16T09:10:21.000000Z",
                    StartsAt = "2021-02-28T20:31:09.000000Z",
                    DiscountUpperLimit = 7154,
                    Description = "gVZwJO2xNcltqUbvpNyoJI0vqJ8n0oUjQYsKaRMsrJUacY2rYQO4gmGHCfbUV5BkcqYiSNlDYC6MEWefziiHI3EykNpjwCPjAkzyY2kmUe2JJ53U3N6F0e26pbO3HttlG4eyiatMI7VF3dtugJSz1Q3vovXNsgFsW05W19aXuGVVRQlUVJv9CZ2ZsBhmJBENJ2Jp2YLnPueitIaB8AWaFb8JKCZbl1FLUJSG0fudQ9bvTSzM",
                    Name = "BL1Qigyh82R8yfv5oZ1A8LucSTZwJytxSEpRfXYxFxMDsqe8NITOunWJGeGMfsCgwJoSsvq0p2vMuqT6yOdp5xmnGGOh83wDY3YT1DlU5jqThl0v0LlAw1sxsypK",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon15()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 4754,
                    AvailableShopIds = new string[]{"7d1e645f-8497-48d0-94c0-043c92beb3d5"},
                    IsShopSpecified = true,
                    MinAmount = 4,
                    UsageLimit = 9533,
                    Code = "h1",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-10-18T22:04:27.000000Z",
                    DisplayStartsAt = "2020-06-25T04:58:35.000000Z",
                    EndsAt = "2020-07-02T22:32:01.000000Z",
                    StartsAt = "2020-06-17T11:07:30.000000Z",
                    DiscountUpperLimit = 9150,
                    Description = "x9kbbfwykuboyLPrrY2btuxHx9YophvSLqEzRt6XTR3oDpLSuhWGSp4IuNXEvAYv341undTljbWPhfpiwPMjupC65xVDnAJbsKD6b895iftqbY67Ut2zsAKH6lKT6gJXbaEKAddoUM0CRdaSDeoQ9lXXELG9oQdgpEse81VvpXr3HeuSevupI3Lg6cydG4CQY3zROLCcC3cDzGwCmJXH",
                    Name = "iF5C2",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon16()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 9717,
                    StorageId = "52b1e4fc-def0-4c67-b048-ac5ea5b94670",
                    AvailableShopIds = new string[]{"87b4b7b0-21a7-4f7d-85d5-b5438701e8db", "3d95741f-9140-445b-9729-26c21dbc8e65", "6ad79143-d344-4727-9e81-c8927bb7f194", "64cac04c-4259-446e-8536-26bb1ea692c8", "d7d5149b-6469-4d86-9689-7492a75eb858", "507e816f-1f40-4ca1-875b-c01ececb7cb0", "1a0bb43c-d539-4e69-a8f2-628818f7201c", "23e318d2-21ea-490b-b4e1-67e5aa91563e", "8679d6ea-ded7-40cd-b92b-62c5d201af04"},
                    IsShopSpecified = true,
                    MinAmount = 4475,
                    UsageLimit = 4774,
                    Code = "3X",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-07-15T02:38:58.000000Z",
                    DisplayStartsAt = "2022-03-23T10:34:39.000000Z",
                    EndsAt = "2020-07-26T08:52:20.000000Z",
                    StartsAt = "2020-11-20T12:43:36.000000Z",
                    DiscountUpperLimit = 1824,
                    Description = "BJJ5t6h3IPcBKQDcagEkitF8iACEva8PGaDArnv6F3HhJclpvEl0kBLWjkC",
                    Name = "0Mj5I3Hqz506kx1IdZKDkCNCl989Inr9h5bKrK2A0mcFTtdvdsEkzDVoxJr0lAnMovtOnbZ68JstsOcxw5P",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon17()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 9660,
                    NumRecipientsCap = 9968,
                    StorageId = "be1efd61-d474-44be-a346-e09c35cac798",
                    AvailableShopIds = new string[]{"f3956cd4-a7d5-4fb5-9740-48a769426835"},
                    IsShopSpecified = false,
                    MinAmount = 9100,
                    UsageLimit = 9837,
                    Code = "YIqjF",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2025-07-03T10:01:08.000000Z",
                    DisplayStartsAt = "2024-06-06T09:10:54.000000Z",
                    EndsAt = "2020-11-12T09:01:13.000000Z",
                    StartsAt = "2022-10-10T02:03:17.000000Z",
                    DiscountUpperLimit = 1031,
                    Description = "VX7m2aCCypluKCuWAlkVHsDkHFJvihW5VcQOv2mc2ISnCuuu6HEZICTUsFd55cysKpzPw06buTFvYo4vEubGw6jVHah2jNyPqoWcQPdnYsCcbQIY2KFXsspdkpVkTBJa3OTrsXs88kJNoIZ",
                    Name = "azm0l",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon18()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 5847,
                    DiscountPercentage = 7376.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon19()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 9484,
                    DiscountPercentage = 806.0,
                    Name = "Z7efHVp4Du6bqVzq0H9hNDIpWOGRlL4QDCIWrLzYwdZH6RYisLngmui2yyfAvCUPPfC6gPSyCFjnlF5wS89FXtStGksu",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon20()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 5578,
                    DiscountPercentage = 3283.0,
                    Description = "3uI6YbNMb4YSuPWKo7xO0kav9UABs7zcSSckrHrP7zrKa6Deu24AbEENpv2mR4vcFbZYPGyrsGLqJFlRMGfDCisIe5qHDsMdG7wb",
                    Name = "KEpXzySqqc4sXPad6xuwUqi64YRTYtsOeEN9XbwlgwBy5OkIYkbdAf4PBqh2Y5zV0C85Vn4l2htJKp8EeWwIb",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon21()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 1052,
                    DiscountPercentage = 8852.0,
                    DiscountUpperLimit = 2773,
                    Description = "73CECtq6YH4jk",
                    Name = "jZI7iaSuegvmESb5ZkkQma0HXRKUqv4lzkwZFtSWx4aRECgS2Rzs2ylIq5ZtrGXVCQUhbREfojZVoiIjURbvF5c",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon22()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 3061,
                    DiscountPercentage = 6265.0,
                    StartsAt = "2023-04-03T14:06:46.000000Z",
                    DiscountUpperLimit = 7489,
                    Description = "tbiunsY6SNRraYwc8QDfAEfV4F8XUQw7FOCvHUkEBp2LxsthHBe9",
                    Name = "WUoT5QLe9Yg2CBY3rucfBues6uHoyn0kY9tu08AkjC0WPKbQvYow9FaOH3zD7SQmRuyNCM",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon23()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 4234,
                    DiscountPercentage = 8072.0,
                    EndsAt = "2020-12-11T20:02:56.000000Z",
                    StartsAt = "2020-06-04T03:34:31.000000Z",
                    DiscountUpperLimit = 5452,
                    Description = "UAKK4AYXStTHGYGCT6FSvry2ciGzpWdg5yn158N5eaT1YQUtPEMBFK5RCvbOFISTKPBIbnB4IlVfzKQeAZtwqv4AGYkQ5YWzuO0mrMzlLTVYxU13omHKmdh2ng7xlmB0D7qlClsr3peE1RPsdDZEoaT5osfv5Au45ikmQzjXEIrL5tEVsPccciqGzpCuGxgjotbAnDFm6nBFTBcp5MgKi6djde9q9Gx06zspIhW3",
                    Name = "gmaN6JcrvmX5G7cBGoNqTURH3hLLIVR7YcRrTeQOsLdvK2PUyIdpshyxjFJxJ7Fc",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon24()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 7786,
                    DiscountPercentage = 2743.0,
                    DisplayStartsAt = "2025-10-29T02:13:45.000000Z",
                    EndsAt = "2023-01-05T11:43:30.000000Z",
                    StartsAt = "2021-05-05T12:10:12.000000Z",
                    DiscountUpperLimit = 8107,
                    Description = "0WRFS5iP8DHnWS95dKYCDWjMDqXUFGoRA4XvfiL62Wv2vl8qJafcw",
                    Name = "BDpLTRN1a0lar5cvmWk6HP3Edv56q9t5VGuIJJqB3hC6IgJljp1y8KOJgfu",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon25()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 6324,
                    DiscountPercentage = 3718.0,
                    DisplayEndsAt = "2024-03-20T00:24:38.000000Z",
                    DisplayStartsAt = "2022-05-11T09:54:28.000000Z",
                    EndsAt = "2024-11-11T09:35:23.000000Z",
                    StartsAt = "2022-08-26T18:42:18.000000Z",
                    DiscountUpperLimit = 5929,
                    Description = "sPLKGiMRgfz5jiMdvRW63Z9043h9SU3fTD5o4Kn6TQ5PsH9YtmnNiOZyV9AO3DnB1YRES4xlc6449ibwy8gDnWqdIP3eIh1PycrJFKeRKa6OogwkyZYeik5qw2qVOD7lJwoEqJ4uimGtF4vDevDABoV1497oKjyplK",
                    Name = "XUyjuZoAdZa",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon26()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 361,
                    DiscountPercentage = 5122.0,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-06-30T15:35:01.000000Z",
                    DisplayStartsAt = "2024-05-24T14:26:04.000000Z",
                    EndsAt = "2022-06-04T01:57:55.000000Z",
                    StartsAt = "2020-10-20T07:21:23.000000Z",
                    DiscountUpperLimit = 4202,
                    Description = "KemD9IJVji3EhQ10nakJ4Xx7BosawhL51XW0ltZ8tyBqdUl09HCPEoMCgQwCdLCVxkfS7LC09h1a33P4feIw8rNkq1IJcIVXzbXoLITUciADNRcm8cr7h7uvpVmJgh2hspBOtxaFVpQwu69vaYb020lVhpK1ujAV4SIGQkIPmfa5YJsZSIV5H0hKFZRjFJsBJwxE5ymHkkfvwj75uGxXyxLiKvyAHQ0Cmh0GR2iNpQgbrTS2",
                    Name = "EffP70DHCUohTMu269OO6DIw88je3Px2M6UQ20lAXsAZIDxFXqpctZUoXMEwvfZIhfCcdWRRW",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon27()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 8100,
                    DiscountPercentage = 2800.0,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-09-15T22:21:06.000000Z",
                    DisplayStartsAt = "2020-12-23T14:30:03.000000Z",
                    EndsAt = "2020-07-20T16:22:11.000000Z",
                    StartsAt = "2023-05-31T14:14:35.000000Z",
                    DiscountUpperLimit = 9313,
                    Description = "HDvn680BNVo61whu52VEWHzeXnCqnnjKe2ZokcQxt9okwN5c4Mkgq5YYKEEntoCEiLAHJ2sW9FitjutUJJsIkCXGENUTkzcX2ykkKJlN107OaiUpqdHMS0BnQNQ8yntRPdiO7nDWAmmXsETvex6EwUtMqxtCSMEZWLR3IYMZq",
                    Name = "ZQp71KYV2dqA",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon28()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 7784,
                    DiscountPercentage = 2688.0,
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-04-02T07:11:07.000000Z",
                    DisplayStartsAt = "2025-04-26T08:43:40.000000Z",
                    EndsAt = "2022-03-04T22:15:30.000000Z",
                    StartsAt = "2025-03-31T08:49:04.000000Z",
                    DiscountUpperLimit = 5339,
                    Description = "aTj6CKr7da3Hc5MrDSrYQmTFD8MK4LhwIRladKEnUCUBMTsHjSLXQWZdqZHXOS9NchMxuvMOV5pE0ThIcNVnpd1n04FvafoOT5XflXygJfyBJl1nws6Ne3S7kdpHli9FCf9vj51iwXi5vVkai7fMidPllBkchJ2ELHNBkuEPtWGn6U1tknXv7iBjpuz8kXfTQVt",
                    Name = "q7nYSMGg6A5q48d0VvhbqvZRxaI0AVDH5phIrM988xOpACBuWehCLI5Ithzp",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon29()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 8065,
                    DiscountPercentage = 4401.0,
                    Code = "sbw0fi8Tfl",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-03-22T21:42:53.000000Z",
                    DisplayStartsAt = "2023-02-25T00:54:22.000000Z",
                    EndsAt = "2021-08-10T18:56:58.000000Z",
                    StartsAt = "2024-12-07T02:52:09.000000Z",
                    DiscountUpperLimit = 1397,
                    Description = "uDN5NO2HkiJUlQ4dKgR3uo3pyHQKCLEzAV2HW0T6wtgFowhjkpuax7inTCKJlAlkDX0z9k4WtlP60t1pGDCB7WpLioRLUylhwp3jBXylmnzTDYQPTQEhEDpiIl88uXhFr9tzNaCFLhrW7Qg",
                    Name = "63LOoyDRk2frbKYD",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon30()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 4980,
                    DiscountPercentage = 8408.0,
                    UsageLimit = 5505,
                    Code = "RSpeSviFk",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-04-19T02:45:43.000000Z",
                    DisplayStartsAt = "2021-07-19T14:56:00.000000Z",
                    EndsAt = "2025-10-28T11:06:25.000000Z",
                    StartsAt = "2020-10-14T22:40:49.000000Z",
                    DiscountUpperLimit = 6515,
                    Description = "LMcNwe8KEeqmGGreSt4nt1ybC0Ywm3a7y1jkUDzYlQVbUnnRBBQRDsGnvgO2bodBPeKpRFsQIEwGMkEBFs4OKbpkXgOJ3P1nM9riBWugVW8sRaEhx8aJkSJHuUfzU3cxqLSG8S4aP0CNMNfb6VowWUVfzovzP7VL5ebcijLtVhmlM6kBu7DCNg4aU7BlWsNECFWA4hHlvtcjGtIP",
                    Name = "dSKiVX8t6IuP7AfSh1iSdnomWlXA8y2vwAsTNYaeLyV7CWdrmk7DRyx2nAdRh4U2Gnj6HilrfsKlPIExrXeCFOu5KxrV4xhz7D",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon31()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 7706,
                    DiscountPercentage = 1426.0,
                    MinAmount = 3231,
                    UsageLimit = 633,
                    Code = "wKIci",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-07-26T01:22:08.000000Z",
                    DisplayStartsAt = "2024-01-15T06:13:31.000000Z",
                    EndsAt = "2021-11-03T08:36:35.000000Z",
                    StartsAt = "2020-09-12T13:10:36.000000Z",
                    DiscountUpperLimit = 4113,
                    Description = "0uBHj0xIlmI7crwjgiJmBq8x2BMoiejWmPY8qwKCFWRUhTWJtrSHM5KvGCx3jvLeQXqJ7fOtRApW564YK0LvLN69VHlYJhXH6cUQL7XLfiXA0zUZ8WIiKSeWU9z6lAbD3wpFlmsWusC8RGaBKUJdHLf9kwaxRbmzAo5vzrqC43kvR5VzS4JSx7Qk5qYm8EJV1By6vGk0FuWZ3pt",
                    Name = "SyNBcc9paWacdvlF8sKq6M8TMch0t9MLsXgvG8EYKbsPpBkO0z5h9VDX3NEhsO0rjGagOIQ6x9sSfu0zX8zdCniT7rbp4RdF8jzLLX07kGwm",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon32()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 9480,
                    DiscountPercentage = 5594.0,
                    IsShopSpecified = true,
                    MinAmount = 1848,
                    UsageLimit = 185,
                    Code = "QJDye",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-07-02T17:59:10.000000Z",
                    DisplayStartsAt = "2023-02-17T22:34:24.000000Z",
                    EndsAt = "2024-04-22T23:39:24.000000Z",
                    StartsAt = "2025-06-10T13:56:49.000000Z",
                    DiscountUpperLimit = 7302,
                    Description = "rhi7",
                    Name = "h3KP4T37Wi9g9nZZhOiq9TM1kLnMOaPoayQ1SL4LwXctk2uyuazqzFpngLk90ZBFe71DIECbUavopCer6amUqWii2uDVrmTki6pqO0f8cnptMkBRjm",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon33()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 4318,
                    DiscountPercentage = 175.0,
                    AvailableShopIds = new string[]{"49dacaac-4d87-4495-ae2d-db62263e6165", "5214c343-0b8f-4467-b487-bb78273855f5"},
                    IsShopSpecified = false,
                    MinAmount = 40,
                    UsageLimit = 9069,
                    Code = "oxK",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-07-23T17:53:29.000000Z",
                    DisplayStartsAt = "2021-11-06T23:06:42.000000Z",
                    EndsAt = "2022-09-06T10:35:57.000000Z",
                    StartsAt = "2023-11-06T14:53:35.000000Z",
                    DiscountUpperLimit = 9054,
                    Description = "T4F795unttA065Yr03Qzj1SYSblk7QSMdkkKPrtzfsCSKaR3OFn1WKJz5hhBZBCZgSERTDaoK9IqITw9RXh5VLaBXSS3EzsrMpj8GBIyJaRyweuGKy2nXN4UBPwGQ9",
                    Name = "mhvxLr7QQxCiR4LJ0VAGQ0LknXBVXV6IePzMvb8rIAKhBAUImOpB9NJd0FGb0jOdIa2VbV1E7pIBf60ZOpXb0uUTjEzr",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon34()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 7547,
                    DiscountPercentage = 3104.0,
                    StorageId = "524fe6d7-f335-489f-9cc6-35c5ee40bf18",
                    AvailableShopIds = new string[]{"a5bdb8b6-6156-453e-b089-ba92fbe95997", "7dfb82d6-b3a8-4cf1-b5b1-7bc43ff6ba9e"},
                    IsShopSpecified = true,
                    MinAmount = 385,
                    UsageLimit = 654,
                    Code = "0JaBs",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-10-23T06:23:01.000000Z",
                    DisplayStartsAt = "2021-08-29T15:21:57.000000Z",
                    EndsAt = "2024-09-30T12:43:36.000000Z",
                    StartsAt = "2025-10-18T13:06:59.000000Z",
                    DiscountUpperLimit = 2510,
                    Description = "2R5bV74h6MclFLskpVJhF8OvhWGp3gTZC60RTw4fZ8zWBqSC3vDIMcnoo",
                    Name = "U2vsEkhFzbMP7H4x70jy8CyXSjsNQfhm4Jdi",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon35()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 2642,
                    DiscountPercentage = 5291.0,
                    NumRecipientsCap = 530,
                    StorageId = "d25d1755-061e-4e30-b341-9eaad8783178",
                    AvailableShopIds = new string[]{"0af94a3e-2f70-4fa5-85de-91cb93161b03", "f023c26f-020a-4c5d-b97e-2e50a6c64272", "6ff89cb8-6a74-40dd-86ee-c80439a12743", "6cce19d2-f534-4762-b356-56a8be2307d6", "3ca3ce0e-cce3-4d6e-aa40-74d2853edcb7", "c79828f9-59af-4cd3-a10a-79d42f6e8311", "60897fca-9c53-494c-95de-10baeba560d8"},
                    IsShopSpecified = false,
                    MinAmount = 978,
                    UsageLimit = 1066,
                    Code = "aOCY9HY",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2025-05-07T01:42:39.000000Z",
                    DisplayStartsAt = "2020-09-22T02:49:20.000000Z",
                    EndsAt = "2025-05-13T16:56:07.000000Z",
                    StartsAt = "2020-04-13T23:28:26.000000Z",
                    DiscountUpperLimit = 921,
                    Description = "aJMcRsZ3tfn14pqdpY2gOVzxC2AMFcqtkzhdfPKiy9SERDVnpaYhOvVB8b8Y5rPTIoQafvlfkuyBchbjOVFfaAmwoPiUeFs2qGGZk77",
                    Name = "FXigkPx1NC7bcdhHDyq2BmegmNcooOzsV0UAnF",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon36()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 1288.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon37()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 9257.0,
                    Name = "2j42XbKSjWX0mczdG92I3EQWa6MviKhzgN1WE1E9QE8I1WOtKGTOoDsggK2zVvIrNmjPyMt7JZTknlcSLOAfgHki7iEUUEZsYB8I8w6YX9AjYRSoiU",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon38()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 8352.0,
                    Description = "BYQYTGkBMdZ9gxwOlUDOeBSRiyqeameMaY0bgN8gTUkelv3hkG",
                    Name = "mk4iWQZAVafOlabiOcE",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon39()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 1900.0,
                    DiscountUpperLimit = 1191,
                    Description = "oh2DXft8ZR3ZIT5H8aSOl3MDXnG9yHqEAThwDuq1zewsMIx1hpzHiKxcCexEPrWNcD1BCJ2Q7A3yxMyBqUSnmfmyMf158jbodxUJxcIS6QwIFvAWCZsB1EYOxuNXsb8K4XyQ60l6nZCLpElUd6iH1X66E0nqBBGmKnZ6uDIn3",
                    Name = "iuFQrrgeXzyNXNrNkeWa9hW",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon40()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 2675.0,
                    StartsAt = "2022-12-30T16:19:20.000000Z",
                    DiscountUpperLimit = 1484,
                    Description = "o6RhlRrNdmMatyDW12s5SKsd06fYHa9pHdUJ2NkpD9XRln1g4q1AmzenaBAIYsPX5BEVEkSwN7Jl7UfMqNeI",
                    Name = "xDQ5mYkDBp76iPlz0WyF7I2Snzg812cd0lMhCHFE2kwBpeHriIaXxYmUfeD23BKTCZPKhRk3w9r2MS5qnBpeG29h",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon41()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 9367.0,
                    EndsAt = "2025-02-08T16:22:47.000000Z",
                    StartsAt = "2020-04-18T22:19:14.000000Z",
                    DiscountUpperLimit = 862,
                    Description = "NKIGuoyWD3BHeU5bcdtREmG3PoPoUnVURoRDP0303M0EUzCR0XC7UBINwESq7hPy7a3F5MBC2C7VfANu3p62KDWO8TDrLXiDq8ZM4HpSJ7ezaoKVM6PG4nVxadlDXYh8F3jX5Rw62VEObOlMsiJ",
                    Name = "l1b2ESaJKCDCVaIjvXY9buv1PGDaqpxNAcB7XJ2PMH0HA7mMCxlziaJ1nphI9ySRxw6pdyrj7YEb5BIbPwZ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon42()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 2647.0,
                    DisplayStartsAt = "2022-03-12T20:01:38.000000Z",
                    EndsAt = "2022-10-31T14:00:59.000000Z",
                    StartsAt = "2023-01-15T04:41:20.000000Z",
                    DiscountUpperLimit = 6574,
                    Description = "tKeWMAfjTzhjO10bQwyTU6ZUhrOp80a47LYIcD579HHiyd",
                    Name = "wYbStQsIHShYuqMOfry8huKLaun9q8fRCMt2pzYekawpUouvYHKlj0GUL0Fcnz7fEngR6pF3m54VmwYrgFgT3RyUt1",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon43()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 8233.0,
                    DisplayEndsAt = "2025-04-07T10:49:08.000000Z",
                    DisplayStartsAt = "2023-01-26T06:20:22.000000Z",
                    EndsAt = "2021-12-18T10:47:06.000000Z",
                    StartsAt = "2024-01-11T17:03:52.000000Z",
                    DiscountUpperLimit = 9405,
                    Description = "b2ZIYN08OgDDQYpUk9QvTpwbva3X3fUufQzzx2hzebS68SpNEGkfmS3Uyy5Zn41VzLKUg3om1YNfeeKoLdFE8Hmt9R8Bv1AJsBz3l6W699PQnfTErfIkmiU4i2bFcY",
                    Name = "t3zvnnQAgg6WKGNaTc3A08bOic61u1yVQPNCQEFIkbwhO9RJiR7mxn7kYGzShazS",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon44()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 3040.0,
                    IsDisabled = true,
                    DisplayEndsAt = "2024-02-07T16:32:44.000000Z",
                    DisplayStartsAt = "2025-10-15T21:04:32.000000Z",
                    EndsAt = "2023-03-04T12:41:37.000000Z",
                    StartsAt = "2025-07-21T03:07:06.000000Z",
                    DiscountUpperLimit = 8648,
                    Description = "6DDfNqfsVRi3zxzsVzVJLxpF9uCjOUSNMH9fWh27PiOpr3HMMXsb4Lh4b0Gko8iE0P3Cu0AOaTlKzyVFYYoK00acoGlEqYYGWZUMgU5LJ8nedbEkL6VCbZlYCZFu0YjXrvick1kbCzvMElblaTUskxDWTi4syFdijXYZ6Fkp0v2rObj5KP7CaX5R9O7h",
                    Name = "OQMfDj4u8or1Z5ajnFBytvfCWU5lvasIan6Df8qsq2k3ETquM3SQujWFDE153B47G8gAIFr9zY1ABG4Q6S1AZ81ee9F1zaeUGprRtPpZgZzOhvm",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon45()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 1142.0,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-05-09T20:33:15.000000Z",
                    DisplayStartsAt = "2022-05-31T08:38:31.000000Z",
                    EndsAt = "2024-01-09T14:28:19.000000Z",
                    StartsAt = "2021-02-01T09:43:50.000000Z",
                    DiscountUpperLimit = 1813,
                    Description = "e7aM7QiN4LuTtB8ZF5mN9clYyKl8cUsYw8CW8rHVcm",
                    Name = "ZsjKlFT0f7did2pSfVDNNjekhaUaqNZOry7pQcwkQvvHfTZTUiaSBniTvgiFcfFWfXoobW27D2zSsjxSJQCC2TKE",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon46()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 7038.0,
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-05-20T07:28:29.000000Z",
                    DisplayStartsAt = "2023-01-17T17:32:35.000000Z",
                    EndsAt = "2021-08-07T09:03:41.000000Z",
                    StartsAt = "2020-04-13T21:41:33.000000Z",
                    DiscountUpperLimit = 2219,
                    Description = "0u0i2E7e3WCog3HknLhb4mGHjaX24jJAlJFQ82MhyQQoipgFNSux0jeobdQD1VXjUggH7qMtHhSfZdXUyjb1NxKa8yAWf3eI4rn2GKxT8MfsHveV88627AlMJYf8MI0c9iCp3raZonaiDazAfoVN5ZcNoMxEFE11voG9m7gWIlidcsFhnnSlOPQS",
                    Name = "KVW980GqQVfPuvUPiEFV6mDyiAjmPC8FhIFplNkUQpOFZAAuAkdYYYV8q02r77ePIgPu4dPH7ImSF7bIQ97lNoNEqqi11P4GN23Eb6NlDd7BTwpYu4Valw5xiIJ7Q1",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon47()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 6553.0,
                    Code = "ipp2",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-06-15T08:52:34.000000Z",
                    DisplayStartsAt = "2023-04-20T21:23:50.000000Z",
                    EndsAt = "2025-03-26T07:26:06.000000Z",
                    StartsAt = "2020-11-27T03:39:30.000000Z",
                    DiscountUpperLimit = 610,
                    Description = "Pk0z0U5np6zSSSsJChBCfGVrTTzFEA3cEkuniAENmbJtM74yoK3yNaovdjb7urlPondGWEfVzKMwihh3UCJATPnnGfbSAjt8y1LpRX9w3aEMSDM7H6DKpMVCMs6AqPF1N4VGIihJYcZH1yqyLKdrb7VdvBferrdPPsgFTBp21GVpuNthlN8cTNxtClPPAh3ydu7juMaO7kqGjaASQkqyw2Q45pim16jWY8Li2",
                    Name = "yJuAILC9WmiQzTAP0hsvYk94ECXfwyrT6FN",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon48()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 9427.0,
                    UsageLimit = 7397,
                    Code = "PJDkaNGUUF",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-07-26T09:06:59.000000Z",
                    DisplayStartsAt = "2024-09-13T11:41:26.000000Z",
                    EndsAt = "2024-07-20T10:33:31.000000Z",
                    StartsAt = "2021-05-20T23:39:01.000000Z",
                    DiscountUpperLimit = 5562,
                    Description = "BCxguWkgEaSRxikajDhky1e9MUM8ZY9eEBDTjFI18oRpgCoDiEOfsuO3LMtzPm5pmHiztzTLcjSeNyveotr1SbL",
                    Name = "9f9RM3h2SXQaAm6iMSYVoPQWfV62UhTGJS1L9KLOsA2Q2Z23Mwd98ipOldTUQCXPcZtLDZ6t1d7NhS3tIbiaQ9UqJH",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon49()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 2522.0,
                    MinAmount = 7901,
                    UsageLimit = 7403,
                    Code = "E",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-05-28T12:24:09.000000Z",
                    DisplayStartsAt = "2021-11-03T07:16:49.000000Z",
                    EndsAt = "2024-03-26T07:31:08.000000Z",
                    StartsAt = "2023-03-13T04:04:10.000000Z",
                    DiscountUpperLimit = 1591,
                    Description = "MZwoONY9mYcjUD3BWfN3hpObBbd0WPCuqh90wnUEefdvvGn56xgqcINC0MaOVTzOYUS4YiFzadS1dG4VhCAXdvLcusNkP92lEHAtBr5uMSg7mI2h9L5UgNjF9pGXPoR6V6EH9oG2E8mJwg74tJdyJ5Llab29gfUQ6hTQL306GhITMLHDmfb2965KcWooPsLAa0LofoeILq2j1JbokM11iel9",
                    Name = "SifEKQQKEl5jTOYEn550ChTMJy5Ri4zQipR66DYXbWwtCBK4yI7b7ruIn1DQefV",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon50()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 892.0,
                    IsShopSpecified = true,
                    MinAmount = 2267,
                    UsageLimit = 4555,
                    Code = "n0D",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-07-21T22:03:12.000000Z",
                    DisplayStartsAt = "2024-02-25T02:47:13.000000Z",
                    EndsAt = "2024-11-19T08:33:53.000000Z",
                    StartsAt = "2021-04-04T18:45:44.000000Z",
                    DiscountUpperLimit = 5117,
                    Description = "gLXLPq2aRw08aQ0rfHosccmXhG1yeE5aq4GKVSCfP0aoPIG5NuiBMU7rfLf6FhpORYw57l88LjJn33RIRSOmlXSQfzzTwn3Dxt4Xew7YzDaZ1J9OdsQM2IVUV93tsgTE0JEew3ek7732woVpaWAn4e207OnXy1NWRJfp7ZK3WimQaowti0F0S2aIOKkN5iwpVUwFU1amkd1FBZBysFgH8T",
                    Name = "yAaF4dUSAbqyi68iyJ302sQl233vCftoqwC5tymvF1K23X2uYu46ypSW9PxtiaID1SUCfz9yEelMoF9a26c2RLHzQWOO42l0o0g8SXRzZ3",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon51()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 9685.0,
                    AvailableShopIds = new string[]{"9ff3c248-a0e5-43d8-ae75-61dbf89814f5", "8242d677-eae7-40a8-9c15-b431cd60c332", "cf50d417-2bd9-4b87-a7e7-d8ad3a530c04", "a1fa7901-0901-4833-9718-b313b50f8c84", "20aacec1-3ef3-48bb-944f-5a725728d8f9", "142881fd-9349-42ce-8b88-2760a77bdf79", "5259acd2-896d-4dca-b3e7-ba1bb102b18b", "d8fd0a8d-94ff-49d7-8319-bd934b765944", "51c92063-4209-496d-b3f5-d32d6b9d0ef6"},
                    IsShopSpecified = true,
                    MinAmount = 7942,
                    UsageLimit = 5837,
                    Code = "JeP",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-04-24T23:09:48.000000Z",
                    DisplayStartsAt = "2024-02-17T18:16:59.000000Z",
                    EndsAt = "2022-07-09T22:31:35.000000Z",
                    StartsAt = "2021-03-17T15:58:39.000000Z",
                    DiscountUpperLimit = 1000,
                    Description = "v4aIw1aGtGR3fEQezBo8XnXONHGXDMcl8tuhVdB5KkP8PHvZEmmcBKkGsr9sdEDTBkey7pr4d2jpaf36YY6mrG9Y2ztoKUUUx5B1bSO8xEgnoe60dnWTCVmm3x115QsBZT6dCGgqZsePkl6iY0bdXM6Nza2rTctUJQmh",
                    Name = "gNd3qkWY4lVW5zCUF3zWzIdrHm6OsiyHBxsWBtx4G7cLViMBy",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon52()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 8515.0,
                    StorageId = "148f3f26-f2c2-454e-affa-08e387e2b319",
                    AvailableShopIds = new string[]{"61523ec3-28be-4981-8c84-0858f21b7ab5", "ec318b5d-d6ff-4dfb-a262-0173e556febf", "9952cd50-f78c-48fa-9685-a555da7a4547", "d963d5e5-649a-4944-9132-aebde3eb850b", "badf4fa0-8042-4057-82f0-33ba9672bd32"},
                    IsShopSpecified = true,
                    MinAmount = 2569,
                    UsageLimit = 7485,
                    Code = "UNEsAtEjl",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-04-15T22:23:38.000000Z",
                    DisplayStartsAt = "2025-05-30T02:14:35.000000Z",
                    EndsAt = "2021-04-04T12:35:35.000000Z",
                    StartsAt = "2022-05-14T21:47:09.000000Z",
                    DiscountUpperLimit = 1200,
                    Description = "NhalsavWYZduuXynvh05rJdAnnK",
                    Name = "kjJzRbGyuQYyb8948tP6VkRaNaNdjmk2wkclkjGIdrGdF8qpLKYfd3JbJX5QcdKyJ1DmsToKu4w1tRUaP",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon53()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 9185.0,
                    NumRecipientsCap = 8412,
                    StorageId = "c1b8254d-5eb8-4b37-a03a-1500982e821c",
                    AvailableShopIds = new string[]{"01212e27-1d4d-4af4-b7fc-7a624a9587d7", "33f0db96-6179-405b-8a16-95bcfc85cd9d"},
                    IsShopSpecified = false,
                    MinAmount = 8179,
                    UsageLimit = 8313,
                    Code = "zqkBr",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-04-04T05:10:37.000000Z",
                    DisplayStartsAt = "2021-09-17T10:58:50.000000Z",
                    EndsAt = "2020-10-08T14:39:18.000000Z",
                    StartsAt = "2024-08-11T19:05:06.000000Z",
                    DiscountUpperLimit = 4017,
                    Description = "sugqjEeek3DeIDBfKsRBbYLkU2TfJXzuBqGFPReFsmxaxT8Xwuc649dznjsqwxML0aHpiMuFL917lUTrE8EACTMWkW53gnqE0TT1OD00WYy85d5RKAlbrPQ0st0t7yJcv8GqBqgGEHafl1jNP9k7uydClg9A7an27PrVxBq",
                    Name = "E9YWo8xjmzBGJVwTTanAXyFjLag3gPPvlq0FFntKGY10p27NPGQTdAXKNGuLNgDO4Ma1ptA22IkyjkgPuZUMAq2NjJocNYKTrm2m1ssPqy",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
