// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCoupon0()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 6442,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon1()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 1091,
                    Name = "VCcIXTPlbcMZgCJ9BjKA9LvljTLcW71b8cClVacDr5l3x4FVfYiLUL8Bb8dzaB45kELqQHfqMF0cAfS47CSQO",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon2()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 2422,
                    Description = "8c1i3feNO1qJBnpp3tyKjZPjTs65qzNTqIMvOUP7lDJ32SCMXHu4UsQsifzmvmEGKnmcQWOqm2b",
                    Name = "ZSUNMN2LXvZ3UB0bY6L3973iqLKkGFIZmfuXhD9mm06njf2aXb7PnD9gNpMDYfCPceKjPow2YL1adnoZFEUP94ii4uT2NJ6DSRSGMdhjjWzKEnHt1GlWmv2y5",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon3()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 5994,
                    DiscountUpperLimit = 9907,
                    Description = "pGt0e4jNi92dahlnnkKHVszpYHPkZF0J60lUnUwRinT2la9EMVbGBQcWz4E8fUZnWcjAk0kMso3CQzadAG14rJr7OIiIwKYtNBzp8nODkJL8EIU81Vy5zPsQOGlQlr06Jl9JLWCZ8neyUVmWBR3xve7r3YSLXQYTyvYaaI2qvRlrSNIrRDPa1eyCiQOxDTwWc9gws9XAUrux74v2ITxjA0PgzICgqeJVlSY26G92wNF5",
                    Name = "9aZcAMQT3BxPWw78yOKfPR1NUJQvD2rVGC84JJKMYYu6jp9XJncsuSh46krybNv1zjGCQgXpBAn6vYjVqpA4IONiLV0kr6A1DgXWodpkxho8rBfuxAgk4G7K3E",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon4()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 6626,
                    StartsAt = "2021-08-22T09:07:36.000000+09:00",
                    DiscountUpperLimit = 5214,
                    Description = "YbjyxowsbeNA1qdSnOGMCPl7IMBQKQv86A",
                    Name = "JZpBpvSAXbobD9Ki30vC5rrnazdVnK3PrJ5SiaT9q7d0MByh1",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon5()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 4146,
                    EndsAt = "2022-11-29T10:30:20.000000+09:00",
                    StartsAt = "2025-04-04T23:53:00.000000+09:00",
                    DiscountUpperLimit = 9276,
                    Description = "jie07UHeDFjaRvAps3KfAZfCcJF6TIEeRcrhiMDEAjwsoqC0B7Kcw0qagkhJ7wfZWTULKa8VECsBZr3IToxXjdyKGc7ZzHUV5fOm8mtNakhvcdUzoLcA59nUhEAXqtCyQcPmsvpgfmd8PIAhkngoJScrC1WRAvXHA",
                    Name = "TbSrzSbRU1v2KZFFhdMjCCzsHpBmrvRb2UjrX",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon6()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 2157,
                    DisplayStartsAt = "2017-04-25T12:23:12.000000+09:00",
                    EndsAt = "2016-07-13T05:33:26.000000+09:00",
                    StartsAt = "2025-05-29T02:46:42.000000+09:00",
                    DiscountUpperLimit = 7828,
                    Description = "g0KQCQJco6Fst7K2jJcCqUZTewzuJ3F92QKd3C9M0vBcKWIUBdcBNwq9T0OG7VRzcPfWGO1YJqrl83WexbWjPBIcMUJ3obVqULs7PsxGAUAdxQTQ69L5ufP3C8GoKbqWo6okozRxG7O1lnWZInpqxewkSnO8G8BVdp2SnU56fm1ftu8Rn",
                    Name = "deIRkNWykpBgBjKxJ1kVUP7sJk9W7sPqDCWwYS94nlMA9QMeCafNqHwyMdjdwcWi3JTYLChkb6TlitzWaW4uPhPny3cB55XyFtx17QBRLdwgp38D246Y",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon7()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 160,
                    DisplayEndsAt = "2017-01-03T22:43:55.000000+09:00",
                    DisplayStartsAt = "2021-01-11T10:54:42.000000+09:00",
                    EndsAt = "2022-02-09T06:02:03.000000+09:00",
                    StartsAt = "2024-08-25T11:42:33.000000+09:00",
                    DiscountUpperLimit = 6028,
                    Description = "evahES9poV0ViKFLpI4REDYgLWo2Q8cwkpiTfx0K3NI9FJ11nkGfRQlGszH71XXMwwageqdiCUtiam5OCYCyW06FKS14FS73G8a3ijeaDjTIJss0bIT0ZqOXGSTVH9BRjr8phyPclxsBq9XBmkTSfhHrb5sDnsI3ZWUf9QMTgobmXveIIZc15XikWWDvoW8CZvliqF7CSsjWcuOJS4Eh",
                    Name = "u4LwcLHvZh25xxfXebiI3VayaI3kTnTLIkpOXuMZobSfeWKzoEFQ5pyI5j9pCzj3hQwJJCjzGKx9aFgv0XlTl34KeRysjITa2wXz1O8xVGeOGcFlOxiVn",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon8()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 6667,
                    IsDisabled = true,
                    DisplayEndsAt = "2025-03-17T16:58:48.000000+09:00",
                    DisplayStartsAt = "2019-06-02T15:45:22.000000+09:00",
                    EndsAt = "2018-01-13T13:03:43.000000+09:00",
                    StartsAt = "2019-08-18T21:59:16.000000+09:00",
                    DiscountUpperLimit = 6281,
                    Description = "0yLoByCmHUuVyH3cfcF8Pf92JXudRmeZmjiokTl117bHBnYglbQt4QBFDEJKi3AHyd9yQ5W9RMhIq1dhsWztxTud1TnBQZsbkdzCXTKKWD0fiDnREQQDwR5XEyIFeG77xZhQ031Bv0fXxSyFQJeZ6rdQ8b",
                    Name = "Bb1f9slLRuiYJe4XyJvTb23aa3twUxtKvikbKV7hqTJveoI19ynJs1QCqTRlC3W1MGePxsBFCAyv0dcBt87MHAdufVNZM7qsWa8JyqZo0jQRpDPE6rh6Ex",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon9()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 1775,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2018-02-26T23:00:42.000000+09:00",
                    DisplayStartsAt = "2019-01-27T22:25:28.000000+09:00",
                    EndsAt = "2022-10-15T19:55:40.000000+09:00",
                    StartsAt = "2021-07-02T00:03:07.000000+09:00",
                    DiscountUpperLimit = 6670,
                    Description = "EW5yWSswalnNSPl4nKgIh67Gkz5WkqpvEXvT4G0zj9vSzfdqnwxVoVRAJZtMnbN2adZxWSJweQkjDaZNU8iBur4dbIER6acqYlwD",
                    Name = "KQEp9D3oXWbniSWqI7xTzrPkAXyiXMztQxtJ4M2WJmA50gKlydbRXM1sy2g1Pf0MqzXeXqK5rRD",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon10()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 4546,
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2016-08-17T11:03:55.000000+09:00",
                    DisplayStartsAt = "2016-02-29T23:40:42.000000+09:00",
                    EndsAt = "2015-12-15T03:54:14.000000+09:00",
                    StartsAt = "2016-02-24T05:00:04.000000+09:00",
                    DiscountUpperLimit = 1793,
                    Description = "smVWyjay9TthXSYCbva0t32yWLYVWM4QhXAPz9W0Mxm5OYGh3N4Z6M9NXBY9oPVgI76tvDyB2DnUym9pFRmUved6upvYmgnlSSsYDRmoQAbzux2YVPLs6mqcLQO6KAfySYCh0uqCGrCwLPsZTQHaYj8b8oAQjqHWHEUSfBXgsFSQ",
                    Name = "YVjyMJi1osniwzvMM5724wrvJulOUj4A8M3jM0z",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon11()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 9559,
                    Code = "te9qDk",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2019-05-13T02:10:08.000000+09:00",
                    DisplayStartsAt = "2015-10-28T22:28:37.000000+09:00",
                    EndsAt = "2017-04-04T03:41:13.000000+09:00",
                    StartsAt = "2025-01-06T07:43:26.000000+09:00",
                    DiscountUpperLimit = 1185,
                    Description = "Z2M4DgCUcWaYN25M17e8QItVUDPdnGbbjUMIkwxnSAoHyUqS2WrdyexDJw4m5W5NSAarqtGtlcKJp9gTWhEWSlBiVnl9lORTBFy0IWWO4H8KmbVB2M5EGOlNZgq",
                    Name = "vSi38sr7tIAdAm2GfCQqu6PVWox7elCTfrAqAyLdOvPV5cpp3AIIQZmW74G7CnN",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon12()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 7815,
                    UsageLimit = 8438,
                    Code = "PpYINeb",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2019-07-05T19:23:57.000000+09:00",
                    DisplayStartsAt = "2015-11-07T13:24:33.000000+09:00",
                    EndsAt = "2025-08-06T07:03:50.000000+09:00",
                    StartsAt = "2021-09-18T04:58:58.000000+09:00",
                    DiscountUpperLimit = 6091,
                    Description = "M9QJifASeEjt7rgfB4dUvUA5MkBayzjLixvqernP2ia0JTvsqFBudbGeZdEPGzzDd2lyZr3fyGm4G1h2gpnMz4EtR2vopXxSWiIg6gduAWVf9XkDSsioG64sbfbtlCMIRDD7seSSxbRy6UJ2yU6TRb2QsyUYaFBg0rLG7ixw8rumX9lPF6p8o2y11Yrgt4LCmHaJMs2PMcoeItTVcWkxXihexQXo31",
                    Name = "p3Wls1sE7BHULcZQtWWfaD4rWZB2GIm3dWvJq3fHzlHa1nO6pf4",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon13()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 3688,
                    MinAmount = 2653,
                    UsageLimit = 8482,
                    Code = "s9kLnk6c",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2025-01-15T22:27:54.000000+09:00",
                    DisplayStartsAt = "2025-08-07T01:53:47.000000+09:00",
                    EndsAt = "2020-12-11T03:07:47.000000+09:00",
                    StartsAt = "2025-07-13T08:38:36.000000+09:00",
                    DiscountUpperLimit = 9290,
                    Description = "rPLyLIGGlYxmDF5NDmHAR3RBnK72f11paMW4hGPanWOZJLbDfcebA2uxdCspznoi6atFNTbrEABXoODKwUOy71jHzimbjyuBcqQnQ9Lj9uq1rjYyblkDRghHjQDZezbRZC9FxfNOIHrbpOq6mcQRKL5CG2GPSQQB1U6IjRsZr2eFWgbnzGrBQcbaSK3iX1ZFYsGd1YMLCaCs0F5pkoUcbMvLHGSU2L",
                    Name = "TCLPQ5GJELxIJ85m7pWO5Oq5s",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon14()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 3413,
                    IsShopSpecified = true,
                    MinAmount = 8586,
                    UsageLimit = 126,
                    Code = "iwo",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-11-30T17:49:20.000000+09:00",
                    DisplayStartsAt = "2024-06-03T01:23:17.000000+09:00",
                    EndsAt = "2018-05-26T21:25:37.000000+09:00",
                    StartsAt = "2017-10-07T15:38:19.000000+09:00",
                    DiscountUpperLimit = 5823,
                    Description = "Qje9VnUZQt0pzes3TegY2AoCAsHwCP",
                    Name = "A6Scunsmt5agjEkUDn1nh1J0PoLY33AeuLX1vt0Xc0DOPIsjoZ1AHy",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon15()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 5450,
                    AvailableShopIds = new string[]{"9aa8c186-87a4-4efa-8ed2-13a7c5da8bdd", "de51c295-2e2c-4b06-a35b-92ca5541202c", "30863e85-8667-44dd-8b6c-02dbc471b04c", "18a59725-abcb-4712-90a0-4d54c2eb8ef2", "fc3a942b-c873-4e60-8a3b-6c9a700b8ea6", "ada923ab-41da-48b4-8c12-2eadf90afede", "05683ffd-0b22-4873-a47f-21499a732ee6", "be96f2c3-d9c3-4916-b8be-0d9f64839e75", "73535e51-947d-4e2a-884c-e3b5f7f3698a", "601abb6d-f7c3-40ef-9fab-4b2bee52a792"},
                    IsShopSpecified = false,
                    MinAmount = 9825,
                    UsageLimit = 743,
                    Code = "EM3GfsC9",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-08-08T23:41:44.000000+09:00",
                    DisplayStartsAt = "2019-03-09T20:36:25.000000+09:00",
                    EndsAt = "2017-06-10T01:44:46.000000+09:00",
                    StartsAt = "2016-07-06T18:27:14.000000+09:00",
                    DiscountUpperLimit = 9460,
                    Description = "6bQig1LgqOPtR6wzZdUh56Q0WZf8IPC",
                    Name = "7BRlPxu7",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon16()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 518,
                    StorageId = "60bbbad0-22ca-408f-81bf-bb25be18278b",
                    AvailableShopIds = new string[]{"f079c1cc-64ab-4332-9389-fd5374f4252d", "4eeee272-05e4-4549-ae6b-633be0a82b90", "8135f343-371a-417c-a80a-507856e354b2", "5bb1c18c-a1f7-4333-9b55-6beefcd68581", "0dce97e9-dd2e-48af-bb9e-d6f94564fec5", "a9404652-6b61-4459-aac3-2501f4502ad6", "c0106a1d-68ad-4438-ab0d-43ca8fdd5ce5", "06d3bc66-71c8-4ced-a99f-2667b9b6428d", "a23b1ed8-aaf7-4c6c-966f-05bfd929de6d", "87d29305-9296-4b4b-900d-66e3bf434016"},
                    IsShopSpecified = true,
                    MinAmount = 3438,
                    UsageLimit = 2544,
                    Code = "Z68uiR",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2024-09-27T02:19:33.000000+09:00",
                    DisplayStartsAt = "2018-12-18T21:46:58.000000+09:00",
                    EndsAt = "2019-10-22T21:07:06.000000+09:00",
                    StartsAt = "2019-12-18T17:01:50.000000+09:00",
                    DiscountUpperLimit = 6816,
                    Description = "Vq6CAE1cykbPfFVTBynTVWrp1vTM1qsdO4ANmXuI4pjaa3jMjNf8XzKneiyaJFmKrTqfSFemIMfA7XBmcoIx81EXrZTOXzCYdtNcSc50TRhvcOBTaYtXxGHr5BD4DZSX0CKWqFPB7cXogK3lXTpk1ACQL5MC28qIm",
                    Name = "U81piDFRyBs61QA64ubFmiSNGPB6PWeR4fjojaItl7qDDnWfDz83II3SsVbGfWZSjJAztxkiC6dodh0lsF",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon17()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 1973,
                    DiscountPercentage = 8986.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon18()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 8337,
                    DiscountPercentage = 8976.0,
                    Name = "alo907TQSGuwj68ad9K1XBWVYxIt1hLKB6GROESgi9KMGw",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon19()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 5185,
                    DiscountPercentage = 6644.0,
                    Description = "XDFLhsltsxjHevXAeaqJQdiPE4BeJCcIbjYCJA60910zNdhVnyX38KqA1fvkyrtqclFU9jljopVrQrbVbWUr1E2HhlclCQRWx8FEGzWXdbWzamEGXFO5PHpjsIS4SoPDOBVrOHFo8xzE1tgCZyMtCfVQXKeHEaCm6v4bOQPdSecOojChLhu",
                    Name = "aRbGgSXO57u6cTOWbPpHzT8SBHVxA4uTsQXNQLVTsa7Enw9cnxOrtkyrYkFM2fsUIFcBc3",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon20()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 3451,
                    DiscountPercentage = 9215.0,
                    DiscountUpperLimit = 2821,
                    Description = "UhfvCQABU9yhdPlghv2VJu1lljCVVYSCGNIDxlSztThgX67n2PgbzVLVHAuqNRKSFbkQwzExi4cSpvsggIAlYenv9bZPRWKzkKRFsQ10G0TlaGn12vl36ewyK",
                    Name = "B6SHyKZZn5jR7G8GZiBnTaUgy7N3mTLemMZeIt74bhbcXSO6mPwoW10WefOcGtzUdCSHPXTvrjAoBOkNuRh5LysIScuFPNL3Gz",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon21()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 7537,
                    DiscountPercentage = 4106.0,
                    StartsAt = "2020-07-23T21:35:36.000000+09:00",
                    DiscountUpperLimit = 828,
                    Description = "nMP5NZDif",
                    Name = "qWbMDg",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon22()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 5956,
                    DiscountPercentage = 1429.0,
                    EndsAt = "2023-10-24T23:24:27.000000+09:00",
                    StartsAt = "2024-01-09T00:25:40.000000+09:00",
                    DiscountUpperLimit = 630,
                    Description = "QECUSjutOosOC5LZHJPKApv7OfARAe3RnFd9nT02p1eaStaJkR7kpHzHVrWIJ1LETykZPKAQBgMPUGbEnOIPDq2CLAbjX1Djn2XWSwjThwDAcCZY6YtawxId266BZVwZVmHyD1UpI6d83jiZ9uTzP4YjXFZyT5vOgrOJYvJ3LNaiOIeknn7RYaYRsrRINAXrIL7Vokdd5FDSOlHXvP",
                    Name = "m6smgX4oL5ObnN7xsSw29hgwVKZ3q7f2G5Csbw765Up6rDPAvgZ3Lft7QdtUV0xBtYCY2peqF3OIROYkI2OmNuQfBQjabCuZA7I27",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon23()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 8400,
                    DiscountPercentage = 6702.0,
                    DisplayStartsAt = "2019-12-01T21:28:17.000000+09:00",
                    EndsAt = "2016-05-28T11:32:01.000000+09:00",
                    StartsAt = "2017-08-06T21:46:02.000000+09:00",
                    DiscountUpperLimit = 7318,
                    Description = "F0PAVPIqlw5xHvbneEVFJO1vUShUNViyLhmVZrKtrf8f",
                    Name = "O",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon24()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 344,
                    DiscountPercentage = 1885.0,
                    DisplayEndsAt = "2018-04-09T03:29:24.000000+09:00",
                    DisplayStartsAt = "2017-03-27T02:40:33.000000+09:00",
                    EndsAt = "2022-07-04T00:26:10.000000+09:00",
                    StartsAt = "2022-11-27T03:28:53.000000+09:00",
                    DiscountUpperLimit = 8358,
                    Description = "xN2mKWhxAVox0bSxOCeaMv9sV8PCVe8gGULXYHHQVItPbBIgVhkWUs64kjPOvg7oSgfBaWrA04virOZrFH9lNvZWQOhHbcPsVzudSsho4D4Vucvtqjo5TxhMxHQM1DHEyhnb",
                    Name = "8ZtFdCq3PjvYo6pCNI1mfIpJ9f4NksvlPiC4Vu3XtdH9FsNEZ86HjJPe4Lp6lJfyvAGgrUXXkhfXnecRVysjqOC6xGnpm1kxDBXzRf1f9JiZj",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon25()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 3372,
                    DiscountPercentage = 7828.0,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-07-03T13:26:11.000000+09:00",
                    DisplayStartsAt = "2021-08-03T05:02:03.000000+09:00",
                    EndsAt = "2018-01-18T12:59:50.000000+09:00",
                    StartsAt = "2024-01-11T07:44:58.000000+09:00",
                    DiscountUpperLimit = 6644,
                    Description = "kCWz5zMWjynyv6KSgRW4BSGACMY5nowhDUZD5IZKMp0STmYDwTtHP0EcP6hogkn6nAjgTjLkVtsanieCAlqrCK8PwmGod9YcEsgY2DC2Vj8cKXwgERagqKSGsUKboeeiIHlMnCdyvxKvSOqTvlYodFyg21jiUhByaB66BNcapTyLZWxad9qMqf",
                    Name = "UCaVImVTzD7ogGgbbuuhXvkkv63jx716j9qYeQTBsHYxIvY8A2kLLFzDvGgwT6RWA89QL9Vp03GIkTp5cuONNVFc9v9gdz5hWfe1J2XdVSi",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon26()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 9126,
                    DiscountPercentage = 3451.0,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-09-02T20:03:40.000000+09:00",
                    DisplayStartsAt = "2021-06-01T15:12:54.000000+09:00",
                    EndsAt = "2023-03-12T07:28:30.000000+09:00",
                    StartsAt = "2017-09-01T13:24:12.000000+09:00",
                    DiscountUpperLimit = 8705,
                    Description = "14JqvayOvsUjS1TQRpGXwusKVKoDVo20K4pvhym0ixofoZrqcO9xmrGI7Yq8b7zKf4Zjq1K3jlOjYQfsbEScihoRIGPs251h35D6RqOUv7GYFIehbCx0by4HajPsFnZyP",
                    Name = "kDxfEbj7EZcJNWpppH7JtG7uLWNnv9bkjUCUVfq92V",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon27()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 8273,
                    DiscountPercentage = 515.0,
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-06-24T04:22:30.000000+09:00",
                    DisplayStartsAt = "2023-06-22T11:56:08.000000+09:00",
                    EndsAt = "2016-05-31T05:55:14.000000+09:00",
                    StartsAt = "2023-09-16T01:17:18.000000+09:00",
                    DiscountUpperLimit = 2765,
                    Description = "eHm2Gc8mWOktzQrw5GjJ8uGQSasHDUHsEK1qalHwNsBFFvhBAfKd9pYjNXINvRo8XrSFeFKEUniweS0acjh4qrH7klovo9x1qmkFFjd91zhnaGMzUdCsP1zaX0YECE0zSsUS9uGcWpU50I9EOF1CbY7DQvPyLth6tJk3Z9fxM6O",
                    Name = "ljXWNCah5Q3Axy3FHS7HHlL9hetKrZtdVOY5mSWLpoOzWuTFDp0xZJMmmZyM3o",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon28()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 1424,
                    DiscountPercentage = 1633.0,
                    Code = "Yo",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2024-02-29T20:56:04.000000+09:00",
                    DisplayStartsAt = "2024-04-29T19:48:39.000000+09:00",
                    EndsAt = "2024-02-07T05:45:48.000000+09:00",
                    StartsAt = "2015-12-10T00:59:57.000000+09:00",
                    DiscountUpperLimit = 2910,
                    Description = "WxRzzc4S4bskUY0GUghtLrKd",
                    Name = "mw4Mj2vrs21Q3QscjDt5dNl9IacbccU5Qd92Q",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon29()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 1026,
                    DiscountPercentage = 2691.0,
                    UsageLimit = 5736,
                    Code = "ef",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-02-12T08:19:41.000000+09:00",
                    DisplayStartsAt = "2018-01-31T10:47:24.000000+09:00",
                    EndsAt = "2022-09-03T12:03:42.000000+09:00",
                    StartsAt = "2021-04-18T14:59:44.000000+09:00",
                    DiscountUpperLimit = 4355,
                    Description = "rVMDsZV4dkyP5lnQdeGG2WwubsLa4vnCWV1QVssD1Im12VLZ8F0u3SxrrH1vjl84VkWU20DVNhF1QRXrkYNIOtHHG8yHnSu7dDAUDz3Ba7wXTCzgYCbLTAWi1ohae",
                    Name = "tMA7WNeaonbTVS",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon30()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 7877,
                    DiscountPercentage = 88.0,
                    MinAmount = 5427,
                    UsageLimit = 4219,
                    Code = "4CEzJmLX",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2017-10-01T08:14:50.000000+09:00",
                    DisplayStartsAt = "2020-07-21T10:44:01.000000+09:00",
                    EndsAt = "2021-06-12T08:21:48.000000+09:00",
                    StartsAt = "2017-10-23T08:22:56.000000+09:00",
                    DiscountUpperLimit = 5084,
                    Description = "9jpxZmBe1IVqn",
                    Name = "l0xvjbPmp4eCBlLWO5LUEEnWeZcSGLtIalNYra2M0CMIf3qWb7LuUMW",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon31()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 7138,
                    DiscountPercentage = 4642.0,
                    IsShopSpecified = false,
                    MinAmount = 2147,
                    UsageLimit = 3058,
                    Code = "AOjAg46Wx",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2017-03-10T20:38:53.000000+09:00",
                    DisplayStartsAt = "2023-03-14T02:07:52.000000+09:00",
                    EndsAt = "2021-10-28T22:48:32.000000+09:00",
                    StartsAt = "2021-07-17T02:36:23.000000+09:00",
                    DiscountUpperLimit = 3459,
                    Description = "CoyrEsYCM3co0m5f7Zf0Wz840Yp6krkF1YbRmwvxymb30gk8",
                    Name = "4pQwTzmFQFV2uDFFIi8EFMWMycoOxYLCK5275yaFTfZztXuQw4RaWF",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon32()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 5286,
                    DiscountPercentage = 2525.0,
                    AvailableShopIds = new string[]{"7bde5bd1-1071-4c9d-ba33-a3aa5bc7b048", "33e140fd-7a03-4878-9345-2531b866dce3", "ccdf9474-bcf4-4b53-a510-2b9dc634aec7", "70d52175-23c1-484a-9c79-8d99903a59d8", "211cf607-cfa2-42f4-832a-3979ceb8ac66", "093cc4be-115c-44bb-831a-8b18781b9350", "9e8c4a13-01ab-470f-a094-51f0e4caa815", "bf6786ba-7480-4f28-8316-3e8b169a736f"},
                    IsShopSpecified = false,
                    MinAmount = 2794,
                    UsageLimit = 4702,
                    Code = "r8cro",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2019-02-23T13:25:44.000000+09:00",
                    DisplayStartsAt = "2024-02-20T21:46:31.000000+09:00",
                    EndsAt = "2023-09-04T01:54:40.000000+09:00",
                    StartsAt = "2024-03-18T02:36:25.000000+09:00",
                    DiscountUpperLimit = 4645,
                    Description = "sthEoZOk8UXfYg8fdpzyB6W0dkeo5uEqZaCFDcbEj9ISDmaB2afkehiCZS1KVArQKeygi1aTs9dwArWQhOtANq",
                    Name = "qTESOlpuGW5FhrbDgJ77XFXl4NKb3zycQebaty6OYZVBO6i7OrH9y83QqXgWF2opiV",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon33()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountAmount = 9749,
                    DiscountPercentage = 8074.0,
                    StorageId = "66f85b3f-ff64-4327-8643-2e194d2d2024",
                    AvailableShopIds = new string[]{"efc077ff-5f5b-4331-96a0-84028a527635", "1dd125cb-cd43-4826-91b1-db0ca1f5aadb", "062db4de-e333-43a6-aa0c-7d7b20a44c29"},
                    IsShopSpecified = true,
                    MinAmount = 345,
                    UsageLimit = 6459,
                    Code = "xvJw",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-02-16T03:26:00.000000+09:00",
                    DisplayStartsAt = "2020-04-25T23:18:21.000000+09:00",
                    EndsAt = "2024-08-27T18:15:43.000000+09:00",
                    StartsAt = "2025-03-23T01:32:27.000000+09:00",
                    DiscountUpperLimit = 8543,
                    Description = "hx51AwtpZIv6uv80k2eZHBR50sHyhGa26QKgCzW91ijqwGz4iwxLvGQu8AItYv5ALjIimTwKA5k60bA481CWCvSZBvCgqCd3bRt5kX2boQlLinyfuc6vmm92pmKFDO4dzrTnN2hnl6jClpe10uHCcbxZraKIE5JV72jwXeLc5ziCQv",
                    Name = "gnEPrwn8MGASAuLD3W",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon34()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 332.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon35()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 8927.0,
                    Name = "Jqm2LErGcclueraXSCDv",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon36()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 648.0,
                    Description = "DuhvkKIoa3xl900hkmeYLn1AjsWrIn7wWX9Rc7bgZ9BG44UnK5kugEbv8t3i1UGnc40madwkN30KxIK4R69fUEBg5VG6fY3BMw3LzyuQr74JtjTjvnySfqw4U7H9TvwAB8eScBfn1Rj6bF7qwsumEcO5tiAsHMCj6rQ8znpAP2C",
                    Name = "t8CHPFNDEoS5JXEhny5IMhsG4v0CQldqzxJ6XAxrUg5QJ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon37()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 5482.0,
                    DiscountUpperLimit = 1481,
                    Description = "dY8iZkaSG",
                    Name = "kcJKeradqBxAYjByUEnM",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon38()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 8562.0,
                    StartsAt = "2016-12-13T17:54:37.000000+09:00",
                    DiscountUpperLimit = 4772,
                    Description = "xLZOgOaoYWcJG86z8KVqUt2uzqsseXYFYKRp5jWej4Zir7EPOVCpM4N6VpPYojnLWN99oUAp27dRdHXT0bu9kBbfQDVxrOePjXnEEoR26VQKj59HY9GxwaIDAEfbXDBB3FNIL8Usakbi9ZrjBPmCyriSuUZrqYwqtbArFxY0nh8lQ2iQavwvhDr8TNB4vIcRTpSaCV5lZtxsN8hQh23jWL68GyttBaIaA6bT2oimSP8aDw1fwYQ",
                    Name = "1a8Jvio1NlXmWokT3fCZ0aqdulZZGglvs1mmHvcGJdXuMvjofsG8E4KIFxs3y0EBuTM1S0iPJraQIMtAPJ1JN9CtWW30Uo4UAg9arJ4XCMrwN15c",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon39()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 7881.0,
                    EndsAt = "2024-02-12T16:34:08.000000+09:00",
                    StartsAt = "2021-03-06T16:03:24.000000+09:00",
                    DiscountUpperLimit = 1862,
                    Description = "fUC0OQCualYkGbJ73b3nYCrV9uDJehyXJGfZSkx4G3NTiGEBvJP8jVk",
                    Name = "cC85nZnpCpVaAaHx1iEs8vFtOGvU65Sy7b4",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon40()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 8117.0,
                    DisplayStartsAt = "2022-11-21T19:19:42.000000+09:00",
                    EndsAt = "2017-01-15T18:33:22.000000+09:00",
                    StartsAt = "2019-09-29T03:35:49.000000+09:00",
                    DiscountUpperLimit = 5585,
                    Description = "banmxI5u8gze9wV9utYjWSxV0PYaS2m3w11YOcIRgqxweZ1D5GDujWwLCtS0wYAR5oiTurYC7yg59bUqlzl8RTsqHpDWU8ApGdTbLUnpU1baTn5DB15m1nGHAyRImJ6G1",
                    Name = "b1LBudJBaCIrObUZ5",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon41()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 3546.0,
                    DisplayEndsAt = "2023-11-02T06:07:52.000000+09:00",
                    DisplayStartsAt = "2020-09-02T21:14:54.000000+09:00",
                    EndsAt = "2025-07-23T09:41:03.000000+09:00",
                    StartsAt = "2023-05-27T01:13:30.000000+09:00",
                    DiscountUpperLimit = 5354,
                    Description = "rMS4IVkYp7d5uCmZcCGsDsYW6iBTOJJItmv4ZbMGqyaKdWN8wtUzEEJzkH6S98QQghHEuISiLlQ9W3XgJB2NaMYnzVdH4lBEl49jCEcrfCIMQObL3OoO8rAUeI",
                    Name = "JBL5bUAsdaXhLa6D",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon42()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 5213.0,
                    IsDisabled = false,
                    DisplayEndsAt = "2017-06-16T18:46:59.000000+09:00",
                    DisplayStartsAt = "2018-03-26T22:46:37.000000+09:00",
                    EndsAt = "2017-11-24T03:54:27.000000+09:00",
                    StartsAt = "2024-01-07T06:41:10.000000+09:00",
                    DiscountUpperLimit = 4786,
                    Description = "LUfdk8XuchSqSbTRRUD8SLFRBVzctWtyXmcrdg7VkR4X33FNwVK3ZsilsWVKactBtuAItB6ycarokv",
                    Name = "OGbxOtjjILQMz1SYbigi3uq",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon43()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 9437.0,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2015-12-03T11:22:55.000000+09:00",
                    DisplayStartsAt = "2020-10-07T23:02:46.000000+09:00",
                    EndsAt = "2019-11-24T00:47:35.000000+09:00",
                    StartsAt = "2019-02-19T12:01:56.000000+09:00",
                    DiscountUpperLimit = 5157,
                    Description = "7yaI77xfyzjZfk3Eg446tN2eZbvNHRDlrWw9qEb2szCXBkkHRCtXprtOEGF7FA7qtYAU5XoCNIUER98LHSRVry41mwGLHNUS9ycac0Neld0xGYOxpvYgvz5c96ZecqU3V",
                    Name = "5SiDh8XYp2Sb6qswUL8UZ6V9wGI85BEYoVTObCbAWlB9ZTLlBVIhK6pPNqnVaACzTnU4fw",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon44()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 9198.0,
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-11-12T19:14:26.000000+09:00",
                    DisplayStartsAt = "2021-07-05T03:27:55.000000+09:00",
                    EndsAt = "2018-08-07T06:12:32.000000+09:00",
                    StartsAt = "2022-12-02T23:07:40.000000+09:00",
                    DiscountUpperLimit = 7042,
                    Description = "IcuvP4sfykROqGA2kGIKWn7WmxLFKf1vULaBahAeJdLNgTdHrnXru0CK861yZBwzeoylnePV0HOJ5Mg4Lqjra9od5pOMZG0Q1",
                    Name = "pC2P9o6ZPNLGB22OwLCnaLili3chmVxHdB9QfCurmIpiTiNJmdhSFJZDo3oq9jSUkc9PdtCnJGKBJDfwGwTHxDL2bOdXfkEBpMjbpC",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon45()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 4290.0,
                    Code = "ioaY",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-09-23T22:53:21.000000+09:00",
                    DisplayStartsAt = "2019-05-20T10:46:19.000000+09:00",
                    EndsAt = "2024-02-07T08:35:08.000000+09:00",
                    StartsAt = "2024-04-18T16:16:34.000000+09:00",
                    DiscountUpperLimit = 552,
                    Description = "4xdPTFTA02UZKecENyKp2Io7TZBqCIqL4rp2EFrfcK15LTb24Ur3nzPNHJH0",
                    Name = "K2HZRZXaO0yBwCPt9KlGpQkqx0Eg2tYlbUkqmQv60CMZa5pywmhrY89J06nrffjpXgwax0yxzxVt1fgZx65",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon46()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 8825.0,
                    UsageLimit = 5902,
                    Code = "RA",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2016-12-08T14:43:16.000000+09:00",
                    DisplayStartsAt = "2021-12-15T11:05:30.000000+09:00",
                    EndsAt = "2017-01-21T17:45:15.000000+09:00",
                    StartsAt = "2024-11-28T23:00:34.000000+09:00",
                    DiscountUpperLimit = 4244,
                    Description = "GG3NtnfgRNPusLiOWBNvfaPU20jqHqD7fumjHr0s87ojVjQllJBsdX8PqB5vj6KZvk9I14B0wJjv5PZV8",
                    Name = "zD6xxeVZJr6fOg9zsFZTThoFxkwxW9hiLZrgw5GsDKhgqi6fonQRpg8o6w595UPezcg",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon47()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 5722.0,
                    MinAmount = 1925,
                    UsageLimit = 7691,
                    Code = "4PiUt",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2019-01-01T08:19:56.000000+09:00",
                    DisplayStartsAt = "2018-05-27T13:38:56.000000+09:00",
                    EndsAt = "2022-08-07T11:33:50.000000+09:00",
                    StartsAt = "2025-04-03T17:32:25.000000+09:00",
                    DiscountUpperLimit = 6332,
                    Description = "iiOwd8iyY6Z0zhmmU4qjfXM0iaeCNkqwEBU16Jq12CxO1vOYhEe55St2TiyraOemZRjiAchwL6b1jB1Cg1nBSU78",
                    Name = "Sxgo6Taagdxx1mLakIn0CpIISvuAWSZZfn8k",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon48()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 4412.0,
                    IsShopSpecified = false,
                    MinAmount = 1327,
                    UsageLimit = 5703,
                    Code = "RTJu",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-02-15T18:06:48.000000+09:00",
                    DisplayStartsAt = "2019-07-05T00:20:39.000000+09:00",
                    EndsAt = "2019-04-26T12:41:38.000000+09:00",
                    StartsAt = "2024-06-22T14:39:56.000000+09:00",
                    DiscountUpperLimit = 9584,
                    Description = "Hb3xaMjpGa8gaJHdl18J3d41BsVgtiwJjEQgl2khqccOMjuNbV7gJFoloels8545DuKxo1Vi0yj9LZ0SyJWAaPdTI8GQRoTVVLo6s0iJqu2Tp6qxM61gVY0GH358hWkV2Uf2KtDFhJ8HG79vPf61T8wOYbBgjhnixJKbSXHCrQ2sJdGjdCNpP7vZgP6",
                    Name = "ri",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon49()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 8133.0,
                    AvailableShopIds = new string[]{"67a553c4-e3ad-445e-9c8d-d1b60bde7bbb", "6cdf1dc4-b8f4-4b13-aed2-42aa37f1c51b", "bdde57b7-0bb3-4c1c-a10f-fc920fa39769", "2a0e5253-b9ae-4deb-8117-6967638696db", "0f70af43-d7ff-4a31-a26c-6b5900046136", "944f2520-d50a-4c5b-b9df-165e3b1b36a5"},
                    IsShopSpecified = false,
                    MinAmount = 3231,
                    UsageLimit = 5704,
                    Code = "dfLL0D",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2018-03-05T16:35:47.000000+09:00",
                    DisplayStartsAt = "2018-05-17T04:46:36.000000+09:00",
                    EndsAt = "2021-12-23T01:14:15.000000+09:00",
                    StartsAt = "2024-06-15T21:24:50.000000+09:00",
                    DiscountUpperLimit = 1037,
                    Description = "nmrgoUZ8HPuG9MGiaGFzsfWWWy9Im8UxT025mhbVLEYZVZOefO3wRMVsdsI7UYvxBYHMaYiviU38jqbyVWH5DFcnmWcaw5XgZyYFJIldgknhDa91EmSrsQOnBNxdurOw7gkjQ3wpef72Il4E5ZWsSecpIqr43pcjq1LwdcVMUb7XEBzGNuyNwO31ThKXaIyaVVhfSd3BmnZxBBpR9nx",
                    Name = "MbDW2Wv9nIAuvJ07T9KHTjKX9sc30nVHddo9MOLvGZ61a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon50()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "69c5dcbf-1bf5-43f4-ad59-cab64ef7c1f9"
                ) {
                    DiscountPercentage = 2404.0,
                    StorageId = "d4088ec8-fec9-4a90-b477-df584c247f8f",
                    AvailableShopIds = new string[]{"a0b5d13c-a344-4487-aab8-86c62026a0f6", "b86d5bd4-f513-4301-bd12-7cba296ad686", "6bc93c7a-702d-47b5-89e0-7ad158ee4f16", "2c539342-ad47-4fe1-9191-5364c4f0067d", "1bc73fc9-fc83-431c-bedc-6fff86228973"},
                    IsShopSpecified = false,
                    MinAmount = 5079,
                    UsageLimit = 1368,
                    Code = "M5",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2017-06-22T14:55:19.000000+09:00",
                    DisplayStartsAt = "2023-02-09T16:08:00.000000+09:00",
                    EndsAt = "2023-02-12T13:47:09.000000+09:00",
                    StartsAt = "2019-02-19T00:17:28.000000+09:00",
                    DiscountUpperLimit = 770,
                    Description = "2cjgTiUn5rz1pVqBgYfePziyv4mtwf363wthBO4FjlbNSGHxbjuEMAeQokaUOBkEJMomGEE3qtgKMvjDsKXEFhYl0BRpqUDYmqwBJzhV6dtnsmaJHCLyhHLjUCzekHgQwDCfsWS6JXTLuG14K",
                    Name = "HQGpPICoaRhYRcaR59QCffGIaaiPRXQUB9KSDwnfHx9gXjCberbb7S8DAR",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
