// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCoupon0()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 8465,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon1()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 8247,
                    Name = "ccOw2h3Fa222nHBaN6510bAHdVRRVqtJb7GLA5jeThW5qr3yEd4d",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon2()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 7315,
                    Description = "L0rYsAz43Mmx6hv0Ug3INp6i2B7flubMg8I3PFzXHSWu8scihqWwWKLIsgxoxZCQ2441blMtSOZHoWLqvzthoXVcLebdhYmokN15vn0WBXfGwW2mMW1f9b",
                    Name = "gICLPqqow4qG8fKRsijZT9ACbFhSbUnXdQpmPpnHFqiJvOHOlQFLdxOm1",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon3()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 2523,
                    DiscountUpperLimit = 7291,
                    Description = "6oejI9dat1CLgQoRlzuyxB2QGrCPmQ415Et2SGqgy7Wowcm3CmFfxpyCPpsziVloAtynLsPgO9CFz87kImOLWynZ7sTqSkOWWDLZmiyY4qSDce16GC4wPtLkv3o4mk88yYjRj6ppJLnlec8JObXuRsPVeFJcsOCB9dZH0k0NK",
                    Name = "7bYH6IQhPn4Xu22OkprhqhwvNpMEMbpSnLulsX8V7SnJwOTksCozm6o1k9oepRB7yq0O",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon4()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 5345,
                    StartsAt = "2016-11-11T23:38:17.000000+09:00",
                    DiscountUpperLimit = 3667,
                    Description = "zxnfEtxAkEm7sWqtjzoUhtWxAFotkA3GwpJ6pUWjvsxF7sC23pAVbXivHZtrIAyP3B3n1m451mPU8dTD7bnX1r8l3hCw6Snm9mfcT5cLUh34lWYk1AXf6CZiEJmgnIHDOUd6m8hlpqS572AEF2Ig4ikrPHEQKtfhnULfkSB8hVVRhZgs0ShDA1T4kxBhv1",
                    Name = "Oy0nxwzXXsopchwGQjGjB8p2sVlc1F7AjO7bJtO7Dnnc0m9rCGM5hvlyZ4zlX8tOl1",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon5()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 615,
                    EndsAt = "2022-02-16T15:38:17.000000+09:00",
                    StartsAt = "2021-02-26T18:10:29.000000+09:00",
                    DiscountUpperLimit = 7086,
                    Description = "cvHpCxJHTvEJuFQdQk10O1BigovU99ROs",
                    Name = "ZK65zQOhilbvDcAlCpIpPo9knGna2qU0GmaUmeizgJ6BwqETnaq5BggeTTsTdXg3gtXl8b4nZOZsr1VPBj7iv",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon6()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 3898,
                    DisplayStartsAt = "2022-07-02T00:35:03.000000+09:00",
                    EndsAt = "2020-07-20T04:34:37.000000+09:00",
                    StartsAt = "2023-06-19T07:51:09.000000+09:00",
                    DiscountUpperLimit = 1462,
                    Description = "3vcL7BXf3IHjK0XiCg0zcQRlonr1N4IocuKCcZ1hdXCgyALhLsPZ4xEZBaL9gPoE5PnOxSYIBQUZMwQEKQp536z2WYA1sx132uYplZstFpjBFQy9bZmz7mGiFtXmRSje5IwYSIqDRQ8l1f3l8HQkQuvmK2Ptks2ZcRpli1kcYUjdKenDWjLTaaBosz7aBykLG1Rz",
                    Name = "Mmx1hSkje9X0kmePd8GXi22Jw1idAxcQ9RQcA93jzkpVE1oN8GZytUXsp14vePeJl09h1SmS",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon7()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 4992,
                    DisplayEndsAt = "2016-04-01T14:12:51.000000+09:00",
                    DisplayStartsAt = "2018-03-30T19:50:07.000000+09:00",
                    EndsAt = "2017-08-05T11:34:39.000000+09:00",
                    StartsAt = "2022-06-29T00:48:10.000000+09:00",
                    DiscountUpperLimit = 2375,
                    Description = "FiXbom9IOMRvPLFSPNSfRkv8Et2j",
                    Name = "CeNHdXqCXUrpWRIEnGneOjH6PTi68jf1Ll0O4t8yu2YY3amcbZRFCGWEFlMA",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon8()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 5096,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-09-10T11:50:17.000000+09:00",
                    DisplayStartsAt = "2020-03-13T00:44:29.000000+09:00",
                    EndsAt = "2022-08-02T03:26:31.000000+09:00",
                    StartsAt = "2020-01-29T22:23:38.000000+09:00",
                    DiscountUpperLimit = 2662,
                    Description = "qHBJlao6arWtW2Kf2i4IAcwQjuFWx2kNI9qHm3gWQVGMbEKu4AfuwweTMrw4f2dzO7lqy4kEKJ1Q7c8C0SZpOWKljojyXNatscwZjWuBesyFuc4s",
                    Name = "WKFJnLD7m3pQpjDhF5ByJUZoKtqULctVH6JYk9cBHdXfv4m",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon9()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 5368,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2017-08-13T10:45:44.000000+09:00",
                    DisplayStartsAt = "2022-06-15T08:16:42.000000+09:00",
                    EndsAt = "2022-07-21T10:57:26.000000+09:00",
                    StartsAt = "2022-06-18T06:38:19.000000+09:00",
                    DiscountUpperLimit = 6868,
                    Description = "GhHvgOYEOxJ03xV3nSGPvtC19a5RpyBdhfDtmpMgxIW5ljI6yfgW8zOoaul3ISoLlGYqCoXoGAustVKiyGKg6I2c4vjJ0uuFNk5xEatUCGYnUIhqAnDQImUocNLmlkEs1s3oajWUDkbVb94dhcQmTjATi4FvTByqrSIzi26MGgp",
                    Name = "9DKPsTX2x6llLqyqxLBzmQKSHklP2GNjfKFk3xSPN2EauZcekm4uUHwCvLyAybYYI1PTnYt6AX3ZMraJiL",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon10()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 895,
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2017-11-03T02:18:53.000000+09:00",
                    DisplayStartsAt = "2021-09-07T09:11:50.000000+09:00",
                    EndsAt = "2021-09-03T19:38:18.000000+09:00",
                    StartsAt = "2018-10-13T06:37:07.000000+09:00",
                    DiscountUpperLimit = 3188,
                    Description = "ZHp5MvhzfbMCo9qyaARxtZqgB5ft0k4jfS4r5kfrLJkZytv5gO2QqNTMBVQz08laq2biuqoxBaoCNpyYWsiSLe8XgZiLcB9lkuwUmt5gGSX2SbBRPaYeWynmUQkGZMrt25VWYHR7PmuYOuy85eAINi4DCh9E1piomvY0y0iLigYmahsEfLajE38CSizXaYXCbSM5b",
                    Name = "6xxCi9aS7pUn8sHDE4F3kcf0hrQ4a3rPgThS8",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon11()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 7296,
                    Code = "OZQx",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2019-05-02T15:59:18.000000+09:00",
                    DisplayStartsAt = "2023-09-08T01:55:33.000000+09:00",
                    EndsAt = "2017-12-12T12:07:42.000000+09:00",
                    StartsAt = "2019-08-31T04:05:13.000000+09:00",
                    DiscountUpperLimit = 3477,
                    Description = "xNvFrLUebeM3qu8knhRZPaevJazOcUuFHzOggogIb0heOl2hQPfOiPoRxRiCop5Q0A9gBKU33EhyGU9Sc7TWphUCFQOlhJCzSIu3L4oB0QKjjVXdg6wCnP4F0PUy8JyZq3ofPUU0rY2rRd10bnDEPKoSGRnM40Adb2lsHFBNfL0ieognilvSR4pMoCwkxpSpqKLDrvgRvBVvAYQP0NP5o8oIbQ6bcvTH",
                    Name = "9KRHlq0wqM01LRxPcYJN00R6J1knyJeLDqePaGS57qQUn9QotexnhecBro7jHBJHSTWFK0aJRYTfxgM2RajM6sQRgc1VEyXHMXBj8otEAcFy5ooXoXuzlRpCyCoZoa",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon12()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 2731,
                    UsageLimit = 3077,
                    Code = "TmV",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2017-04-04T22:54:40.000000+09:00",
                    DisplayStartsAt = "2020-06-10T08:01:00.000000+09:00",
                    EndsAt = "2019-01-22T23:07:48.000000+09:00",
                    StartsAt = "2017-04-02T14:38:56.000000+09:00",
                    DiscountUpperLimit = 228,
                    Description = "Gv9QaNMmxX2S2fPh6fy135I5DGGggnvkdWrHaspAw5Vcp7CE78JSe44PvWgrDoffEic8syvxPXUni2oM8QHA7lWY5GLHqITj0UgJwxmfaF0gGfgNlG67XOfGi887nNv1eh26ZZWkeJQym7n7CGmjd25iFSdny2rQSPU5tCjVy8COfDZrZRHs0hjVGtY7fDHExM6iUcBW9LDUejJ",
                    Name = "e4laTFkcJAyP9v3l",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon13()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 8018,
                    MinAmount = 2952,
                    UsageLimit = 7477,
                    Code = "f",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2018-07-26T09:12:00.000000+09:00",
                    DisplayStartsAt = "2021-12-14T07:35:55.000000+09:00",
                    EndsAt = "2017-03-31T19:54:44.000000+09:00",
                    StartsAt = "2024-01-03T18:12:53.000000+09:00",
                    DiscountUpperLimit = 514,
                    Description = "VqCc62CsLVYKPyOwySSjaFxy00IGCXmzsObY8JjUm176PqMxSejYJwKQkQhcSsOlDNZZsSWHBkBrsiXhCnZzamORmWcssL2",
                    Name = "FF3HAzhtt18u7MooUu",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon14()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 3323,
                    IsShopSpecified = false,
                    MinAmount = 8663,
                    UsageLimit = 824,
                    Code = "9dRNv",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2016-09-17T14:29:41.000000+09:00",
                    DisplayStartsAt = "2017-08-24T01:05:17.000000+09:00",
                    EndsAt = "2017-08-26T23:40:29.000000+09:00",
                    StartsAt = "2018-03-30T13:24:45.000000+09:00",
                    DiscountUpperLimit = 3394,
                    Description = "NVzugQpgEVipsMl1opS6XVL1U8vfTPgZQoGXLb8hT5vzbbFysLVW03Q8sgkwbt7bycdIa",
                    Name = "s2OiS448zYYuSerVgt5xpThqkxWuN4OkYmUnkAFHrW518DEhvGfJFhB",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon15()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 2892,
                    AvailableShopIds = new string[]{"3eff2850-589e-4496-902d-95a31c8f57a6", "a96dd88e-c591-47be-89d7-2be77846df47", "efe40258-971a-4975-b22c-aeabd6ca7813", "144685c6-af2d-4fd2-9984-5052b3431805", "e518f07c-c5a2-4229-82c0-ecc30a69f174"},
                    IsShopSpecified = false,
                    MinAmount = 7667,
                    UsageLimit = 5342,
                    Code = "c2O",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2015-11-04T15:06:17.000000+09:00",
                    DisplayStartsAt = "2020-12-14T04:08:45.000000+09:00",
                    EndsAt = "2018-11-16T21:29:35.000000+09:00",
                    StartsAt = "2023-10-20T23:16:02.000000+09:00",
                    DiscountUpperLimit = 3967,
                    Description = "PMCnHWRhGK3T2O4zTKZrpJNYtglnu99Onqaf5iTxaKHt4HXxpMz5eg3TFJnOMXlccrSM4NeRkShSKYnhr8JJ6rqJ58uKWhjJEVfg4kmmGr3fEZnBlmzkrtoyKm38BDyuj1U15iB0VVURHNCTBSkvCAJURQ0xc8v3XGoxNYBzQF26RRnLKM2vajHzuhk8mM7y90MUBMqpZFx6CyPOvMtoUIDYTTb9YLUK2ZY6omFZc6c5",
                    Name = "lAiaH7ksthq2qt1fISbJLQ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon16()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 5291,
                    StorageId = "66fd72df-6009-4332-8947-96f9d4441937",
                    AvailableShopIds = new string[]{"96a4cb0b-c2b4-4f4f-b545-d023ba37d823"},
                    IsShopSpecified = true,
                    MinAmount = 7698,
                    UsageLimit = 1946,
                    Code = "FDi3ep",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2015-12-20T09:07:29.000000+09:00",
                    DisplayStartsAt = "2022-01-23T01:38:55.000000+09:00",
                    EndsAt = "2024-09-29T09:12:45.000000+09:00",
                    StartsAt = "2023-02-13T01:12:31.000000+09:00",
                    DiscountUpperLimit = 2911,
                    Description = "zGZlqsrJTtHeL1jl3TaroJ97KS7PIYmqHtFEvZxOLgNEFPzTNAeMR2CvVgTRCY2rEPprVjpNeaYJXDFnN5l443TmOvQLPfQxkSjhKrHXePF1aNsQcGEPe2hgvk3yuDeTC8XzXR9jncya31KgghsgYe3TbLJN21a8hZtm5so8Mz8sE9uDmHdcukVhdalQqRPyTvG2tPeRbQcNODGa3IhebkRxi8kuGoSk8mmCPAG5TaOSJrFwT6",
                    Name = "MSTQQD3aZSLuV5KvsCMKR5EbTWV4WWsRyRXgRYVg4CYuzSBW4stkoPc7UXRyRiV8Pax53IDmwu",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon17()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 9098,
                    DiscountPercentage = 4305.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon18()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 4368,
                    DiscountPercentage = 7619.0,
                    Name = "jbIPmFGWkh7DMCSqp4SWi3zPKlO0ubMaaWt2sfRwBothNvTY3vFr4ELRXyBW70oqJ1JP1EYwzYF5YE8jQgUzmyBk",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon19()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 1455,
                    DiscountPercentage = 2020.0,
                    Description = "9RsSiJlXzLN5312aQs",
                    Name = "a3khCQ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon20()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 6397,
                    DiscountPercentage = 2505.0,
                    DiscountUpperLimit = 2942,
                    Description = "0KxC45PIbfMDQsr0pTvhXVGg9hnQlyenzuwrO3gGQmGe09eXlKtPgqSA0ERaGz46vIiA4hbe1yI3CGp5lj6m5fgOCupwcIPxBzhbkfELKrUPd9GpW6Q92PXWpLmGFM1PrngLs4Zq6rjFKNHUPj8OaHLD3inc4333SWlp4s7jMjS5PtJzYsdA5qhl1QGqEwjgkrGn0uAn0iqI2b5rxtzGOZhKJMKwzvYsbBzTdo6bpAqcWNJrNTsv2Llex1ejGQ",
                    Name = "2ugzGxu81Sx50Yf2M71M8zENOSGlzUlDTz33P2rJ14YHcAJKWHCf11oIN1lhxfCtQoWt3KCnkWzy38cC0E7gsSEITDei3y",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon21()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 8527,
                    DiscountPercentage = 2667.0,
                    StartsAt = "2024-07-06T22:33:41.000000+09:00",
                    DiscountUpperLimit = 1419,
                    Description = "642y5M6ZGKLNmOSXPLkVgGHidiNxSMbU65iFGAAyuGpPep5MlLDDmy5H5WNxLWXFOkEFZiHMkNkDC4XjAgnNgPyTasq1IFexxHoOsY3XmfSCMMI0hPIOcfptkBjffHuYKUEJ4zrJepcLNjePvmbsJ6aAod",
                    Name = "X3lOsSzeTfXuUhrzyKZN2IpvZDbUGNbf92zGej",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon22()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 1641,
                    DiscountPercentage = 5113.0,
                    EndsAt = "2017-10-08T23:44:10.000000+09:00",
                    StartsAt = "2015-10-29T10:13:28.000000+09:00",
                    DiscountUpperLimit = 6131,
                    Description = "rgm7LVnhxTyAZfZDkQ2r2xXuIalmcupP8PaFubqXmo0h47ayHi8sXxsnC42wCpyAiBnUBLAV97YftKTMpHhWMUK3SCmPb9BXoLZ7wKHtX23HwTLkUG7zxtQPL0ebUOhv3B3t2DzpE8reI7vFyo7eM4dNHW25nKJYDvzM004QSYdkecoFJzr3brOZ5f3RQvkh",
                    Name = "tySJKYRUQ3NzIgBoxko0Q38viglT3j7uK9FEO8wpTMbUo34OhjcbIFy00bHfPtADraHJBywFUVQhJIvCWpCXLp2gUnx8oHUCw9IDU8v5tebk72bnq5V1PYuyQsrCeZ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon23()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 620,
                    DiscountPercentage = 9724.0,
                    DisplayStartsAt = "2021-06-16T22:02:27.000000+09:00",
                    EndsAt = "2023-07-13T07:21:26.000000+09:00",
                    StartsAt = "2023-06-28T08:13:22.000000+09:00",
                    DiscountUpperLimit = 451,
                    Description = "eoTGD6IVelM1xkQHIURZCUVG9E4BcH9vh8Qcd9Qr1jGxJh75seT2MlMasdJCSgZ4nn16A08HMuzRKVjoY87iExdEHTNDtgEpdMlXJAKinvVKW5jNBic0lbP5i9pPDb3qItRRs3FY6lAlrydgPmYNQmdCCSHSb7PeqbGNNyGMxdwCiRwJpoUBZS7wM2sjFT50Pr6H3Lr5Vqadi7ItSc4oUdi9EY",
                    Name = "p8oXZ4d1DUqCUDmWqMmM9IYmurAkMd4wDsAO01hvmp",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon24()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 4007,
                    DiscountPercentage = 7753.0,
                    DisplayEndsAt = "2016-12-16T07:19:23.000000+09:00",
                    DisplayStartsAt = "2022-04-04T06:20:38.000000+09:00",
                    EndsAt = "2023-11-10T09:41:02.000000+09:00",
                    StartsAt = "2020-03-11T08:25:35.000000+09:00",
                    DiscountUpperLimit = 7894,
                    Description = "dq7gNAtqrqKm6uKQNQH3PDcRwUCecSBjOParYUfATbi",
                    Name = "rkxUEwT3M91XjHrTG7fMCl81IJPQuSHXTmEReE1YV9ebnUBpzD7d9DsGnOvPtZOQ7wRQgMzlEQY",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon25()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 2070,
                    DiscountPercentage = 5559.0,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-01-03T21:09:45.000000+09:00",
                    DisplayStartsAt = "2018-08-14T07:33:16.000000+09:00",
                    EndsAt = "2017-05-10T05:34:25.000000+09:00",
                    StartsAt = "2018-11-21T05:45:25.000000+09:00",
                    DiscountUpperLimit = 5177,
                    Description = "nGzsoBIqSCZEncCQxjIhrUeBMFsGSoFMs14cvovqZ6GQpcxkL1iWim0Xpy9XRR4FHqayBd9Y6naDnCaj1IshUK5sOcLMoSdluvLDw0rIOalhSCHrt5J1YKxmhpIQaAHuF1XqBsQEc2YHzb0v51JNexx20BlobdlTY6n3LbK6Vu4m4rhE",
                    Name = "PkEzPYVXfzwtjxI8n9Z0CQKMUdsLKbKLcaV6nH18WcZidvZ55mAgOE16",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon26()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 5569,
                    DiscountPercentage = 7790.0,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-05-28T07:29:46.000000+09:00",
                    DisplayStartsAt = "2021-05-13T01:45:47.000000+09:00",
                    EndsAt = "2023-11-03T08:16:16.000000+09:00",
                    StartsAt = "2024-08-31T13:49:21.000000+09:00",
                    DiscountUpperLimit = 1940,
                    Description = "WconVaiJFwoOHJhs1D1kk2Z65xpUZ28FCmVx3QLXn5K0ujHfTEebumDwnUvtTuwE1P6w3jvuc6WVynWZlMwTGtLKHNv0GH",
                    Name = "A8YNVctqn0HylBEaWFtKmGqTMRGGhLK4md8CvDRXJmyMUq3nONdNUldEzZzYqTFGHLldYwHPZ5GyoY",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon27()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 6233,
                    DiscountPercentage = 7848.0,
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-09-05T11:52:49.000000+09:00",
                    DisplayStartsAt = "2023-09-27T04:41:40.000000+09:00",
                    EndsAt = "2020-01-02T14:21:28.000000+09:00",
                    StartsAt = "2024-04-05T19:08:38.000000+09:00",
                    DiscountUpperLimit = 423,
                    Description = "hqik562nQJ7JN9nEMDfH9ZULXMKOjFu2fGiShoySflnRPKvTH4Qb4HK1DE5zpHipftSBuuUyajKD4UG1MO97nrik73QyiaNKms0i",
                    Name = "FYGrWxxlKwOlCibtq2e0nqtX",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon28()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 7500,
                    DiscountPercentage = 7753.0,
                    Code = "G9Gff",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2018-01-11T09:48:39.000000+09:00",
                    DisplayStartsAt = "2019-10-05T17:19:23.000000+09:00",
                    EndsAt = "2022-02-20T07:45:42.000000+09:00",
                    StartsAt = "2017-03-03T22:55:32.000000+09:00",
                    DiscountUpperLimit = 6648,
                    Description = "x7fQZGPMXFo6oIvZGxUJAAeHeUyg78eCpqwfbVaGI8MUg6pkTJeF4L",
                    Name = "5VGWmlO55tLRhXfPthFrTbvP80JDs4TLAvvWwguBec41EmwzzFrgc709a7P9KtTHr3",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon29()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 9210,
                    DiscountPercentage = 6087.0,
                    UsageLimit = 7992,
                    Code = "N",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-02-19T23:30:13.000000+09:00",
                    DisplayStartsAt = "2021-12-26T10:07:46.000000+09:00",
                    EndsAt = "2018-05-26T19:08:38.000000+09:00",
                    StartsAt = "2017-02-21T06:45:43.000000+09:00",
                    DiscountUpperLimit = 8262,
                    Description = "hrRiHbftN77E9sKP2LWTHQkvbYQTkmfSmGSFmTTeLGAy7h6m0YyagUC0Ij3N9K7EVH4f0IDf80jI5hMMqGagepFcb0C3pMehBLw9uhZslxpk65zsLMOaWLvqiZty5Zp232IvDDPPtMusem1WSPOdAkWLCHhP7q7jyjEo8V3Di9DtzhzAGKUtsDdhPal5eEvQkTNVI1DbDv2ICSa1fLqeRzwnNnU8Hy7seU6TPp7YTcvCbmuW",
                    Name = "vyjmdKhWFzroFJfg0zCih9qHu842U5SnXNqipKVsIIUjVYx3ZiMVPZEq0xgguEtAXJ6WozfUGo1oVRA1PV",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon30()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 7730,
                    DiscountPercentage = 4236.0,
                    MinAmount = 5322,
                    UsageLimit = 38,
                    Code = "D",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-01-31T05:02:19.000000+09:00",
                    DisplayStartsAt = "2025-05-05T06:17:34.000000+09:00",
                    EndsAt = "2021-05-12T16:20:43.000000+09:00",
                    StartsAt = "2021-08-30T15:28:55.000000+09:00",
                    DiscountUpperLimit = 8886,
                    Description = "P89tC2Mi1PRe6ex8zQnoMXPxIs0d6X24reGHeQvAPqGMsA1rgfPu4olvC1KDDE1G2mGU9YeDH5Tysjz5v4HW6eqkSknjWS4aW80Xp5YCo9TXEMx6Q3N4lydCpBzThmgOIjIatpE7508LaYMNkxpSQqkfWLu8WbqqwjfwNPVe",
                    Name = "Bo88egFulBO0tWJ93Y52C590AS",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon31()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 7223,
                    DiscountPercentage = 6869.0,
                    IsShopSpecified = true,
                    MinAmount = 9345,
                    UsageLimit = 1430,
                    Code = "iB0DiDGR",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-08-19T02:12:05.000000+09:00",
                    DisplayStartsAt = "2021-04-26T17:14:14.000000+09:00",
                    EndsAt = "2018-03-08T09:29:23.000000+09:00",
                    StartsAt = "2018-11-18T01:01:24.000000+09:00",
                    DiscountUpperLimit = 6084,
                    Description = "bC2wEGBfcAGc0EsTxqnb80BRFYcLTC4xCABLekowD1pN0MSUSSu62wEl3iPUkIv4a2NsBAg7OoWmbOWXvcqkH6OCG8bjnFs6Wxa",
                    Name = "7kVTYLZtjqA6blCNXCxB23NKDv8dBki6rCZ5MRu3n3kWR611LhXRF1WjDXemYssWVQAa0S9OWEqIPoWhsZ81p0D8THD4dpuhxNvhxjPf",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon32()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 9956,
                    DiscountPercentage = 3492.0,
                    AvailableShopIds = new string[]{"7b37c401-a3a6-46c3-9415-98bbfbe44a7c"},
                    IsShopSpecified = true,
                    MinAmount = 1308,
                    UsageLimit = 3789,
                    Code = "pGSOhV7",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-12-26T20:34:27.000000+09:00",
                    DisplayStartsAt = "2023-09-04T19:10:59.000000+09:00",
                    EndsAt = "2015-10-08T10:02:55.000000+09:00",
                    StartsAt = "2020-08-05T08:13:52.000000+09:00",
                    DiscountUpperLimit = 4143,
                    Description = "gjnPne51YZOU0zGq4PpZBc0rJPOstD7C9IM7suB5w40dZFTsuKZGsFElmQpA4RSTaTlLaqlkU49OXmcM1eYLCIvDzYzwAtEksQWSl6Am3gCBrhM35EfmrtOFWMml5EKRiDsWg9ZcujQMFmb4vZ2HzNm8wdK6sB9HsuClaKx3AfzVa9lboQsNDBH1uzKMqlEF94aThPURq2Q4ZM2ZH2d8EggWOOiiO67HWQCePWkLnY7y5P2vTc2kTDF85U9g3",
                    Name = "HpRLtjhMxgRT9FEddBtVan5HyW6Uan9MoYMbeeBKUXDDy014vq",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon33()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountAmount = 3687,
                    DiscountPercentage = 2058.0,
                    StorageId = "63b5b649-94e3-4be8-8910-9235c0341d18",
                    AvailableShopIds = new string[]{"7921f1a7-e1b6-4358-ba7d-1f7546957b54", "4500a04c-5f5d-4cff-a130-09f67f84b66c", "0f9bd4c9-d3e4-4776-8601-335ba6aff899", "17ce51a0-0b9d-48a3-a4c9-1a4d13c37b07", "c1605ee2-d07a-4215-9c5b-95b7494b6ef7", "8bf5420e-1a1c-48bc-87d5-bd96e6ee8b08", "ce58ee69-14b6-4b8f-82d8-777db1a2d62a"},
                    IsShopSpecified = false,
                    MinAmount = 6603,
                    UsageLimit = 725,
                    Code = "t",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2019-12-25T12:23:45.000000+09:00",
                    DisplayStartsAt = "2018-02-12T04:36:37.000000+09:00",
                    EndsAt = "2018-01-11T18:22:56.000000+09:00",
                    StartsAt = "2025-05-07T06:41:03.000000+09:00",
                    DiscountUpperLimit = 1288,
                    Description = "BiPR32MXZafz3jffpT8lgGERnFdcWhSdaJfJ60D0H2T0aKhnL3FlnAD82QrpYaKuslNraOesyAiawWiyWkSV3bs4OkWhHFx3P67yxFmxWAZtUSoiVrIFnb7w6ZClk",
                    Name = "oqVajvuG5cGcBP5wA9GwSB8bfxMId7hFKERGvYa7vbD1cIywVpXocQ5N98CAVKuK",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon34()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 542.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon35()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 1731.0,
                    Name = "FLAIRiGKuI8CNBTqLCZ99AjVbK3l31NeAICSoLJdEVZoJB0H5I2jNm",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon36()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 89.0,
                    Description = "tpCMs9TezTj3A085y5hWQ3gdeDOWFExGORRYNLJdsZ6n3IGoF44i0499bTqwmusaHN4dAo0kcMwrj6lsuth",
                    Name = "9pSzmqV",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon37()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 705.0,
                    DiscountUpperLimit = 5790,
                    Description = "W3BZh2UFG0NdobuyCqKAyF8XBloHn7nUM7l934bPMQ7DIwFMXGuPCrmdUDxKggDFfFvOJkxhc8IPvtQD4QxNm6tX3Guvbo2vDNfvQpElqxJKgNyOMeXS2rUoC",
                    Name = "5iHqorIswPc2cBsLEwskU0m8hSr1melepO9LnwIsUcSmvb4GOUqCz9cGDIhlPt52zP7YS2DWusW",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon38()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 2147.0,
                    StartsAt = "2019-04-02T18:02:52.000000+09:00",
                    DiscountUpperLimit = 7547,
                    Description = "pd2P335Nv6jpCTg7cImjgcPmkAEumRe3ajMg8VGC0KZL7VMaMEGv2NsNRGCHkqW6b190Xf2yHeAyBqIIySMiYLD3kq3Znz8pepfEmpSiLZTFdERWScAwFtubDUWmymMiDwFFfcNNLAfTp6G3m2S11HDiNC2T6Z1NRFWi9x",
                    Name = "JqHv5TG4qAHZdsob31RGFcTjCHIRk6EOKDYDfh7IyYBfSv2V1UV4oPfCtFaYiWkYeLppJ33CkMXXFMJ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon39()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 4834.0,
                    EndsAt = "2024-03-28T04:49:19.000000+09:00",
                    StartsAt = "2025-04-18T02:37:45.000000+09:00",
                    DiscountUpperLimit = 9598,
                    Description = "bgq29Gzz59vVOvin5VZAtZIBDPoHNl5n64I544",
                    Name = "K0pgRwqKcwLRpyfhvSp3huvf9ISSZ1V5b6lHxDKXrcl",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon40()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 1448.0,
                    DisplayStartsAt = "2019-03-25T19:17:42.000000+09:00",
                    EndsAt = "2020-03-14T19:46:58.000000+09:00",
                    StartsAt = "2022-04-04T15:23:40.000000+09:00",
                    DiscountUpperLimit = 9558,
                    Description = "Ntce9IqiVZ5m5eyekXLeKtBuImxNnX45R5ZNIieikdp8w9LWlkr",
                    Name = "qUcz43dBm26Or7FE7oxXwqyeP95WFsrDTZsTHaLMAx4xhJmPNb2Vt3kMgTzA",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon41()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 1912.0,
                    DisplayEndsAt = "2023-04-24T12:29:47.000000+09:00",
                    DisplayStartsAt = "2017-03-10T19:33:04.000000+09:00",
                    EndsAt = "2017-07-04T02:39:31.000000+09:00",
                    StartsAt = "2025-06-04T06:25:15.000000+09:00",
                    DiscountUpperLimit = 4717,
                    Description = "tM4rQ7TMWwQQegAiqW5Gh3EedIVkoAN4R6PBgm1bgbkQVRY8MuhwDykulFo5mDyJw8V3XaTOkFDFDXkJRYuzmNrD0IPFMYcPpoEqcZqYNWKYupHW3vkZPbupwOmpLyfcnvR24ekndSEuijqLz34cJjz9WzSXV2waIpnDEjnPuGDOLqsy43AtW",
                    Name = "T6hyzJkPIxdv4Vr2ADhNnBQ2AhJrtrRhEmEhncAz9T8Jn6tKv842hmKtJWGe0W2JoBVxOBG6QSEaMM6DcJjfAtdrmKAg3KBKDu0vlbYdVC6n9nVLo43cE33CQP",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon42()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 2656.0,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-09-07T17:17:04.000000+09:00",
                    DisplayStartsAt = "2022-03-13T00:14:43.000000+09:00",
                    EndsAt = "2024-02-26T13:28:59.000000+09:00",
                    StartsAt = "2020-09-27T09:33:49.000000+09:00",
                    DiscountUpperLimit = 9575,
                    Description = "DnziraNYM7VX5YLnlD8HOOCDlP4GZ7jbmXMO5zVMwfk3fyCehTHNb57OPgysrQCIrNbKg5EGtS1CRG8HTOfVnvp3qGXZFBsOSpPHbliv7UIdhUMzObVJcG",
                    Name = "btiH5rur7GsubMGTjIcOXKD9o8Kba3zToGBURahT5P9DvE8UV0j2Yq",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon43()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 8643.0,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2018-06-20T21:17:58.000000+09:00",
                    DisplayStartsAt = "2020-04-29T18:30:43.000000+09:00",
                    EndsAt = "2018-01-15T11:57:38.000000+09:00",
                    StartsAt = "2015-12-19T18:04:46.000000+09:00",
                    DiscountUpperLimit = 858,
                    Description = "c8KVpHARBDgg1Gn2XcmC1vS6JUWIFuWHifSCeHqDX4OovF1kPsfFAfUD6hedBMnO5c5siBhPS0PdEUgltcrxJuLRpPyEyLzg5USUF0acnAYj9bCB7",
                    Name = "rUqwv3jfmweeo8gmjk",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon44()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 5545.0,
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-09-16T00:27:10.000000+09:00",
                    DisplayStartsAt = "2017-12-23T02:14:05.000000+09:00",
                    EndsAt = "2018-10-27T20:35:27.000000+09:00",
                    StartsAt = "2025-03-26T11:13:59.000000+09:00",
                    DiscountUpperLimit = 2011,
                    Description = "bYRleOf9KOkq0RFzjJHwRArvOU8komJ1Atk5RVlui7mGRMrDuzhgMwi2QEwxvEfxvbfoaYN92mmS964bSnGq9n7PpIOomMWW66P3IlH0kXmsTMdugDsmRtGnF7L4kFCWrbFqt27c2GHcIyayD2aKjXN0NBWyTy0xC6byToeZcV73t7vuEmirlewYMI5WNi6AMJzfUo3",
                    Name = "w8SUD48UFtXOBKAPivd5iJNrdqAuTxyB0A3WX2EcUb892jz3Nv10xFyFeM64iLpLDhctAZixWvzCjv",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon45()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 2181.0,
                    Code = "Gu",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-09-12T13:59:00.000000+09:00",
                    DisplayStartsAt = "2020-07-15T06:13:47.000000+09:00",
                    EndsAt = "2025-05-03T23:46:40.000000+09:00",
                    StartsAt = "2020-04-05T18:40:13.000000+09:00",
                    DiscountUpperLimit = 3164,
                    Description = "GJua2paAAkUgzb5zEsMYGbxzOIV2r2JtDEGxgzX90xQ1qEwnOjzBjMdE2ZgqC6g1ENWOPFMuygZod8nuff2bwE3RDjoGhPLmonziI8gPB410GLPQCeC7jS6W3DftZcdyglmNXEppEtAwequ8PJiYpSm0jLeVc0IIOPvouCc",
                    Name = "BMs9oEUXd",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon46()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 7841.0,
                    UsageLimit = 1133,
                    Code = "J5CsXe",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-07-16T09:19:00.000000+09:00",
                    DisplayStartsAt = "2020-07-29T22:20:19.000000+09:00",
                    EndsAt = "2017-03-12T22:54:19.000000+09:00",
                    StartsAt = "2023-04-29T08:43:21.000000+09:00",
                    DiscountUpperLimit = 1088,
                    Description = "XdBqvz2LZqSb1Cr9GvJk1u6JVnb04lQy4ktenk93ttYPJhOiPCYhnxitPJhteZ9v4lYIFrYpnV35pBMGKJEJkpn6Mlr99tmpLoTFQeHIPsIBBDhi4oQ1t1s3zE32Vk24Ceen1NSjytDUp3byZcFEPnIDVyEjs1xIVAG7PJaXsPvnXy7JL",
                    Name = "PWT4POJKIKUBKfvAdAdVhR8qFWp5tCaOkj67zOOhzPjoLUnpes4zWmpVcy9ixDX4fCfbAE0AZjhFFPDiC5XgRDuJC7DFGXWJ1DsLyOnXTqwNlXWPSNst44xBM1tMM",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon47()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 3567.0,
                    MinAmount = 9807,
                    UsageLimit = 4207,
                    Code = "qW",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2019-06-26T09:39:59.000000+09:00",
                    DisplayStartsAt = "2024-04-10T15:29:16.000000+09:00",
                    EndsAt = "2022-09-04T11:27:40.000000+09:00",
                    StartsAt = "2023-04-09T05:33:04.000000+09:00",
                    DiscountUpperLimit = 4095,
                    Description = "SPh7o2MC5sMNAQhF0HCoj9Dj4Zp",
                    Name = "Jqp2buSHK5WKI86hTWo47qb9nSKNBR3LjzCd",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon48()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 9213.0,
                    IsShopSpecified = true,
                    MinAmount = 551,
                    UsageLimit = 9221,
                    Code = "o4",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-05-13T02:20:53.000000+09:00",
                    DisplayStartsAt = "2016-06-22T16:17:15.000000+09:00",
                    EndsAt = "2020-08-14T11:56:01.000000+09:00",
                    StartsAt = "2020-03-25T12:38:55.000000+09:00",
                    DiscountUpperLimit = 8953,
                    Description = "2Am8ZcyGh3Bcz",
                    Name = "Q1HmAT4U7cCHORIBupKF2LGLWlWRqEU1R3HVfumJrkxA1RBhkJnrKn6T4UBYf7XzEp3cMOeoQItbJApNFNbizZqSEKvNBsiLTmRsG1pcvzPfSNlMjgyCm3",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon49()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 1687.0,
                    AvailableShopIds = new string[]{"f4e0ef6c-2b94-46b3-b681-2fceb45d0e19", "47e2782e-9ece-42f5-9c82-009c3b82acf9", "7761b6db-862b-4401-9514-7b9679aaeef9", "b32af3a7-e560-4e77-bd65-aa41cfa5749f", "1eff2b58-e8d8-491f-a16e-9fa9708c7ada", "848189a6-7ee9-42a3-8a4c-72537bd4099e", "ed147d2e-df36-4c6c-a2ea-21b932a5e02c", "9af9fe4a-4018-4ba6-98ef-8956c77e467b", "2affad1e-f0a4-4e2b-97c5-349a4df2a64f"},
                    IsShopSpecified = true,
                    MinAmount = 2964,
                    UsageLimit = 2203,
                    Code = "N",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2016-02-16T16:30:29.000000+09:00",
                    DisplayStartsAt = "2019-08-20T13:30:37.000000+09:00",
                    EndsAt = "2024-05-19T03:13:22.000000+09:00",
                    StartsAt = "2024-10-23T16:16:00.000000+09:00",
                    DiscountUpperLimit = 5328,
                    Description = "qob8ZBDc2LIkAJFpX3tMiPvkskrBs7cZNQht6pUXt6QkeG9pRp1c5EcN6nLJcb0NEcuMnzKSDbJDSeKRyRniwPaN0afN8mRVY0r2kLaYAQQnNWq5gJk8ucSDE2uEYUD0C3IXLL4lH8T3KxBkSfET7NeTYdPy8UjYc9OlslQQZIq7zSOEeSzczj6ObIBdQwmJP2q6udBME6WRlyybO27figMsVRHKPW8EbdfuKdbyfcjYNDVx4A2ovqPMZA8irX",
                    Name = "9E6ZcMzkLyAqgwSoddiujWTgn11mpxaVIYgQo5GvBiHKw3I5f57jFE45d3P21Pzx2jnlKrw0LdN",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon50()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "90eade4f-5e9d-4f39-9993-d1e757086ef2"
                ) {
                    DiscountPercentage = 8869.0,
                    StorageId = "68454e53-15b4-4209-96a5-d08821f42c85",
                    AvailableShopIds = new string[]{"03172cbd-fa6b-4e7f-8bd8-8a43727cc49e", "c194335d-5fc4-4b72-a374-678b9084a35d", "b8de2ca1-ffb0-40cc-8a24-67cf05b308c5", "a52285aa-04b3-4ad1-a789-ec775b324a9c"},
                    IsShopSpecified = true,
                    MinAmount = 7455,
                    UsageLimit = 7363,
                    Code = "szhf",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2017-04-07T15:27:25.000000+09:00",
                    DisplayStartsAt = "2021-11-01T12:10:27.000000+09:00",
                    EndsAt = "2017-12-24T01:58:36.000000+09:00",
                    StartsAt = "2020-06-13T18:02:18.000000+09:00",
                    DiscountUpperLimit = 1753,
                    Description = "5OthVwPmvHXBFS5mnHJDaN7ByqCBViT8YJSc5gafw5E7JxTvjUc1aT5EbGpCQn8B7l65BYMvNkhEwbRq7C0zj85JoEScisdzkhxnXFFT7CXS50vaovkROQbPFa2Q0QZFPxPWcwwu3uh9fDL3S3NHvBIxMXxVOS8aVOpiS1EeK",
                    Name = "2EnvF9kW30yXFj5pEZQNOtIwcrR2Tap7tnXzfq7vVXcZZXkAjYTEO65NQtFJaRQvj5yyqZjpM3EGDvxc2vHpfKAFMK87o5EDfCnjGc",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
