// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCoupon0()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 5191,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon1()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 2959,
                    Name = "fIfeAIGZfO7OrSr8B2QPQ9Y2Rpsj0heI",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon2()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 9777,
                    Description = "cWBx1T31cQtfbPCATbfETgM8KooCtS8z1fc4bmpdjKCTfj1GK9RSuRp80JIGIfZb0zQJuIdXR7obZEoGLvyrYRSePLUjWmS1Vfe4rF1Hr4pu5zkebHCqAbvDaj08T6AqfU9VC96cIIeErItINWil5tFd5fwAxEmAXCuaDk4OeOYMd636fXlQmJ9z2bnV3FEVOMMOncgSgfpnmC2KuXyRgGfUfNENrDu8T1J2YZjgzjmCRB6Bb",
                    Name = "dWS6JCIu",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon3()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 2989,
                    DiscountUpperLimit = 6293,
                    Description = "5OFNrZXER72QaNrZpzYfcTDxwidoKxhgH4IlA44068ievlutMBS788il7UEqSzLy9xJxJq4hHbOAXXYVgVjKzFhmxuYV64qe5o2B2OlLXdk5kJbuw4YuJbyUdwtweakDyg0TFsZujDlCiTABlfIhphFt9MZHKK4Bljx7sJ424DF7dkePprAJuqXJLC9DlGjqYc53kHtf9cD7bpNKlOmIqFEpEzlkbZXsHeK96",
                    Name = "7zZjofXop8q4Bfps6VchHwOSBaSPaNKxM4bPYPan8UYIRAISeS032nbwP9uwXrTBWthKP8SFB1epaCsenfT",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon4()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 9558,
                    StartsAt = "2025-03-15T18:20:56.000000Z",
                    DiscountUpperLimit = 8218,
                    Description = "MgJI5wZ1cKhV863o3fLMEPLjDOHvTYhO06QE7ACXnugqJAsKtBEhfGR87GnzBbDtq5K3lfoJShMC6uD2oZ5QpD7GXwDffXUtXBf9of2MaByNhkorzLzXS7sax7iYOPlAj5UlMDxo6iDarlMDzJC7wMAkFYNemkzZpvDvog0lglLv2T90aOF7qLZJG6mWFW8mYG8iBpA9wK7FerKmMDJDN9kjnEAtWkM10yTZC3mt5NbCfjtxFXhJHy",
                    Name = "Zxe38yvM1SEczLfO3bcMSuKdq3FslGbkH",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon5()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 7687,
                    EndsAt = "2024-05-09T02:17:10.000000Z",
                    StartsAt = "2022-02-20T18:19:01.000000Z",
                    DiscountUpperLimit = 958,
                    Description = "hxbbT2umORVj1yDfkPqeu7VGzhCxzDjEPJsArCV0qEvJPpVoq77PuYo1FVSdDE8cTf3i5qFGBCHYpL8ODBvwgaMAc0JPVvhl1tkrYQHQhhRs2PIaofbMQ1Wyxx6iPX8wNVpCNUyiEzApKM66ZkEOto1oTpzcZyDOIWVw",
                    Name = "oFQcmGYbDKlivyrCrMwSNsOLmKdqXCCeTbwp9jz",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon6()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 65,
                    DisplayStartsAt = "2021-06-03T04:32:45.000000Z",
                    EndsAt = "2021-06-18T15:44:43.000000Z",
                    StartsAt = "2020-03-03T13:28:57.000000Z",
                    DiscountUpperLimit = 4325,
                    Description = "ybVqp1YrzurkqIAwcJ63x2Wplk",
                    Name = "qrFdjX6CETl764u1bEUuZsZXEigsXHGq2ofRToY5BXgCj",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon7()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 3785,
                    DisplayEndsAt = "2024-11-13T20:09:29.000000Z",
                    DisplayStartsAt = "2020-12-08T07:46:34.000000Z",
                    EndsAt = "2022-05-18T05:31:53.000000Z",
                    StartsAt = "2020-05-07T19:52:35.000000Z",
                    DiscountUpperLimit = 8590,
                    Description = "XmOEMtSXxzZokGYkRiArikW",
                    Name = "ZSvWA49o8HQUEwyp",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon8()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 6721,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-06-25T15:59:22.000000Z",
                    DisplayStartsAt = "2023-01-31T02:27:56.000000Z",
                    EndsAt = "2023-03-07T17:36:27.000000Z",
                    StartsAt = "2024-01-19T13:32:35.000000Z",
                    DiscountUpperLimit = 6150,
                    Description = "gSDOAS6m6W4ycEKeHr4636lRXTr2iPpZt0j1CI3l6J30qBjXV2f99mPOolq1eiW9RuNHXLsbYmrfHwiW6AehvKLu9jSykyDMxjQhXvqsNkUwpnxOJbMzTMi5NaDqvIkEgkU1iGJo4Veu1nD62pEennAfXO8IbuWWi93UYO",
                    Name = "WoEzm8A2AGl9yivXZBxfQ6TXMiAoASOIgsAFMRnA6RqJv3Yoi1HNQ6SUUxfHdkFZrSjoj4E906hjOODSKfXhRhf12fH18u3lWSr6bxBxhq8hzLJKGl7pegu99iL",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon9()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 8236,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-02-18T15:51:40.000000Z",
                    DisplayStartsAt = "2023-05-25T13:25:27.000000Z",
                    EndsAt = "2022-12-25T17:05:32.000000Z",
                    StartsAt = "2025-10-19T18:16:29.000000Z",
                    DiscountUpperLimit = 8163,
                    Description = "eRH09p3Djf3UXXM3TuFXvJTrk8Ursx5VM8uakcEIyxQz7D46SGfEdpD0URVkFLTmlxp8SI9cXescrmSD5nkp7THGlyH3t2HB4wHFbCGx0Xzqx2wtaKpu1qdmiKn22F3ctIsxTTV24W3iMjgCaf4v1F7zb24",
                    Name = "TvVYyzGoNYLIXxqonkMGqX",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon10()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 6892,
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2025-05-06T23:59:55.000000Z",
                    DisplayStartsAt = "2023-09-26T04:04:26.000000Z",
                    EndsAt = "2024-12-23T14:16:50.000000Z",
                    StartsAt = "2022-03-19T23:37:53.000000Z",
                    DiscountUpperLimit = 6391,
                    Description = "p9nn9cv0p2uygmHKqGnnOeMtFto3ZtBMyDD0JldWFE85",
                    Name = "jbUaTENhmx5ChLqBvfWnrg6wEB880lMBDEtofOwuX4DmXscPUoeV1XH78h5Guqwmdx9H0OP7RXsy9p5y2A7XdzXIFXZ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon11()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 5390,
                    Code = "bjsii",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-03-01T21:18:37.000000Z",
                    DisplayStartsAt = "2023-06-05T01:45:34.000000Z",
                    EndsAt = "2020-12-20T19:43:37.000000Z",
                    StartsAt = "2025-02-15T19:31:27.000000Z",
                    DiscountUpperLimit = 5528,
                    Description = "XZ0lFTg0",
                    Name = "buQwKeaQ4HWfPuDn8vtLGTKy9baAXpUrNxQgJv2d",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon12()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 7857,
                    UsageLimit = 6890,
                    Code = "Dvx",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-05-13T20:18:21.000000Z",
                    DisplayStartsAt = "2022-03-07T15:34:04.000000Z",
                    EndsAt = "2021-01-27T16:37:18.000000Z",
                    StartsAt = "2021-05-18T05:10:41.000000Z",
                    DiscountUpperLimit = 9448,
                    Description = "M2eopmIlmvqzqnGOYbg6rdqjemTbEPE7it6nxw8VlzyCNbz8zcALV0qfahEqSWpbWk8lIjmXf3crokuVBQQlsA8T5nZUMuDqspHuPmGiUoPteza9Foxx3GETJuunMNM7JUVu7YgDI0zSm6",
                    Name = "cU49za1QJALcpDZJ7YKoaGZqFQRMYj7eI0OiTgfPr68fP2A8RCqV",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon13()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 9225,
                    MinAmount = 5907,
                    UsageLimit = 7530,
                    Code = "MZulltZtjg",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-02-19T06:13:26.000000Z",
                    DisplayStartsAt = "2021-09-15T03:46:42.000000Z",
                    EndsAt = "2022-05-18T07:31:16.000000Z",
                    StartsAt = "2020-03-07T16:49:15.000000Z",
                    DiscountUpperLimit = 1459,
                    Description = "QgsidEuf2NvBHeZX8hYKnrzJWptMhyWUi64YZ",
                    Name = "GeyCSFHt3mcrCB8tq8q2IVY2UPxEK8mwHnigIC2xteLEmOps6u4P22rjT4dupTBgLrwJlYmSqD3jh0KtoQaeaW3v7wYe7b9HTOa",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon14()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 7829,
                    IsShopSpecified = true,
                    MinAmount = 4727,
                    UsageLimit = 428,
                    Code = "mOJ",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-07-14T04:13:02.000000Z",
                    DisplayStartsAt = "2020-01-21T11:29:07.000000Z",
                    EndsAt = "2023-08-16T09:10:21.000000Z",
                    StartsAt = "2021-02-28T20:31:09.000000Z",
                    DiscountUpperLimit = 7154,
                    Description = "gVZwJO2xNcltqUbvpNyoJI0vqJ8n0oUjQYsKaRMsrJUacY2rYQO4gmGHCfbUV5BkcqYiSNlDYC6MEWefziiHI3EykNpjwCPjAkzyY2kmUe2JJ53U3N6F0e26pbO3HttlG4eyiatMI7VF3dtugJSz1Q3vovXNsgFsW05W19aXuGVVRQlUVJv9CZ2ZsBhmJBENJ2Jp2YLnPueitIaB8AWaFb8JKCZbl1FLUJSG0fudQ9bvTSzM",
                    Name = "BL1Qigyh82R8yfv5oZ1A8LucSTZwJytxSEpRfXYxFxMDsqe8NITOunWJGeGMfsCgwJoSsvq0p2vMuqT6yOdp5xmnGGOh83wDY3YT1DlU5jqThl0v0LlAw1sxsypK",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon15()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 4754,
                    AvailableShopIds = new string[]{"7d1e645f-8497-48d0-94c0-043c92beb3d5"},
                    IsShopSpecified = true,
                    MinAmount = 4,
                    UsageLimit = 9533,
                    Code = "h1",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-10-18T22:04:27.000000Z",
                    DisplayStartsAt = "2020-06-25T04:58:35.000000Z",
                    EndsAt = "2020-07-02T22:32:01.000000Z",
                    StartsAt = "2020-06-17T11:07:30.000000Z",
                    DiscountUpperLimit = 9150,
                    Description = "x9kbbfwykuboyLPrrY2btuxHx9YophvSLqEzRt6XTR3oDpLSuhWGSp4IuNXEvAYv341undTljbWPhfpiwPMjupC65xVDnAJbsKD6b895iftqbY67Ut2zsAKH6lKT6gJXbaEKAddoUM0CRdaSDeoQ9lXXELG9oQdgpEse81VvpXr3HeuSevupI3Lg6cydG4CQY3zROLCcC3cDzGwCmJXH",
                    Name = "iF5C2",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon16()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 9717,
                    StorageId = "52b1e4fc-def0-4c67-b048-ac5ea5b94670",
                    AvailableShopIds = new string[]{"87b4b7b0-21a7-4f7d-85d5-b5438701e8db", "3d95741f-9140-445b-9729-26c21dbc8e65", "6ad79143-d344-4727-9e81-c8927bb7f194", "64cac04c-4259-446e-8536-26bb1ea692c8", "d7d5149b-6469-4d86-9689-7492a75eb858", "507e816f-1f40-4ca1-875b-c01ececb7cb0", "1a0bb43c-d539-4e69-a8f2-628818f7201c", "23e318d2-21ea-490b-b4e1-67e5aa91563e", "8679d6ea-ded7-40cd-b92b-62c5d201af04"},
                    IsShopSpecified = true,
                    MinAmount = 4475,
                    UsageLimit = 4774,
                    Code = "3X",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-07-15T02:38:58.000000Z",
                    DisplayStartsAt = "2022-03-23T10:34:39.000000Z",
                    EndsAt = "2020-07-26T08:52:20.000000Z",
                    StartsAt = "2020-11-20T12:43:36.000000Z",
                    DiscountUpperLimit = 1824,
                    Description = "BJJ5t6h3IPcBKQDcagEkitF8iACEva8PGaDArnv6F3HhJclpvEl0kBLWjkC",
                    Name = "0Mj5I3Hqz506kx1IdZKDkCNCl989Inr9h5bKrK2A0mcFTtdvdsEkzDVoxJr0lAnMovtOnbZ68JstsOcxw5P",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon17()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 9660,
                    NumRecipientsCap = 9968,
                    StorageId = "be1efd61-d474-44be-a346-e09c35cac798",
                    AvailableShopIds = new string[]{"f3956cd4-a7d5-4fb5-9740-48a769426835"},
                    IsShopSpecified = false,
                    MinAmount = 9100,
                    UsageLimit = 9837,
                    Code = "YIqjF",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2025-07-03T10:01:08.000000Z",
                    DisplayStartsAt = "2024-06-06T09:10:54.000000Z",
                    EndsAt = "2020-11-12T09:01:13.000000Z",
                    StartsAt = "2022-10-10T02:03:17.000000Z",
                    DiscountUpperLimit = 1031,
                    Description = "VX7m2aCCypluKCuWAlkVHsDkHFJvihW5VcQOv2mc2ISnCuuu6HEZICTUsFd55cysKpzPw06buTFvYo4vEubGw6jVHah2jNyPqoWcQPdnYsCcbQIY2KFXsspdkpVkTBJa3OTrsXs88kJNoIZ",
                    Name = "azm0l",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon18()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 5847,
                    DiscountPercentage = 7376.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon19()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 9484,
                    DiscountPercentage = 806.0,
                    Name = "Z7efHVp4Du6bqVzq0H9hNDIpWOGRlL4QDCIWrLzYwdZH6RYisLngmui2yyfAvCUPPfC6gPSyCFjnlF5wS89FXtStGksu",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon20()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 5578,
                    DiscountPercentage = 3283.0,
                    Description = "3uI6YbNMb4YSuPWKo7xO0kav9UABs7zcSSckrHrP7zrKa6Deu24AbEENpv2mR4vcFbZYPGyrsGLqJFlRMGfDCisIe5qHDsMdG7wb",
                    Name = "KEpXzySqqc4sXPad6xuwUqi64YRTYtsOeEN9XbwlgwBy5OkIYkbdAf4PBqh2Y5zV0C85Vn4l2htJKp8EeWwIb",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon21()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 1052,
                    DiscountPercentage = 8852.0,
                    DiscountUpperLimit = 2773,
                    Description = "73CECtq6YH4jk",
                    Name = "jZI7iaSuegvmESb5ZkkQma0HXRKUqv4lzkwZFtSWx4aRECgS2Rzs2ylIq5ZtrGXVCQUhbREfojZVoiIjURbvF5c",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon22()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 3061,
                    DiscountPercentage = 6265.0,
                    StartsAt = "2023-04-03T14:06:46.000000Z",
                    DiscountUpperLimit = 7489,
                    Description = "tbiunsY6SNRraYwc8QDfAEfV4F8XUQw7FOCvHUkEBp2LxsthHBe9",
                    Name = "WUoT5QLe9Yg2CBY3rucfBues6uHoyn0kY9tu08AkjC0WPKbQvYow9FaOH3zD7SQmRuyNCM",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon23()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 4234,
                    DiscountPercentage = 8072.0,
                    EndsAt = "2020-12-11T20:02:56.000000Z",
                    StartsAt = "2020-06-04T03:34:31.000000Z",
                    DiscountUpperLimit = 5452,
                    Description = "UAKK4AYXStTHGYGCT6FSvry2ciGzpWdg5yn158N5eaT1YQUtPEMBFK5RCvbOFISTKPBIbnB4IlVfzKQeAZtwqv4AGYkQ5YWzuO0mrMzlLTVYxU13omHKmdh2ng7xlmB0D7qlClsr3peE1RPsdDZEoaT5osfv5Au45ikmQzjXEIrL5tEVsPccciqGzpCuGxgjotbAnDFm6nBFTBcp5MgKi6djde9q9Gx06zspIhW3",
                    Name = "gmaN6JcrvmX5G7cBGoNqTURH3hLLIVR7YcRrTeQOsLdvK2PUyIdpshyxjFJxJ7Fc",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon24()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 7786,
                    DiscountPercentage = 2743.0,
                    DisplayStartsAt = "2023-01-05T11:43:30.000000Z",
                    EndsAt = "2021-05-05T12:10:12.000000Z",
                    StartsAt = "2025-04-03T03:29:47.000000Z",
                    DiscountUpperLimit = 3204,
                    Description = "WRFS5iP8DHnWS95dKYCDWjMDqXUFGoRA4XvfiL62Wv2vl8qJa",
                    Name = "fcwBDpLTRN1a0lar5cvmWk6HP3Edv56q9t5VGuIJJqB",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon25()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 4787,
                    DiscountPercentage = 9704.0,
                    DisplayEndsAt = "2024-11-06T09:28:35.000000Z",
                    DisplayStartsAt = "2021-09-21T01:39:02.000000Z",
                    EndsAt = "2021-05-16T12:10:49.000000Z",
                    StartsAt = "2020-09-26T16:36:18.000000Z",
                    DiscountUpperLimit = 5991,
                    Description = "ljp1y8KOJgfu4WFT3sPLKGiMRgfz5jiMdvRW63Z9043h9SU3fTD5o4Kn6TQ5PsH9YtmnNiOZyV9",
                    Name = "AO3DnB1YRES4xlc6449ibwy8gDnWqdIP3eIh1PycrJFKeRKa6OogwkyZYeik5qw",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon26()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 1521,
                    DiscountPercentage = 8322.0,
                    IsDisabled = true,
                    DisplayEndsAt = "2024-05-22T09:39:34.000000Z",
                    DisplayStartsAt = "2023-02-20T07:50:39.000000Z",
                    EndsAt = "2021-11-06T05:25:24.000000Z",
                    StartsAt = "2024-01-15T17:14:37.000000Z",
                    DiscountUpperLimit = 311,
                    Description = "lJwoEqJ4uimGtF4vDevDABoV1497oKjyplKXUyjuZoAdZaiUShsjoKemD9IJVji3EhQ10nakJ4Xx7BosawhL51XW0ltZ8tyB",
                    Name = "dUl09HCPEoMCgQwCdLCVxkfS7LC09h1a33P4feIw8rNkq1IJcIVXzbXoLITUciADNRcm8cr7h7uvpVmJgh2hspBOtxaFVpQwu69vaYb020lVhpK1uj",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon27()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 9787,
                    DiscountPercentage = 7230.0,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-06-19T03:23:05.000000Z",
                    DisplayStartsAt = "2020-07-07T01:57:51.000000Z",
                    EndsAt = "2024-05-16T10:33:04.000000Z",
                    StartsAt = "2023-07-26T19:44:29.000000Z",
                    DiscountUpperLimit = 4905,
                    Description = "4SIGQ",
                    Name = "IPmfa5YJsZSIV5H0hKFZRjFJsBJwxE5ymHkkfvwj75uGxXyxLiKvyAHQ0Cmh0GR2iNpQgbrTS2HEffP70DHCUohTMu269OO6DIw88je3Px2M",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon28()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 1206,
                    DiscountPercentage = 1982.0,
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-03-10T06:17:16.000000Z",
                    DisplayStartsAt = "2022-08-21T02:08:58.000000Z",
                    EndsAt = "2022-06-17T07:43:27.000000Z",
                    StartsAt = "2024-06-01T14:24:44.000000Z",
                    DiscountUpperLimit = 7392,
                    Description = "XsAZIDxFXqpctZUoXMEwvfZIhfCcdWRRWKB",
                    Name = "AMRk3KT9aHDvn680BNVo61whu52VEWHzeXnCqnnjKe2ZokcQxt9okwN5c4Mkgq5YYKEEntoCEiLAHJ2sW9FitjutUJJsIkCXGENUTkzcX2ykkKJlN",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon29()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 5297,
                    DiscountPercentage = 6148.0,
                    Code = "7",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-07-26T23:35:43.000000Z",
                    DisplayStartsAt = "2021-10-08T15:00:59.000000Z",
                    EndsAt = "2024-12-24T12:38:57.000000Z",
                    StartsAt = "2021-11-17T02:26:49.000000Z",
                    DiscountUpperLimit = 4779,
                    Description = "UpqdHMS0BnQNQ8yntRPdiO7nDWAmmXsETvex6EwUtMqxtCSMEZWLR3IYMZqZQp71KYV2dqAhSRH0jBaTj6CKr7da3Hc5MrDSrYQmTFD8MK4LhwIRladKEnUCUBMTsHjSLXQWZdqZHXOS9NchMxuvMOV5p",
                    Name = "0ThIcNVnpd1n04FvafoOT5XflXygJfyBJl1nws6Ne3S7kdpHli9FCf9vj51iwXi5vVkai7",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon30()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 7337,
                    DiscountPercentage = 5225.0,
                    UsageLimit = 6756,
                    Code = "PllBkchJ2",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-11-24T10:34:52.000000Z",
                    DisplayStartsAt = "2024-03-27T03:41:02.000000Z",
                    EndsAt = "2022-05-18T02:33:58.000000Z",
                    StartsAt = "2022-08-16T16:50:10.000000Z",
                    DiscountUpperLimit = 1515,
                    Description = "uEPtWGn6U1tknXv7iBjpuz8kXfTQVtq7nYSMGg6A5q48d0VvhbqvZRxaI0AVDH5phIrM988xOpACBuWehCLI5Ithzpo1sbw0fi8Tfl4MiezYuuDN5NO2HkiJUlQ4dKg",
                    Name = "R3uo3pyHQKCLEzAV2HW0T6wtgFowhjkpuax7inTCKJlAlkDX0z9k4WtlP60t1pGDC",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon31()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 4546,
                    DiscountPercentage = 5247.0,
                    MinAmount = 8318,
                    UsageLimit = 9783,
                    Code = "pLioRLUy",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2025-04-26T10:38:54.000000Z",
                    DisplayStartsAt = "2024-07-06T05:16:12.000000Z",
                    EndsAt = "2025-05-27T01:42:49.000000Z",
                    StartsAt = "2025-01-23T16:53:43.000000Z",
                    DiscountUpperLimit = 8890,
                    Description = "wp3jBXylmnzTDYQPTQEhEDpiIl88uXhFr9tzNaCFLhrW7Qg63LOoyDRk2frbKYDtHXRSpeSviFk4W1qsOLMcNwe8KEeqmGGreSt4nt1ybC0Ywm3a7y1jkUDzYlQVbUnnRBBQRDsGnvgO2bodBPeKpRFsQIEwGMkEBFs4OKb",
                    Name = "pkXgOJ3P1nM9riB",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon32()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 5607,
                    DiscountPercentage = 5677.0,
                    IsShopSpecified = true,
                    MinAmount = 2079,
                    UsageLimit = 893,
                    Code = "W8sR",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-01-16T08:50:48.000000Z",
                    DisplayStartsAt = "2021-07-18T22:52:03.000000Z",
                    EndsAt = "2022-05-23T01:44:24.000000Z",
                    StartsAt = "2021-09-20T23:01:12.000000Z",
                    DiscountUpperLimit = 7485,
                    Description = "JkSJHuUfzU3cxqLSG8S4aP0CNMNfb6VowWUVfzovzP7VL5ebcijLtVhmlM6kBu7DCNg4aU7BlWsNECFWA4hHlvtcjGtIPad",
                    Name = "KiVX8t6IuP7AfSh1iSdnomWlXA8y2vwAsTNYaeLyV7CWdrmk7DRyx2nAdRh4U2Gnj6HilrfsKlPIExrXeCFO",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon33()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 4341,
                    DiscountPercentage = 9397.0,
                    AvailableShopIds = new string[]{"0a769ecb-5ef8-4b07-b256-460ce79cb334"},
                    IsShopSpecified = false,
                    MinAmount = 1853,
                    UsageLimit = 4765,
                    Code = "hz7DzBywK",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-12-23T07:17:39.000000Z",
                    DisplayStartsAt = "2023-05-27T13:45:13.000000Z",
                    EndsAt = "2023-07-24T19:55:02.000000Z",
                    StartsAt = "2020-07-26T01:22:08.000000Z",
                    DiscountUpperLimit = 2478,
                    Description = "lN0S7L0N0uBH",
                    Name = "0xIlmI7crwjgiJmBq8x2BMoiejWmPY8qwKCFWRUhTWJtrSHM5KvGCx3jvLeQXqJ7fOtRApW564YK0LvLN69VHlYJhXH6cUQL7XLfiXA0zUZ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon34()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 4865,
                    DiscountPercentage = 3785.0,
                    StorageId = "a0643614-6009-49e9-818c-732cbc1e8ddd",
                    AvailableShopIds = new string[]{"1b48da90-f25d-40cb-9921-57bac6836b5e", "ce0ca253-9180-42bf-a004-7e40ec1d6565", "3e9543d7-79d5-4f9b-8db9-1afa2b924336", "381edcec-9126-46dd-bb41-a1e2627bd3af", "abaf04c4-a587-43b3-8e11-23f7946c6b70", "f4d1cec6-9e2e-4dec-ad2a-af40659fc7af"},
                    IsShopSpecified = false,
                    MinAmount = 9333,
                    UsageLimit = 5571,
                    Code = "RGaBKUJdH",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2024-12-16T19:52:57.000000Z",
                    DisplayStartsAt = "2025-08-07T10:53:04.000000Z",
                    EndsAt = "2021-07-02T20:11:18.000000Z",
                    StartsAt = "2023-06-04T18:51:09.000000Z",
                    DiscountUpperLimit = 2052,
                    Description = "kwaxRbmzAo5vzrqC43kvR5VzS4JSx7Qk5qYm8EJV1By6vGk0FuWZ3ptkSyNBcc9paWacdvlF8sKq6M8TMch0t9MLsXgvG8EYKbsPpBkO0z5h9VDX3NEhsO0rjGagOIQ6x9sSfu0zX8zdCniT7rbp4RdF8jzLLX07kGwmRZR89QJDyeQCnprhi7qh3K",
                    Name = "4T37Wi9g9nZZhOiq9TM1kLnMOaPoayQ1SL4LwXctk2uyuazqzFpngLk90ZBFe71DIECbUavopCer6amUq",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon35()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountAmount = 87,
                    DiscountPercentage = 6633.0,
                    NumRecipientsCap = 5390,
                    StorageId = "d8b35c69-767f-45b2-81fe-6a8c0494b975",
                    AvailableShopIds = new string[]{"18dacd56-d1f2-4f9e-bcdb-c0edbff05b85", "33a6089f-0b54-463a-aa90-019fe4cea2ba", "72bc67fe-c66b-4f69-9c94-710fec1a4136", "2fdefc9a-29f0-4394-b17b-37cf8f83beb0", "36b9825d-4682-4428-a6b8-6440d4e6899d"},
                    IsShopSpecified = false,
                    MinAmount = 8604,
                    UsageLimit = 7662,
                    Code = "t",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-11-11T22:42:51.000000Z",
                    DisplayStartsAt = "2024-08-10T15:04:53.000000Z",
                    EndsAt = "2020-03-19T08:19:47.000000Z",
                    StartsAt = "2021-10-31T03:13:22.000000Z",
                    DiscountUpperLimit = 413,
                    Description = "mpnnbeCg4xumOoxK0oT4F795unttA065Yr03Qzj1SYSblk7QSMdkkKPrtzfsCSKaR3OFn1WKJz5hhBZBCZgSERTDaoK9IqITw9RXh5VLaBXSS3EzsrMpj8GBIyJaRyweuGKy2nXN4UBPwGQ9mhvxLr7QQxCiR4LJ0VAGQ0LknXBVXV6IePzMvb8rIAKhBAUImOpB9NJd0FGb0jOdIa2VbV1E7pIBf60ZOpXb0uUTjEz",
                    Name = "rW5FEq6VpVqu1DpFd0JaBsPBEjjxsN82R5bV74h6MclFLskpVJhF8OvhWGp3gTZC60RTw4fZ8zWBqSC3vDIMcnooU2vsEkhFzbMP7H4x70jy8CyXSjsNQfhm4JdiSR",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon36()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 5291.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon37()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 529.0,
                    Name = "0sAxVpKo9Pr8tnCR4b3VVcnR7ySaTJSLXaRbjFaOCY9HY0faJMcRsZ3tfn14pqdpY2gOVzxC2AMFcqtkzhdfPK",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon38()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 7913.0,
                    Description = "9SERDVnpaYhOvVB8b8Y5rPTIoQafvlfkuyBchbjOVFfaAmwoPiUeFs2qGGZk77FXigkPx1NC7bcdhHDyq2BmegmNcooOzsV0UAnFDq2j42XbKSjWX0mczdG92I",
                    Name = "3EQWa6MviKhzgN1WE1E9QE8I1WOtKGTOoDsggK2zVvIrNmjPyMt7JZTknlcSLOAfgHki7iEUUEZsYB8I8w6YX9AjYRSoiU",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon39()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 8352.0,
                    DiscountUpperLimit = 49,
                    Description = "BYQYTGkBMdZ9gxwOlUDOeBSRiyqeameMaY0bgN8gTUkelv3hkGmk4iWQZAVafOlabiOcEnloh2DXft8ZR3ZIT5H8aSOl3MDXnG9yHqEAThwDuq1zewsMIx1hpzHiKxcCexEPrWNcD1BCJ2Q7A3yxMyBqU",
                    Name = "SnmfmyMf158jbodxUJxcIS6QwIFvAWCZsB1EYOxuNXsb8K4XyQ60l6nZCLpElUd6iH1X66E0nqBBGmKnZ6uDIn3iuFQr",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon40()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 3358.0,
                    StartsAt = "2025-10-03T17:12:31.000000Z",
                    DiscountUpperLimit = 2535,
                    Description = "eXzyNXNrNkeWa9hWsLSo6RhlRrNdmMatyDW12s5SKsd",
                    Name = "6fYHa9pHdUJ2NkpD9XRln1g4q1AmzenaBAIYsPX5BEVEkSwN7",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon41()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 9222.0,
                    EndsAt = "2024-03-29T09:12:12.000000Z",
                    StartsAt = "2025-02-22T17:04:55.000000Z",
                    DiscountUpperLimit = 3413,
                    Description = "MqNeIWxDQ5mYkDBp76iPlz0WyF7I2Snzg812cd0lMhCHFE2kwBpeHriIaXxYmUfeD23BKTCZPKhRk3w9r2MS5qnBpeG29hBWbNKIGuo",
                    Name = "WD3BHeU5bcdtREmG3PoPoUnVURoRDP0303M0EUzCR0XC7UBINwESq7hPy7a3F5MBC2C7VfANu3p62KDWO8TDrLXiDq8ZM4HpSJ7ezaoKVM6PG4nVxadlDXYh8F",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon42()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 4275.0,
                    DisplayStartsAt = "2024-07-11T08:06:02.000000Z",
                    EndsAt = "2022-04-29T07:33:44.000000Z",
                    StartsAt = "2022-05-04T16:07:17.000000Z",
                    DiscountUpperLimit = 2343,
                    Description = "Rw62VEObOlMsiJRl1b2ESaJKCDCVaIjvXY9buv1PGDaqpxNAcB7XJ2PMH0HA7mMCxlziaJ1nphI9ySRxw6pdyrj7YEb5B",
                    Name = "bPwZWptKeWMAfjTzhjO10bQwyTU6ZUhrOp80a47LYIcD579HHiydYwYbStQsIHShYuqMOfry8h",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon43()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 2805.0,
                    DisplayEndsAt = "2021-03-12T11:16:47.000000Z",
                    DisplayStartsAt = "2021-02-27T23:24:59.000000Z",
                    EndsAt = "2022-01-29T11:45:16.000000Z",
                    StartsAt = "2022-01-23T16:36:38.000000Z",
                    DiscountUpperLimit = 993,
                    Description = "un9q8fRCMt2pzYekawpUouvYHKlj0GUL0Fcnz7fEngR6pF3m54VmwYrgFgT3RyUt1Kexb2ZIYN08OgDDQYpUk9QvTpwbva3X3fUufQzzx2hzebS68SpNEGkfmS3U",
                    Name = "yy5Zn41VzLKU",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon44()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 4327.0,
                    IsDisabled = false,
                    DisplayEndsAt = "2025-01-26T18:14:28.000000Z",
                    DisplayStartsAt = "2021-11-01T01:00:35.000000Z",
                    EndsAt = "2024-03-14T15:40:44.000000Z",
                    StartsAt = "2023-09-11T09:25:58.000000Z",
                    DiscountUpperLimit = 877,
                    Description = "YNfeeKoLdFE8Hmt9R8Bv1AJsBz3l6W699PQnfTErfIkmiU4i2bFcYt3zvnnQAgg6WKGNaTc3A08bOic61u1yVQPNCQEFIkbwhO9RJiR7mxn7kYGzShazSiZH6DDfNqfsVRi3zxzsVzVJLxpF9uCjOUSNMH9fWh27PiOpr3HMMXsb4Lh4b0",
                    Name = "ko8iE0P3Cu0AOaTlKzyVFYYoK00acoGlEqYYGWZUMgU5LJ8nedbEkL6VCbZlYCZFu0YjXrvi",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon45()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 5611.0,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-03-19T23:32:39.000000Z",
                    DisplayStartsAt = "2024-10-06T12:38:09.000000Z",
                    EndsAt = "2022-09-24T21:02:35.000000Z",
                    StartsAt = "2023-08-15T00:57:48.000000Z",
                    DiscountUpperLimit = 3397,
                    Description = "blaTUskxDWTi4syFdijXYZ6Fkp0v2rObj5KP7CaX5R9O7hnOQMfDj4u8or1Z5ajnFBytvfCWU5lvasIan6Df8qsq2k3ETquM3SQujWFDE153B",
                    Name = "47G8gAIFr9zY1ABG4Q6S1AZ81ee9F1zaeUGprRtPpZgZzOhvmvIjVKe7aM7QiN4LuTtB8ZF5mN9clYyKl8cUsYw8CW8rHVcmWZsjKlFT0f7did2pSfVDNNjekhaUaqN",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon46()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 2454.0,
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-05-27T02:24:29.000000Z",
                    DisplayStartsAt = "2022-06-05T21:53:19.000000Z",
                    EndsAt = "2021-10-06T18:48:18.000000Z",
                    StartsAt = "2022-06-08T21:26:17.000000Z",
                    DiscountUpperLimit = 8156,
                    Description = "pQcwkQvvHfTZTUiaSBniTvgiFcfFWfXoobW27D2zSsjxSJQCC2TKE3m70u0i2E7e3WCog3HknLhb4mGHjaX24jJAlJFQ82MhyQQoipgFNSux0jeobdQD1VXjUggH7qMtHhSfZdXUyjb1NxKa8yAWf3eI4rn2GKxT8MfsHveV88627AlMJYf8MI0c",
                    Name = "9iCp3raZonaiDazAfoVN5",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon47()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 9690.0,
                    Code = "NoMx",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-07-22T04:00:05.000000Z",
                    DisplayStartsAt = "2024-09-09T00:24:29.000000Z",
                    EndsAt = "2022-11-01T08:32:49.000000Z",
                    StartsAt = "2025-04-11T06:51:52.000000Z",
                    DiscountUpperLimit = 7789,
                    Description = "7gWIlidcsFhnnSlOPQSKVW980GqQVfPuvUPiEFV6mDyiAjmPC8FhIFplNkUQpOFZAAuAkdYYYV8q02r77ePIgPu4dPH7ImSF7bIQ97lNoNEqqi11P4GN23Eb6NlDd7BTwpYu4Valw5xiI",
                    Name = "7Q1Cipp2CPMRifbrHbdPk0z0U5np6zSSSsJChBCfGVrTTzFEA3cEkuniAENmbJtM74yoK3yNaov",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon48()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 9096.0,
                    UsageLimit = 6807,
                    Code = "7ur",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-04-17T18:05:04.000000Z",
                    DisplayStartsAt = "2024-03-13T18:05:35.000000Z",
                    EndsAt = "2025-06-17T21:06:54.000000Z",
                    StartsAt = "2020-01-11T02:40:09.000000Z",
                    DiscountUpperLimit = 7908,
                    Description = "GWEfVzKMwihh3UCJATPnnGfbSAjt8y1LpRX9w3aEMSDM7H6DKpMVCMs6AqPF1N4VGIihJYcZH1yqyLKdrb7VdvBferrdPPsgFTBp21GVpuNthlN8cTNxtClPPAh3ydu7juMaO7kqGjaASQkqyw2Q45pim16jWY8Li2yJuAILC",
                    Name = "9WmiQzTAP0hsvYk94ECXfwyrT6FNWSeiPJDkaNGUUFy3",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon49()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 5047.0,
                    MinAmount = 998,
                    UsageLimit = 4629,
                    Code = "BCxguWk",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-07-26T05:01:57.000000Z",
                    DisplayStartsAt = "2024-10-17T08:27:13.000000Z",
                    EndsAt = "2021-11-29T10:45:39.000000Z",
                    StartsAt = "2021-02-19T18:45:38.000000Z",
                    DiscountUpperLimit = 6763,
                    Description = "ajD",
                    Name = "hky1e9MUM8ZY9eEBDTjFI",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon50()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 2180.0,
                    IsShopSpecified = false,
                    MinAmount = 2232,
                    UsageLimit = 7151,
                    Code = "Rpg",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-07-12T03:31:37.000000Z",
                    DisplayStartsAt = "2021-01-26T06:13:40.000000Z",
                    EndsAt = "2020-10-05T17:19:27.000000Z",
                    StartsAt = "2025-02-18T19:46:55.000000Z",
                    DiscountUpperLimit = 3433,
                    Description = "EO",
                    Name = "fsuO3LMtzPm5pmHiztzTLcjSeNyveotr1SbLY9f9RM3h2SXQaAm6iMSYVoPQWfV62UhTGJS1L9KLOsA2Q2Z23Mwd98ip",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon51()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 3466.0,
                    AvailableShopIds = new string[]{"62eed9fe-95fe-47e4-8154-e9d5e5d1bd60", "5c325251-94dd-4bad-83d8-4d5fee45c5d0", "9ff85ae3-b293-4201-8c3a-24da675603f4", "b981f20a-c75f-4c08-91bb-6bccbd0f2440", "64694688-8444-42da-b60c-c9fdb1307af4", "d3fd19b1-5064-4237-8e19-79e818a4d353", "19fcd933-4b74-4e49-9b10-d57d563f5062"},
                    IsShopSpecified = true,
                    MinAmount = 7962,
                    UsageLimit = 647,
                    Code = "aQ9UqJHQ",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2025-05-14T23:11:58.000000Z",
                    DisplayStartsAt = "2020-11-29T07:09:26.000000Z",
                    EndsAt = "2022-09-25T23:17:33.000000Z",
                    StartsAt = "2024-04-23T20:32:45.000000Z",
                    DiscountUpperLimit = 1494,
                    Description = "ia7WMZwo",
                    Name = "ONY9mYcjUD3BWfN3hpObBbd0WPCuqh90wnUEefdvvGn56xgqcINC0MaOVTzOYUS4YiFzadS1dG4VhCAXdvLcusNkP92lEHAtBr5uMSg7mI2h9L5UgNjF9pGXPoR6V6E",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon52()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 7831.0,
                    StorageId = "f0a19948-2039-436f-bfc7-7e1dae8f83b2",
                    AvailableShopIds = new string[]{"be8dabbd-ee38-4420-9d21-266dbef8874a", "3a37c0ff-b477-47e7-b710-aa983b3fbcb4", "0cefe8f4-694a-4364-a179-18ca93a29f10", "f4741535-ffcc-41ec-a162-aa5c2c2dad32", "579de8db-46fc-425e-b9e7-d8e65ce4bad5", "3a32312b-22a4-432a-9136-5a68c6817854"},
                    IsShopSpecified = false,
                    MinAmount = 1019,
                    UsageLimit = 2769,
                    Code = "06Gh",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-03-05T08:05:14.000000Z",
                    DisplayStartsAt = "2020-09-16T00:52:28.000000Z",
                    EndsAt = "2020-04-01T14:54:34.000000Z",
                    StartsAt = "2022-06-29T03:57:31.000000Z",
                    DiscountUpperLimit = 5115,
                    Description = "Dmfb2965KcWooPsLAa0LofoeILq2j1JbokM11iel9SifEKQQKEl5jTOYEn550ChTMJy5Ri4zQipR66DYXbWwtCBK4yI7b7ruIn1DQefV0LKmn0D6u1aqXUgLXLPq2aRw08aQ0rfHosccmXhG1yeE5aq4GKVSCfP0aoPIG5NuiBMU7rfLf6FhpORYw57l88LjJn33RIRSO",
                    Name = "lXSQfzzTwn3Dxt4Xew7YzDaZ1J9OdsQM2IVUV93tsgTE0JEew3ek7732woVpaWAn4e207OnXy1NWRJfp7ZK3WimQaowti0F0S2aIOKkN5iwpVU",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon53()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "896e091b-3a3c-47eb-910b-20ac3cf00f1f"
                ) {
                    DiscountPercentage = 4806.0,
                    NumRecipientsCap = 7844,
                    StorageId = "6e493dd5-42b1-4261-aced-1eeb4d641be4",
                    AvailableShopIds = new string[]{"78aff4c6-df42-498a-94da-17c209adccf9", "5b0c4a73-bb83-482f-86e7-1194247e4021"},
                    IsShopSpecified = true,
                    MinAmount = 3838,
                    UsageLimit = 932,
                    Code = "8TiyAaF4",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-02-23T18:07:17.000000Z",
                    DisplayStartsAt = "2022-08-31T01:53:10.000000Z",
                    EndsAt = "2024-09-18T01:37:23.000000Z",
                    StartsAt = "2022-01-12T20:27:08.000000Z",
                    DiscountUpperLimit = 3521,
                    Description = "bqyi68iyJ302sQl233vCftoqwC5tymvF1K23X2uYu46",
                    Name = "ypSW9PxtiaID1SUCfz9yEelMoF9a26c2RLHz",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
