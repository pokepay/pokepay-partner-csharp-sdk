// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCoupon0()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 1538,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon1()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 2438,
                    Name = "aBOX1Ig",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon2()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 3629,
                    Description = "8hROFB3MljHGXrpVSkSdQBQzqXHWCk88yAdkNbUUlXp2sT5T809AbvtJaUy0K5oRI2Afv57nsS8pT7iwNl9CKN5yCsDMuuaWg6vjoZFJU5quwxFBXnJ5Eq6GcNPCEVPq46GdIPJm8acYbz4K3IA8JYUILwDYHWq9h3ayYxNgOJ9lz7HMs7r8Mwpfor2g0yfZY1uTlDfXz0uDeov2GaxLjZM7ftEliKPQLWJArPq3tph1c8gKwadNnw5eCqfZdk",
                    Name = "sVLOzbmWJa8YkV10V05hf8WtQGHp",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon3()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 3514,
                    DiscountUpperLimit = 5516,
                    Description = "v3xPQzPNZMa3cTmTslTDHzq00PkzT3rjRscSaTDEUx",
                    Name = "AJXNLOLDUjAEUO9KUSGzbSRmda66Hxc4wf0VsciZqVg9CY4JyxUqm9QYX9eOR0RPX1REGDLSjexe42N6h2JPSKXOz8JwoXWD3OcRqlTHYwOestfQFumGQVfU",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon4()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 7667,
                    StartsAt = "2021-03-27T19:26:47.000000Z",
                    DiscountUpperLimit = 1827,
                    Description = "hfYXr8Tws7k48pGfLa44NJMCeJ8jlsCf1ZGfe6gS6x1DqMOxCGU3f",
                    Name = "6AMPJnByO8IAY8ZIAKOHAMaB7ZxbhLpAG3vIRMVqbJVgHdPhvPKwzwzrbVYcpu",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon5()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 2232,
                    EndsAt = "2023-09-30T23:35:16.000000Z",
                    StartsAt = "2021-10-03T12:20:42.000000Z",
                    DiscountUpperLimit = 844,
                    Description = "TKQxDTzMnM7RDpI6DZQTPfIajSBmWzFbVfaL5LT2cPjctfArtA5QzauCKeqrCHLOb6c1NzcpMx2l8O1vhN74ziDPGC2ST6zTd6xVdSlQkj4Z4gR5YjMfLJAECo2gNDDCrV3PxozvlpngWpA6xbZMfc0uwppINu3aeeMh7MwqqZDhOobPpK6TParuulg11gUr",
                    Name = "gWq51AuUounyHv57rDbvmuL7BqYd28Ylq4PTRl",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon6()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 5356,
                    DisplayStartsAt = "2020-08-07T17:29:28.000000Z",
                    EndsAt = "2020-09-27T02:23:50.000000Z",
                    StartsAt = "2020-03-05T12:35:54.000000Z",
                    DiscountUpperLimit = 2330,
                    Description = "3bU9utxlgE1LKaCgZVizYnvZve6TUWFWHy2b5Vs5gPuvHuA5HWIqhNUoMi9wNIaJyI2pADs2B4yB1GZTk4B1PKHR2EWhPZSvV8nScTvJ4VHpUajLmD9cCimPwC97LHWaSOnICBJimGKiopraV9Fu47Wi",
                    Name = "Dgn9VJjED17kjNr295nMRl2EDxJjIsLyTAA5MEWhdNFDbX7fss0ltmaJnxslaUL7RrxqbBxY5tCbxb35FzAfmkd3pduwUBkrqrvJ3GVs6GsJ8XiLApVwNY6zjKIEdq",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon7()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 4702,
                    DisplayEndsAt = "2023-11-01T03:28:59.000000Z",
                    DisplayStartsAt = "2020-11-14T16:24:32.000000Z",
                    EndsAt = "2020-04-02T21:35:03.000000Z",
                    StartsAt = "2023-07-20T18:28:42.000000Z",
                    DiscountUpperLimit = 2165,
                    Description = "ots6oOpUnX5paeprWtPSGZrL9UrmNU3vFgZ69vwXIbJ7yB2uIbdTxo63tcXPzmao0EWnR",
                    Name = "VCjlgZcfxXnQfXvfoocz3td7B",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon8()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 5132,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-04-08T03:42:05.000000Z",
                    DisplayStartsAt = "2022-02-13T13:46:16.000000Z",
                    EndsAt = "2021-07-28T12:08:23.000000Z",
                    StartsAt = "2023-06-11T07:24:46.000000Z",
                    DiscountUpperLimit = 6379,
                    Description = "qzJ0Us2fGrJyLKsRHFPpRHSTTSFxnvRwj3Oa3urFP8R4bhOdaBwGLVVHwtN3AFb20DhVqIxWOmhxrSYnMI0dEOIqOFLqn2ZuLk5GF2FUuyDVUpZnC5UYez0zM0cPoxe0DGq4e7wXOOVc8GIqj26qcMQ423OrAYOyd21L95eAaG4JW0HS70OJOUKjKLeGCgLyc3XcFOYpAAHYYK9z73uxDP2ictixYSW0A",
                    Name = "nlJyQ4ogjQgbj8PRfNm4",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon9()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 6902,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-07-04T22:35:36.000000Z",
                    DisplayStartsAt = "2022-10-23T19:05:14.000000Z",
                    EndsAt = "2020-05-23T06:21:51.000000Z",
                    StartsAt = "2020-09-08T07:46:28.000000Z",
                    DiscountUpperLimit = 1107,
                    Description = "HmI2see5qGgNKlkv5vEc",
                    Name = "EoMjbT4VP8lZF0AhpuShoXCly79fXYfw5LEwfbe5dxC9nFb6EnR37XI7b090WiBtRh0avWom7iSFIO4uZdtJGn6HWLBVq7JK",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon10()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 2847,
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-06-01T15:49:59.000000Z",
                    DisplayStartsAt = "2020-08-31T18:20:47.000000Z",
                    EndsAt = "2022-04-28T03:00:25.000000Z",
                    StartsAt = "2023-03-28T11:41:52.000000Z",
                    DiscountUpperLimit = 6007,
                    Description = "17O7EyRwbRgUy7vFea5WeBAkgIciVnQYB9t75iPCouDaOPQZR4UpdKmspN8b2gkMc",
                    Name = "Prmt0hjIJu43wB7scWlYirrj6XmXYoqVEvKvw3AdEs5hGDLuaSpYl1TGEiugglxJJBGt0dcPbtQc4uSkk26u",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon11()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 2562,
                    Code = "RwX6",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-03-04T12:48:38.000000Z",
                    DisplayStartsAt = "2021-08-06T20:07:20.000000Z",
                    EndsAt = "2021-04-21T00:43:35.000000Z",
                    StartsAt = "2020-08-01T19:15:50.000000Z",
                    DiscountUpperLimit = 137,
                    Description = "EoFSQiDYpTTgrywklVD4mELe2edQd6Mwu12UeT7ThuLLgJ9PT2zGkxOOzhTpPLnUQXea3eTBlP1za1n7IcWMlrV1ey0F13qC7iArhwm76E35ql4XfUae14Wbt93t26LiQAMBYx057AoBwLeryNecuIhUBXRQRCvkSHsmDbMU34aVyZLcCNEj4KngWmPwy7k0E27omWruIWs4TAGf",
                    Name = "q9ue8TvZwYbMntyIPzqAGarjc22UJafoQs8oM8ozozHv7pSUjn2vqwiu14DVHGOrsaIKsQ11QA0zf5QFhEcKjjKztGRK6K9",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon12()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 932,
                    UsageLimit = 9993,
                    Code = "APEUIe",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-08-13T11:55:14.000000Z",
                    DisplayStartsAt = "2022-10-03T12:45:51.000000Z",
                    EndsAt = "2023-01-25T22:57:35.000000Z",
                    StartsAt = "2021-06-21T22:04:45.000000Z",
                    DiscountUpperLimit = 7368,
                    Description = "h60rhQZO78Ysa8FmX0ccAumcgyg4cqEaxSmm8kmOYz37PEcPNNiKvN5Ht8RLA9ghACTJRDSXhb0oNXnX7lDuTKN6ygQ5h7kN0paU2HC64w",
                    Name = "cGrUcdcRO2",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon13()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 125,
                    MinAmount = 3345,
                    UsageLimit = 9299,
                    Code = "3z",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-03-20T01:46:03.000000Z",
                    DisplayStartsAt = "2021-05-13T20:22:09.000000Z",
                    EndsAt = "2020-02-14T12:16:04.000000Z",
                    StartsAt = "2022-11-29T12:19:11.000000Z",
                    DiscountUpperLimit = 271,
                    Description = "A6JlqvTos7SrIAl",
                    Name = "P5taDahvoqIf3H7H22Xm9qyhmrKIzglEahNrgMO9grD73ccOw2h3Fa222nHBaN6510bAHdVRRVqtJb7GLA5jeThW5qr3yEd4dXuL0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon14()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 4338,
                    IsShopSpecified = false,
                    MinAmount = 8355,
                    UsageLimit = 7539,
                    Code = "z4",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-03-27T06:17:17.000000Z",
                    DisplayStartsAt = "2023-01-23T13:43:20.000000Z",
                    EndsAt = "2023-11-07T12:15:36.000000Z",
                    StartsAt = "2021-03-18T03:42:01.000000Z",
                    DiscountUpperLimit = 8850,
                    Description = "0Ug3INp6i2B7flubMg8I3PFzXHSWu8scihqWwWKLIsgxoxZCQ2441blMtSOZHoWLqvzthoXVcLebdhYmokN15vn0WBXfGwW2mMW1f9b8gICLPqqow4qG8fKRsijZT9ACbFhSbUnXdQpmPpnHFqiJvOHOlQFLdxOm16oejI9dat1CLgQoRlzuyxB2QGrCPmQ415Et2SGqgy7Wowcm3CmFfxpyCPpsziVloAtynLsPgO9CFz87kImOLWy",
                    Name = "Z7sTqSkOWWDLZmiyY4qSDce16GC4wPtLkv3o4mk88yYjRj6ppJLnlec8JObXuRsPVeFJcsOCB9dZH0k0NKC7bYH6IQhPn4Xu22OkprhqhwvNpME",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon15()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 3277,
                    AvailableShopIds = new string[]{"0bd80e0d-13f0-47d3-ae10-d34cdac8ac75", "bf313f6c-091b-42f3-9ed8-0fb859ae47ba", "c8468a14-cadc-4556-b753-eb6ed6c564ca"},
                    IsShopSpecified = true,
                    MinAmount = 9488,
                    UsageLimit = 5979,
                    Code = "wO",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-03-03T03:20:42.000000Z",
                    DisplayStartsAt = "2021-08-10T12:55:31.000000Z",
                    EndsAt = "2023-04-18T00:29:35.000000Z",
                    StartsAt = "2020-09-27T19:39:25.000000Z",
                    DiscountUpperLimit = 6447,
                    Description = "o1k9oepRB7yq0Oa1SzxnfEtxAkEm7sWqtjzoUhtWxAFotkA3GwpJ6pU",
                    Name = "WjvsxF7sC23pAVbXivHZtrIAyP3B3n1m451mPU8dTD7bnX",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon16()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 5169,
                    StorageId = "20c3d98d-9e72-4f38-966c-5f8122f2099d",
                    AvailableShopIds = new string[]{"c2c50ffc-4868-45c3-b736-2c11f9939d53", "a314d3ee-a5a7-422b-a86d-4c5e62d2af39", "34b57a90-4b3f-42a8-ad7f-580ebbb6f7e6", "dacface3-7754-4c98-b5e3-9b4c2d2cc0d5"},
                    IsShopSpecified = true,
                    MinAmount = 6143,
                    UsageLimit = 2988,
                    Code = "lWYk1",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2024-03-20T03:30:11.000000Z",
                    DisplayStartsAt = "2023-05-20T21:08:42.000000Z",
                    EndsAt = "2020-12-17T07:46:05.000000Z",
                    StartsAt = "2023-01-12T20:29:23.000000Z",
                    DiscountUpperLimit = 8861,
                    Description = "mgnIHDOUd6m8hlpqS572AEF2Ig4ikrPHEQKtfhnULfkSB8hVVRhZgs0ShDA1T4kxBhv1AOy0nxw",
                    Name = "zXXsopchwGQjGjB8p2sVlc1F7AjO7bJtO7Dnnc0m9rCGM5hvlyZ4zlX8tOl1gapEcvHpCxJHTvEJuFQdQk10O1BigovU99ROsTZK65zQOhilbvDcAlCpIpPo9knGna2q",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon17()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 148,
                    DiscountPercentage = 903.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon18()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 9301,
                    DiscountPercentage = 2736.0,
                    Name = "maUmeizgJ6BwqETnaq5BggeTTsTdXg3gtXl8b4nZOZsr1VPBj7ivp8ue6C3vcL7BXf3IHjK0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon19()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 672,
                    DiscountPercentage = 2392.0,
                    Description = "iCg0zcQRlonr1N4IocuKCcZ1hdXCgyALhLsPZ4xEZBaL9gPoE5PnOxSYIBQUZMwQEKQp536z2WYA1sx132uYplZstFpjBFQ",
                    Name = "9bZmz7mGiFtXmRSje5IwYSIqDRQ8l1f3l8HQkQuvmK2Ptks2ZcRpli1kcYUjdKenDWjLTaaBosz7aBykLG1RzGMmx1hSkje9X0kmePd8GXi22Jw1idAxcQ9RQc",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon20()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 947,
                    DiscountPercentage = 8709.0,
                    DiscountUpperLimit = 4970,
                    Description = "zkpVE1oN8GZytUXsp14vePeJl09h1SmSe7z9uXJe9aRBNGFiXbom9IOMRvPLFSPNSfRkv8Et2jCeNHdXqCXUrpWRIEnGneOjH6PTi68jf1Ll0O4t8yu2YY3amcbZRFCGWEFlMAhGqMbfoqHBJlao6arWtW2Kf2i4IAcwQju",
                    Name = "Wx2kNI9qHm3gWQVGMbEKu4AfuwweTMrw4f2dzO7lqy4kEKJ1Q7c8C0SZpOWKljojyXNatsc",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon21()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 7543,
                    DiscountPercentage = 7648.0,
                    StartsAt = "2022-02-09T06:36:21.000000Z",
                    DiscountUpperLimit = 7952,
                    Description = "yFuc4sWKFJnLD7m3pQpjDhF5ByJUZoKtqULctVH6JYk9cBHdXfv4mxi0ybLSzTGh",
                    Name = "HvgOYEOxJ03xV3nSGPvtC19a5RpyBdhfDtmpMgxIW5ljI6yfgW8zOoaul3ISoLlGYqCoXoGAustVKiyGKg6I2c4vjJ0u",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon22()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 8059,
                    DiscountPercentage = 190.0,
                    EndsAt = "2021-04-07T21:18:21.000000Z",
                    StartsAt = "2020-05-25T04:35:10.000000Z",
                    DiscountUpperLimit = 412,
                    Description = "FNk5xEatUCGYnUIhqAnDQImUocNLmlkEs1s3",
                    Name = "oajWUDkbVb94dhcQmTjATi4FvTByqrSIzi26M",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon23()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 2887,
                    DiscountPercentage = 3281.0,
                    DisplayStartsAt = "2021-11-30T13:42:00.000000Z",
                    EndsAt = "2023-11-19T21:42:35.000000Z",
                    StartsAt = "2023-07-26T10:37:04.000000Z",
                    DiscountUpperLimit = 644,
                    Description = "sTX2x6llLqyqxLBzmQKSHklP2GNjfKFk3xSPN2EauZ",
                    Name = "ekm4uUHwCvLyAybYYI1PTnYt6AX3ZMraJiLHRNzuStDZHp5MvhzfbMCo9qyaARxtZqgB5ft0k4jfS4r5kfrLJkZytv5gO2QqNTMB",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon24()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 6661,
                    DiscountPercentage = 3292.0,
                    DisplayEndsAt = "2021-03-01T05:15:44.000000Z",
                    DisplayStartsAt = "2020-09-05T00:19:21.000000Z",
                    EndsAt = "2023-07-23T07:52:16.000000Z",
                    StartsAt = "2020-10-19T09:44:41.000000Z",
                    DiscountUpperLimit = 5279,
                    Description = "laq2biuqoxBaoCNpyYWsiSLe8XgZiLcB9lkuwUmt5gGSX2SbBRPaYeWynmUQkGZMrt25VWYHR7PmuYOuy85eAINi4DCh9E1piomvY0y0iLigYmahsEfLajE38CSizXaYXCbSM5b6xxCi9aS7pUn8sHDE4F3kcf0hrQ4a3rPgThS8KkZCOZQxeSP2z",
                    Name = "qxNvFrLUebeM3qu8knhRZPaevJazOcUuFHzOggogIb0heOl2hQPfOiPoRx",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon25()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 941,
                    DiscountPercentage = 4562.0,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-02-24T12:31:13.000000Z",
                    DisplayStartsAt = "2023-05-11T18:33:19.000000Z",
                    EndsAt = "2022-07-07T10:33:20.000000Z",
                    StartsAt = "2021-05-18T05:54:56.000000Z",
                    DiscountUpperLimit = 5523,
                    Description = "A9g",
                    Name = "BKU33EhyGU9Sc7TWphUCFQOlhJCzSIu3L4oB0QKjjVXdg6wCnP4F0PUy8Jy",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon26()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 5596,
                    DiscountPercentage = 9056.0,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-07-26T11:30:55.000000Z",
                    DisplayStartsAt = "2022-09-20T08:08:47.000000Z",
                    EndsAt = "2022-06-12T20:58:14.000000Z",
                    StartsAt = "2020-07-08T08:44:00.000000Z",
                    DiscountUpperLimit = 2645,
                    Description = "0rY2rRd10bnDEPKoSGRnM40Adb2lsHFBNfL0ieognilvSR4pMoCwkxpSpqKLDrvgRvBVvAYQP0NP5o8oIbQ6bc",
                    Name = "TH9KRHlq0wqM01LRxPcYJN00R6J1knyJeLDqePaGS57qQUn9QotexnhecBro7jHBJHSTWFK0aJRYTfxgM2RajM6sQRgc1VEyXHMXBj8otEAcFy5ooXoXuzl",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon27()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 2969,
                    DiscountPercentage = 4208.0,
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-03-16T04:51:59.000000Z",
                    DisplayStartsAt = "2023-02-20T14:26:38.000000Z",
                    EndsAt = "2021-04-20T04:56:40.000000Z",
                    StartsAt = "2023-01-24T12:20:31.000000Z",
                    DiscountUpperLimit = 6023,
                    Description = "aTfbTmVX0XqqL2DDCdNGv9QaNMmxX2S2fPh6fy135I5DG",
                    Name = "GggnvkdWrHaspAw5Vcp7C",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon28()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 9271,
                    DiscountPercentage = 8991.0,
                    Code = "JSe44PvWg",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-07-26T00:28:52.000000Z",
                    DisplayStartsAt = "2023-09-02T21:58:07.000000Z",
                    EndsAt = "2022-05-24T05:58:28.000000Z",
                    StartsAt = "2020-01-03T10:55:32.000000Z",
                    DiscountUpperLimit = 1766,
                    Description = "fEic8syvxPXUni2oM8QHA7lWY5GLHqITj0UgJwxmfaF0gGfgNlG67XOfGi887nNv1eh26ZZWkeJQym7n7CGmjd25iFSdny2rQSPU5tCjVy8COfDZrZRHs0hjVGtY7fDHExM6iUcBW9LDUe",
                    Name = "Je4laTFkcJAyP9v3lR5fJ1SCFuFJVqCc62CsLVYKPyOwySSjaFxy00IGCXmzsObY8JjUm176PqMxSejYJwKQkQhcSsOlDNZZsSWHBkBrsiX",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon29()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 8972,
                    DiscountPercentage = 2414.0,
                    UsageLimit = 9024,
                    Code = "mO",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-04-27T19:07:15.000000Z",
                    DisplayStartsAt = "2021-09-05T16:18:59.000000Z",
                    EndsAt = "2024-03-08T04:14:28.000000Z",
                    StartsAt = "2023-01-13T12:59:56.000000Z",
                    DiscountUpperLimit = 1197,
                    Description = "2FF3HAzhtt",
                    Name = "18u7MooUueVWo8T9dRNvfu3qkwBDNVzugQpgEVipsMl1opS6XVL1U8vfTPgZ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon30()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 146,
                    DiscountPercentage = 990.0,
                    MinAmount = 426,
                    UsageLimit = 9351,
                    Code = "XLb8hT5v",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-07-25T06:57:38.000000Z",
                    DisplayStartsAt = "2021-03-30T10:20:47.000000Z",
                    EndsAt = "2021-05-31T06:27:39.000000Z",
                    StartsAt = "2022-12-12T19:05:29.000000Z",
                    DiscountUpperLimit = 7050,
                    Description = "W03Q8sgkwbt7bycdIa6s2OiS448zYYuSerVgt5xpThqkxWuN4OkYmUnkAFHrW518DEhvGfJFhBLPIWgGXu2FRRBCtapsc2OJEtIYHTkPMCnHWRhGK3T2O4zTKZrpJNYtglnu99Onqaf5iTxaKHt4HXxpMz5eg3TFJnOMXlccrSM4NeRkShSKYnhr8JJ6rqJ58uKWhjJEVfg4kmmGr3fEZnB",
                    Name = "lmzkrtoyKm38BDyuj1U15iB0VVURHNCTBSkvCAJURQ0xc8v3XGoxNYBzQF26R",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon31()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 9625,
                    DiscountPercentage = 2770.0,
                    IsShopSpecified = true,
                    MinAmount = 781,
                    UsageLimit = 1227,
                    Code = "M",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-01-20T22:10:16.000000Z",
                    DisplayStartsAt = "2022-09-02T12:19:44.000000Z",
                    EndsAt = "2020-08-18T18:37:50.000000Z",
                    StartsAt = "2022-03-09T01:20:40.000000Z",
                    DiscountUpperLimit = 1853,
                    Description = "k8mM7y90MUBMqpZFx6CyPOvMtoUIDYTTb9YLUK2ZY6omFZc6c5lAiaH7ksthq2qt1fISbJLQ2IGy7A4O5EuFDi3ep7E8KTwqzGZlqsrJTtHeL1jl3TaroJ97KS7PIYmqHtFEvZxOLgNEFPzTNAeMR2CvVgTRCY2rEPprVjpNeaYJXDFnN5l443TmOvQLPfQxkSjhKrHXePF1aNsQcGEPe2hgvk3yuDeTC",
                    Name = "8XzXR9jncya",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon32()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 947,
                    DiscountPercentage = 2353.0,
                    AvailableShopIds = new string[]{"1b5f19df-153a-4d7e-be24-a3a933ba6c4b", "f54b9d17-3f22-44e7-a7e8-d273589492e7", "7f02468a-3bd9-4b27-a5b3-58077bc1ab54", "870983db-1422-4362-8c13-2a4aa6dda4dc", "fe710f4e-8b89-42ba-b231-49e13bc1feb8", "cc2a77e8-7791-495a-b4fc-3b6d80b6e535", "1e24792b-9b02-4673-9fef-a17db191cbb8"},
                    IsShopSpecified = false,
                    MinAmount = 4516,
                    UsageLimit = 7352,
                    Code = "sE9uDmHdc",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-07-23T08:39:50.000000Z",
                    DisplayStartsAt = "2023-01-22T09:18:23.000000Z",
                    EndsAt = "2021-07-25T22:24:36.000000Z",
                    StartsAt = "2021-10-23T00:17:29.000000Z",
                    DiscountUpperLimit = 8700,
                    Description = "hdalQqRPyTvG2tPeRbQcNODGa3Iheb",
                    Name = "kRxi8kuGoSk8mmCPAG5TaOSJrFwT6IMSTQQD3aZSLuV5KvsCMKR5EbTWV4WWsRyRXgRYVg4CYuzSBW4stkoPc7UXRyRiV8Pa",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon33()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountAmount = 4771,
                    DiscountPercentage = 3588.0,
                    StorageId = "b67003f8-d935-4333-8944-bbed1db94f20",
                    AvailableShopIds = new string[]{"4f5b4b8d-f975-438a-9fd1-674f4c02d110", "98009dc3-f3d7-429d-aa62-882d6912827f", "7d40d549-87d0-4c6d-862c-1247f6c4a857", "bb958eeb-0084-40e8-b79e-b3bfdd9d6a98", "5ef35544-564d-4502-afc3-ba5370f0bbf1", "5b0c61f0-ddb4-45d3-aed7-055bd7e5032e", "f757107c-35dd-4806-bbe0-0e69d35dcd5e", "b8071233-4ffa-4950-8b6c-bc7ce424da24"},
                    IsShopSpecified = true,
                    MinAmount = 8380,
                    UsageLimit = 5711,
                    Code = "0ubMaaW",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-11-04T08:28:23.000000Z",
                    DisplayStartsAt = "2021-08-20T23:08:53.000000Z",
                    EndsAt = "2022-05-06T19:21:30.000000Z",
                    StartsAt = "2021-09-19T00:21:39.000000Z",
                    DiscountUpperLimit = 6204,
                    Description = "sfRwBothNvTY3vFr4ELRXyBW70oqJ1JP1EYwzYF5YE8jQgUzmyBkd9RsSiJlXzLN5312aQsa3khCQuI0KxC45PIbfMDQsr0pTvhXVGg9hnQlyenzuwrO3gGQmGe09",
                    Name = "eXlKtPgqSA0ERaGz46vIiA4hbe1yI3CGp5lj6m5fgOCupwcI",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon34()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 8416.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon35()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 8343.0,
                    Name = "BzhbkfELKrUPd9GpW6Q92PXWpLmGFM1PrngLs4Zq6rjFKNHUPj8OaHLD3inc4333SWlp4s7jMjS5PtJzYsdA5qhl1QGqEwjgkrGn0uAn0iqI2b5rxtzGOZhKJ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon36()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 5709.0,
                    Description = "wzvYsbBzTdo6bpAqcWNJrNTsv2Llex1ejGQ2ugzGxu81Sx50Yf2M71M8zENOSGlzUlDTz33P2rJ14YHcAJKWHCf11oIN1lhxfCtQoWt3KCnkWzy38cC0E7gsSEITDei3yOkB642y5M6ZGKLNmOSXPLkVgGHidiNxSMbU65iFGAAyuGpPep5MlLDDmy5H5WNxLWXFOkEFZiHM",
                    Name = "kNkDC4XjAgnNgP",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon37()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 9337.0,
                    DiscountUpperLimit = 8359,
                    Description = "1IFexxHoOsY3XmfSCMMI0hPIOcfptkBjffHuYKUEJ4zrJepcLNjePvmbsJ6aAodX3lOsSzeTfXuUhrzyKZN2IpvZDbUGNbf92zGejiy7b3srgm7LVnhxTyAZfZDkQ2r2xXuIalmcupP8PaFubqXmo0h47ayHi8sXxsnC42wCpyAiBnUBLAV97YftKTMpHhWMUK3SCmPb9BXoLZ7wKHtX23HwTLkUG7zxtQPL0ebUOhv3B3t2Dz",
                    Name = "pE8reI7vFyo7eM4dNH",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon38()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 5930.0,
                    StartsAt = "2022-02-11T04:04:39.000000Z",
                    DiscountUpperLimit = 7558,
                    Description = "JYDvzM004QSYdkecoFJzr3brOZ5f3RQvkhtySJKYRUQ3NzIgBoxko0Q38viglT3j7uK9FEO8wpTMbUo34OhjcbIFy00bHfPtADraHJBywFUVQhJIvCWpCXLp2gUnx8oHUCw9IDU8v5tebk72bnq5V1PYuyQsrCeZvlknHwyCYeoTGD6IVelM1xkQHIURZCUVG9E4BcH9vh8Q",
                    Name = "d9Qr1jGxJh75seT2MlMasdJCSgZ4nn16A08HMuzRKVjoY87iExdEHTNDtgEpdMlXJAKinvVKW5jNBic0lbP5i9pPDb3qItRRs3FY",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon39()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 3894.0,
                    EndsAt = "2021-08-11T07:12:44.000000Z",
                    StartsAt = "2022-05-24T04:12:05.000000Z",
                    DiscountUpperLimit = 6508,
                    Description = "rydgPmYNQmdCCSHSb7PeqbGNNyGMxdwCiRwJpoUBZS7wM2sjFT50Pr6H3Lr5Vqadi7ItSc4oUdi9EYp8oXZ4d1DUqCUDmWqMmM9IYmurAkMd4wDsAO01hvmpIXnG4Vdq7gNAtqrqKm6uKQNQH3PDcRwUCecSBjOParY",
                    Name = "UfATbiJrkxUEwT3M91XjHrTG7fMCl81IJPQuSHXTmEReE1YV9ebnUBpzD7d9DsGnOvPtZOQ7wRQgMzlEQYhb78oA0LE9nGzsoBIqSCZEncCQxjIhrUeBMFsGSoFMs",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon40()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 8881.0,
                    DisplayStartsAt = "2023-07-29T07:09:29.000000Z",
                    EndsAt = "2020-09-05T07:56:36.000000Z",
                    StartsAt = "2020-02-26T23:21:36.000000Z",
                    DiscountUpperLimit = 8099,
                    Description = "vovqZ6GQpcxkL1iWim0Xpy9XRR4FHqayBd9Y6naD",
                    Name = "Caj1IshUK5sOcLMoSdluvLDw0rIOalhSCHrt5J1YKxmhpIQaAHuF1XqBsQEc2YHzb0v51JNexx20BlobdlTY6n3LbK6Vu4m4rhE7PkEzPYVXfzw",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon41()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 8620.0,
                    DisplayEndsAt = "2023-04-21T23:31:54.000000Z",
                    DisplayStartsAt = "2022-09-26T22:03:53.000000Z",
                    EndsAt = "2023-02-09T04:21:12.000000Z",
                    StartsAt = "2021-03-12T06:41:12.000000Z",
                    DiscountUpperLimit = 7534,
                    Description = "9Z0CQKMUdsLKbKLca",
                    Name = "6nH18WcZidvZ55mAgOE16AnmYbzCLHYWconVaiJFwoOHJhs1D1kk2Z65xpUZ28FCmVx3QLXn5K0ujHfTEebumDw",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon42()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 5486.0,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-02-13T11:57:04.000000Z",
                    DisplayStartsAt = "2022-08-01T05:04:20.000000Z",
                    EndsAt = "2021-07-25T05:18:32.000000Z",
                    StartsAt = "2020-02-25T23:27:01.000000Z",
                    DiscountUpperLimit = 9649,
                    Description = "6w3jvuc6WVynWZlMwTGtLKHNv0GHMA8YNVctqn0HylBEaWFtKmGqTMRGGhLK4md8CvDRXJmyMUq3nONdNUldEzZzYqTFGHLldYwHPZ5GyoYYcgPPK3Dchqik562nQJ7JN9nEMDfH9ZULXMKOjFu2fGiShoySflnRPKvTH4Qb4HK1DE5zpHipftSBuuUyajKD4UG1MO97nrik73Qyi",
                    Name = "NKms0iFYGrWxxlKwOlCibtq2e0nqtXLNITG9Gffmmox8hwqx5x7fQZGPMXFo6oIvZGxUJAAeHeUyg78eCpqwfbVaGI8MUg6pkT",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon43()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 8138.0,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-03-12T11:59:48.000000Z",
                    DisplayStartsAt = "2022-04-17T00:50:20.000000Z",
                    EndsAt = "2020-02-14T13:46:41.000000Z",
                    StartsAt = "2023-09-07T21:43:53.000000Z",
                    DiscountUpperLimit = 9814,
                    Description = "GWmlO55tLRhXfPthFrTbvP",
                    Name = "80JDs4TLAvvWwguBec41EmwzzFrgc",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon44()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 7463.0,
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-06-18T05:31:13.000000Z",
                    DisplayStartsAt = "2021-04-22T20:21:18.000000Z",
                    EndsAt = "2023-07-08T02:37:21.000000Z",
                    StartsAt = "2020-10-28T22:13:49.000000Z",
                    DiscountUpperLimit = 9435,
                    Description = "P9KtTHr3zG8NnPjRfIRrqy3FohrRiHbftN77E9sKP2LWTHQkvbYQTkmfSmGSFmTTeLGAy7h6m0YyagUC0Ij3N9K7EVH4f0IDf80jI5hMMqGagepFcb0C3pMehBLw9uhZslxpk65zsLMOaWLvqiZty5Zp232IvDDPPt",
                    Name = "Musem1WSPOdAkWLCHhP7q7jyjEo8V3Di9Dt",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon45()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 4285.0,
                    Code = "zAGKUtsDd",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-04-29T01:20:33.000000Z",
                    DisplayStartsAt = "2023-07-10T12:48:53.000000Z",
                    EndsAt = "2020-11-09T17:14:53.000000Z",
                    StartsAt = "2023-01-04T04:18:51.000000Z",
                    DiscountUpperLimit = 388,
                    Description = "EvQkTNVI1DbDv2ICSa1fLqeRzwnNnU8Hy7seU6T",
                    Name = "Pp7YTcvCbmuWQ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon46()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 1273.0,
                    UsageLimit = 7329,
                    Code = "KhWFz",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-02-04T17:43:38.000000Z",
                    DisplayStartsAt = "2022-12-06T10:32:31.000000Z",
                    EndsAt = "2021-12-12T12:04:54.000000Z",
                    StartsAt = "2021-10-22T10:50:06.000000Z",
                    DiscountUpperLimit = 7083,
                    Description = "0zCih9qHu842U5SnXNqipKVsIIUjVYx3ZiMVPZEq0xgguEtAXJ6WozfUGo1oVRA1PV2JD5SjzUvS2Jlq6P89tC2Mi1PRe6ex8zQnoMXP",
                    Name = "xIs0d6X24reGHeQvAPqGMsA1rgfPu4olvC1KDDE1G2mGU9YeDH5Tysjz5v4HW6eqkSknjWS4aW80Xp5YCo9TXEMx6Q3N4lydCpBzThmgOIjIatpE7508LaYMNkxpSQ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon47()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 1265.0,
                    MinAmount = 2539,
                    UsageLimit = 6665,
                    Code = "WLu8Wbq",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-01-12T03:29:13.000000Z",
                    DisplayStartsAt = "2023-11-30T21:40:15.000000Z",
                    EndsAt = "2021-08-12T03:19:42.000000Z",
                    StartsAt = "2020-02-28T15:07:25.000000Z",
                    DiscountUpperLimit = 3813,
                    Description = "Bo88egFulBO0tWJ93Y52C590AS",
                    Name = "UiB0DiDGREmImyJDbbC2wEGBfcAGc0EsTxqnb80BRFYcLTC4xCABLeko",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon48()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 788.0,
                    IsShopSpecified = true,
                    MinAmount = 2800,
                    UsageLimit = 8526,
                    Code = "M",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-12-09T01:15:18.000000Z",
                    DisplayStartsAt = "2024-03-30T08:46:45.000000Z",
                    EndsAt = "2022-02-07T20:39:33.000000Z",
                    StartsAt = "2021-02-02T06:35:34.000000Z",
                    DiscountUpperLimit = 7218,
                    Description = "El3iPUkIv4a2NsBAg7OoWmbOWXvcqkH6OCG8bjnFs6Wxag7kVTYLZtjqA6blCNXCxB23NKDv8dBki6rCZ5MRu3n3kWR611LhXRF1WjDXemYssWVQAa0S9OWE",
                    Name = "qI",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon49()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 1680.0,
                    AvailableShopIds = new string[]{"040f335e-8d1a-4cef-be7e-8212acd2a457"},
                    IsShopSpecified = true,
                    MinAmount = 7593,
                    UsageLimit = 7784,
                    Code = "Z81p",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-05-19T18:42:13.000000Z",
                    DisplayStartsAt = "2020-12-26T02:53:01.000000Z",
                    EndsAt = "2021-07-23T23:13:09.000000Z",
                    StartsAt = "2024-03-18T16:00:19.000000Z",
                    DiscountUpperLimit = 5136,
                    Description = "D8THD4dpuhxNvhxjPfdLCMpGSOhV764tKT9oHgjnPne51YZOU0zGq4PpZBc0rJPOstD7C9IM7suB5w40dZFTsuKZGsFElmQpA4RSTaTlLaqlkU49OXmcM1eYLCIvDzYzwAtEksQWSl6Am3gCBrhM35EfmrtOFWMml5EKR",
                    Name = "i",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon50()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "60cfa50c-4677-48ab-82ab-5586346e95d6"
                ) {
                    DiscountPercentage = 6212.0,
                    StorageId = "66844b18-d773-4cd7-a787-0b398e8ef327",
                    AvailableShopIds = new string[]{"412077a6-2a27-4fda-a375-13a5e59aba91", "d8f1e3a2-183e-446a-914d-208e818692a3"},
                    IsShopSpecified = true,
                    MinAmount = 4589,
                    UsageLimit = 9826,
                    Code = "vZ2Hz",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-10-31T22:48:22.000000Z",
                    DisplayStartsAt = "2023-04-17T04:53:01.000000Z",
                    EndsAt = "2022-12-12T21:58:39.000000Z",
                    StartsAt = "2020-12-06T19:49:13.000000Z",
                    DiscountUpperLimit = 7496,
                    Description = "uClaKx3AfzVa9lboQsNDBH1uzKMqlEF94aThPURq2Q4ZM2ZH2d8EggWOOiiO67HWQCePWkLnY7y5P2vTc2kTDF85U9g31HpRLtjhMxgRT9FEddBtVan5",
                    Name = "HyW6Uan9MoYMbeeBKUXDDy014vqgIch5W6XuTL0vlIdvdIMbz7wUi6BXoKUl0tR",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
