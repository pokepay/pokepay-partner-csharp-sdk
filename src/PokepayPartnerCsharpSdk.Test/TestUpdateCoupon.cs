// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCoupon0()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 8602,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon1()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 5554,
                    Name = "hTsSxNXBuhLAxPxLgPF7PH9jsPo3qRbXC06hH5q5N6rSqlhclxbbI1pwNVNkX1wbtHq7h4XHkBbxR0RnLtirGJS2N5S6EEO5Bp0Ta",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon2()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 2957,
                    Description = "BrmndiCNxXXwjFaRAeTxfe0YQCHzm8OG8zcqkOxIGcWZjjM6j3edDcpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm30yK3y8WItCe9VYgMydEalG76qE4T1vOr",
                    Name = "KA4IwgS5AgijW",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon3()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 2296,
                    DiscountUpperLimit = 3608,
                    Description = "neekV8cIDT0hnm8h8evW68NKpdkq0PMSo6iR11TAHpgNTXOxFwqhkpZVaDhpFPp5bfKVt9DPYJAVzV6vyI6ywfpyKilj",
                    Name = "5zg8pn57kF0DYbPLXjuwrpeD0A9IDYP4sAiFNwaac",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon4()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 1593,
                    StartsAt = "2022-09-20T16:39:04.000000+09:00",
                    DiscountUpperLimit = 6364,
                    Description = "r9GBqh0SVIl9M1spjv4mKXU1rVLf6U0K44BovHKqYzk7GBG1DZKj2tBRFerhSuL22gGga7pF0nmLMfnIYTQdqHJZ8WnDHEVfpIBtEOMP2U7IkYygmkkDxd3MzpkzvPsPo2vcZvKaf470Dw5YI6SeAOBDBgRAgmjxZG",
                    Name = "GCqaBwJ9iX",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon5()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 5610,
                    EndsAt = "2023-10-28T01:07:36.000000+09:00",
                    StartsAt = "2021-07-06T12:25:32.000000+09:00",
                    DiscountUpperLimit = 9157,
                    Description = "bkdsvlfnd1NOUEcUOGTeYua5DveJsn8lhIUcgIkY0oNU4ZtZZObHmdr0N6vylnlZRhGDMxuj8A7eDOAWeoDpeF6vcSyg1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq4lI3mHyvfAo1Zkwkd2ADoyNq2PW9ePZH1V1",
                    Name = "DlcE5mr4I9qCPq1klPYIi4fgZzpFf9vCRDU8J59OtcokEMMVhmKz2iB",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon6()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 8903,
                    DisplayStartsAt = "2021-08-28T13:14:25.000000+09:00",
                    EndsAt = "2022-07-28T06:50:55.000000+09:00",
                    StartsAt = "2022-05-03T16:47:09.000000+09:00",
                    DiscountUpperLimit = 4355,
                    Description = "UmIl7jlWxrfEKMQ8FCs062PLb59yfzniw8Z7TrjWh0BQdrr7bOC0AUfJnZnSogxeCWxbc4wl0P2Dqh3DSK23Mk8m6Cln0nexx5CEw583J2WEBiiOFuwneTfWH1pqqlIhFKkOnPRe3g3OqYMD6Y7flopJpL06wROQZ33dSb51CrQZVorM80jAnbL9pF2AijYf8ydTws4HIQ4AniWPzD9CM0oL6ak44VafBlkQEtaE8xbTpd0PiIwS54q66",
                    Name = "i2nXWkvfusE3magRZXBvYQN11diTIPMylP78XJI2fk",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon7()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 4491,
                    DisplayEndsAt = "2023-01-10T01:24:41.000000+09:00",
                    DisplayStartsAt = "2023-05-18T11:05:49.000000+09:00",
                    EndsAt = "2023-02-06T01:25:37.000000+09:00",
                    StartsAt = "2023-01-17T17:51:03.000000+09:00",
                    DiscountUpperLimit = 7060,
                    Description = "uaeWPZ92K6Zt1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWMOeqgVzvGmf46VZC1gROo7yDwwPoswLPrFl08abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR",
                    Name = "lgptmz4nyVSUDS2rGPI8RxpE3teEPiaYEeN8ncoL5boSBHerEtGhFgJdxH",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon8()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 9181,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-03-19T06:57:55.000000+09:00",
                    DisplayStartsAt = "2021-02-16T17:03:39.000000+09:00",
                    EndsAt = "2021-05-29T20:21:59.000000+09:00",
                    StartsAt = "2022-07-06T15:29:43.000000+09:00",
                    DiscountUpperLimit = 6070,
                    Description = "M7DHhWIQ2aljg7pW5tLDSL3EPYXvMXdIXxGA8eOtdDg4emZxxvv3UzyZmkPPeL3QSeHszKal8UJ7m",
                    Name = "vjTFU0wWAMu89mD0TpxWczQUyWaVgBaLWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon9()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 6230,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-12-13T02:16:18.000000+09:00",
                    DisplayStartsAt = "2024-03-01T18:21:42.000000+09:00",
                    EndsAt = "2021-01-31T12:57:53.000000+09:00",
                    StartsAt = "2023-10-16T14:47:49.000000+09:00",
                    DiscountUpperLimit = 7870,
                    Description = "fEP7s2f7f5rT4gnJZ2Cz81XNoucyBbEpxFX7PDggrznNWBV0p9BBTTp6AGpMMO3btHYGiB4Qalu6chDV2Pcj2ctvmZzuG53qZWTYzGouuBX6LUUUBENz9R18rNQjTARxcKWcb1nyLLVIf7PJ4PKIYRAl1UCuQycWgFlQrGdRqVd3CIlE3dO8Hdi7PJayBT5IgAK5b9hyZhcZh8MuSlVRKgCS",
                    Name = "IL13YYuGN17rfT9nOtCiuSxp7i1rcacR4EWmJRYE0vgLGn2OdxgxwF29eViuwKtjsRjzvb8XUneGNN0gcbjHE0ykOW2yVlHndMAdWY9HjNAOFWD0f",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon10()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 7986,
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-11-13T09:48:54.000000+09:00",
                    DisplayStartsAt = "2021-07-18T13:41:34.000000+09:00",
                    EndsAt = "2022-05-24T06:19:56.000000+09:00",
                    StartsAt = "2020-01-27T05:22:46.000000+09:00",
                    DiscountUpperLimit = 8946,
                    Description = "wLb9YSbpNpmMET9MPbipC8utokXPq016coqfiAUWXxFRzN5EfouqVIJLmWFeGJqYbyf9xqeV9Lg6T4ooRxK5KRr3h8egFMYUCN7QJ0QWlqwtD",
                    Name = "88aLfgCd3mseLQBXIUiYpTvNgfaK3PoowpKAx3kfA31wXd04SY1O8gGOF1kRrye61uzmBIXdnENFs",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon11()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 3891,
                    Code = "jBlwZ",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-05-22T21:41:06.000000+09:00",
                    DisplayStartsAt = "2023-05-23T09:17:56.000000+09:00",
                    EndsAt = "2020-03-14T05:37:03.000000+09:00",
                    StartsAt = "2020-09-10T14:20:02.000000+09:00",
                    DiscountUpperLimit = 2211,
                    Description = "B37CRt8PxiPIwClGZ1KOGgE2sj7Hu6WK5M7npguch6s2J670P8hn4WhIeMSn521mnmeh5QEBdCZJtrUa6Fgp7ym0hYqDUAWMYxWfGNC0wV3aBOX1Ig8hROFB3MljHGXrpVSkSdQBQzqXHWCk88yAdkNbUUlXp2sT5T809AbvtJaUy0K5oRI2Afv57nsS8pT7iwNl9",
                    Name = "CKN5yCsDMuuaWg6vjoZFJU5qu",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon12()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 5976,
                    UsageLimit = 7022,
                    Code = "J5Eq6Gc",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-04-17T13:12:35.000000+09:00",
                    DisplayStartsAt = "2024-03-07T14:03:12.000000+09:00",
                    EndsAt = "2023-08-06T07:43:14.000000+09:00",
                    StartsAt = "2020-10-04T01:00:10.000000+09:00",
                    DiscountUpperLimit = 8411,
                    Description = "Pq46GdIPJm8acYbz4K3IA8JYUILwDYHWq9h3ayYxNgOJ9lz7HMs7r8Mwpfor2g0yfZY1uTlDfXz0uDeov2GaxLjZM7ftEliKPQLWJArPq3tph1c8gKwadNnw5eCqfZdksVLOzbmWJa8YkV10V05hf8WtQGHpv3xPQzPNZMa3cTmTslTDHzq00PkzT3rjRscSaTDEUxwAJXNLOLDUjAEUO9KUSGzbSRmda66Hxc4wf0VsciZqVg9CY4JyxUqm",
                    Name = "9QYX9eOR0RPX1REGDLSjexe42N6h2JPSKX",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon13()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 207,
                    MinAmount = 9246,
                    UsageLimit = 5754,
                    Code = "8JwoXWD3O",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-09-09T21:25:38.000000+09:00",
                    DisplayStartsAt = "2022-03-29T06:32:28.000000+09:00",
                    EndsAt = "2023-03-14T05:46:20.000000+09:00",
                    StartsAt = "2023-04-05T17:08:01.000000+09:00",
                    DiscountUpperLimit = 3863,
                    Description = "HYwOestfQFumGQVfUsw4hfYXr8Tws7k48pGfLa44NJMCeJ8jlsCf1ZGfe6gS6x1DqMOxCGU3f6AMPJnByO8IAY8ZIAKOHAMaB7ZxbhLpAG3vIRMVqbJVgHdPhvPKwzwzrbVYcpu84LTKQxDTzMnM7RDpI6DZQTPfIajSBmWzFbVfaL5LT2cPjctfArtA5QzauCKeqrCHLOb6c1NzcpMx2",
                    Name = "8O1vhN74ziDPGC2ST6zTd6xVdSlQkj4Z4gR5YjMfLJAECo2gNDDCrV3PxozvlpngWpA6xbZMfc0uwppINu3aeeMh7MwqqZDhOobPpK6TParuu",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon14()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 7844,
                    IsShopSpecified = true,
                    MinAmount = 9447,
                    UsageLimit = 7071,
                    Code = "1",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-02-23T15:16:55.000000+09:00",
                    DisplayStartsAt = "2020-09-14T22:14:05.000000+09:00",
                    EndsAt = "2021-03-07T07:18:45.000000+09:00",
                    StartsAt = "2024-01-06T00:21:31.000000+09:00",
                    DiscountUpperLimit = 5129,
                    Description = "gWq51AuUounyHv57rDbvmuL7BqYd28Ylq4PTRllx603bU9utxlgE1LKaCgZVizYnvZve6TUWFWHy2b5Vs5gPuvHuA5HWIqhNUoMi9wNIaJyI2pADs2B",
                    Name = "yB1GZTk4B1PKHR2EWhPZSvV8nScTvJ4VHpUajLmD9cCimPwC97LHW",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon15()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 2349,
                    AvailableShopIds = new string[]{"173cae53-8b5b-42cf-ae49-4813d3eca943", "b74c1a25-6788-4c0a-ba08-bc225a5bc4c2"},
                    IsShopSpecified = true,
                    MinAmount = 2413,
                    UsageLimit = 3586,
                    Code = "opraV9Fu47",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-11-10T00:06:44.000000+09:00",
                    DisplayStartsAt = "2023-10-08T22:15:05.000000+09:00",
                    EndsAt = "2020-05-07T00:08:29.000000+09:00",
                    StartsAt = "2020-10-27T12:05:26.000000+09:00",
                    DiscountUpperLimit = 991,
                    Description = "gn9VJjED17kjNr295nMRl2EDxJjIsLyTAA5MEWhdNFDbX7fss0ltmaJnxslaUL7RrxqbB",
                    Name = "xY",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon16()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 7349,
                    StorageId = "44b93517-613a-46f4-839b-aaad60e96562",
                    AvailableShopIds = new string[]{"d1a03e2d-e5e2-42b3-b5c6-447ae8477085", "1b3ec37c-61c1-4ee6-ad96-e33a491fdeeb", "03a841aa-de16-4be4-b3f0-d81ca34504e4", "cba02592-06f5-462c-b7d5-8a270d7c4442", "ccc6da7d-af83-4685-a796-495b199f35eb", "526de772-eff1-427b-adf2-ad76004c99ca", "934f580a-4633-4dc7-96d6-8ebf30dc8600", "feff17f3-657c-4936-9bc7-b52df4d35f3c", "1859ce73-9e12-489f-9e4a-0a38e49522d8"},
                    IsShopSpecified = false,
                    MinAmount = 2308,
                    UsageLimit = 7116,
                    Code = "ApV",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-09-09T09:52:14.000000+09:00",
                    DisplayStartsAt = "2020-04-17T14:46:00.000000+09:00",
                    EndsAt = "2023-01-31T13:04:25.000000+09:00",
                    StartsAt = "2022-10-02T16:47:50.000000+09:00",
                    DiscountUpperLimit = 9122,
                    Description = "jKIEdqTZCuDots6oOpUnX5paeprWtPSGZrL9UrmNU3vFgZ69vwXIbJ7yB2uIbdTxo63tcXPzmao0EWnRVCjlgZcfxXnQfXvfoocz3td7BZN78kqzJ0Us2fGrJyL",
                    Name = "sRHFPpRHSTTSFxnvRwj3Oa3urFP8R4bhOdaBwGLVVHwtN3AFb20DhVqIxWOmhxrSYnMI0dEOIqOF",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon17()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 2380,
                    DiscountPercentage = 4977.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon18()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 7278,
                    DiscountPercentage = 8282.0,
                    Name = "uLk5GF2FUuyDVUpZnC5UYez0zM0cPoxe0DGq4e7wXOOVc8GIqj26qcMQ423OrAYOyd21L95eAaG4JW0HS70OJOUKjKLeGCg",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon19()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 6732,
                    DiscountPercentage = 5137.0,
                    Description = "yc3XcFOYpAAHYYK9z73uxDP2ictixYSW0AnlJyQ4ogjQgbj8PRfNm4vkTJ8joyTSHmI2see5qGgNKlkv5vEcEoMjbT4VP8lZF0AhpuShoXCly79fXYfw5LEwfbe5",
                    Name = "dxC9nFb6EnR37XI7b090WiBtRh0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon20()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 2236,
                    DiscountPercentage = 8742.0,
                    DiscountUpperLimit = 2401,
                    Description = "vWom7iSFIO4uZdtJGn6HWLBVq7JKL8IsIw17O7EyRwbRgUy7vFea5WeBAkgIciVnQYB9t75iPCouDaOPQZR4UpdKmspN8b2gkMcSPrmt0hjIJu43wB7scWlYirrj6XmXYoqVEvKvw3AdEs5hGDLuaSpYl1TGEiugglxJJBGt0dcPbtQc4uSkk26uSRwX6Rx7fOEoFSQiDYpTTgrywklVD4mELe2edQ",
                    Name = "d6Mwu12UeT7ThuLLgJ9PT2zGkxOOzhTpPLnUQXea",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon21()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 4915,
                    DiscountPercentage = 9484.0,
                    StartsAt = "2020-02-21T08:59:17.000000+09:00",
                    DiscountUpperLimit = 8601,
                    Description = "BlP1za1n7IcWMlrV1ey0F13qC7iArhwm76E35ql4",
                    Name = "fUae14Wbt93t26LiQAMBYx057AoBwLeryNecuIhUBXRQRCvkSHsmDbMU34aVyZLcCNEj4KngWmPwy7k0E27omWruI",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon22()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 1367,
                    DiscountPercentage = 115.0,
                    EndsAt = "2021-12-01T01:14:41.000000+09:00",
                    StartsAt = "2021-11-26T23:30:11.000000+09:00",
                    DiscountUpperLimit = 4774,
                    Description = "TAGfq9ue8TvZwYbMntyIPzqAGarjc22UJafoQs8oM8ozozHv7pSUj",
                    Name = "2vqwiu14DVHGOrsaIKsQ11QA0zf5QFhEcKjjKztGRK6K9KAPEUIedziHih60rhQZO78Ysa8FmX0ccAumcgyg4cqEaxSmm8kmOYz37PEcPNNiKvN",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon23()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 2485,
                    DiscountPercentage = 9607.0,
                    DisplayStartsAt = "2020-03-20T16:53:08.000000+09:00",
                    EndsAt = "2020-12-25T09:09:12.000000+09:00",
                    StartsAt = "2023-11-12T05:39:36.000000+09:00",
                    DiscountUpperLimit = 1728,
                    Description = "RLA9ghACTJRDSXhb0oNXnX7lDuTKN6ygQ5h7kN0paU2HC64wcGrUcdcRO2Sa3zE9qA6JlqvTos7SrIAldP5taDahvoqIf3H7H22Xm9qyhmrKIzglEahNrgMO9grD73ccOw2h3Fa222nHBaN6510bAHdVRRVqtJb7GLA5jeThW5qr3yEd",
                    Name = "dXuL0rYsAz43Mmx6hv0Ug3INp6i2B7flubMg8I3PFzXHSWu8scihq",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon24()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 7255,
                    DiscountPercentage = 7712.0,
                    DisplayEndsAt = "2020-05-05T05:21:59.000000+09:00",
                    DisplayStartsAt = "2023-05-25T12:08:55.000000+09:00",
                    EndsAt = "2023-05-05T10:17:47.000000+09:00",
                    StartsAt = "2022-11-30T00:24:44.000000+09:00",
                    DiscountUpperLimit = 3145,
                    Description = "sgxoxZCQ2441blMtSOZHoWLqvzthoXVcLebdhYmokN15vn0WBXfGwW2mMW1f9b8gICLPqqow4qG8fKRsijZT9ACbFhSbUnXdQpmPpnHFqiJvOHOlQFLdxOm16oejI9dat1CL",
                    Name = "gQoRlzuyxB2QGrCPmQ415Et2SGqgy7Wowcm3CmFfxpyCPpsziVloAtynLsPgO9CFz87kImOLWynZ7sTqSkOWWDLZmiyY4qSDce16GC4wPtLkv3o4mk88yYjRj6ppJ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon25()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 1868,
                    DiscountPercentage = 535.0,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-06-25T04:24:56.000000+09:00",
                    DisplayStartsAt = "2023-09-05T10:03:26.000000+09:00",
                    EndsAt = "2023-10-01T20:37:00.000000+09:00",
                    StartsAt = "2020-08-23T10:55:41.000000+09:00",
                    DiscountUpperLimit = 7013,
                    Description = "8JObXuRsPVeFJcsOCB9dZH0k0NKC7bYH6IQhPn4Xu22OkprhqhwvNpMEMbpSnLulsX8V7SnJwOTksCozm6o1k9oepRB7yq0Oa1SzxnfEtxAkEm7sWqtjzoUhtWxAFotkA3GwpJ6pUWjvsxF7sC23pAVbXivHZtrIAyP3B3n1m451mPU8dTD7bnX1r8l3hCw6Snm9mfcT5cLUh34lWYk1AXf6CZiEJmgnIHDO",
                    Name = "d6m8hlpqS572AEF2Ig4ikrPHEQKtfhnULfkSB8hVVRhZgs0ShDA1T4kxBhv1AOy0nxwzXXsopchwGQjGjB8p2s",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon26()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 6952,
                    DiscountPercentage = 1516.0,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-02-11T14:58:44.000000+09:00",
                    DisplayStartsAt = "2022-07-12T12:47:31.000000+09:00",
                    EndsAt = "2022-05-24T08:32:23.000000+09:00",
                    StartsAt = "2021-05-05T20:46:41.000000+09:00",
                    DiscountUpperLimit = 8513,
                    Description = "jO7bJtO7Dnnc0m9rCGM5hvlyZ4zlX8tOl1gapEcvHpCxJHTvEJuFQdQk10O1BigovU99ROsTZK65zQOhilbvDcAlCpIpP",
                    Name = "o9knGna2qU0GmaUmeizgJ6BwqETnaq5",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon27()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 7941,
                    DiscountPercentage = 3685.0,
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-02-01T13:27:23.000000+09:00",
                    DisplayStartsAt = "2022-12-03T09:34:22.000000+09:00",
                    EndsAt = "2023-03-15T07:37:56.000000+09:00",
                    StartsAt = "2020-08-28T00:40:04.000000+09:00",
                    DiscountUpperLimit = 8807,
                    Description = "3gtXl8b4nZOZsr1VPBj7ivp8ue6C3vcL7BXf3IHjK0XiC",
                    Name = "0zcQRlonr1N4IocuKCcZ1hdXCgyALhLsPZ4xEZBaL9gPoE5PnOxSYIBQUZMwQEKQp536z2WYA1sx132uYplZstFpjBFQy9bZmz7mGiFt",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon28()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 8473,
                    DiscountPercentage = 109.0,
                    Code = "Sje",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-07-25T08:39:17.000000+09:00",
                    DisplayStartsAt = "2023-10-12T06:53:49.000000+09:00",
                    EndsAt = "2022-04-06T06:22:54.000000+09:00",
                    StartsAt = "2020-07-14T06:24:28.000000+09:00",
                    DiscountUpperLimit = 9545,
                    Description = "wYSIqDRQ8l1f3l8HQkQuvmK2Ptks2ZcRpli1kcYUjdKenDWjLTaaBosz7aBykL",
                    Name = "G1RzGMmx1hSkje",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon29()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 7993,
                    DiscountPercentage = 3210.0,
                    UsageLimit = 2720,
                    Code = "0kmePd8GX",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-04-14T07:45:40.000000+09:00",
                    DisplayStartsAt = "2023-03-28T06:29:16.000000+09:00",
                    EndsAt = "2021-10-02T14:41:38.000000+09:00",
                    StartsAt = "2020-05-22T21:18:05.000000+09:00",
                    DiscountUpperLimit = 9505,
                    Description = "2Jw1idAxcQ9RQcA93jzkpVE1oN8GZytUXsp14vePeJl09h1SmSe",
                    Name = "z9uXJe9aRBNGFiXbom9IOMRvPLFSPNSfRkv8Et2jCeNHdXqCXUrpWRIE",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon30()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 7055,
                    DiscountPercentage = 6055.0,
                    MinAmount = 9869,
                    UsageLimit = 4267,
                    Code = "OjH6PT",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-03-29T21:48:28.000000+09:00",
                    DisplayStartsAt = "2020-12-18T16:30:48.000000+09:00",
                    EndsAt = "2020-12-24T08:04:45.000000+09:00",
                    StartsAt = "2020-01-08T11:14:30.000000+09:00",
                    DiscountUpperLimit = 4906,
                    Description = "f1Ll0O4t8yu2YY3amcbZRFCGWEFlMAhGqMbfoqHBJlao6arWtW2Kf2i4IAcwQjuFWx2kNI9qHm3gWQVGMbEKu4AfuwweTMrw4f2dzO7lqy4",
                    Name = "kEKJ1Q7c8C0SZpOWKljojyXNatscwZjWuBesyFuc4sWKFJnLD7m3pQpjDhF5ByJU",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon31()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 6011,
                    DiscountPercentage = 2138.0,
                    IsShopSpecified = false,
                    MinAmount = 2440,
                    UsageLimit = 9419,
                    Code = "qULct",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-05-03T19:30:16.000000+09:00",
                    DisplayStartsAt = "2023-05-12T12:38:14.000000+09:00",
                    EndsAt = "2023-11-23T21:53:14.000000+09:00",
                    StartsAt = "2021-03-28T14:07:04.000000+09:00",
                    DiscountUpperLimit = 5867,
                    Description = "9cBHdXfv4mxi0ybLSzTGhHvgOYEOxJ03xV3nSGPvtC19a5RpyBdhfDtmpMgxIW5ljI6yfgW8zOoaul3ISoLlGYqCoXoGAustVKiyGKg6I2c4vjJ0uuFNk5xEatUCGYnUIhqAnDQImUocNLmlkEs1s3oajWUDkbVb94dhcQ",
                    Name = "TjATi4FvTByqrSIzi26MGgpQ9DKPsTX2x6llLqyqxLBzmQKSHklP2GNjfKFk3xSPN2EauZcekm4uUHwCvLyAybYYI1PTnYt6AX3ZMraJiLHRNz",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon32()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 6460,
                    DiscountPercentage = 8437.0,
                    AvailableShopIds = new string[]{"2c940c74-acc4-448c-acda-c7af6f38c112", "a6a1dcc8-9af0-4d00-b54d-2f3fa089f0f6", "0bf31cfc-88a3-4068-9afa-ea2fa03e4be6", "afbfbe62-0ccd-4743-af0a-58b9f20c847c"},
                    IsShopSpecified = true,
                    MinAmount = 6237,
                    UsageLimit = 9694,
                    Code = "ya",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-05-26T00:21:08.000000+09:00",
                    DisplayStartsAt = "2021-09-02T14:22:54.000000+09:00",
                    EndsAt = "2023-05-04T13:55:41.000000+09:00",
                    StartsAt = "2021-06-12T17:17:21.000000+09:00",
                    DiscountUpperLimit = 5983,
                    Description = "qgB5ft0k4jfS4r5kfrLJk",
                    Name = "ytv5gO2QqNTMBVQz08laq2biuqoxBaoCNpyYWsiSLe8XgZiLcB9lkuwUmt5gGSX2SbBRPaYeWynmUQkGZMrt25VWYHR",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon33()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountAmount = 5658,
                    DiscountPercentage = 6327.0,
                    StorageId = "76450450-536d-411f-9c81-2a755e992159",
                    AvailableShopIds = new string[]{"fc0146cf-ca8a-4ef5-b98b-603897c4290d", "45d96815-2cbf-4935-9f8d-411163387b10", "fe351065-9341-4d49-bc8d-707b40e8d129", "74577384-834e-44e9-b4bf-3644a7af45c3", "9a8990e8-f6b9-4923-ae7c-b3c5ecef9b8a", "4047192d-7eb1-458e-9b91-8070fabdc7e9", "b29a0b8d-1d6f-4c28-906d-910590cb7115", "bdb54781-c926-4fbd-9ef6-ee1439973859", "a7ad1d81-1630-4af9-b0a5-cb19359c6889"},
                    IsShopSpecified = true,
                    MinAmount = 105,
                    UsageLimit = 7015,
                    Code = "mahsEfLajE",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-04-02T20:18:31.000000+09:00",
                    DisplayStartsAt = "2022-02-22T13:21:07.000000+09:00",
                    EndsAt = "2022-08-11T11:26:11.000000+09:00",
                    StartsAt = "2020-11-21T10:42:06.000000+09:00",
                    DiscountUpperLimit = 2921,
                    Description = "XaYXCbSM5b6xxCi9aS7pUn8sHDE4F3kcf0hrQ4a3rPgThS8KkZCOZQxeSP2z9qxNvFrLUebeM3qu8knhRZPaevJazOcUuFHzOggogIb0heOl2hQPfOiPoRxRiCop5Q0A9gBKU33EhyGU9Sc7TWphUCFQOlhJCzSIu3L4oB0QKjjVXdg6wCnP4F0PUy8JyZq3ofPUU0rY2rRd10bnDEPKoSGRnM40Adb2lsHFBNfL0ieognilvSR4pMoCwkx",
                    Name = "SpqKLDrvgRvBVvAYQP0NP5o8oIbQ6bcvTH9KRHlq0wqM01LRxPcYJN00R6J1knyJeLDqePaGS57qQUn9QotexnhecBro7jHBJHSTWFK0aJRYTfxgM",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon34()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 4530.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon35()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 1746.0,
                    Name = "ajM6sQRgc1VEyXHMXBj8otEAcFy5ooXoXuzlRpCyC",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon36()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 8734.0,
                    Description = "oaTfbTmVX0XqqL2DDCdNGv9QaNMmxX2S2fPh6fy135I5DGGggnvkdWrHaspAw5Vcp7CE78JSe44PvWgrDoffEic8syvxPXUni2oM8QHA7lWY5GLHqITj0UgJwxmfaF0gGfgNlG67XOfGi887nNv1eh26ZZWkeJQym7n7CGmjd25iFSdny2rQSPU5tCjVy8COfDZrZRHs0hjVGtY7fDHExM6iUcB",
                    Name = "9LDUejJe4laTFkcJAyP9v3lR5fJ1SCFuFJVqCc62CsLVYKPyOwySSjaFxy00IGCXmzsObY8JjUm176PqMxSejYJw",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon37()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 1540.0,
                    DiscountUpperLimit = 4945,
                    Description = "QhcSsOlDNZZsSWHBkBrsiXhCnZzamORmWcssL2FF3HAzhtt18u7MooUueVWo8T9dRNvfu3qkwBDNVzugQpgEVipsMl1opS6XVL1U8vfTPgZQ",
                    Name = "oGXLb8hT5vzbbFysLVW03Q8sgkwbt7bycdIa6s2OiS448zYYuSerVgt5xpThqkxWuN4OkYmUnkAFHrW518DEhvGfJFhBLP",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon38()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 6302.0,
                    StartsAt = "2022-04-26T17:02:14.000000+09:00",
                    DiscountUpperLimit = 144,
                    Description = "IWgGXu2FRRBCtapsc2OJEtIYHTkPMCnHWRhGK3T2O4zTKZ",
                    Name = "pJNYtglnu99Onqaf5iTxaKHt4HXxpMz5eg3TFJnOMXlccrSM4NeRkShSKYnhr8JJ6rqJ58uKWhjJEVfg4kmmGr3fEZnBlmzkrtoyKm38BDyuj1U15iB",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon39()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 3676.0,
                    EndsAt = "2021-05-02T04:41:41.000000+09:00",
                    StartsAt = "2020-01-24T14:03:23.000000+09:00",
                    DiscountUpperLimit = 2480,
                    Description = "VVURHNCTBSkvCAJURQ0xc8v3XGoxNYBzQF26RRnLKM2vajHzuhk8mM7y90MUBMqpZFx6CyPOvMtoUIDYTTb9YLUK2ZY6omFZc6c5lAiaH7ksthq2qt1fISbJLQ2IGy7A4O5EuF",
                    Name = "Di3ep7E8KTw",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon40()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 6558.0,
                    DisplayStartsAt = "2021-03-02T00:56:13.000000+09:00",
                    EndsAt = "2021-03-22T01:01:19.000000+09:00",
                    StartsAt = "2023-03-17T01:05:53.000000+09:00",
                    DiscountUpperLimit = 9855,
                    Description = "zGZlqsrJTtHeL1jl3TaroJ97KS7PIYmqHtFEvZxOLg",
                    Name = "NEFPzTNAe",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon41()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 6420.0,
                    DisplayEndsAt = "2021-11-27T07:28:23.000000+09:00",
                    DisplayStartsAt = "2023-05-12T20:36:02.000000+09:00",
                    EndsAt = "2022-10-18T15:33:23.000000+09:00",
                    StartsAt = "2022-08-20T18:46:14.000000+09:00",
                    DiscountUpperLimit = 2783,
                    Description = "VgTRCY2rEPprVjpNeaYJXDFnN5l443TmOvQLPfQxkSjhKrHXePF1aNsQcGEPe",
                    Name = "2hgv",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon42()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 260.0,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-03-11T17:39:55.000000+09:00",
                    DisplayStartsAt = "2020-03-07T01:45:23.000000+09:00",
                    EndsAt = "2020-03-13T13:03:37.000000+09:00",
                    StartsAt = "2023-09-01T12:18:01.000000+09:00",
                    DiscountUpperLimit = 4091,
                    Description = "DeTC8XzXR9jncya31KgghsgYe3TbLJN21a8hZtm5so8Mz8sE9uDmHdcukVhdalQqRPyTvG2tPeRbQcNODGa3IhebkRxi8kuGoSk8mmCPAG5TaOSJrFwT6IMSTQQD3aZSLuV5KvsCMKR5EbTWV4WWsRyRXgRYVg4CYuzSBW4stkoPc7UXRyRiV8Pax53IDmwuQOCWjbIPmFGWkh7DMCSqp4SWi3zPKlO0ubMaaWt2sfRwBothNvTY3v",
                    Name = "r4ELRXyBW70oqJ1JP1EYwzYF5YE8jQgUzmyBkd9RsSiJlXzLN5312aQsa3khCQuI0KxC45P",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon43()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 9768.0,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-08-17T22:41:02.000000+09:00",
                    DisplayStartsAt = "2020-11-11T15:24:28.000000+09:00",
                    EndsAt = "2022-09-07T08:48:38.000000+09:00",
                    StartsAt = "2020-06-24T11:55:24.000000+09:00",
                    DiscountUpperLimit = 4685,
                    Description = "Qsr0pTvhXVGg9hnQlyenzuwrO3gGQmGe09eXlKtPgqSA0ERaGz46vIiA4hbe1yI3CGp5lj6m5fgOCupwcIPxBzhbkfELKrUPd9GpW6Q92PXWpLmGFM1PrngLs4Zq6rjFKNHUPj8OaHLD3inc4333SWlp4s7jMjS5PtJzYsdA5qhl1QGqEwjgkrGn0uAn0iqI2b5rx",
                    Name = "tzGOZhKJMKwzvYsbBzTdo6bpAqcW",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon44()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 3740.0,
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-09-04T06:28:22.000000+09:00",
                    DisplayStartsAt = "2020-02-26T13:30:26.000000+09:00",
                    EndsAt = "2023-01-24T18:45:34.000000+09:00",
                    StartsAt = "2021-12-06T11:36:14.000000+09:00",
                    DiscountUpperLimit = 1444,
                    Description = "sv2Llex1ejGQ2ugzGxu81Sx50Yf2M71M8zENOSGlzUlDTz33P2rJ14YHcAJKWHCf11oIN1lhxfCtQoWt3KCnkWzy38cC0E7gsSEITDei3yOkB642y5M6ZGKLNmOSXPLkVgGHidiNxSMbU65iFGAAyuGpPep5MlLDDmy5H5WNxLWXFOkEFZiHMkNkDC4XjAgnNgPyTasq1IFexxHoOsY3X",
                    Name = "mfSCMMI0hPIOcfptkBjf",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon45()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 7190.0,
                    Code = "HuYKUEJ",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-06-17T18:23:42.000000+09:00",
                    DisplayStartsAt = "2023-03-02T23:14:39.000000+09:00",
                    EndsAt = "2020-09-13T21:12:42.000000+09:00",
                    StartsAt = "2020-06-23T22:10:37.000000+09:00",
                    DiscountUpperLimit = 2277,
                    Description = "cLNjePvmbsJ6aAodX3lOsSzeTfXuUhrzyKZN2IpvZDbUGNbf92zGejiy7b3srgm7LVnhxTyAZfZDkQ2r2xXuIalmcupP8PaFubqXmo0h47ayHi8sXxsnC42wCpyAiBnUBLAV97YftKTMpHhWMUK3SCmPb9BXoLZ7wKHtX23HwTLkUG7zxtQPL0ebUOhv3B3t2DzpE8reI7vFyo7eM4dNHW25nKJYDvzM004QSYdkecoFJzr3b",
                    Name = "rOZ5f3RQvkhtySJKYRUQ3NzI",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon46()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 3131.0,
                    UsageLimit = 8303,
                    Code = "xko0Q38",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-07-12T22:23:37.000000+09:00",
                    DisplayStartsAt = "2021-07-13T13:21:43.000000+09:00",
                    EndsAt = "2021-08-19T14:34:20.000000+09:00",
                    StartsAt = "2023-07-13T06:23:16.000000+09:00",
                    DiscountUpperLimit = 7146,
                    Description = "7uK9FEO8wpTMbUo34Oh",
                    Name = "jcbIFy00bHfPtADraHJBywFUVQhJIvCWpCXL",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon47()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 773.0,
                    MinAmount = 7165,
                    UsageLimit = 4206,
                    Code = "x8oHUCw9I",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-06-02T23:27:17.000000+09:00",
                    DisplayStartsAt = "2022-07-10T23:22:12.000000+09:00",
                    EndsAt = "2023-08-28T17:11:20.000000+09:00",
                    StartsAt = "2020-06-24T22:34:08.000000+09:00",
                    DiscountUpperLimit = 301,
                    Description = "v5tebk72bnq5V1PYuyQsrCeZvlknHwyC",
                    Name = "eoTGD6IVelM1xkQHIURZCUVG9E4BcH9vh8Qcd9Qr1jGxJh75seT2MlMasdJCSgZ4nn16A08HMuzRKVjoY87iExdEHT",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon48()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 3496.0,
                    IsShopSpecified = true,
                    MinAmount = 8308,
                    UsageLimit = 6853,
                    Code = "pdMlXJAK",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-06-16T23:36:14.000000+09:00",
                    DisplayStartsAt = "2020-04-24T03:45:58.000000+09:00",
                    EndsAt = "2022-07-19T12:13:10.000000+09:00",
                    StartsAt = "2022-08-01T23:29:15.000000+09:00",
                    DiscountUpperLimit = 5335,
                    Description = "jNBic0lbP5i9pPDb3qItRRs3FY6lAlrydgPmYNQmdCCSHSb7PeqbGNNyGMxdwCiRwJpoUBZS7wM2sjFT50Pr6H3Lr5Vqadi7ItSc4oUdi9EYp8oXZ4d1DUqCUDmWqMmM9IYmurAkMd4wDsAO01hvmpIXnG4Vdq7gNAtqrqKm6uKQNQH3PDcRwU",
                    Name = "ecSBjOParYUfATbiJrkxUEwT3M91XjHrTG7fMCl81IJPQuSHXTmEReE1YV9ebnUBpzD7",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon49()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 8349.0,
                    AvailableShopIds = new string[]{"75f4ef73-61c7-47ee-9e4f-85beaea7dff6", "1fabf200-1250-4374-9a4f-c31ce35ed6d1", "c00754b7-baf7-4fd2-9da5-b1a5d4d415a2", "dd2d0f2a-3b2a-40d1-a796-4c2953449a28", "d5b939cd-2f7a-460b-ac45-e3d1affeb905"},
                    IsShopSpecified = false,
                    MinAmount = 4499,
                    UsageLimit = 5465,
                    Code = "b78oA0LE9",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-05-25T09:42:31.000000+09:00",
                    DisplayStartsAt = "2021-06-19T06:39:04.000000+09:00",
                    EndsAt = "2022-08-24T10:17:12.000000+09:00",
                    StartsAt = "2023-12-22T07:22:47.000000+09:00",
                    DiscountUpperLimit = 8570,
                    Description = "soBIqSCZEncCQxjIhrUeBMFsGSoFMs14cvovqZ6GQpcxkL1iWim0Xpy9XRR4FHqayBd9Y6naDnCaj1IshUK5sOcLMoSdluvLDw0rIOalhSCHrt5J1YKxmhpIQaAHu",
                    Name = "1XqBsQEc2YHzb0v51JNexx20BlobdlTY6n3LbK6Vu4m4rhE7PkEzPYVXfzwtjxI8n9Z0CQK",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon50()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "0c52339d-828e-49a3-9a5e-133b52c825fe"
                ) {
                    DiscountPercentage = 9805.0,
                    StorageId = "3fccb155-2b85-4a11-a486-d973d52a139b",
                    AvailableShopIds = new string[]{"a63d439f-26bc-494b-a80e-8f7cdde882fe", "5055221a-443e-4ce0-9b05-02cc80b0d663", "496e72e1-62d6-44c0-b66e-ee12227d9948"},
                    IsShopSpecified = false,
                    MinAmount = 3038,
                    UsageLimit = 9865,
                    Code = "WcZidvZ55",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-08-06T16:30:05.000000+09:00",
                    DisplayStartsAt = "2023-08-12T20:58:15.000000+09:00",
                    EndsAt = "2023-02-09T11:36:27.000000+09:00",
                    StartsAt = "2020-07-04T07:54:55.000000+09:00",
                    DiscountUpperLimit = 965,
                    Description = "16AnmYbzCLHYWconVaiJFwoOHJhs1D1kk2Z65xpUZ28FCmVx3QLXn5K0ujHfTEebumDwnUvtTuwE1P6w3jvuc6WVynWZlMwTGtLKHNv0GHMA8YNVctqn0HylBEaWFtK",
                    Name = "GqTMRGGhLK4md8CvDRXJmyMUq3nONdNUldEzZzYqTFGHLldYwHPZ5GyoYYcgPPK3Dchqik562nQJ7JN9nEMDfH9ZULXMKOjFu2fGiShoySflnR",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
