// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCoupon0()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 8747,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon1()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 1684,
                    Name = "woAfCN9jmfI2zURlEdnTa1FlfLuqCu15nvnBKIMqHBG8xcfDsZ0fN2mKlLpCDNArItHFlkH6j",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon2()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 4283,
                    Description = "OsiG4mZFBM3rFPWO3PjKF7DKcMaZkYeGqp9nAj8VN0ADax9V6vC8KTHwPv15ZD3hblUwXX6TlkQxCH4cuTt6mg0kPHIuOgc4OxPLiYtsCLeDznnOgWOfyDreJkhSlKYCYejdG5hUB1Ub5qaZgrMy1m73KHGTTbOcpccXs43FGz0TwMXkIFEBRhIkV9eDhSPQOyiNC1EOi6lYEhDcvolbe8",
                    Name = "53HTr3X4nwf7dnnrYNO",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon3()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 3870,
                    DiscountUpperLimit = 2638,
                    Description = "MnRQBIPXmRdjgN3O7Dz547kEeXs4d2K4sVdCu3fjF9dUZOFqYF8ch2WNErWT6n3um",
                    Name = "W7O5zTzqRaMlJUfKom90hOaIfea0zhcQxH6xd6aDhOLQUraDO5WcsVfPR6IAmNmrtyCiodjOI31LIRULIwannMBmGchn77l3dc6KIK5WDmAUqLB0PwRA29O0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon4()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 5506,
                    StartsAt = "2021-05-28T04:25:25.000000+09:00",
                    DiscountUpperLimit = 5783,
                    Description = "MrXgqmK1qvFl9KAY4eO2pSl1XwufctIDos3a4gSMZZiCLrcaf8ISGynVJuUMmyPQL6dvablZBvWECQaB1btzncvEIah1OYs4K01SpZuX0Bt2YV6OMYu0BQN8Cx0zTTF5Xp7DozcMiX9fR7gsaOXHS8nRgDISeetybMclnADhNlnYIXSA8mP9H2YzJnevcoZPuM",
                    Name = "T1kZB0GqNyjEtlRHLro2au43l9H8ejEu40Crirs4tINM2ObMDkB8Z4p3QiJwzQEam5tPj96QdU7YCziS7spqfU",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon5()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 2302,
                    EndsAt = "2018-01-31T15:10:55.000000+09:00",
                    StartsAt = "2019-11-26T02:27:00.000000+09:00",
                    DiscountUpperLimit = 5552,
                    Description = "REdwr1kWq3RZcD6V3p15seb9Jh92ltWDOL7hYsqwqi",
                    Name = "PyiADAZzig9RF6mXO14wenHwPURdTXO8mQVPMr83DdyY0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon6()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 8433,
                    DisplayStartsAt = "2024-10-25T18:31:40.000000+09:00",
                    EndsAt = "2020-02-14T12:58:23.000000+09:00",
                    StartsAt = "2016-02-29T07:09:55.000000+09:00",
                    DiscountUpperLimit = 3897,
                    Description = "C6At7mBxPX8rXAjOPowXTJUTYjfJzRBwYD81PA6xwh64O4BNlHHOyauO0rLbjIY3M09Sn4BeLNB3LAowVMHyrVamyQdzSms0R2NKIgHWx49EOlhCgeYDztJ6OvlJj9rYP5MYlODnZrCTWvP1fDCvPRyBIAO7ZDfmSU37sHS3taJzzaOjVb7FqVa5OqIZXEOTb8GvEwkJvUSOrcM9wJ50",
                    Name = "LhGp1ek1WGFnleYxagpj3GY3TJe81J9",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon7()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 8186,
                    DisplayEndsAt = "2021-01-04T10:49:55.000000+09:00",
                    DisplayStartsAt = "2024-03-22T03:55:16.000000+09:00",
                    EndsAt = "2022-02-20T00:03:07.000000+09:00",
                    StartsAt = "2018-02-19T06:45:50.000000+09:00",
                    DiscountUpperLimit = 6861,
                    Description = "RgEXaKnTDfNzVaRoSVpDT8MnhLy97YB3vU3zE757JREaFwioXBPEWgm5Pp40XnqKVsHTep3LKMwRfUxHWlXgzT0AZBYOUyVDEHOKO2y4aiqUatyxEUig6CjRGWrqsu5EcaJKfG1MVgfKozL5QbyNX5ATOUoK",
                    Name = "aK6ehlTDG4ejK1LsVMA22QXuoV3DwE5TnywaNRepdkhTMs3K7FNuM06O3DcKxyV",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon8()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 8401,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-11-11T03:35:30.000000+09:00",
                    DisplayStartsAt = "2023-05-11T13:01:02.000000+09:00",
                    EndsAt = "2022-01-12T05:39:22.000000+09:00",
                    StartsAt = "2017-03-29T22:06:08.000000+09:00",
                    DiscountUpperLimit = 9293,
                    Description = "JW0EhhVbPJyvnHF4cmms6lQwmvWLBhWigw05pRKgYPo0qBfDoDZQd1eTqE3LPJbOhQdaxqvibgxo9vhKhl51MZYkTgz9KfAMwFZMKyi9u4JjwzRWemZrItNdd8Q27Kc6U",
                    Name = "snA5R9a015emhJHl5LzJgM4muCuIwq4y6hvhkf7eecwdXS95uYBFmN83aO1HVUcfMImQ7TCubOEymAyfiJ6ouUTgSUz10J6Kd7KOR",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon9()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 9731,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2017-03-09T21:59:53.000000+09:00",
                    DisplayStartsAt = "2019-06-14T17:30:19.000000+09:00",
                    EndsAt = "2021-02-10T15:03:26.000000+09:00",
                    StartsAt = "2025-04-16T13:06:48.000000+09:00",
                    DiscountUpperLimit = 812,
                    Description = "zEkWd3TusYsXyb40qNBeQQa0t8ZczM5fQ39RaMylpflVxSJazMPQapSSL9QrcyXic4k51M8g7DO27Nh4ndKBADJJLBoPD3zbCdxcul4svOf0ya0zw8nAoUgKVdq7XQGO40Qu32hUk8pS470Na8tWJhrOrtNWgJeOweXmrOxUJHnlofBeXpPLMx3q74kVHFh2GH2CnBNSsBQK4DtUMNx00Svq4deeAYZhtJbkcpZzWyeThhyta7JfwD7Km",
                    Name = "FbwZnaNEVk5ZOvoyUep9rkQX3vaOdhfZ20M1aXUpAc5GCPWrwjc9fLqSYoXi5gn8maGMrefuqAqNYRy2Oq7VV6ZgxPtyuw6SrxGS",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon10()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 3407,
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2015-12-10T09:04:31.000000+09:00",
                    DisplayStartsAt = "2023-09-21T22:22:43.000000+09:00",
                    EndsAt = "2023-06-19T18:22:45.000000+09:00",
                    StartsAt = "2017-11-16T03:17:43.000000+09:00",
                    DiscountUpperLimit = 6139,
                    Description = "5cpkHaJCbmKoJIbJCuP0U6JWL5gvgKq0tSzjehsJzQIjdKdKhE91ERqnUvxN33tbLTqDndIRscSDwTUvl4yGBkwlGwdvPlLhwnZv32oRtdzewVlPpWa8aLwcDeLItMhCkF3RvpavAruRhrjJUYJhOaAOununn6y9",
                    Name = "zC99LzftQLDavMYosXIt6fHrMLsfa1DfoFB47E24zzOtco8pcc14Alw2mxe49",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon11()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 167,
                    Code = "7O6",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2024-02-16T01:32:21.000000+09:00",
                    DisplayStartsAt = "2023-10-28T01:51:25.000000+09:00",
                    EndsAt = "2018-09-27T06:52:14.000000+09:00",
                    StartsAt = "2021-07-04T12:29:00.000000+09:00",
                    DiscountUpperLimit = 5702,
                    Description = "yjC5FSURCrCwsMsWosMCPdcr",
                    Name = "5LQcE76KlvwcoKnGb1B",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon12()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 1377,
                    UsageLimit = 3379,
                    Code = "aJHSk8",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2016-08-10T02:03:41.000000+09:00",
                    DisplayStartsAt = "2022-08-20T19:51:52.000000+09:00",
                    EndsAt = "2022-09-19T16:27:46.000000+09:00",
                    StartsAt = "2021-06-06T04:33:59.000000+09:00",
                    DiscountUpperLimit = 590,
                    Description = "DsXGrnBb0lRAPQqxDfu4opXeQH9E1I40kh7UdCfbU2I4Sf4GdPkjnjNKtQnPdm8Z9Rit9VuPYZj6KfdeSpodEjPO7dOTXbM5OewkkFW2TFRdLZtgNHd2g0M3tK5rzMeRXTDntKH03GZaWHPkapuwxsFiAOAjg18CmF0hRyifl0kr8Ys6f2cKwcmt9rLJNT1II5zVbUWzm8fz0QLwzWpVTIL34FL2Q7i",
                    Name = "ur8ZGB3c7oAzD5OqVaRTvv6M3UiD",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon13()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 8375,
                    MinAmount = 6641,
                    UsageLimit = 1968,
                    Code = "C",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2017-08-31T16:19:30.000000+09:00",
                    DisplayStartsAt = "2022-03-03T03:10:48.000000+09:00",
                    EndsAt = "2024-04-12T07:54:13.000000+09:00",
                    StartsAt = "2023-01-20T19:09:51.000000+09:00",
                    DiscountUpperLimit = 6588,
                    Description = "IIv9CRXk9zkDO0gRLQd7exYBkD5nhi40lkGQZ5sQf4wJkRYDeAtupBE1OR0Q6rpy4qhegVvgDp0HE2nSu1Z4FhMcdtlv6MPYnccmoGIgOunQu1Per3nfUcTOhL7IP9uzqXdF3dOJal4n5JnN4yLC8ad",
                    Name = "uGfE74PTWxTZ7uWy1JVQD",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon14()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 7156,
                    IsShopSpecified = true,
                    MinAmount = 3752,
                    UsageLimit = 6153,
                    Code = "Vzxh",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-09-14T20:04:19.000000+09:00",
                    DisplayStartsAt = "2022-06-29T14:20:12.000000+09:00",
                    EndsAt = "2019-09-16T14:50:42.000000+09:00",
                    StartsAt = "2020-08-13T20:39:48.000000+09:00",
                    DiscountUpperLimit = 9788,
                    Description = "uGOBq1OsRL0sKLlzRQZQMM81iYgYLANgFjcKLvjFnrDN9FtD14BuwaqyaEY5cnb0sY6YXc5aMx5hFc2nWZLqn",
                    Name = "Z5OhHlkowtpic3EDBBzb1nqksTUbJMFd2WBXUONOgDe6cEWUJpjxNwMyvG1lu2pGd26g7aoBqbO2QiiovJMvK4Nlqmzd5zwDPygQuEjTr3yjSCrvSzfGk1zO8rH7zq6Y",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon15()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 6579,
                    AvailableShopIds = new string[]{},
                    IsShopSpecified = true,
                    MinAmount = 9511,
                    UsageLimit = 682,
                    Code = "7aC8BmMAT",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-08-01T15:27:33.000000+09:00",
                    DisplayStartsAt = "2019-11-21T02:18:26.000000+09:00",
                    EndsAt = "2025-03-02T14:16:01.000000+09:00",
                    StartsAt = "2022-04-01T16:04:06.000000+09:00",
                    DiscountUpperLimit = 7413,
                    Description = "Wz6uWyTrCvOS8Vk7f7YlPbrg9yGJ3k0Ot4XkAMrQFJIOWKrphIHTI9sZNGAM7djY5UvRlNEBZuehyCfGO4HDo7QbXLC6DbvjLAcTCmektIF5BN5r1v7e4oYyyVUHVIAIQGBtRzI5dMuCRsqhzzqriSyq",
                    Name = "LVx2qp6KEc1Ckk579TqwY6vE39mWZbVtkkeoK1FXiyHn7okteZz2DK",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon16()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 3261,
                    StorageId = "d38d2bf3-4141-4611-b7e4-d1f61d2060ac",
                    AvailableShopIds = new string[]{"f3a8fda2-1d99-4be3-b558-55969f33437d", "aa9a5aed-e789-41ed-b098-6eef9a5356a6"},
                    IsShopSpecified = false,
                    MinAmount = 6468,
                    UsageLimit = 8796,
                    Code = "wyY5",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2018-12-04T20:26:22.000000+09:00",
                    DisplayStartsAt = "2020-08-02T13:26:32.000000+09:00",
                    EndsAt = "2025-06-04T15:30:05.000000+09:00",
                    StartsAt = "2023-07-08T21:28:43.000000+09:00",
                    DiscountUpperLimit = 3179,
                    Description = "Og7hFxmGKnDouV7MBw8f4ruDfBURTRs1aqfnoDvTQhoaceGyZb8WWPHHpXpi9SkjqkCVwzgzZbVHHWL3YpDL2OGElH19fNEmlCUYZsXdsRFwMX9q8uN2i0LA6NPunN",
                    Name = "uOgZzX",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon17()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 9275,
                    DiscountPercentage = 653.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon18()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 7082,
                    DiscountPercentage = 7349.0,
                    Name = "7OzSXIDH6mozJElzEnG1psfzHM3N0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon19()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 5744,
                    DiscountPercentage = 6433.0,
                    Description = "IWVybu2RS59xpj2m3RIPO4vomcF3qzhBGumgKW1qvYVgHTg4G26MoM2pNHDCXhmDRZdRQqIegoHp2fTnLHOWR0YZ0kchP",
                    Name = "UaEdOgBPlAI",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon20()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 1324,
                    DiscountPercentage = 6139.0,
                    DiscountUpperLimit = 583,
                    Description = "lBz2aC90cEz2rYAJGlnvjBVZHB1o3OkY8jxtgjoQYyYWPNhdO9CxnGqEEgo4k8xc1Y7wcdnaKiSBri56BolmY14GCJNJPZdvI6z3chp9H0ad0YtQKTj0BkSgYQz24iASn5lyemE5l4A",
                    Name = "smvPdxvfIQ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon21()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 1378,
                    DiscountPercentage = 3938.0,
                    StartsAt = "2021-06-03T05:24:37.000000+09:00",
                    DiscountUpperLimit = 6587,
                    Description = "jKqADM8LC716USBurGCC3hIYjLUVgRi7uFxeMBpJMUHVIQ4v6kkAyPlVjWxSChkZDMKW6gAUCsCVQVQaArECOm2gdXE3ZpPsSj3x611qn6LJ9Y36r",
                    Name = "xPzJ0zHDmr8xyHlBmOqhKyaQqTIq2qGppv09wKEM2KXC6Ccrv54cBZEmqiWcO5JhTPS0DB66Nyxn8g5vfqMJYlM",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon22()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 574,
                    DiscountPercentage = 3030.0,
                    EndsAt = "2022-04-04T07:35:53.000000+09:00",
                    StartsAt = "2021-07-19T13:54:52.000000+09:00",
                    DiscountUpperLimit = 510,
                    Description = "cGuBfVx7rqBoHaagkkYPKmkK0i2yHr5bDPgYq6h0mNyo0nigfKEti5mSTQufZvvt401qHA5nWEBuoPwBtfuOeYxpMLTFMY6yPPWW8yeXQDGYe2E8aTtDmLdRQlmjSGmwsdBQDSNQwFhqACnjz00MzRqwSvvocdNaPDU",
                    Name = "FyjFa2g3jnFKnghj",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon23()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 8805,
                    DiscountPercentage = 4575.0,
                    DisplayStartsAt = "2017-07-18T00:11:37.000000+09:00",
                    EndsAt = "2025-02-28T23:20:41.000000+09:00",
                    StartsAt = "2024-08-19T23:57:30.000000+09:00",
                    DiscountUpperLimit = 2788,
                    Description = "qWa0h1XJhf79LLFQLeMWKYK3fT2XrjoFwpk3dBJi49uRpiLGfZqripmKxsovF9IlhOOePLS7qjlUmm9Mnh",
                    Name = "5Cl2Ua9egDYbFViTjL5mjkgkRV6ik",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon24()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 6076,
                    DiscountPercentage = 5893.0,
                    DisplayEndsAt = "2019-06-18T02:55:01.000000+09:00",
                    DisplayStartsAt = "2021-08-30T15:20:58.000000+09:00",
                    EndsAt = "2021-10-25T19:25:20.000000+09:00",
                    StartsAt = "2017-12-03T05:56:23.000000+09:00",
                    DiscountUpperLimit = 5157,
                    Description = "cd6K7uwIUV8rrKqhC6XUctPUd1hZYQCIQAlafa6Em9xlhYCnrpE2TZ7MmxIHb14S0LBSA9jjDKVQ80qxY5fA6AXcy7xYbVzXv2k4t2t7iayKlNa7cqOov4Km0kXujYzFT16UEXJdUW4Rsu21sgy",
                    Name = "8NiqxURHD5U",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon25()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 7056,
                    DiscountPercentage = 8260.0,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-12-30T23:14:49.000000+09:00",
                    DisplayStartsAt = "2020-01-16T16:30:22.000000+09:00",
                    EndsAt = "2019-02-13T07:00:58.000000+09:00",
                    StartsAt = "2023-01-11T01:36:12.000000+09:00",
                    DiscountUpperLimit = 1323,
                    Description = "n7Zt6SdWuXenY3JwJthGE3oxwl89r3p23NphgrGO1cCmzjMgPWnbc4lVP9LYMVIJamqQyQ8Jww6HKIavM8cuY8STjRsYPAefULodRbQGhgnxMYG6P5AORxxYKzGEBYrotVtJ5a9vsuXVfRQf960jJ",
                    Name = "5tYAPxUC7eiQeB00b8fi7pSBKe7wZzplyrBpEGSsvqFBnmi4",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon26()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 3103,
                    DiscountPercentage = 8873.0,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2019-12-01T13:11:14.000000+09:00",
                    DisplayStartsAt = "2018-04-30T21:15:12.000000+09:00",
                    EndsAt = "2019-12-06T12:01:18.000000+09:00",
                    StartsAt = "2018-07-23T19:39:37.000000+09:00",
                    DiscountUpperLimit = 5428,
                    Description = "hWo0hNur1LqvxrWUxcr03s7eL2NzcDUIl4HmHUOrZbCz1JwC5hAO9iBzbQZNJOzD5116zxFK23U6HqAKxozU",
                    Name = "16hpyFHtEg7le8SDGkMnOBrCaUombUoetMUQ1KRN7VoUnUYXGZOc8QHZVnTwq1WwSoV58vYf7Hq8VDOT5zlyV9FCGNTqXj4vyibmhZMlgeSt2iuDVl8XI7BdvkF5",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon27()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 820,
                    DiscountPercentage = 7824.0,
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-10-03T07:04:52.000000+09:00",
                    DisplayStartsAt = "2025-01-22T17:06:17.000000+09:00",
                    EndsAt = "2022-12-23T08:54:39.000000+09:00",
                    StartsAt = "2025-04-15T15:17:40.000000+09:00",
                    DiscountUpperLimit = 9633,
                    Description = "M8rX8dhEltcYmI17tjYcs8b8wG5QMxVF1CMsYDd4h7Cwi14YtFRnbFzQ2wBSw0JITHLhFH7qqEE3msBIHYPJ1eNPhAJfx8yknBZp56BW1JDIWT58jobIBrzh0kHHE5XgxyeXEfuF0s5O9aZQiBG3GVsCzMs3twCL4yMc0mcdm7iEUgcWJ4L67JhVYVzBZjpcTRBVMl6GKnZd9Vhmb1a4OwkuHTD3bVRBuwm7Ronc7yzISlXHw",
                    Name = "wOJOsGK8t3qJxiXogVD7sI7AvxBhYJB6b3YPYohw",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon28()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 2474,
                    DiscountPercentage = 6041.0,
                    Code = "pof6J",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-10-30T21:49:51.000000+09:00",
                    DisplayStartsAt = "2021-11-30T01:33:39.000000+09:00",
                    EndsAt = "2019-01-23T19:21:25.000000+09:00",
                    StartsAt = "2024-12-05T01:04:22.000000+09:00",
                    DiscountUpperLimit = 3644,
                    Description = "jlQTzAu6rJCqkakRb9HF2J2E9IT2JNixkWyUhpfbihGQHmdrUO50CBjKZmoC4LiIBpdTwSNYxPsZ6MvCl0Q0x2GNQadt1uZCjXXjrY3W5iSxRef5PjyX4E",
                    Name = "0V",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon29()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 2049,
                    DiscountPercentage = 5308.0,
                    UsageLimit = 2503,
                    Code = "0ucVImO",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2017-04-12T10:43:11.000000+09:00",
                    DisplayStartsAt = "2025-07-16T06:10:30.000000+09:00",
                    EndsAt = "2018-05-20T23:12:55.000000+09:00",
                    StartsAt = "2021-04-23T01:52:57.000000+09:00",
                    DiscountUpperLimit = 2454,
                    Description = "Ugqu5eAmdQquCipFRDTAYc3czicSYNAHQrfMxKYRXOULKoEJvAxhsUwZh2AjnPHoAtkaZ",
                    Name = "y4bHXfVwQ3IKhehlmYAc",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon30()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 4126,
                    DiscountPercentage = 772.0,
                    MinAmount = 1115,
                    UsageLimit = 2778,
                    Code = "hk",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2016-11-22T21:21:23.000000+09:00",
                    DisplayStartsAt = "2022-09-12T03:46:04.000000+09:00",
                    EndsAt = "2025-03-13T01:56:07.000000+09:00",
                    StartsAt = "2018-08-07T07:14:03.000000+09:00",
                    DiscountUpperLimit = 5470,
                    Description = "Akojtu4zLObs64tfC6IpWczaSiWaCrARH7o9Cjr9coenjwi5PKrKhLaTCpPKaae85wCbyf93qoHF6o1F5W4nKEnIddvz1A3lCuePLtov7b0fyR1aXgjz8w8sOmCGX4mHkYzBNvY3ZfkCkEPuRxQJKMk74rGpUbW2T7NEhOvMttZW64fBVX2Zdc015jgKIpHBGGhr7gsshHIHmlkYpFaQ04kVacrPJDSM4JAuouz76ij5YKoP9VN",
                    Name = "AnkQ6cEIFQgUfLqUwdawraXeS7c2btvgnCEMVcxW79N8IteBmUKqnb2boFYevS5cpJkYcAZwK7VO4J5wwsCYRtv53TT95jGye1FuNOvh3aqW5dxBQ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon31()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 9073,
                    DiscountPercentage = 1324.0,
                    IsShopSpecified = false,
                    MinAmount = 4971,
                    UsageLimit = 2412,
                    Code = "ZfVQi72N",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-01-17T05:42:51.000000+09:00",
                    DisplayStartsAt = "2023-08-15T16:27:23.000000+09:00",
                    EndsAt = "2025-04-13T23:10:26.000000+09:00",
                    StartsAt = "2017-07-26T09:13:38.000000+09:00",
                    DiscountUpperLimit = 2175,
                    Description = "imItfBDnisP89LkmCb3APIiZCGKVXmVognvMi2R5PEVGPAshYtrGDEOyVb3xx60TpQwXoeNMlFtnfHltNseLcOcxPML2XmqGADACZWrxQfgy561nZkgEkDukVvWfzR4QvByvw7KZG",
                    Name = "nUmg3W14AWYeX8Moil2Jw0FDE4cHsZlFKXrTcKc9IDojCJwfaS62KXzlUVCSawMwdQItSw1xYeXJi70MbHM9h3Kpzu05g4wYWy1WNOI7voK",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon32()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 7902,
                    DiscountPercentage = 3810.0,
                    AvailableShopIds = new string[]{"41e5b925-78b0-4bb5-a7b6-19b44949e99b", "da5186a2-3ec4-409a-b4b3-21bb98ff5c60", "21f72446-082b-4a12-9651-ae093ef73289", "c6613bd6-edeb-414c-b861-1c0a11f39df2", "d2f0b7a8-3ed8-4a91-ae89-74bd76caff02", "0bbd8475-1a5c-4343-93d9-414691f4cea1", "c2e3c8aa-4cea-4e47-8839-702de0102bc0", "471d1e3a-c17b-4c61-9bdd-068b1103b550"},
                    IsShopSpecified = true,
                    MinAmount = 390,
                    UsageLimit = 6552,
                    Code = "xAMsGhV",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-02-23T17:35:08.000000+09:00",
                    DisplayStartsAt = "2023-09-25T02:12:56.000000+09:00",
                    EndsAt = "2022-12-27T08:49:36.000000+09:00",
                    StartsAt = "2016-10-30T06:52:38.000000+09:00",
                    DiscountUpperLimit = 6270,
                    Description = "qq2BW9TBJe7ojXMGBWHKU3zpvuUgYPStAnVYQD1xwmeG5n5dQUguHgAzXjhXRu7tydgn6sLB2ZhhJLHizoT",
                    Name = "dozl0nKsFGrI2CONkodS1sy7usV8zdvwactgCr5KugHFgNWDqNwoLltn4oKgf91fyXsX6kxIXcQGB1RLhqZpULceC1",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon33()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountAmount = 3488,
                    DiscountPercentage = 4760.0,
                    StorageId = "cd551384-b29e-49eb-a3c8-c00f2a207c85",
                    AvailableShopIds = new string[]{"80b91e03-8110-45ec-9bb2-fb173f5c9455", "d854462d-5cdc-46b7-951f-c95fb80325dc", "a414383f-e0d1-4bde-9eed-37ae18a1ec53", "3e449953-4b91-4f09-8b92-bd66f9328cdc", "260d4c98-6cae-4937-8ae0-1837a5efc4df"},
                    IsShopSpecified = true,
                    MinAmount = 8261,
                    UsageLimit = 2077,
                    Code = "za",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2025-03-10T15:05:52.000000+09:00",
                    DisplayStartsAt = "2024-09-03T00:06:30.000000+09:00",
                    EndsAt = "2016-05-30T02:23:20.000000+09:00",
                    StartsAt = "2024-10-17T09:38:37.000000+09:00",
                    DiscountUpperLimit = 1060,
                    Description = "62D1yZS4RztoqEH6kIE7alRAFrM3neLmJ7gaYXPrQiNCUJiEHeBeGXQqrM0MhuxdQk1fjLR4NiZgWNzaHuJ2XUsKtVsV1IHM8TJ6Wnm4pfFfEg6FkINSr7",
                    Name = "cKPmKcpZNZNGt8Zz8PBsjCrIMU6Wd1JJGk3oHvTsxWOjaSCBs046zoq9MIfYOVLNSCyAKXJaxGXpbpbAHOusHIY26rb95Ee0PgowP",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon34()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 2318.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon35()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 3491.0,
                    Name = "WUD76pgtU0gG8GuyaoUJ5C14IL",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon36()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 7088.0,
                    Description = "PaMNtBjYVZB5ddAP8YmfVfgr",
                    Name = "JcEyOPlS3y9E2jnTlSyUC4mgMJe6hIJ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon37()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 7905.0,
                    DiscountUpperLimit = 4663,
                    Description = "GU3db3lZLW1xscGjvC",
                    Name = "UnbyiLtfpy5C2Hw2Oxxm2bUhhQ1SUfN",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon38()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 7065.0,
                    StartsAt = "2020-05-22T10:00:00.000000+09:00",
                    DiscountUpperLimit = 2956,
                    Description = "Npwu0vaJQa1eGcszaVCGWZw",
                    Name = "OrV4SEylGSbOeHLC9T3oYfqrSBqvawtrhYwkdReELQzJ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon39()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 1433.0,
                    EndsAt = "2020-05-18T12:17:31.000000+09:00",
                    StartsAt = "2019-02-23T13:06:35.000000+09:00",
                    DiscountUpperLimit = 5775,
                    Description = "v1xN2D7i89Cb00jAv1nzawiR13B0WKoBfKblXmjMYvlN2Ac",
                    Name = "4ndDAr00123WMWczZUQGja632zDgU8sCLWdMs4SquxOO5jc2IYveMzPqT0ij7mvJsEIf8TpEHzEtHod5cEJ1dK3KLIZkCX3ttugdgj4cPLU8",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon40()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 2334.0,
                    DisplayStartsAt = "2021-12-26T08:50:10.000000+09:00",
                    EndsAt = "2023-03-25T06:42:03.000000+09:00",
                    StartsAt = "2024-09-30T01:45:33.000000+09:00",
                    DiscountUpperLimit = 9294,
                    Description = "obOdAIILED1s9cKYBc1gxnYpd5620alxwGH",
                    Name = "0PFQqS3i9kHkGMdnemQKsLb61qlyTzkH4tJeqOf4TMINzVBXcfpy",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon41()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 3340.0,
                    DisplayEndsAt = "2025-06-18T23:57:07.000000+09:00",
                    DisplayStartsAt = "2024-03-14T00:56:12.000000+09:00",
                    EndsAt = "2022-05-06T06:12:35.000000+09:00",
                    StartsAt = "2021-12-29T05:21:28.000000+09:00",
                    DiscountUpperLimit = 6035,
                    Description = "hqyMbj1izevwtzCCEC7Wx2EydwBF0ho4IL3VJn4JuQsAMJjrhNUxrVAFQG4HYy93agdl4jERjWI",
                    Name = "BxjOqkCgzNvfrD3VlW2J46sY0nCNKNyKycsoLyWXPvpW3qdV0FttL8Nz1Pxh9XZCd1oPJIURIJlEyFVWxYCgnWDyDatcugymH",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon42()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 4166.0,
                    IsDisabled = true,
                    DisplayEndsAt = "2018-04-03T01:46:57.000000+09:00",
                    DisplayStartsAt = "2024-07-22T06:42:52.000000+09:00",
                    EndsAt = "2021-10-09T19:33:23.000000+09:00",
                    StartsAt = "2025-08-10T14:00:50.000000+09:00",
                    DiscountUpperLimit = 9490,
                    Description = "GFd7kWYgp7U6GHgWvLdh7X0nKw2K2eHI6FCxrl6YWBC02NSaAt4z3Mg7ekt01ZH0Qth0kZoTmwwm",
                    Name = "AmnCsUNys8u6fS1NQSTksq0WwZMu6Erbhi94B8zQ59SP2HakcsADFBpZHiJMW7Ov",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon43()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 9885.0,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-09-26T19:49:35.000000+09:00",
                    DisplayStartsAt = "2024-02-07T19:00:24.000000+09:00",
                    EndsAt = "2021-06-19T12:59:09.000000+09:00",
                    StartsAt = "2022-02-23T10:51:33.000000+09:00",
                    DiscountUpperLimit = 1359,
                    Description = "asgbscUgXZhUezWe3uYANeTpaZzAu88cKpVbbVDvQuwgMCvHiVnye2jPQlRshYBFdwgGGCrbteA0ginsbh5MIWpSV004shjG1jUHBqVW2m7Pln9sZpZruquYvxBBhPuaTyWJJj57RvspMU3ubeoUCm5FwGhPg2BI6DNX2holi8cvPpUKgoIj8PgOl0E5LqJUxOumTv6f99qKH9MTQABnqAuUfTyRGMCauOJamDnm4lG",
                    Name = "cPEwkwvdu2Tibs1Zh4DrV4IoIyALoHXxYlOM99YCuotH97zaDj7F5rmi06KwauEz6bCPepEthW55E6r478yKbDdDc7O3YhcfALddO",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon44()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 350.0,
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2016-06-05T16:03:12.000000+09:00",
                    DisplayStartsAt = "2021-09-26T06:37:51.000000+09:00",
                    EndsAt = "2023-10-10T15:36:09.000000+09:00",
                    StartsAt = "2019-07-12T14:00:33.000000+09:00",
                    DiscountUpperLimit = 8283,
                    Description = "lkalI5IrTj6Q4TlWYLYqhGE0QJ1bTshnmYa89KNpao3W6lpKexx2oDVqMvj7Cx8m0U1YU3qcCe6YAaQTEHIbD2nj8rM4YCe6HbLxCC8VPUGet2a",
                    Name = "6S5YRFroEDQYaOZ0l3pHssQ0NAHymvCSTTWD17",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon45()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 8700.0,
                    Code = "oTPGzKe",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-09-18T02:05:27.000000+09:00",
                    DisplayStartsAt = "2016-02-23T09:24:29.000000+09:00",
                    EndsAt = "2025-02-10T19:46:25.000000+09:00",
                    StartsAt = "2021-12-14T04:57:49.000000+09:00",
                    DiscountUpperLimit = 9673,
                    Description = "0spLjIXpFw1WBo1eLnbuMnAVwlku340AulKp5hAIPPPXzVMvQ7ySXxSlEFuXtPIaOfL84sgPJQ6nid",
                    Name = "ZInSXPrekgTysoSDDl1NGJAG36xM0mt15gLzSF9ondm7DQc7RXI7yAgCEqhg2ESGH7ZLUCjd3SLp5CaTxKe3AQ8dT8eFPtFvks6jfYD92pRp",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon46()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 5660.0,
                    UsageLimit = 977,
                    Code = "HAA",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-05-12T00:30:43.000000+09:00",
                    DisplayStartsAt = "2022-06-30T16:36:43.000000+09:00",
                    EndsAt = "2016-10-06T23:44:50.000000+09:00",
                    StartsAt = "2017-12-27T02:11:36.000000+09:00",
                    DiscountUpperLimit = 1789,
                    Description = "5buh0kwv4pPi0RUoUGVVKw8IjF6enjly5YRQWaF8OrmFi9vEfOeRhRWJpyBmdIKIiPUm3pvGV5ozfBtXgO1a3mRdxmQXwANZm9dOnwYbjjCmYOSa6",
                    Name = "xbkQHfxhAtD1IhC72Zp85cWvJP8LQsX1OTgRWFTsdlHfnHfFr9vvJWd6DWVPn0clNjOvHMziciVuwukdzf6gT95kJ5VeieQfC0mhn1JH5jpOIcnPTS",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon47()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 4300.0,
                    MinAmount = 2229,
                    UsageLimit = 872,
                    Code = "hwk6",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-01-09T06:33:25.000000+09:00",
                    DisplayStartsAt = "2022-01-08T11:23:16.000000+09:00",
                    EndsAt = "2016-01-10T02:02:42.000000+09:00",
                    StartsAt = "2016-07-31T18:37:47.000000+09:00",
                    DiscountUpperLimit = 6188,
                    Description = "0kjw1pJ2IxMQdLQ4Jo4oemutOBqZj15u8B1lrAdou4HuWP5E9Chcp0GaEURnWSFquLgpPEpLStDTf18IJGA83SO8WeiaTY5ijxnMU9709XBI5As1A4B01E0EOvqfR2QFkNKOHT8fibDmg2MJ8IJQJz4OWw",
                    Name = "mupuMhaQgtaYW8P2JVI8bab1jwQ6u0cfwv1Wo7YCc5mit9cye1gRJI81xyKEidiIfqhwXUS99fawlzvh4hINtAup69m6Ae32VacehQBhWtIrfim9yqfXtNCePsdEWzu",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon48()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 3566.0,
                    IsShopSpecified = true,
                    MinAmount = 3705,
                    UsageLimit = 2668,
                    Code = "GeKr9Dp1C",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-06-20T11:15:36.000000+09:00",
                    DisplayStartsAt = "2016-10-31T21:42:54.000000+09:00",
                    EndsAt = "2022-12-04T14:36:06.000000+09:00",
                    StartsAt = "2022-04-19T06:19:51.000000+09:00",
                    DiscountUpperLimit = 3472,
                    Description = "qno5X7k3HQ33Ad3vnKlUkeKEwXb6J26yPdoE42zJ75L2LNF0l8Ua11Xdxsak6WY6VKwX",
                    Name = "UHAdOU8PCNxg2nUlegFeJCNKBipn0ns3YqOYxJ5pJuvBd4IxXMlqbBlVW7kTPY0vsKXaBg2uyaD2Cbtp5yRLkzwxo6by0t716asZqzBTao",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon49()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 2795.0,
                    AvailableShopIds = new string[]{"3e21c056-7e7f-4960-8621-b9a4d2a0b251", "c5e9d6d2-1e47-41c0-aab0-f907351a2696", "3b8c6338-602e-4764-ab9f-e5e6bb177338", "05c8ce63-9526-4638-8f3f-302591f914a1", "79cec6b9-ba34-472f-9039-7ab491f15e8e", "95607208-126b-402d-ba6d-863dcc5f6cb1", "01a1881d-be4d-4ec9-b4bc-c564ea6e4437", "b9aa6a25-2e62-4d39-a08d-bc533da08f4e"},
                    IsShopSpecified = true,
                    MinAmount = 9179,
                    UsageLimit = 9161,
                    Code = "TCWTGgYglO",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2018-11-21T19:49:27.000000+09:00",
                    DisplayStartsAt = "2016-09-30T13:02:30.000000+09:00",
                    EndsAt = "2024-10-19T15:37:09.000000+09:00",
                    StartsAt = "2022-04-29T02:32:57.000000+09:00",
                    DiscountUpperLimit = 970,
                    Description = "SBvTaph7ZxIQCZYHBo19FvqF8NQLpca7DRCzXbJ665X021R8SnbRJoKibX4D7oNU5y2GV6YbmUqUEaQt91evmxYQv8g6JQduRkbaN5IC4qcOZddYEP0qRBTlvOLDm9eZnkcI9fjU3MaqNbtWJj1DUUnWQuYniJDMkLoZ1xDf71ZWsQkkJxmkaet5wuBgaucS5fdcpEmH35w8t7RMgcpkmLelq7CCXkgmHneQWl5DBVkEP",
                    Name = "Rf6H0JKcJ1EDDeM34n0s1rWo7Yvg2Z23rvYhEqKIQszkl9b6spzwbcblbeF61cgl4wVPKGUFs4kFik8CsIrzDxbOKaHIeqUvnpUb30ZOamYV4eanz3DYEZe",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon50()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "04cc712c-f761-4669-803e-6a9f7d14ce8a"
                ) {
                    DiscountPercentage = 3362.0,
                    StorageId = "aebd7f61-6be3-489f-83bb-3a437628ab25",
                    AvailableShopIds = new string[]{"39446882-d015-4525-8d06-4a64aca04944", "0e7fb984-86cf-4c97-8460-787074de2216", "efc97f68-ab8f-46c2-961f-c7c0d1951569", "c239e141-c3be-4e26-ae14-d836a209cc07", "69afea7c-0fcd-41b6-a574-0c86ed8dbff2", "47850886-c638-4e58-b4e2-7cbb336fbb11", "89a5fc96-9018-467d-9b56-c4de1ac859ce", "09d4ceaa-533f-487d-8419-18f3d9986f27", "c8fece03-db94-49e7-a0bf-d34cc1afac96"},
                    IsShopSpecified = true,
                    MinAmount = 3701,
                    UsageLimit = 789,
                    Code = "Hy",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2016-04-10T16:59:35.000000+09:00",
                    DisplayStartsAt = "2018-11-13T19:11:27.000000+09:00",
                    EndsAt = "2022-06-26T17:09:17.000000+09:00",
                    StartsAt = "2022-03-14T20:38:46.000000+09:00",
                    DiscountUpperLimit = 6222,
                    Description = "zpxhAjIE2XHCrsHba62TB7H4XiQDzcsKgrDIZoAT",
                    Name = "7wdlrhNdAV9H7UMpVcre3oCst7OpCUYikBoLsFIW7Ss3DkZllvprOISyhpMNcf8ECPpNYHRLU8kWOkP0H0rpm5asUmkqMkZz0gSXPRVfn",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
