// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCoupon0()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 2407,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon1()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 9725,
                    Name = "2iKijBEvfX3m",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon2()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 4647,
                    Description = "OM89aU",
                    Name = "hzhf1vSZw8oGfxQBIadDm4V",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon3()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 5806,
                    DiscountUpperLimit = 6916,
                    Description = "VnIsddThris35gIKD78Um9K0TiyB9NeC29SDqg9PctiDad2cb77MUH2w3SRzViS1EVzdF9vjFgMwLQIyErU0DFdoxgsgRcnSeyOUfG",
                    Name = "xJs240qMIRjgBG0uTTgzng47sL8j10POutRx1iWdFmM4bMCjR3HKVt3iatmU7R6Dt1Bi01sL9qW1hVnqzxS8LCFOjq6DNiVRjPuRmdJnDbg9mRT",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon4()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 5407,
                    StartsAt = "2020-09-20T11:06:30.000000+09:00",
                    DiscountUpperLimit = 5832,
                    Description = "wLyzV5KMsu3rsKYOnWDLv5ls4Xpj5rWU0Hzk738zCRa9FBLBa9g4b2AeTyqL6kI4rDIBmlmnxLd",
                    Name = "8zK6dLfuwh4TEyKz5nzZN5hf0LnBirvZ82CItQXxUlc1GQeThuqdn4x8Ag0gXQMrZ90",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon5()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 9532,
                    EndsAt = "2023-07-16T10:45:24.000000+09:00",
                    StartsAt = "2023-04-30T19:16:00.000000+09:00",
                    DiscountUpperLimit = 339,
                    Description = "lCCgrgMLTOTvTKbJ2j0QKwUkApfYgc8Mzmoj7bMVEaPI",
                    Name = "nukYJ05g9VfgP3DaFyztmffsfJEkTTPqjCCmxEd9HgvWL8CfUM5cfQmJLDqWsWtOVPGLB8zBljpEWk7x9qGRTaYMV2PwRwvkS2wx9GF4aMl1DFss6zjZloQ6",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon6()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 2602,
                    DisplayStartsAt = "2020-01-15T09:52:49.000000+09:00",
                    EndsAt = "2021-08-26T20:55:36.000000+09:00",
                    StartsAt = "2020-04-05T11:23:36.000000+09:00",
                    DiscountUpperLimit = 7463,
                    Description = "ogtEv68cG5mBjN31JQE8xhOgddLsQzFYujO6vcp7Pcz0H6J2Tr7FkWQteri7eETzEubYtZw1zsogDWaVbfckmgDBWTZRPRq2mBhQwkmMFI7TKpSJaA8DW0JDXKXils78AeOaHRCQkgh9WpWr",
                    Name = "UOafjRKpOKyhnstimEdUzn7Ik9aVi67DIp0CwcBoP2UYeKcX28rhc0E4F0ZYxi07OVfslhWWnEisz3AJc7h8dZaBqrwM7xCUGp3Emi1AtMWEOrEfaZKTioSf",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon7()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 6336,
                    DisplayEndsAt = "2020-10-09T13:15:29.000000+09:00",
                    DisplayStartsAt = "2020-05-02T06:40:53.000000+09:00",
                    EndsAt = "2023-10-19T04:40:11.000000+09:00",
                    StartsAt = "2021-02-10T05:54:34.000000+09:00",
                    DiscountUpperLimit = 9631,
                    Description = "FesDobN9e",
                    Name = "VmSwdIXbwtzU1HNCbMlmcnmFMvZmUpZ96FWx0UsDT5p",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon8()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 5989,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-12-19T11:31:09.000000+09:00",
                    DisplayStartsAt = "2023-12-31T18:00:31.000000+09:00",
                    EndsAt = "2022-01-28T13:18:53.000000+09:00",
                    StartsAt = "2023-07-06T10:40:15.000000+09:00",
                    DiscountUpperLimit = 6774,
                    Description = "xZi2DaXatXQ9FqsT1dx62HvKr2Vq2zzEu3XNc8qCDbhynfip2AhoDsq1U296zwfsYooAWEslQEuBjrhjz3neZeu0Op2BItuM1TRQ7Ur7aSwzDDIT0SqR2CCo9m1bzEsy035QbUCTilk0JlY9m76CxRSUR3VRcKndd5myhssenBi2XPmqmYZ8mOA5dP1d9kCLnaRhPyR8f6EkQ92eSPcKglGUTaKQeJe7BNVt0EVf0Nmsd0n3",
                    Name = "smDZJMQjSD2BP9QJyy73bgf4yq7qlnuckbHx2041q8RaciYqAQbojzYhMQNQU3jlHxd8GY9WyPsfAU",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon9()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 9913,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-01-07T18:03:48.000000+09:00",
                    DisplayStartsAt = "2020-06-02T18:48:27.000000+09:00",
                    EndsAt = "2021-07-12T10:09:57.000000+09:00",
                    StartsAt = "2022-11-30T11:40:45.000000+09:00",
                    DiscountUpperLimit = 2128,
                    Description = "ce1E2iQ2VYO5sWAKmsxeDpTxYHT9800v6ZfG6lz0D1BJDt5gghoKNomp70blYSH7RnK4ED2sUlJS48kmhAPbGmcPcCcMwMZLhQqdSrq49WGAjEScl9FgcpGPu4he1tE2opEmoU7psjxawDY35gKaarSd1OpDDGM24bQYEW93VWZMHMPmo6ygkZexaEiU2pzoqlPkHXfzAmWwMBCBkZmUIbfijeFbxV2mTr1WqYGc2eQIARg4sUzJCRBqFx",
                    Name = "GawPLMPPgE8Vnw88RdSvvPyadY9mLp3",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon10()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 4407,
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-03-15T15:44:04.000000+09:00",
                    DisplayStartsAt = "2021-02-09T15:14:22.000000+09:00",
                    EndsAt = "2020-09-22T05:11:08.000000+09:00",
                    StartsAt = "2020-12-16T00:32:29.000000+09:00",
                    DiscountUpperLimit = 1941,
                    Description = "EP2dkd4SiVVxniH5eP2RkFzk59LDOjUeZUDGvDGTHFE4pdPJ0m",
                    Name = "sJkBpxwRytZihDQp3CX3vVMHxm9eNC5pLJNrZAdHp9brgXwoTbMTuYmPBKb1cqjMMLDT4AcRvAgoHMT8RpXx81k3hguXx0TmivXJOHpoYdWA5P",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon11()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 1759,
                    Code = "VFMD",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-11-07T11:40:59.000000+09:00",
                    DisplayStartsAt = "2022-03-12T20:34:28.000000+09:00",
                    EndsAt = "2020-06-27T01:45:08.000000+09:00",
                    StartsAt = "2021-05-09T22:05:35.000000+09:00",
                    DiscountUpperLimit = 4299,
                    Description = "qn1pcqcYI8RCjz8aOs4TravlqZJEQooGjc5UDlcWKmfQpTE3uF6zq8SJGnbQ5wTi120eKDacCP2Lu3OJi4eTOwNEarwtvTUWrZvuwynZfjODyneeh9NS7LRMlS3UGiquC3URzVVuxXzFc9w",
                    Name = "ELNcpeGJdKUoeJtXEtGQm7D2cfDxp5xwujh97GqCNMnEMw6N5mDm4SF",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon12()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 725,
                    UsageLimit = 6342,
                    Code = "EtPVgv",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-12-05T16:53:50.000000+09:00",
                    DisplayStartsAt = "2023-05-24T06:01:36.000000+09:00",
                    EndsAt = "2021-06-21T04:18:39.000000+09:00",
                    StartsAt = "2023-09-03T10:13:21.000000+09:00",
                    DiscountUpperLimit = 924,
                    Description = "b1e",
                    Name = "r2x9pUpYPJ8GSQZ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon13()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 1493,
                    MinAmount = 7537,
                    UsageLimit = 5238,
                    Code = "ts9KoMD3",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-09-04T16:05:13.000000+09:00",
                    DisplayStartsAt = "2021-09-23T05:55:10.000000+09:00",
                    EndsAt = "2021-12-25T19:19:19.000000+09:00",
                    StartsAt = "2020-10-02T01:04:44.000000+09:00",
                    DiscountUpperLimit = 8953,
                    Description = "0lN6391byptUrmuDaNAnWygYrWy5edtNkEyTmEf",
                    Name = "xSASLp6HRENGMwobKSGJ8djYbSttVF30z6mPDG9YDzeZUohpgEidoE2YZWpO0su5EMhGNiw5PgOhwACpmIKxUKJvJ0aIZ1Y1aWdaGwIPYa8PM0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon14()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 7888,
                    IsShopSpecified = true,
                    MinAmount = 1797,
                    UsageLimit = 8723,
                    Code = "QrER6Us0yA",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-05-03T14:49:48.000000+09:00",
                    DisplayStartsAt = "2022-11-21T07:18:36.000000+09:00",
                    EndsAt = "2020-10-30T13:30:54.000000+09:00",
                    StartsAt = "2020-11-28T10:40:31.000000+09:00",
                    DiscountUpperLimit = 5667,
                    Description = "2HeRBogj9D2o8MZjGZSd8VWSTYGZXtwwla8LWmCHbvfuQJBMBCptKoJWmyTn6IXURJaSSOTGm4WmUDgTxtZKHVYGe6AdHBrzhnKPFrApxbJ1GcSvPLjw7mmcLTr4me7tL5R7nD81oA3GrslVWkdolvvzh33hCv0BWnppLN4Kke5UuEmYOW6JKpQlcq5BhOHPTzRydYWJ",
                    Name = "hrBseZYTrOotIvJ7jmAlMizqYHIlfy1i3MMHoeCmKgtf4rjX0SA7WiaBp81vRVF",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon15()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 8589,
                    AvailableShopIds = new string[]{"70decae3-c365-4d0e-8c96-e1e7dd7c598a", "122593e8-6b10-4426-b78b-78e2350ee196", "9233358e-5ef1-4384-b4d1-02b31df06fbc", "90709b71-2a1d-4777-8d14-e2a3fcd9ed07"},
                    IsShopSpecified = true,
                    MinAmount = 5570,
                    UsageLimit = 4357,
                    Code = "fPkGGOsFoy",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-04-17T01:00:27.000000+09:00",
                    DisplayStartsAt = "2023-01-29T11:42:10.000000+09:00",
                    EndsAt = "2023-06-12T15:42:26.000000+09:00",
                    StartsAt = "2022-03-07T12:04:38.000000+09:00",
                    DiscountUpperLimit = 2316,
                    Description = "nNnDxjbBAZLMCfzTCuGkPd8",
                    Name = "8J3EFfCwvfqwn",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon16()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 7434,
                    StorageId = "d84ccca0-7a66-4813-881f-35b645d48efd",
                    AvailableShopIds = new string[]{"4cc54ebf-7a8d-4fa9-b155-861d7270941e", "dc230c38-f7c0-4d45-a7b3-e29d872e602e", "bb9b9e9a-970f-408c-911e-81589b93d416"},
                    IsShopSpecified = true,
                    MinAmount = 9236,
                    UsageLimit = 6607,
                    Code = "KOhm",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-04-18T19:49:20.000000+09:00",
                    DisplayStartsAt = "2022-10-10T16:53:50.000000+09:00",
                    EndsAt = "2022-10-17T05:44:00.000000+09:00",
                    StartsAt = "2020-02-25T20:11:56.000000+09:00",
                    DiscountUpperLimit = 3569,
                    Description = "zCJrJ4spvPCPIfxkgSbzO7wWa1OfrB3PMv0hGgHJawMIELeNmbNF9Yo5WUSnUY1dKNcs8EeeUX8t8V88nHHTpRlFHVsQI52feAFGpiuZFa2VqnJctioFLqiMAEY3nKV0CCrd3sR31vMAhtZmJQTCFO7XrTyOXmeo6PDI7llt0qj7Kr76OYq5zGYoqphqSWkqNGmGreSobPX2OXeSyfqasEq2Yz2ytnc1qfg",
                    Name = "E4LEvPIDkXe7Jiyl6HU1pXxZPu3VifzuuXqEV52trRAo",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon17()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 4226,
                    DiscountPercentage = 5625.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon18()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 6670,
                    DiscountPercentage = 816.0,
                    Name = "zILw7b5RZIL9UVqeKazmIHD6kXQAkHtyTvkPAAzO7XGsBTeWr0QBqamMmpvQqc5bP4UwAMBZXn39vZa0XuMpXPRhZdPnsy1pIGJnEwAZTapNtFIVNDWrC5LcVb",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon19()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 187,
                    DiscountPercentage = 7922.0,
                    Description = "qEmm0YOjWAhZqj3wDopW8VTa9sWue44Z0wYxNXOERqu048rsWcS0YDvxi7rZLrSzPy6hDbe2ig4vq9yHFJ3iZqRPsN2g5DhRGc7rc1Rpz81mwz7HYKypvGz72dNlRtaLH60mXugyoQHVzcNX9mibayUTnwAyZrNdSJq6ZuiLU7PDPNk5OEratazghxO7WERVCefPaKASmyeUdIm9Ljs3vy1QcUN2y3jpM5ckZEuyaguD",
                    Name = "10iCxgnaC6hXkSBGH7yqzQIlwVTnrEO1ybTKBAoKWk8j3zffeRtQC1zTLfdS6aDjhrE8wxNJBOPFqpmiNbfGyC4hvrsiQpuW4y6OvUMGxsVFi",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon20()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 1855,
                    DiscountPercentage = 2770.0,
                    DiscountUpperLimit = 5287,
                    Description = "a5Vch0XZoPhDNTzKlcactGIIOz89YkHGIhYOsG3Ga7U6qVzz4ukmIGXhOAwMxSdO49F3epWmAzLI5Bnc2tCTFG0CRhImbZJ7HxsZc61qJPMEXL1uOSPe591zbNHjAGuZdOKSTXB0vuerVrsB9Bq96b5qPDE1fZnLxz23ZzAtdXZ7CHrUuguei238Y8HSRQqm1P7gnop36kxNVHePhydVLG8OwZlzLPDpUOuumoFY",
                    Name = "Ig7yH61kmYBdCcCZxkLj9DTOU",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon21()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 2556,
                    DiscountPercentage = 7940.0,
                    StartsAt = "2021-06-12T05:40:28.000000+09:00",
                    DiscountUpperLimit = 210,
                    Description = "swNPRIEZ4Fz7F6L",
                    Name = "eW1PgvvaV7W5WZypBJbABETGkhYnaZ8xACl",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon22()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 2399,
                    DiscountPercentage = 4898.0,
                    EndsAt = "2021-10-14T17:28:29.000000+09:00",
                    StartsAt = "2023-05-26T16:29:21.000000+09:00",
                    DiscountUpperLimit = 8013,
                    Description = "zUG9iEGcijq0loRkTahuNX44pZvDQ0dGEz9MRdyLbCO6HFVebcNlXUINwIfqVLQWc4He5siuZ2ZBeZhxKzxSfS7twSfR",
                    Name = "RT0JDCdBffLAYYzlc0S4NHknRsiE0IHSwXM4KNin5KXhf73bh4et1iixPxYmJ80SwR2hoeyi",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon23()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 7684,
                    DiscountPercentage = 9063.0,
                    DisplayStartsAt = "2023-12-25T06:53:28.000000+09:00",
                    EndsAt = "2023-09-06T19:56:10.000000+09:00",
                    StartsAt = "2020-09-24T00:45:24.000000+09:00",
                    DiscountUpperLimit = 7361,
                    Description = "dInMCEzsvBCgFgqMOBSoKjHxjwHOWqF40nVyZXkuMu1z8H66eX0zmZXAZd8TCvvN1c9R1jYwHnqePd2FyIGdLP8JlEv1GESN8SDepVG4xS8efCJfTv6lowxO6K2R14mGqDZhx9NFq6FDhUJJH3m81Zr95qr2zNBDVGuo1qGrhgrluGkFdpX100Ku49FuB5",
                    Name = "41pwc4vXT6jrOEjlQJHdUSC9VbyqimqEBn3IOzbEVcTNYAnXkMBvdvqdLitZdthsNvQd7zsHhR4BazSb",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon24()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 6525,
                    DiscountPercentage = 3316.0,
                    DisplayEndsAt = "2022-09-24T19:52:18.000000+09:00",
                    DisplayStartsAt = "2023-05-17T12:53:45.000000+09:00",
                    EndsAt = "2020-08-23T22:31:02.000000+09:00",
                    StartsAt = "2021-04-30T11:53:11.000000+09:00",
                    DiscountUpperLimit = 8670,
                    Description = "gP0jiuPRjvy08avB2vHVDOUDC5bj6XVTgKH37fBgCJ75xOCmqeL2i2IqC1QUkBEt1TyAse2gTNlXOIVBeXSMZaQgxt9Un6LpWVXrL0ya6T9igKw82NOXAYjq5Q6DxW2n1EhE",
                    Name = "X0JeCdMe8jHCOKbSjAQfXcu6MIDkLKW59iRXXETw8v2dhkClbgROzvCDW4Ca4i6iS56TwfKrMHx6b",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon25()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 325,
                    DiscountPercentage = 6817.0,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-03-20T21:44:56.000000+09:00",
                    DisplayStartsAt = "2022-07-07T01:09:24.000000+09:00",
                    EndsAt = "2022-08-22T03:56:21.000000+09:00",
                    StartsAt = "2021-11-02T23:46:34.000000+09:00",
                    DiscountUpperLimit = 7438,
                    Description = "6ciUcHPON8ncqxdiUTdrjUhtTJI8oce3fzZfEmcGnufLSSkc6NHWUzIMSR2cS9tLxYyWOaJBwcJkilTMMbB8POB8GDBtnPIGPS5hh6F2mmAOXOPh5FREXsgUNHEE32RmNaP",
                    Name = "cPGoZWX0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon26()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 3537,
                    DiscountPercentage = 1740.0,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-01-13T21:47:46.000000+09:00",
                    DisplayStartsAt = "2023-05-02T17:52:57.000000+09:00",
                    EndsAt = "2023-09-06T06:33:26.000000+09:00",
                    StartsAt = "2020-11-01T09:15:32.000000+09:00",
                    DiscountUpperLimit = 5821,
                    Description = "VSqs7LbZbhd7bdu0CLW9ptcXOsFxDDloQlWF2lbTsvu90uRmFY2mvndg5JT9XKhtOtAWXjti7TIncjbOx1ac4YOza16Af5NfPf079yv2KiTgzlXoNdsHCmdqlBwBCDfocfggXIuHTch3fqeNObKrWp0ZVfLX412JWSZlNQchE6I2sWDakX",
                    Name = "0RkMSzA9n0FzEtxsOY3jboavwuyeWjw7c6wSWORMrfe9Ecb2cwLqo3lgv613VLOUMKe3RtjzlFuwrBpxM2vbGzlwVg3QjzN2L1MzsidL2ArMKaMDT510chYQ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon27()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 9150,
                    DiscountPercentage = 8912.0,
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-03-13T17:10:55.000000+09:00",
                    DisplayStartsAt = "2020-08-27T20:30:20.000000+09:00",
                    EndsAt = "2023-05-23T18:14:59.000000+09:00",
                    StartsAt = "2021-03-21T08:56:04.000000+09:00",
                    DiscountUpperLimit = 3171,
                    Description = "QrnU0lDCi0dW8B",
                    Name = "QEXl8KXXSCJ8rfQ4NsQBgwBhFO0WxayVir30GvxZu3ONXmHYgRlsyDY9FTa8",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon28()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 7863,
                    DiscountPercentage = 9780.0,
                    Code = "EpeImILN8",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-06-20T04:50:02.000000+09:00",
                    DisplayStartsAt = "2022-01-07T05:08:05.000000+09:00",
                    EndsAt = "2020-08-27T08:13:08.000000+09:00",
                    StartsAt = "2022-02-26T08:23:47.000000+09:00",
                    DiscountUpperLimit = 3437,
                    Description = "u5ceQcV5dO0ObjR3mIsJa5KrXyfZ0kuqLKJrmplom2fJgrb2kK2vUFahHsfdXhleXpzMkdBNfKjaHK6692pFTJ22s5YQFneGWSphIGnqwhizIFWrdknGBFr83Vs5IHD5iGPYGDEq6RHyN1anRkEzIPl4VepBEWiKxRsnyom6adg2eEX3tjuGb4PJWojQC3oQ8GBu2wZ19IuCtK",
                    Name = "7Qg7AFLpk50a4ks31pjwJU2k4cGpNnsyMJLJ8jhWySFrZP51K4HxBFX95ggSqrhC5BN2Sqz0d2nAJCp3S0bE13JOFq2VO9Ujy2Am90sYHXIRWE8oQK8XmysYJxnA3q",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon29()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 1415,
                    DiscountPercentage = 9979.0,
                    UsageLimit = 4415,
                    Code = "bwpN9RGlmo",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-05-20T20:39:54.000000+09:00",
                    DisplayStartsAt = "2022-02-10T02:06:12.000000+09:00",
                    EndsAt = "2020-12-28T00:43:54.000000+09:00",
                    StartsAt = "2020-12-12T00:44:58.000000+09:00",
                    DiscountUpperLimit = 1744,
                    Description = "fyg1qGIwl8TYRuKiwIV1UH7obC0OzkEHvBdpon8IyI5lvERE3PPlGOHeK2bDoMMQ4mWG6iRGLDkpqnsSVQ21N8Hx6vDGdxb73QZ1m6bqB8TP",
                    Name = "9L21KGMlmEHYYSqWbWx6999e9z1NQM3Ms5bwSlnnuFnkwY2EJkzq9IzRcS9Huc6O8ZBi2uYJ3BsY",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon30()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 1875,
                    DiscountPercentage = 5011.0,
                    MinAmount = 3930,
                    UsageLimit = 7297,
                    Code = "mY58edfQ",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-01-30T09:49:44.000000+09:00",
                    DisplayStartsAt = "2023-03-05T10:12:57.000000+09:00",
                    EndsAt = "2020-03-01T16:44:16.000000+09:00",
                    StartsAt = "2023-10-04T15:34:39.000000+09:00",
                    DiscountUpperLimit = 4168,
                    Description = "2w1sxpoxEiLw",
                    Name = "m",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon31()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 7298,
                    DiscountPercentage = 3646.0,
                    IsShopSpecified = true,
                    MinAmount = 4181,
                    UsageLimit = 5206,
                    Code = "9Or3HCYj0l",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-06-29T20:43:23.000000+09:00",
                    DisplayStartsAt = "2021-04-11T10:48:11.000000+09:00",
                    EndsAt = "2021-08-18T14:41:33.000000+09:00",
                    StartsAt = "2021-05-07T11:21:10.000000+09:00",
                    DiscountUpperLimit = 4096,
                    Description = "vOxidW5upIfZ3he6rbVbfSQTIdKXczjGZG35KEgM0ZHQmRf8IlpHLc6eQpzbUBGxmDlZK5DstwUgZPhfIvMF9BRed2vPseEsQZBXoTi4zjMUSCQCe8D3vI1yPV3InpCGZW1CuevqgpyeyL9syw9KushdaPOvL4XAReH2FkpQBCExwe0Aq2u2sqkxbsM0rOcsojSIuE8dnztKeGNlHdUoVpsIVo2710jb",
                    Name = "sm5uj24aaEDG1kmKs53CVQ9VB2TMDu2ICRz0GNeu2t3grcXKT8nln",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon32()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 4235,
                    DiscountPercentage = 8840.0,
                    AvailableShopIds = new string[]{"97e76d1a-8c73-4161-9cc0-07157fbb5e00", "b978058c-22ec-4676-a499-5f4865700318", "c2d28ce2-2d84-4f32-8031-67e9ec4c91fe"},
                    IsShopSpecified = true,
                    MinAmount = 7927,
                    UsageLimit = 9044,
                    Code = "9oac",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-02-16T08:52:50.000000+09:00",
                    DisplayStartsAt = "2021-08-09T01:00:20.000000+09:00",
                    EndsAt = "2023-04-06T00:45:08.000000+09:00",
                    StartsAt = "2021-04-23T07:31:05.000000+09:00",
                    DiscountUpperLimit = 1067,
                    Description = "COPvV5tikCE9laNkvZgVmYFkjtk4xzhBzoiepH9zQuOP5ZXpxZEnLEEAggM4DcRXxx35Xb9YmSJ2oTx8jLdu5oMpX3REckYyWUSpgrOP0MvyVAe70zH",
                    Name = "gW2yvRs7orLYHic",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon33()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountAmount = 7368,
                    DiscountPercentage = 7071.0,
                    StorageId = "ba9d2baf-7054-4285-ae69-c2098ff30d00",
                    AvailableShopIds = new string[]{"fa0eb7a5-6173-4644-8b7e-60dba5ec111c", "0bf8d551-2889-4ea8-ba09-71613d06e7bc", "5007c118-0a67-4beb-baf5-5f5eea91d17a", "33c011cf-91a7-4673-a125-4ea62198a5c0", "62cbce58-08d7-4836-9f97-ef6213124317", "ecc8fbd5-4e23-4bbd-badb-4897c33a67a9", "e91b0697-ff51-4edd-bc1f-a8016780c2d0", "c90e5f23-15c3-40c4-849c-ea50a8b96b6a", "ab76cec4-2dce-4df7-ab84-14dd25037f18"},
                    IsShopSpecified = false,
                    MinAmount = 47,
                    UsageLimit = 8355,
                    Code = "tFYqA0z",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-03-17T03:59:01.000000+09:00",
                    DisplayStartsAt = "2023-11-10T17:16:02.000000+09:00",
                    EndsAt = "2023-03-17T10:41:15.000000+09:00",
                    StartsAt = "2022-06-08T17:57:51.000000+09:00",
                    DiscountUpperLimit = 9861,
                    Description = "gkCd7DpDXyH2bTNBkKOtDT40mk221IDLZmOSG57o101J7Zjqo2l5Su91DDT0lUeh4pkKl9QgPAW6SrgaXRMMs4EerLie6iUJBnrvUzpQLQRI8pMMa35w68Oaa4OvzIYljUSxfbE2WWpHfhwMOJ1qrzjYweRWP5JQeLMFAZxmXU6pZ2yhuXI413lHiu0W9Bo5epmLN4aE2LbVEZ0633H0libYS1d5XMwiDxgrzBZGgDPEDN",
                    Name = "qnucsCmtQOpRV6gM75B",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon34()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 1148.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon35()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 6181.0,
                    Name = "NJ4pYmAcQVdvy6aunB",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon36()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 6789.0,
                    Description = "0HUxckNpTnY3LbSQCKOVvxj1AnV57QI9thdzrXjCshHAD3mh",
                    Name = "WF3u41OGZWK1skUuiub1TzDoyfsTwKqG0U",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon37()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 2145.0,
                    DiscountUpperLimit = 5589,
                    Description = "nOEHdiL51ZXmBzFdNldd4wrWf5dEPicK9aaGlKS5LdF4KjyN9KhuEWKXPrAzmHaZdmS6FYZ1wRLl28kBiUmHjHEGIk3HD4lcQRyBPuQQNNi3jgRj3x548UFYPkbTY9eYq",
                    Name = "VDSeEarteyqGTnZQbs3TTtkKDT0i1iUJ1yGz6x7a2RAwOx89QgDymnGT1tGbF8xyX",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon38()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 6816.0,
                    StartsAt = "2022-07-09T10:29:24.000000+09:00",
                    DiscountUpperLimit = 8081,
                    Description = "PcAqluPu371jx7f3pi00rN8B4cs4dWNzzAQmD5zZrwuzOiHw5pwue3SiT0d58NWCohznba51JV3INYMQF7oFRDtgN1N5uf49E8UgCJEXxjvHTNdr7LEpYiD4jiYFHzX6xOAj13brzFn4byXRS3kPWDaelFKhnFfhVfUqAdrSUt4ZL7EZ5u3Jiv497NeYpqLel3gMNRLy",
                    Name = "RNtwv5amOaiq",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon39()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 7613.0,
                    EndsAt = "2020-07-05T21:35:57.000000+09:00",
                    StartsAt = "2021-03-08T15:16:15.000000+09:00",
                    DiscountUpperLimit = 7114,
                    Description = "fNGpUjDOPQbuZt46CEhqJJFRfkSzUFPa",
                    Name = "mafs1ZIxchsYPPS5oZw0v1ioYtJxj5WLUwhrVTJMxAl0mrNUecUD5KOuaEVvA6GLlE80rpXNMcS",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon40()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 9645.0,
                    DisplayStartsAt = "2023-01-27T11:10:50.000000+09:00",
                    EndsAt = "2021-07-07T01:33:30.000000+09:00",
                    StartsAt = "2020-04-05T01:38:04.000000+09:00",
                    DiscountUpperLimit = 4666,
                    Description = "dv4PRrMB9886AQm8ZcLYJjD80",
                    Name = "umdka4FZvD7XWIpd0K1BDoc98m5fXkR9ZeDKo",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon41()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 6893.0,
                    DisplayEndsAt = "2022-01-31T05:31:18.000000+09:00",
                    DisplayStartsAt = "2023-02-27T19:05:30.000000+09:00",
                    EndsAt = "2020-04-16T20:16:28.000000+09:00",
                    StartsAt = "2023-02-13T11:35:26.000000+09:00",
                    DiscountUpperLimit = 5398,
                    Description = "NXOle3HHIwb4WG5EihAFDQTe1r7dyoTBSOxuKn4DJAoIHlUcrAklMUIuI7BkYbN1Fv3Ixy4vmhvzji4CIflwdqZe7LgAw0BDh2Q2s4Yij3VlssthMeQBVw6XKUqlFeyvqD7VdY2hYkEDmTKQkOLao7Qua74hjyVmQTnaQstDezyRiPjMILBobPtvdChlgnA6c",
                    Name = "pDT6suZoXQVEMi03QmqVbpNC2FnPNDqfC7koxLYZ3P4UEsb9Td1YpXsbCe8WznBoKZgtG3yzs0dd0r6fhcfzNWco18gTeZPRRPvWJyJulFDWjH7uS1eVk2BIyiVtWoxi",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon42()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 3917.0,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-07-14T11:22:24.000000+09:00",
                    DisplayStartsAt = "2021-08-13T01:07:46.000000+09:00",
                    EndsAt = "2022-02-08T09:07:17.000000+09:00",
                    StartsAt = "2021-11-12T04:50:50.000000+09:00",
                    DiscountUpperLimit = 2816,
                    Description = "u54QREyYt5mYaD2gxSHx8wIxnamywttha5zYmzECZYPEktgxOXZFKmYU38YloOHVvdJamBUTkonLFHFtbKQP1CUu7fX7C8uadH48XRKRmiatqow57ofWyPH1k8lu4IWroY6GNPp4XfHssLTJgP9V5MalS7DKePl9QW3yP2OlfohxtDE0D4azCvYudBZq1usY4aTQPdbSkFE1ykliKg9TraSlY",
                    Name = "Brns0slVRpDRxKR03xBS6ZOjgLZiTRDXcmnz6hOmPKF3sJrNR4jkNh8X5LUs9Ws",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon43()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 2195.0,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-07-24T11:22:16.000000+09:00",
                    DisplayStartsAt = "2023-10-18T12:14:03.000000+09:00",
                    EndsAt = "2021-03-21T19:17:31.000000+09:00",
                    StartsAt = "2023-06-17T10:14:27.000000+09:00",
                    DiscountUpperLimit = 6504,
                    Description = "UqzBOTOdZbUZha3czzWdNc2d8PkpyG6acmNJFRh2tzs7rE1FnX5y4DCRjq07ewqOn8PN9XKUjY0GKUafkTXVFIFqFIgQQMZYgkUaESyt6OSwmJ6HlPQwDq1fY29kiu4QSV",
                    Name = "YpS23aSokvSuDkfZLprkxvPL0MWPeQVHez2b7h1tcY1CYLs8OtWqUcOaLse5OPRXMxWffahDuAe3ZaG5ZMKpmYtfSX1BcgQU5EOM45qgd6ierY8W",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon44()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 4969.0,
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-09-30T06:21:04.000000+09:00",
                    DisplayStartsAt = "2022-06-23T03:24:22.000000+09:00",
                    EndsAt = "2021-04-11T01:49:47.000000+09:00",
                    StartsAt = "2022-04-04T14:43:32.000000+09:00",
                    DiscountUpperLimit = 8609,
                    Description = "afHhnLLYkMIweifjLEeqkyE6IOCejVVbTnjlZTU6JLspmnSMgX",
                    Name = "O5Vw5sNQXz9jEIu0TH8Ta5s5xA2BN90WuFiAJc3b",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon45()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 6358.0,
                    Code = "Z",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-03-01T13:01:07.000000+09:00",
                    DisplayStartsAt = "2022-04-12T02:05:32.000000+09:00",
                    EndsAt = "2020-02-14T07:54:56.000000+09:00",
                    StartsAt = "2021-11-09T16:27:44.000000+09:00",
                    DiscountUpperLimit = 870,
                    Description = "iPf8CG5pK6Ko6HUWGH7Ae7ZLavRT9L6L5ZbAHWmdxVFTiUwzodJd9LsXmWCZHkCdS43GQezzd9vexXI8aUQ7iWX22RtsbKXJj2UDcsiYEK",
                    Name = "iLDJ2olyzeExx57lSYAjj3WnMObWT6UP4r7nMcmL1De708mJRQd1yl9umnAEcR6aIWCN903MQy9oPzQDDyVZsWlYns7sA9nSm0NwvGK",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon46()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 814.0,
                    UsageLimit = 7897,
                    Code = "s455uBV",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-03-04T22:41:47.000000+09:00",
                    DisplayStartsAt = "2020-09-02T01:48:34.000000+09:00",
                    EndsAt = "2021-10-29T11:19:08.000000+09:00",
                    StartsAt = "2022-11-28T17:00:25.000000+09:00",
                    DiscountUpperLimit = 10,
                    Description = "4LVhb9myT1cIOtUPzXCu0CMPBtDnMQo24jh00zKNGI8eVnK12QD8oj7ZoZNbltiFpN3V50gdH9Z2sXQdpqbx1gpHCpcP45ARvmenV2163Ul11B1FpObV9j1i5padg7kv",
                    Name = "CAQhGwJoiECzGdlN0dlTBZelIncCY5C3Kx1zzbaGQJjhXyJZ7BnOWlO6E2Jqn67jeTqNkjP",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon47()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 2892.0,
                    MinAmount = 4020,
                    UsageLimit = 4632,
                    Code = "lao54J",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-03-26T08:35:32.000000+09:00",
                    DisplayStartsAt = "2023-03-24T23:48:57.000000+09:00",
                    EndsAt = "2023-11-05T17:17:42.000000+09:00",
                    StartsAt = "2021-02-11T23:40:15.000000+09:00",
                    DiscountUpperLimit = 2008,
                    Description = "7U97xsVPtgi6NGBBhGNbUtpLNMFaRP9p8VAl6Da6Dj2PH2h780vnT",
                    Name = "qVX12YefG",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon48()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 2114.0,
                    IsShopSpecified = false,
                    MinAmount = 5498,
                    UsageLimit = 1706,
                    Code = "t0HOFDf",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-04-13T19:32:03.000000+09:00",
                    DisplayStartsAt = "2020-03-15T19:45:20.000000+09:00",
                    EndsAt = "2023-07-11T22:25:05.000000+09:00",
                    StartsAt = "2022-05-07T16:33:12.000000+09:00",
                    DiscountUpperLimit = 3761,
                    Description = "4WRTZ2AlbybNJLLuulOaE93kXavbNf2iPo11Us0I35huNpSncYv0l1RuUdzI0Ku1t5jJAbwfZ4PXD4G2Q3ynOu8Ef3Idk840lYRsFKU7J49S11Izc9y4RNJ9SBFdVK4hIKWE4FebG3a3p3gFRxCfd",
                    Name = "GulZRk0oC4D5RrF6ZFqmDhQUWp43j7tWILhElaKr3ssH8X1T9lqouRgrShqczF0kg",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon49()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 3304.0,
                    AvailableShopIds = new string[]{"cd998251-dca5-41b6-9ecd-83a282e870ff"},
                    IsShopSpecified = false,
                    MinAmount = 926,
                    UsageLimit = 3970,
                    Code = "WI",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-03-11T13:49:26.000000+09:00",
                    DisplayStartsAt = "2021-08-13T18:07:12.000000+09:00",
                    EndsAt = "2021-09-01T03:16:14.000000+09:00",
                    StartsAt = "2023-02-20T16:02:47.000000+09:00",
                    DiscountUpperLimit = 7557,
                    Description = "Wk4Cp1gX16WxGlfCO9tqkMixUEAn51TmPzO2vHrLBhCmvsEcb56p0e4NnXnf7grlzxTD7i2NgX1aD",
                    Name = "OlFnrxmXkgVuU8fohnBH9xVJQE7oZSeVWQJu3wRX2RxQb2829sYXWqoB96S4pHAHjWi1kTZEKvPw4zzh62UBkzgiHsUIwNvsOV1EcU3Ur",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCoupon50()
        {
            try {
                Request.UpdateCoupon request = new Request.UpdateCoupon(
                    "7cab5cb2-c960-486c-9b94-c3c8f2dd3e5a"
                ) {
                    DiscountPercentage = 6215.0,
                    StorageId = "aaef4980-6ab5-4ec3-a00e-30974bd7eedb",
                    AvailableShopIds = new string[]{"34a5b7e3-004f-4756-9313-c53c83aa472f"},
                    IsShopSpecified = false,
                    MinAmount = 8056,
                    UsageLimit = 5428,
                    Code = "RJtge2nfM5",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-06-01T18:49:12.000000+09:00",
                    DisplayStartsAt = "2022-04-06T12:14:57.000000+09:00",
                    EndsAt = "2022-08-14T01:43:07.000000+09:00",
                    StartsAt = "2021-06-18T19:06:50.000000+09:00",
                    DiscountUpperLimit = 8443,
                    Description = "Qs0a4yieQB2G5bzzGUUenuS8BDm6jAmU4l2torN8stojIdWMJbutyZSD1Lwtzf7Kralgj8Hj8GtvsZSHcvM9omLfI0johgXnHLcgG7l",
                    Name = "vlfy4BstyG0WMnjd2fDjJJh1ISbEdpc8EKHrCAYwtrQFsl6TRCr6duNcKO16DBcacYrjz8X1oOvMIzP9qCMKYKctoZe83EojJyYGh0Q2ueNnAh8B",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
