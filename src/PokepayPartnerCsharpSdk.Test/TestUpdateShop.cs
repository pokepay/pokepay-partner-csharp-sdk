// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateShop
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateShop0()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "30ea7b93-df5e-458c-8c15-840b3e08fcf3"
                );
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop1()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "30ea7b93-df5e-458c-8c15-840b3e08fcf3"
                ) {
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop2()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "30ea7b93-df5e-458c-8c15-840b3e08fcf3"
                ) {
                    CanTopupPrivateMoneyIds = new string[]{"0250d8ff-96fe-461a-944a-9da297295645", "72732cd8-09b3-43e1-85f5-31d8a0cb5296", "a5fd05a9-1790-45a4-aa2b-6e8e8cae45df", "1d8f9933-4e59-404c-a849-6a5b6043ba7b", "af3a900b-ed1f-4f61-8469-b5b12e797f41", "26535e24-c940-4986-affd-11112bf2ab4d", "12ef0055-6b6e-4017-9097-2de81da3b424", "632eb04d-c77a-463e-9140-2a991c9c48e1"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop3()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "30ea7b93-df5e-458c-8c15-840b3e08fcf3"
                ) {
                    PrivateMoneyIds = new string[]{"375803db-a99d-4d37-88ac-925d42263237", "7a0be8a9-4ed9-4797-8641-c70978edf548"},
                    CanTopupPrivateMoneyIds = new string[]{"7628f552-5ab6-4341-8ca4-188056401a7b", "aa002f50-d95e-440f-9751-98e24c115ee1", "7df7b154-5a78-4cec-b332-4d1f5c86ac52", "30c962ff-a60e-4e11-9a2d-51acf0ac9bdb", "5b66af1c-9ca7-49f7-9bec-a88680da51d2", "85a20ab2-5920-486a-ab3a-5051bb4625af", "88f70970-9bf2-4249-aa7b-e636a249746c"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop4()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "30ea7b93-df5e-458c-8c15-840b3e08fcf3"
                ) {
                    ExternalId = "OWBtkKIjxfMvYigRS3aMB3leXfamXP",
                    PrivateMoneyIds = new string[]{"9e657341-d7a7-477c-bc13-9d8050c633e3", "ff92fabf-58e3-47f4-b6e1-cf9e7ffdbaef", "f46eebdd-1291-4f13-9a0a-785ed22e0e72", "6718a3c4-a5d2-4629-a972-443a4fabf804"},
                    CanTopupPrivateMoneyIds = new string[]{"7073f073-2632-4ad8-b3f3-dacae8db6b07", "afd61394-7355-4b9f-88c7-cb69e2ee5699"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop5()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "30ea7b93-df5e-458c-8c15-840b3e08fcf3"
                ) {
                    Email = "yGnuCOsFM1@lMgW.com",
                    ExternalId = "E9FE2t8MTQvBS",
                    PrivateMoneyIds = new string[]{"2a48d64d-a29f-45a2-894d-9cc848855871", "bc0544bb-414e-4b17-a62b-a2a3515baea8", "b3bd1887-ecc2-4bce-90f0-6805b6a14d83", "5277450a-1303-4c07-959b-150ab3fdcc89", "44b3a7b8-716f-48ce-9257-c6c39e2b5562", "8bc6a28e-7add-4181-ae06-0a7e25d87473"},
                    CanTopupPrivateMoneyIds = new string[]{"3c8ad9dc-1427-4d64-96b2-e3951d49ad58", "588cbe39-bc45-4f2d-9059-5ce608218e3a", "b33be2b5-0f44-4de4-8679-4156ce951da8", "4069df03-13c8-4bb2-b1e2-38e206831240", "abee663c-cf01-4498-be39-ea6df9e3e9eb", "2f7bf925-1a00-4728-ad39-fe7378615fb6"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop6()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "30ea7b93-df5e-458c-8c15-840b3e08fcf3"
                ) {
                    Tel = "08-4311109",
                    Email = "36RryOCTzN@zu95.com",
                    ExternalId = "ewHOKtgDGT7aTW",
                    PrivateMoneyIds = new string[]{"0f8535b6-cd85-4fce-bf08-e7026b2ccbe9"},
                    CanTopupPrivateMoneyIds = new string[]{"8bac0d51-a221-4ac5-810e-9f376e54c677", "ac00fa38-e284-4e94-ad28-1ae1c1d92c17", "7e00f566-ad37-43c4-9e81-0f25af8f8490"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop7()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "30ea7b93-df5e-458c-8c15-840b3e08fcf3"
                ) {
                    Address = "t68CTAb2iAFu8YOPbaFAD5X4OUxwJsIbAA9EJZbGlGDK0BLKhm0BCDKClY7ksx4AFmeglsa7kcQ3U5nYdRUHAHY34N5D5bKVcsdSpGqSwnjqBCplYqFGCSydJBdGQIRCoUGKXQLvpmISysqAvSge0ksdZjMeixjk4Xr2U2mAhXvL3RhDJrSIafRbJT8SF8wUW22cHM6quzFhV6av10cPpYvh8M4",
                    Tel = "01-50889",
                    Email = "Npnsfp3Yo3@2Eox.com",
                    ExternalId = "rm5h7gERxts6Ahc1mLgxHrG9yPSd",
                    PrivateMoneyIds = new string[]{"2b671ecd-8a83-416e-b2b0-28cdca915809", "eddecab1-9b17-45ad-846d-1841bb2c3e74", "7f065976-0596-4174-8ee4-c8eda39be7a8", "e170b42f-013b-4cbf-b900-e435fc714a83", "46c6d01a-b5d1-44b6-8052-c481473a3644", "21f41538-10ab-4468-92f6-163153ed6db1", "4d1379d2-2226-47f4-8ead-9d4b2c1ce540"},
                    CanTopupPrivateMoneyIds = new string[]{"0b90c67f-0d90-45e2-b7e5-eee8455cbef9", "a4e08b37-e521-4bc5-a65b-6c38b50da971", "ca8e57a1-ad0c-43e7-8a7e-dc75c0a5be79", "32fe5a2b-88fb-448e-b439-72856041eec0", "d635e94d-8e53-464b-8a78-585ab32a064d"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop8()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "30ea7b93-df5e-458c-8c15-840b3e08fcf3"
                ) {
                    PostalCode = "653-3046",
                    Address = "yUlLZYpsOEbPGle7PnhARQQb12XVIGZX29Dyx5lvvN3RvdFrJB03Awjgyx1LKjKra0Iw3VSgbY44nqluiZNrww3",
                    Tel = "090305-340",
                    Email = "j4770t9xMt@k2wu.com",
                    ExternalId = "UGbgJkQO",
                    PrivateMoneyIds = new string[]{"f9a3210f-1873-4e14-abd0-25c163b39a57", "56a8cc6a-073f-4918-b9fa-a1e329119b87", "708206f5-0195-4448-b87b-90eb47407716", "8643e383-6011-4b99-8bd1-cb28e4d31629", "b22c43cd-eb4c-4dda-9ffc-9c36cecf7416", "e978a4cc-3d19-4277-af5e-9a94ba6f4247", "18d0d4f1-17ed-4b8a-b6da-0f325095fd85", "f4c47948-357a-46fc-b2f6-851b1c5b904c"},
                    CanTopupPrivateMoneyIds = new string[]{"8285d6bc-b615-4c19-a2f0-7e1322bce306", "44ad9651-7189-4984-bb57-4d0568cbad5a", "ae5c5877-0a84-4236-9df1-0095d97d76c2", "397558e6-fd83-4c1d-b2e5-ac888b4b0a5a", "933a46a4-a5c2-4785-af30-e9a5cf56b28f", "28537cee-e36c-468a-a190-292b2a78ea16", "e790195d-0cf5-4dc2-8694-af38610880a7", "bad9388e-e4c2-40b4-9b63-5e16e2b0c90e", "05e5e99d-a0da-46e3-b588-f7449fd2542d"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop9()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "30ea7b93-df5e-458c-8c15-840b3e08fcf3"
                ) {
                    Name = "vnOFyRoEsaMnoCbZG4lkQ3FrjJ9RAEzEMsUk2ifFvvUsuDqBNQG9tR535ExtPASVXxC2HvyFNSNXIlPlVVnLwBZ665AQI4VRr0wSpNoBjGGosaVXkExOG0311Q9mfMxrQRKkEbQcdqPYIQDvwSeY8tonzD87PL0ayzkfiyYZxzf4OnlyTBskLXpmOglUU3Jrz3z4mI0xe8",
                    PostalCode = "5665715",
                    Address = "MylmVonQFbH22rnQ8SQE3u2Ni30dsC587BM9rV1YmjYrtqFmLPwQL4re",
                    Tel = "0634-6845",
                    Email = "LG7URczRdV@jngk.com",
                    ExternalId = "C6jpMOGn4yOZCY",
                    PrivateMoneyIds = new string[]{"b6035a67-89c6-465d-be81-2e787deeb56b", "47228e98-93a6-490c-92d0-a5b7871a31fa", "7daeb8a3-4ebb-4d4d-8d9d-9c3a4b042e31", "14b85678-3c75-484c-b397-3edab7c15ceb"},
                    CanTopupPrivateMoneyIds = new string[]{"b0000f40-c68f-407e-a945-1f7da3bec256", "81aeedbc-d42f-4df1-9dc8-0aec1200c8ae", "a417d99f-f419-4c09-baec-50c704034ef9", "bf4e9aba-ec5e-44f8-a974-388fe680ed49", "784e5cf8-1d7d-4a79-94df-5496a196cc71"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
