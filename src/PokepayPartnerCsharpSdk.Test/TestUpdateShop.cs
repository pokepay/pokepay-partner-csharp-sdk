// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateShop
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateShop0()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "ac81c497-dd4a-43f7-b233-ece500c07020"
                );
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop1()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "ac81c497-dd4a-43f7-b233-ece500c07020"
                ) {
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop2()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "ac81c497-dd4a-43f7-b233-ece500c07020"
                ) {
                    CanTopupPrivateMoneyIds = new string[]{"1181f229-8a30-4559-8763-c2de3b8e8320", "6ab739f9-c959-471f-82ad-22f5b865aa90"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop3()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "ac81c497-dd4a-43f7-b233-ece500c07020"
                ) {
                    PrivateMoneyIds = new string[]{"ca4b054d-9b1a-42c7-993b-c3f6e823dab3", "ed7227f6-c799-467a-b4d9-6a6631f9deaa"},
                    CanTopupPrivateMoneyIds = new string[]{"8f5de22a-34ec-4aa6-b87c-0511f40949f3"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop4()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "ac81c497-dd4a-43f7-b233-ece500c07020"
                ) {
                    ExternalId = "OENjEAJX3lDTAofzZK4Rxx8sLYfBb6BjvrB",
                    PrivateMoneyIds = new string[]{"f3a016e0-2e5c-4b72-9ece-ec4ef3201e12", "92e4969f-e1fd-43cd-b086-7d72641aa645", "a1392f2d-699f-443d-a244-54bc26e99b68", "cf3bc204-3a4b-4028-873e-1bb4de611b35"},
                    CanTopupPrivateMoneyIds = new string[]{"62f4818d-3199-477a-927e-837a7bd51298", "93d424fc-f867-4860-8323-acbc8075e3fb", "bdd40098-8e92-4d58-959a-0cf23a3b7dbe", "1a2d39f8-babd-4172-bdef-9dac7ed2afba"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop5()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "ac81c497-dd4a-43f7-b233-ece500c07020"
                ) {
                    Email = "uPH3hhI04A@O4rg.com",
                    ExternalId = "AhQAt0OqjGLP0DBUnGxEl",
                    PrivateMoneyIds = new string[]{"8812ad9c-eb0a-475e-9376-ac45df1436c7", "1e839f0a-a9e6-436b-95ef-1b636df7d87a", "ab80e970-ac56-4aa0-9617-aae652cae188", "1598cdb2-c4d8-407f-a691-d4a9d0a99c68", "d3db4807-96df-4443-8d65-2df3c0510844", "e2d98d15-2393-4c82-ba62-47cc31fe2218"},
                    CanTopupPrivateMoneyIds = new string[]{"557099ac-0db0-458e-839e-da75a2ea616d", "f373b617-4390-4b3f-b359-0caf4af540d8", "a519303d-e6ab-4c2a-990d-ba3484d3d765", "d3a9227f-47e5-491b-ad36-cd2c55984f53", "1f108010-2e1c-456b-9390-9e537b1fefaa", "67b9b10d-a9d3-4aa4-8983-a730a3edeb18", "5648cbd2-959d-4643-837c-f1a9464325f3"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop6()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "ac81c497-dd4a-43f7-b233-ece500c07020"
                ) {
                    Tel = "086606592",
                    Email = "sVi251R9OV@M6dJ.com",
                    ExternalId = "XfTSVkQAgLF",
                    PrivateMoneyIds = new string[]{},
                    CanTopupPrivateMoneyIds = new string[]{"9e6c9043-9647-4808-9beb-8b8cc8678f0d", "b7f6323a-56ba-48df-a6ab-387a095d0fd7", "f1441566-e0f6-43c8-914c-11bbfe66384e", "c4d5d870-a36c-4e30-bd19-c195022707b8", "6b37ce7a-6b0b-4faf-98c0-13ebe0583a69"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop7()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "ac81c497-dd4a-43f7-b233-ece500c07020"
                ) {
                    Address = "PvpqWe6LFMxqHgshQQxZyXH54xcjjzE4jf3bC1uhrBdvXqhm8jwzIEhcNYML2OSzpp2xgjGNFVHJxj8ajHmdLScmLSMjxtIdUuX8NpagwVisjQjWa0Ga7Mr0dbte93IwLTuppNmEhXnyUDrs0YSyLNNnFCcwr1avxToYBT4VEV6evoILJv7tTWIqRKgT",
                    Tel = "0357-4236",
                    Email = "Ttxk7d6FPi@A0ls.com",
                    ExternalId = "Pm9uy3bOLitkN0KHj5fbn2v2B0",
                    PrivateMoneyIds = new string[]{"d3af940d-194a-4b2e-b54e-a65c74ac9aa6", "e568af1b-643b-4b72-bd28-63d883bbf5c3", "270aac78-8f2b-40bd-a783-725e845ef611", "3da96aea-cb64-4f6b-bfb6-3298498e5843", "cfbc8c9b-a77f-4c57-bacf-89ebc7c13141"},
                    CanTopupPrivateMoneyIds = new string[]{"ccca7581-7568-4420-a0ca-34ba6559e0b0", "67cc7981-8c91-4f7b-bccc-0ddc18768a12", "bc2abb6f-ddf4-4eb3-88f4-01ef53c06546", "046ff7f3-f384-423d-acc1-c36c8ab41db3", "3f5de62e-6187-4cb8-8a66-6663f6f12169", "2d450ae2-7a72-492d-a450-ebd264f06c0b", "7339f9ea-8b06-49ea-b9b3-c8879e97f283"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop8()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "ac81c497-dd4a-43f7-b233-ece500c07020"
                ) {
                    PostalCode = "405-9559",
                    Address = "5ECx1SgJEpSlopBJNy3qmiwYmDuOlcchHpAG2gwwi3nOK6tJxpePLFHBs9kILByZGqDqm9YAgnobRajraam0rBpkfu82GZDo8PtRb5vVt3TqmZrxia2ui6VWr3guQRAw5Cq4lwbs5G5iUu21d4ST7CuEydnlBtSyriuS9M5GXcqFt6wV9qfsP61uEwZUrs1XMhNzPArurgTCGgpfTuJZDkeCAQBkolLroUrTRKy1",
                    Tel = "029-504-723",
                    Email = "xjxtGbA05z@cwQ8.com",
                    ExternalId = "nH7AYfIcNt7NKHB",
                    PrivateMoneyIds = new string[]{"dd27c1a5-0d9d-4ac4-bc26-ad3c581c8907", "14b20488-8a54-42b4-baaa-1393151451fd", "273826c9-19f4-4b6c-b38c-a6dabdf39ec1", "92f89864-75b6-4749-86e8-182b0b3126eb", "c04dcfe3-f67e-439f-ba38-2414fc85d35f"},
                    CanTopupPrivateMoneyIds = new string[]{"9bab6d6a-1a16-4ba5-8a52-417ab3dd209c", "29fd21cf-5ca4-499e-8a94-04152424ee4e", "32097f28-f2ad-4bd9-8e7d-00d443c1eafc", "629424ed-0c5f-45c1-8ca2-3b786f506230", "dd04cc9f-649d-427d-a310-080ac1269c83", "420990d2-1ff9-4ce7-bd72-862dbbdc66c6", "2759aa5a-96b6-4ddd-9bb6-911f8920e281"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop9()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "ac81c497-dd4a-43f7-b233-ece500c07020"
                ) {
                    Name = "y9EQQUqakXyxFnuW2T4m1VyTa1OoANMT3g8KQuzrvKESksiTJQTVnHiOfPR4wy7f2LYwmiQU5GGwM55OvuPRHuaWsubCugQ2sjreB3py6MReMgsNKNI6WrDerxdbupVy8ATO6lTexkb25xKe3io9ZDBIqGu38r7vCoqpH5QhZu1k2tSxqrr7YJPVhda0ziWsQtZgRc6cmsvPcY7yThlkSXuhO9OLfbw29j7FyeDINdaRXM95lPwMwz9IKIn6w",
                    PostalCode = "5102479",
                    Address = "ErXa70KC1ZDBuFoL3t7T5TQkGNyZe8GBabvL25GC",
                    Tel = "06-5722-5249",
                    Email = "aPOXkEpypH@4Jrg.com",
                    ExternalId = "f6",
                    PrivateMoneyIds = new string[]{"f27be220-9d55-4347-bae4-9adc0307bcde", "239bd792-c69b-41f4-9a06-2a672cc8d724", "0af45b62-8def-4b0f-be8b-0659447e8071", "a00f3eb9-b8b9-41ad-83fd-98be48e3e97a", "3fc470ad-360f-4dc3-8d3a-7351e0c00b15", "89824d39-1d20-479a-b7ce-967a41e41169", "15a2cd82-7b41-4eb5-aa11-2f4ce9ed71f9"},
                    CanTopupPrivateMoneyIds = new string[]{},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
