// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateShop
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateShop0()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846"
                );
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop1()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846"
                ) {
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop2()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846"
                ) {
                    CanTopupPrivateMoneyIds = new string[]{"b31c69d0-dc36-4ee2-afca-703fa9e9afa3", "ad6ccbbd-0c2c-4518-93bc-d05f6be860e0", "bb84d1eb-9cc1-4ea4-8dbb-19cee0da1545"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop3()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846"
                ) {
                    PrivateMoneyIds = new string[]{"fb4633d7-2a5a-43b0-b8bc-a0875a2fd7bd", "3bb16283-5c22-4a01-ab6f-3f9be2a19735", "4412ef2c-69ff-499f-a4f2-19a8adf5dbbf", "4edda3f4-b3d8-41e4-9f28-3feb1abe756a", "a2aaba43-cd0b-4c5a-b606-054bcfb0c6de", "4440448f-3794-4e15-9058-9114b64f66ad"},
                    CanTopupPrivateMoneyIds = new string[]{"8ffb3e4d-86f8-44b1-ab7f-2f3d07e56a48", "6a29f496-ff14-47d4-963d-9b86bc6376e2", "840b2470-0b21-4eaf-92d2-0f85346dbca1", "64d68188-88f8-4e37-b909-0f87c1e8cd9f", "ff679cae-1a71-47ef-81c6-5ad45501dd2f", "5c144aaa-1e28-41d6-a9d7-22de755aecc7", "0a6d636b-ff0d-493b-a23f-6637f42d7b23", "8b362472-c602-43f3-8b11-631baa686ee7", "028cd575-fe40-4fb2-a9e8-f280168cb8ef"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop4()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846"
                ) {
                    ExternalId = "xDsfU3TC1A8fV5nkzyaMo6HNFjN16Mt1N",
                    PrivateMoneyIds = new string[]{"6fc69707-b9ce-4d2e-88de-a5fc1c20eaa4", "6e9bebfb-de86-4ad4-b092-bf978165ffcc", "01ee595b-0709-4396-93ee-8dd7ca20ee9b", "824328f9-a320-4fcc-8349-59e9208fa5e1", "ef731053-5c6d-45f8-82a1-46cf83be1e19", "00a528e9-c261-4ee2-b981-bdc3d4377e2c", "269db146-c9bd-40a6-9bc2-1e17d2144255"},
                    CanTopupPrivateMoneyIds = new string[]{"1b60ec80-cc7e-44eb-8d4b-52aade32a909", "683c911c-e277-45cd-b6fa-0b10cf7582d2", "2be7f468-90a8-4f8f-aaae-2ffcd0a999bd", "6e5bfc40-8eae-48da-a4aa-c4ff7e0cda43", "976d8a9e-02b9-470c-90c9-7b8bd03331e2", "54a9d3f8-a79b-49ff-9249-1e6fea4a79eb", "97cb9e09-f43d-42ae-b215-85d34ab5b8cd", "81a1fdbe-d904-48ab-a3c1-a8aef698cc24", "b19369e5-a7b6-4e19-84dc-319178cce90c", "60b09bdf-e798-4e0b-89ac-c6cc52986970"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop5()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846"
                ) {
                    Email = "fhwjho9qAj@035e.com",
                    ExternalId = "2B0e1zQxL4LWrEkUrKUADYaUMS4V1xY0z6",
                    PrivateMoneyIds = new string[]{"d4d9610a-1ab9-4e52-bc6c-c7ffbd99782a"},
                    CanTopupPrivateMoneyIds = new string[]{"c2e75275-db71-40cf-8229-3d7f24fc1449", "c6326dce-416d-43b4-9122-c73773e18737", "a59e9d5b-702f-4cc2-8a0d-b0286c51ea79", "743b7271-afe9-427b-aafa-abab8d23aa86", "1f840356-cfd1-4485-af16-7007d9dba665", "1d4d183e-d10e-433a-8632-9cdc6c751e60", "37dfec06-f6d8-42bd-b92a-4f012f95706d", "784d2a2b-7ed1-491e-8a4a-4069a0b84fc5", "a255d145-1a4c-432c-94d6-96fdac0a94ba"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop6()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846"
                ) {
                    Tel = "036-41810",
                    Email = "sn1Jp9ctBv@Xrxj.com",
                    ExternalId = "g2Jofbfd8lI7ca3oyQQIsU",
                    PrivateMoneyIds = new string[]{"229bccba-38f2-40c3-8d1f-a21f5cd5e904", "a826f0b2-1310-4020-85da-162b6c63e80e", "a931ac4d-b9f0-4ac5-b418-611599c53457"},
                    CanTopupPrivateMoneyIds = new string[]{"e5aedc00-f9a5-4313-9bef-d972ebf5c9fb", "b6a3a834-21a2-40c9-8144-4e540c040048", "6eb08096-d58b-435f-a454-3ed0f92c5073", "9dbb2310-47ea-4a68-8d2d-885598824c24"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop7()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846"
                ) {
                    Address = "WbuhnbIUFlfvobOclFXKfvdQivs3hjtD1VYnThEQOLtlkRPIAeI3C1kLwoSJ0t0xwzgZ3SAsjpAuPQwOMExC1w6ifl9ZUstqj7jJ1Xazd0M0QE8si7WktomTSIs3sss0bSZ1cR5rMDg0iBD2et6R89vRehYIZbMh6MfShA8D4Ev7O7TGT70LQ2epxhXvfJrqwCwzvGv5tXB9341AdQSvr2jD2CPBEg6qDXhSH8hafJy0sDTnMPtA",
                    Tel = "06404524134",
                    Email = "8JZcqIcqZB@2nkh.com",
                    ExternalId = "unnh29qWQZz14xB891rPV7F",
                    PrivateMoneyIds = new string[]{"330fe064-7b87-4b21-8844-6a809ff31b65", "130e4012-1e10-42de-9bc2-feb651572531", "70117676-7163-41ff-ba24-80a231d2e4cf"},
                    CanTopupPrivateMoneyIds = new string[]{"74275e60-7e9d-44b1-bc0a-aa757b9715bf", "98fa8dce-3f20-441c-8802-dc42f4eb1394", "4adcfca1-cd41-4064-b200-949b236a9dba", "da151a7c-775f-4236-9a0b-81fed1b625ec", "4aff2fbc-31ff-48e6-997a-416207c9ace6", "eebfc1f1-389d-40cb-ac6e-8bfffea59a73", "6abc231e-fd47-4eb4-bf2e-3e30873c1003", "1cd8f3ac-ecf7-45da-af82-823013980552", "df7d3e02-8d80-45db-9404-e6390aa62230", "152b702d-66ed-4dd4-b680-fe7c47425f39"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop8()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846"
                ) {
                    PostalCode = "9159696",
                    Address = "Bc0n5yxxXvKDa0c2v5NvERR1ovUoSMxuwois43hKOtAoX7opuae7lO58Ae6hTnrFSjbB1hiRjTNSU46DKPvyktKcWCyKm4tG2FzeWXxPN6RiMVhZmmGj0TMjPFLM0DLdwVX1nfPZtzGunVJbtCnsdFVcjFxpkr7nBijaa4uqZKlbpHQT4mZ",
                    Tel = "078-521940",
                    Email = "MJt8otXLMw@iqJK.com",
                    ExternalId = "isPTXvJ9APWVf0",
                    PrivateMoneyIds = new string[]{"92992ac0-d5a1-495c-8dee-f5eb89bf5f49", "63c3c6b2-8ae3-4c70-9be9-08da6506d272", "6b4fe55f-ca77-482f-a874-e8e0f93f1982", "10a8cb90-52fd-4930-9d8e-49a336045f1a", "d49d075e-133b-45fe-9ab2-03e421ce3a68"},
                    CanTopupPrivateMoneyIds = new string[]{"f42f6a9c-3382-4873-8990-bf189801a753", "4286dffb-a63a-410c-b88f-69185e691ece", "69340d9f-d0ba-4dbd-bea2-27d828808784", "a51c2ea7-df42-4bf5-8089-f5e81acec04c"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop9()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "1ce9a5e5-8d4c-42fa-94e7-2139e0d28846"
                ) {
                    Name = "xPxLgPF7PH9jsPo3qRbXC06hH5q5N6rSqlhclxbbI1pwNVNkX1wbtHq7h4XHkBbxR0",
                    PostalCode = "254-9276",
                    Address = "S2N5S6EEO5Bp0TaBrmndiCNxXXwjFaRAeTxfe0YQCHzm8OG8zcqkOxIGcWZjjM6j3edDcpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm30yK3y8WItCe9VYgMydEalG76qE4T1vOrKA4IwgS5AgijWRyxneekV8cIDT0hnm8h8evW68NKpdkq0PMSo6iR11T",
                    Tel = "0803-6788748",
                    Email = "OxFwqhkpZV@aDhp.com",
                    ExternalId = "Pp5bfKV",
                    PrivateMoneyIds = new string[]{"5b916e74-2639-415d-aac4-85d01ac82bd9", "1adab1ca-759d-4941-ad03-88259ad990d6", "8a7edefa-7f56-4080-b69d-929559dfad03", "56554176-a4fc-4a79-898a-022549ecb082", "a6d07e10-80b6-48de-a493-7c114d74d5f9", "55cbfa77-bfe6-46fd-9d70-550fb0e357a9"},
                    CanTopupPrivateMoneyIds = new string[]{"38663f4b-6c69-4f27-a3ec-14bd942323ea", "3d16e328-5cb5-45bd-a0fa-a53e1991dc67", "72e207b8-5670-46e0-aeb5-3cb7a367a504", "c86cee22-97eb-4aba-ad46-c1b011077316", "a443107f-c6bf-48a8-a8c4-6a0cbd15b459", "64681762-cfd0-4acc-988c-456a0cf82f01", "91708575-69db-4777-83f2-7970ec98f3a5", "c2a01f65-2c44-439d-bca2-89b084495808", "06e3e241-1aa1-4abe-b949-68c4bc615459"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
