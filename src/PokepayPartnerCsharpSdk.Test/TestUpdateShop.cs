// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateShop
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateShop0()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "d9d6b8a3-b508-4e2b-89c0-093ae908b0d9"
                );
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop1()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "d9d6b8a3-b508-4e2b-89c0-093ae908b0d9"
                ) {
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop2()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "d9d6b8a3-b508-4e2b-89c0-093ae908b0d9"
                ) {
                    CanTopupPrivateMoneyIds = new string[]{"ae99ebe2-a1e7-432a-8e77-8c40533336d4"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop3()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "d9d6b8a3-b508-4e2b-89c0-093ae908b0d9"
                ) {
                    PrivateMoneyIds = new string[]{},
                    CanTopupPrivateMoneyIds = new string[]{"08efba77-8d75-4ae2-8a1a-f17505845134"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop4()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "d9d6b8a3-b508-4e2b-89c0-093ae908b0d9"
                ) {
                    ExternalId = "xj12CPSselkOtjsd2i",
                    PrivateMoneyIds = new string[]{"1979a615-bef0-4387-bdba-6895a068c5e4", "5d6d53ed-27a1-4539-b49b-e82b3470cfd9"},
                    CanTopupPrivateMoneyIds = new string[]{"c8609850-7cfe-4131-abd2-3056bdcf87db", "672d0e21-c677-4f1a-ae49-9b7afd8f6a54", "4204fd99-dfd1-44f5-be93-b6f6ba1e4e6f", "c192b46c-514f-4d48-b89e-f060a49bc518", "a681a165-98cc-4755-a753-316167164bce", "835ac06c-b0fb-4b9c-8488-2791a2a91f17", "4499a984-832a-46d5-8bb0-7d99dd683159", "0b6790a6-e7d8-495b-8a4c-10eb2e728f7b"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop5()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "d9d6b8a3-b508-4e2b-89c0-093ae908b0d9"
                ) {
                    Email = "KyDfDaVcPn@A5OX.com",
                    ExternalId = "Hs4JkkXGdKwMCmCw",
                    PrivateMoneyIds = new string[]{"def50f14-0a33-41b1-93de-172893d6bf49", "99c3ea7a-c6e6-4c4c-bd23-ac77caf3aba8", "0876c473-bfba-48f7-8d6e-60f75f1646c3", "0971c28d-9273-4d65-8001-18dd1d22ca0d", "2f298762-d764-4dbc-80b3-64368f4ba349", "7a0070c5-653e-4585-9f60-946be507ae38", "02817da7-9243-42ce-8056-3e7917095781", "767dd50b-10dd-4637-9278-dbbd07990826", "441c2d4f-cfb6-4efc-aeec-007e205340df", "8dc92090-fe1e-420e-999c-7317026fa642"},
                    CanTopupPrivateMoneyIds = new string[]{"fb4a7bb9-7741-4390-a476-54bac3d7f886", "ec3e0454-c953-4fbb-a6e9-92119324077a"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop6()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "d9d6b8a3-b508-4e2b-89c0-093ae908b0d9"
                ) {
                    Tel = "0300472142",
                    Email = "WABByVZ3Kk@TycJ.com",
                    ExternalId = "B1SESfQMlWk0SBoODe3",
                    PrivateMoneyIds = new string[]{"1d4b24dd-33d4-4147-8436-48f14cddca86", "4a1eab42-c5e4-493f-8754-67811b7c8edd", "e1aff229-a67f-448e-99fe-8196ee670102", "cb853329-3b01-4970-a7d6-2ff49a8d6912", "5d999d08-45be-466d-8bfe-8eed68850752", "f6ad312d-81cb-4388-b7a4-35b57a461230", "f3942a63-03c8-489d-be88-4eac02da25af", "c943c1bc-fda4-4c86-b9d8-67d1d0a2ea7d"},
                    CanTopupPrivateMoneyIds = new string[]{},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop7()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "d9d6b8a3-b508-4e2b-89c0-093ae908b0d9"
                ) {
                    Address = "mMUODa0iPzubtQWNV09OmoZ4VMv0eyrhW6y6bkKXlSOJGckGq9mgAS6ky3DZdkksyYZwKw61Xbk0AmC4sBsYoLw1p7pf76Di9LwboSNpwRLZbYu1vbOWZxa7zcccm5I2QVoNCpOkYL2GukSIftaZw1sFhnGQ9lU00UrTfGgHE60ssXz9Dl7sKAFT2LPOwNrZzXOR0zTXzfs0HiItvFbbQll4IkVsxI8Om1H",
                    Tel = "078070006",
                    Email = "4TR96By1Jk@KWXW.com",
                    ExternalId = "vPBz",
                    PrivateMoneyIds = new string[]{},
                    CanTopupPrivateMoneyIds = new string[]{"8342b6db-518b-4e5b-a0ce-606ae86b083d", "09b18f51-befc-4639-93a5-3ba90000f32f", "baacf329-33c6-4066-8b64-a31905e5438d", "7461bb6d-85ba-4664-94ba-85b391e5cd3e", "ac0a0c5a-ec65-4332-b557-0f2f7c564cbb", "e2530be6-2878-415c-aa8a-e04f6f46fdf2", "67f7a1e2-2e22-4946-aeda-e003557d10f3", "1da3efe4-7b40-43e9-90b8-f15202ba145b", "00c776d2-344b-48af-a70f-539f656c64c9", "2f5632e9-73a0-45af-b730-013a40461fb4"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop8()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "d9d6b8a3-b508-4e2b-89c0-093ae908b0d9"
                ) {
                    PostalCode = "310-2193",
                    Address = "i0ltnwjukJou0lvYPrUh50KEakaXnbv9hiEo3",
                    Tel = "074539-964",
                    Email = "vsHq0pefc2@9Oxz.com",
                    ExternalId = "w9VadW41X0RKAOBkCxjCYu8wroeVrR",
                    PrivateMoneyIds = new string[]{"35cd175b-a7ab-4fc9-8e69-615cf0c8c94c", "a54e8f73-faab-4b24-b76d-f387a08ed119", "095e9c0a-9439-4b62-92c6-92b15d2b14f2", "9f04cb5a-e9bc-4a7f-9d34-f81f67306585", "41ffec8e-09b7-4a2a-ac1e-ab9415b88f32", "29db36fc-cf8f-49c0-9c4e-5a09667d5704", "bdcaf621-b077-45b8-b423-7c740fc0c1cd", "0c133303-0ab5-41f2-9b61-2054a5351981"},
                    CanTopupPrivateMoneyIds = new string[]{"e6f3f00a-8073-4387-918a-d77efd98ede1", "62f23f09-138b-4714-89c4-c81edd6939d0", "3268fa66-aed5-402d-9bc7-47a63c0815fd", "ffb3d24d-1f5b-435f-ba59-fc4d643f53d1", "ae7f27ab-c703-4706-8f3c-c36e9afe0b01"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop9()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "d9d6b8a3-b508-4e2b-89c0-093ae908b0d9"
                ) {
                    Name = "fe7YF1YzpG8PXUdg",
                    PostalCode = "1304191",
                    Address = "G88OX9Y0qT4CzuZqY79ogfCwglxkHIElfnB1NBB4cwYfCnd3RSmFXd7tgGPupfq2gnfgvwQBQcjNTVoQHRrNxVR84iLfiV0LG9D7A4ZGEf93RBWX2bdToaWmz3LkoLi4Ly3PgOOnrRGau94YtT9UIr6Xqj3atDSUoCblS9uDZY24EsPSUsnHOt1xdTpZUq2mtMEtz8qlK9SEU22DhJCqIS0Go58yLVTtTwdqSvdUqlqg4yzClto",
                    Tel = "028-46-1901",
                    Email = "zXI0fx0bYb@zAlK.com",
                    ExternalId = "xQswlaVmOMfFBq2eN0rN59IC",
                    PrivateMoneyIds = new string[]{"5fd4f6c0-e8b9-4aa5-b33a-23d63d9e4cce", "a56372c9-3189-4d7f-be6f-0ebeb9d4e9d3", "5d268cf3-53a2-4c70-81b9-dc08c41605ea", "ae0beac0-021d-4ff0-b960-5b6aab681df9", "c6ac76bb-6ecb-4cd8-b21d-e8732597b349", "dd651a9e-0dac-41ea-a275-ecdedba160d4", "982f3bc8-907a-473f-989d-751aa1d105fb", "09ea9be8-d885-410b-a110-40acb061aa79", "d55d1339-ac45-40cc-8014-3efcc8eef747", "65c1b3d6-387c-449b-b391-9b252b052f7a"},
                    CanTopupPrivateMoneyIds = new string[]{"b3ed28a8-7add-4ee5-9d5e-f3214e695ce6", "176e577b-c3f4-4381-a287-63c7dbd7f9e1", "54a2da9c-0acc-4fa7-894e-bf7186e682ae", "873aa7ce-bf6f-4aa8-b67e-a2b992f19f45", "c82175f3-3ae1-45bb-8d55-6e5b01c7bf79", "eaa59a8c-cc4e-43ce-84f9-86c5c0d706f0", "33e23724-24d9-435c-8e05-59dac9b89d3a", "4fdeb7f7-0a19-45cf-aac3-13809d2ca4c5"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
