// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateShop
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateShop0()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "a91dc663-99e6-4380-8321-0b2523e86c7b"
                );
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop1()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "a91dc663-99e6-4380-8321-0b2523e86c7b"
                ) {
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop2()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "a91dc663-99e6-4380-8321-0b2523e86c7b"
                ) {
                    CanTopupPrivateMoneyIds = new string[]{"9852d914-b345-425b-93b8-dca15f403b48", "1bf8aaff-f5ff-4748-8aad-f96094ec44a3", "ae46d9dc-d41d-4508-be66-c4bc7a989435", "b2a9a4a4-0eb0-4cd4-9582-72df747d59c3", "81904a92-37b5-4b79-9c90-37b26d46d548", "6d8e4e09-16a2-4e13-8e81-ae1e8e0837f2"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop3()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "a91dc663-99e6-4380-8321-0b2523e86c7b"
                ) {
                    PrivateMoneyIds = new string[]{},
                    CanTopupPrivateMoneyIds = new string[]{"5728d3b3-a034-4f8b-a8a8-b744bd59d03b", "ee49f0b1-f1f5-4d78-af49-cbe26410ef5f", "1d6f1f75-aba0-4964-9080-53e7f02256cb", "a3c1cb63-065f-48c1-8834-47ccddca635e", "02d62971-ba05-4da9-b476-808e999c7787", "ed6de882-f06e-4259-93e4-d9027866f90f", "b002ff05-e505-4cfc-928c-07ca0164397f"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop4()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "a91dc663-99e6-4380-8321-0b2523e86c7b"
                ) {
                    ExternalId = "VxWy0PirB5ccKSjPsnaJy0xSUaUZ3K",
                    PrivateMoneyIds = new string[]{"67971269-72bb-4b70-ae5d-2347d45e0383", "07e91f76-d9e5-4618-8ef0-d9b153d44db1", "9b1e1f5f-eed7-4f27-870d-c4e9dfcb6d96", "86f77bd3-6b72-4db0-9a29-9cb8c1440675", "6e6cf586-7f1b-4e43-baa5-2eae1952f6c2", "7d1294c0-6b30-463e-9dfc-a91e270b838f", "cc70784a-2f84-49d3-9eac-60f400b15928", "72200037-d68b-459a-a807-5cda45b9949c", "3f345ead-5c4e-41cc-b663-1b76f0c059ff"},
                    CanTopupPrivateMoneyIds = new string[]{"904eec3b-0c89-4b3a-b1c2-656e2f941c68", "e86447ac-6bc7-4fee-a725-45793daf15d2", "6cb8fb12-1ea2-4073-a4b1-95daf3408162"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop5()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "a91dc663-99e6-4380-8321-0b2523e86c7b"
                ) {
                    Email = "EX46DL0EY9@Dfg2.com",
                    ExternalId = "2KSBJ32yceHk",
                    PrivateMoneyIds = new string[]{},
                    CanTopupPrivateMoneyIds = new string[]{"47031610-468f-480e-8a03-0701ad16ffd3", "51f19c19-1d35-422e-b372-bbdffd022a2a", "07488c1a-ee51-45d9-8672-84a561fc77fd", "1aebc8c9-61c5-4052-b61c-25ecad8e7cb0", "e5d8604b-05f2-4cfd-9be9-d4f575f3e55f"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop6()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "a91dc663-99e6-4380-8321-0b2523e86c7b"
                ) {
                    Tel = "01813768343",
                    Email = "nnsKFojcLO@uuur.com",
                    ExternalId = "aaP5zVuitJAWBnMTQrqQLb4F279",
                    PrivateMoneyIds = new string[]{"fc9ec563-0e05-4b07-b364-b2108203d244", "cf9981f4-70bc-46a6-834d-d1b3c74ccdac", "c5c87499-e6f5-432c-97c0-408bc5a6a98c", "9eb27d88-aa5e-4c53-a11d-87c540654e59", "c1060862-d4f5-4d98-a17e-eeba284b644f", "3286cee0-dff9-42a7-b1c1-12973aca16f4", "3532624a-9219-4014-aa9c-16a002783062"},
                    CanTopupPrivateMoneyIds = new string[]{"5ca9c410-3c7b-41da-a08c-9999113a20dc", "47f4bac6-40f6-4985-988c-e63440782044", "0d9d74dc-5ed4-45f2-a5db-d2807b407e6e", "bd9d470d-f19b-4b59-bcac-89ea1922f35b", "7d0459ff-ad9a-4710-b6bb-a3f2f35533c5", "a3efa5b9-d4e0-4348-b55e-1c93e807f32b"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop7()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "a91dc663-99e6-4380-8321-0b2523e86c7b"
                ) {
                    Address = "Gm5xmBEPErYjV24xKSbfZiVFE1mx2zGT1xfUftI30JyBIPqdCDvWnTRvriMMqT8Y",
                    Tel = "070697-082",
                    Email = "EUoqg0zXsu@vc8L.com",
                    ExternalId = "4mbP1hy",
                    PrivateMoneyIds = new string[]{"62f6f59d-b5d0-4582-84af-aa2ba2787ce2", "2ae8bbce-0a80-4956-aae3-6b9d4ff9bbbe", "9b28ea88-92ba-4c93-89e0-ed13e3122e9f", "f799f274-b4af-4935-b951-2ba77e63ed01", "4addd0ce-9a1c-4c00-a9e0-9da37efd6119", "cd0f48ea-4356-40db-aebf-1d9c92faf87d"},
                    CanTopupPrivateMoneyIds = new string[]{},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop8()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "a91dc663-99e6-4380-8321-0b2523e86c7b"
                ) {
                    PostalCode = "3254867",
                    Address = "40vhQYw5VlT5PtGoiFuhhxPNxJedAo6IB1JwI4HtHPlHFEuPGo3GkdygOOVSyzQqeTxBrSdGB4t2pP3KohbOZsA8epkaCTJpPbbkDn1ZrOBafUzNTBXIV1wGp1Rn3U4KQsAmdVQrUihNu2f4606Zw3XOfvqGLqQiqaG2p9irVNMOOMEyp",
                    Tel = "0812-256-2716",
                    Email = "GgyrO7oaIP@GJ7J.com",
                    ExternalId = "BC1o5Rc9",
                    PrivateMoneyIds = new string[]{"9a97ec77-edbb-4466-ad8a-60d6f4c9e8f2", "3cdf80d7-22f2-4e4b-a4b8-892059fc8dda", "39c4f4e3-9a6b-456e-a0e4-77968729de97", "d8ab7c50-6e6e-4a1c-b09e-001fbe9d0ab3", "34ecc8ee-2dbf-4128-a512-4f123e4c0adb", "9e2cc413-bb91-4ffc-8c6f-56cde6c42624"},
                    CanTopupPrivateMoneyIds = new string[]{"099843e5-94af-4002-ace5-e48ef262e4b3"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop9()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "a91dc663-99e6-4380-8321-0b2523e86c7b"
                ) {
                    Name = "pOb8vOALeCaVZzJ21Wkjwh096vY0",
                    PostalCode = "7961126",
                    Address = "OxtHaQb",
                    Tel = "05860669461",
                    Email = "YgBl99xXSI@Gv3O.com",
                    ExternalId = "n3SH7ljqEdpqCcPOpWjivoOnvdw0Y",
                    PrivateMoneyIds = new string[]{"cbe99a17-ac76-4c7d-ace4-4c3b5e7dbab3", "b7aaa03c-b649-4565-8a17-711186b577f9", "022dade8-883f-412d-92af-d454cb75da7d", "7d88e26c-81d2-4022-a7a3-8b545cd4aad4", "1c373fdd-b6a2-4abd-b2ba-464e6e9bd15e", "32548178-5ed3-4769-b068-e614e5a677da"},
                    CanTopupPrivateMoneyIds = new string[]{"9a2d9c52-141c-48ec-8c82-5f2f7a19f5dc", "e8460319-2210-476f-ac22-b0ab2144bb06", "e156e2cc-0722-4bfd-bf9b-d0882f60821d", "38553eea-774d-4514-ad91-d2bea7a7afcc"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
