// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateShop
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateShop0()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "375fa126-c77a-44bf-b786-a86bc10796f6"
                );
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop1()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "375fa126-c77a-44bf-b786-a86bc10796f6"
                ) {
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop2()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "375fa126-c77a-44bf-b786-a86bc10796f6"
                ) {
                    CanTopupPrivateMoneyIds = new string[]{"b641d85b-3ca4-4710-88d9-85d21e42d16a", "2f93d07a-3629-4c41-92da-738c009370de", "b11d6899-71f7-4630-857c-5b35524dabd4", "d67ba291-9cf9-4c30-801f-52fe8a8d0707", "be9d8702-b5ee-4ee5-aef7-5c2394fb0f7a", "20f018c8-664f-4b7f-a1c9-64d649d982f7", "055db824-ca0d-4aa8-8e0b-c14d74005b0e", "443a0c54-749a-4b91-88ea-5d9f33b2bdd0"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop3()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "375fa126-c77a-44bf-b786-a86bc10796f6"
                ) {
                    PrivateMoneyIds = new string[]{"4b7d345e-13c6-4e94-9f4d-7f04f85d3647", "1c45aa1a-91e5-4376-a713-c0f714edd5d6", "9295abcd-c59f-4365-80da-781df7cf65df", "aaee20fb-f7ab-490a-8ff4-c03888f3fac5", "b1806aa8-1f71-409b-9faf-227ee7d8abc9", "326fac9b-1e76-453e-898e-fa09cb96c892"},
                    CanTopupPrivateMoneyIds = new string[]{"695a3ff8-327c-48f6-81fe-80ecbca5126a", "3a30c4b5-c24b-4be1-ac8b-91f1220b3dbc", "5b5eaff8-e42c-4b0c-a418-1a034c73bb41", "33f65219-2a29-49fe-b748-56f526e1472a", "dd005588-4e1e-435c-9f91-a03f8a4b4492", "0f15b3fd-5c7b-4171-a3f6-f4293fcaaf9f", "cc2df764-af18-4b91-934e-0d1ceeb25c5b", "c05683f6-9ee5-48d7-bad7-6ec908a01f2e", "ac6a7a35-f5cc-4a93-8097-b88d36f43bb6"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop4()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "375fa126-c77a-44bf-b786-a86bc10796f6"
                ) {
                    ExternalId = "QvZvRJLln3CmVmPz2bcH2x",
                    PrivateMoneyIds = new string[]{"47f387c2-4048-427c-94e2-6980a843eee9", "f7ec771e-0bcf-4ac8-a7a2-ca1268fe0c59", "8724bc8d-bc14-435c-a2fa-b25f6dc092a9", "307f775e-0bd7-4720-86b7-9445bb04c59d", "b2791b2b-74d9-4b0f-83ae-30661ce90ba7", "0f4e0bb7-bab6-45ad-946f-615c544ea624"},
                    CanTopupPrivateMoneyIds = new string[]{"451b0c2e-dea3-47e3-bca1-6b896ea55708", "4744398d-0eec-4100-b8e4-eef4c9589522", "abd40a2a-d67a-443f-9563-b0f13639882d", "edc5efc4-95b6-41f2-b12e-be405b3f107f", "933685f7-b147-4426-84fd-3a88da476a56", "dd9456d2-19e4-4c6f-a0ea-328534361b47", "556f5a6a-947b-46e9-a748-cc70dd98a114", "70b6451f-96da-4ebb-846c-121b99048d9d"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop5()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "375fa126-c77a-44bf-b786-a86bc10796f6"
                ) {
                    Email = "8InHQBhMIr@dZJT.com",
                    ExternalId = "9MnQgGfElkSct56tB3QvYjy8m",
                    PrivateMoneyIds = new string[]{"6ce4fe92-b0aa-4900-a7c4-5679cd343c95", "0b0218d8-5e2e-488e-913a-62a382675314", "d48a3c59-8307-49cf-8eaa-ce182f38af01", "3bf70fd3-7073-4dae-a818-c1199f4aa6f0", "27138bbd-f847-4bcd-836b-6fe5a7c4cdb1"},
                    CanTopupPrivateMoneyIds = new string[]{},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop6()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "375fa126-c77a-44bf-b786-a86bc10796f6"
                ) {
                    Tel = "0005-9248141",
                    Email = "iUj9JqianI@8FqI.com",
                    ExternalId = "qzelGZDONUAJfl2HMto7yaW0G",
                    PrivateMoneyIds = new string[]{"38efd286-ccb1-4970-8f8f-01cf76094593", "14b8b70c-2bc2-4da4-9a81-38fb67363d17", "6608ae1e-43fb-40ba-8108-d1efdbb8fbfe", "6ee8ecf3-d0f8-4963-9594-e9dff17a2eb6"},
                    CanTopupPrivateMoneyIds = new string[]{"f873bf31-ad5e-413d-b628-9abb4f324bc6", "652db89b-7722-4f4d-8b27-0b4e5c64db39", "44f54ca8-c540-4a35-aa97-ea322987e4bf", "a250df56-3a2f-45ff-9564-17d1d2de9c33", "a3baf25f-8e7c-497e-863c-0a8bda44ad74", "80b438b6-bb08-4e33-bf09-6c9c6d7a8dd7", "54220f70-fb7f-4b79-b3e7-d55e4b891b07"},
                    Status = "active",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop7()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "375fa126-c77a-44bf-b786-a86bc10796f6"
                ) {
                    Address = "20fNhPhFK8mUwq4sfxVOVqIgogobrlTBvrKruisPGcjRxKz0hnHtPEmOFzye10sMn1hLqgZ4Scflk2JdjznjOojFztUyYyUwwyS9B5htgNIDpUpzKyj3BEvYp1TbuySIy9vMfjs9RSVIuRLJamUgod9vJRMh5laf7",
                    Tel = "037409056",
                    Email = "BC2Sel2Qni@qdOC.com",
                    ExternalId = "9my1YOO8Cj",
                    PrivateMoneyIds = new string[]{"40a9195b-e812-449b-8c30-80fbd0f9ae59", "4787c17c-e346-4bed-b6b4-07308a3c7e5f"},
                    CanTopupPrivateMoneyIds = new string[]{"61851016-24d5-4e2e-afcd-6635e2edb077", "80343906-659b-4c85-94a6-44011287311e", "471eac5a-a4e7-4001-b5e5-069aa4784324", "dcb5e80a-8b0d-45b6-95b7-56e5c9b3c515"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop8()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "375fa126-c77a-44bf-b786-a86bc10796f6"
                ) {
                    PostalCode = "8609258",
                    Address = "E3L7gW6pVOxZ4jRFNa6hoBOihdHvejLf7HUNUhMpEnczyOhMWAPbHXytdjUT8FkE6WXDem2rgSzz35aQ4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ",
                    Tel = "09-16923",
                    Email = "YZY4p9bZgs@cBV3.com",
                    ExternalId = "pXiPPiW2qUm4F",
                    PrivateMoneyIds = new string[]{"427fc08c-0851-4c85-b5e3-ab2d687ff6f3", "1a4e61fc-15ac-43ed-bab0-77c75a672c59"},
                    CanTopupPrivateMoneyIds = new string[]{"056a8ddb-0ef7-40d9-847f-2c38b86fd813"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateShop9()
        {
            try {
                Request.UpdateShop request = new Request.UpdateShop(
                    "375fa126-c77a-44bf-b786-a86bc10796f6"
                ) {
                    Name = "K8kF9CcO2FCZ7wQECuE",
                    PostalCode = "987-8945",
                    Address = "4l9EXWThBhNBtq0Hlr5VUDcRjPWhcWE5Ed0Dp6qm5enNIYlp4WuULLQB3hzZG357PPnWlMQlOO65IFrI1BJMiWPv5dAbUBWta68v79KNgsodWT1kP64chZLEzZTeXAsCUOeSILicKJugPMhkbNW44x5lpizelx6Zw3",
                    Tel = "047-4531-939",
                    Email = "gb4Yb3t6km@vyhj.com",
                    ExternalId = "D7Y1lgzqIh5MLpUpAeuRnJqWXlTPA3BNnPJ",
                    PrivateMoneyIds = new string[]{},
                    CanTopupPrivateMoneyIds = new string[]{"13e59d9d-b8b0-40fc-83fc-c2046b3661c8", "d2330960-b1b1-472b-9530-bcc74e9936d1", "c9e06b62-7a39-4297-9f36-18cae73755fa"},
                    Status = "disabled",
                };
                Response.ShopWithAccounts response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
