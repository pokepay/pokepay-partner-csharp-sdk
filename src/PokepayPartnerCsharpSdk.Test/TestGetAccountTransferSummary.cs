// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestGetAccountTransferSummary
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task GetAccountTransferSummary0()
        {
            try {
                Request.GetAccountTransferSummary request = new Request.GetAccountTransferSummary(
                    "fe360029-78de-4f21-a0c5-35c854cac2b7"
                );
                Response.AccountTransferSummary response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetAccountTransferSummary1()
        {
            try {
                Request.GetAccountTransferSummary request = new Request.GetAccountTransferSummary(
                    "fe360029-78de-4f21-a0c5-35c854cac2b7"
                ) {
                    TransferTypes = new string[]{"refund-exchange-inflow", "exchange-inflow", "refund-exchange-outflow", "refund-payment", "refund-campaign", "exchange-outflow", "refund-topup", "payment", "topup", "use-coupon", "campaign-topup", "refund-coupon"},
                };
                Response.AccountTransferSummary response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetAccountTransferSummary2()
        {
            try {
                Request.GetAccountTransferSummary request = new Request.GetAccountTransferSummary(
                    "fe360029-78de-4f21-a0c5-35c854cac2b7"
                ) {
                    To = "2023-07-19T23:56:24.000000+09:00",
                    TransferTypes = new string[]{"refund-topup", "exchange-outflow", "refund-exchange-inflow", "use-coupon", "payment", "refund-exchange-outflow", "refund-campaign", "exchange-inflow", "campaign-topup", "refund-coupon", "refund-payment", "topup"},
                };
                Response.AccountTransferSummary response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetAccountTransferSummary3()
        {
            try {
                Request.GetAccountTransferSummary request = new Request.GetAccountTransferSummary(
                    "fe360029-78de-4f21-a0c5-35c854cac2b7"
                ) {
                    From = "2020-10-02T11:16:23.000000+09:00",
                    To = "2020-12-10T17:11:51.000000+09:00",
                    TransferTypes = new string[]{"campaign-topup", "refund-exchange-inflow", "refund-coupon", "payment", "refund-topup", "refund-payment", "exchange-inflow", "refund-exchange-outflow", "use-coupon", "topup", "exchange-outflow", "refund-campaign"},
                };
                Response.AccountTransferSummary response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
