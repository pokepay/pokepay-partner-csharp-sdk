// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransferTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransferTransaction0()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "d7200076-3f39-4bb5-a2ba-68113a0ddbd6",
                    "23d408db-b828-4269-a260-cba4269e40bf",
                    "aca16d62-18ed-410f-b807-085542ea2509",
                    7019.0
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction1()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "d7200076-3f39-4bb5-a2ba-68113a0ddbd6",
                    "23d408db-b828-4269-a260-cba4269e40bf",
                    "aca16d62-18ed-410f-b807-085542ea2509",
                    7019.0
                ) {
                    RequestId = "70b1ec56-05b6-4eb7-a536-deb96b1da456",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction2()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "d7200076-3f39-4bb5-a2ba-68113a0ddbd6",
                    "23d408db-b828-4269-a260-cba4269e40bf",
                    "aca16d62-18ed-410f-b807-085542ea2509",
                    7019.0
                ) {
                    Description = "rcn6WYQOYGK6nEhANhe5dQfWgC9GKfeP640jaEKcf9PJeJFJS69TvTKIlXBZaAJUxe89IwxoCgw",
                    RequestId = "1705aee9-10c7-4417-940d-5a6934cc62de",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction3()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "d7200076-3f39-4bb5-a2ba-68113a0ddbd6",
                    "23d408db-b828-4269-a260-cba4269e40bf",
                    "aca16d62-18ed-410f-b807-085542ea2509",
                    7019.0
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    Description = "Gvp3HXlUa6DLAgBACxYB5gF4kL2ftnYpO5FpGPuPe8tuo1zJdYRR4QA3MbD1TGsXejECn7IiPTNN6HRht7dhrUnAinRqspG7NfsdQbGy0",
                    RequestId = "58d4a373-127c-470c-adfa-c693bd4397cf",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
