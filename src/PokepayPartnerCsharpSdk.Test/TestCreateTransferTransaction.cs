// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransferTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransferTransaction0()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "3a769fe5-ee23-42bf-947c-a065feae4e58",
                    "25fadf3a-fb31-4d02-ab0e-d173863896c8",
                    "01bf5cb4-a152-4eb2-8d09-9367e182b608",
                    9687.0
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction1()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "3a769fe5-ee23-42bf-947c-a065feae4e58",
                    "25fadf3a-fb31-4d02-ab0e-d173863896c8",
                    "01bf5cb4-a152-4eb2-8d09-9367e182b608",
                    9687.0
                ) {
                    RequestId = "37d4c4a4-dabf-4ab6-ba31-5fb48e82ab0b",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction2()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "3a769fe5-ee23-42bf-947c-a065feae4e58",
                    "25fadf3a-fb31-4d02-ab0e-d173863896c8",
                    "01bf5cb4-a152-4eb2-8d09-9367e182b608",
                    9687.0
                ) {
                    Description = "JBRZmQUgzecqWdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYdlIHfSBBKI1",
                    RequestId = "832b55cb-dc90-46d1-ac8d-0fb44328a863",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction3()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "3a769fe5-ee23-42bf-947c-a065feae4e58",
                    "25fadf3a-fb31-4d02-ab0e-d173863896c8",
                    "01bf5cb4-a152-4eb2-8d09-9367e182b608",
                    9687.0
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    Description = "6HLesoN7AsxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdz",
                    RequestId = "d7a5de29-8fda-47c0-ba8e-5e36d9e5fbff",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
