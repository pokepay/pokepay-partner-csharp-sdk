// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransferTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransferTransaction0()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "b9559c05-7838-460c-ac41-dc8d1a18f995",
                    "def8b697-7cd4-4587-ba14-bacdd0ea45d4",
                    "2ba57cce-062d-464d-8d89-be3b9b2c7ec5",
                    8057.0
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction1()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "b9559c05-7838-460c-ac41-dc8d1a18f995",
                    "def8b697-7cd4-4587-ba14-bacdd0ea45d4",
                    "2ba57cce-062d-464d-8d89-be3b9b2c7ec5",
                    8057.0
                ) {
                    RequestId = "6971a20c-3ad6-4a9f-842b-7941300c66f0",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction2()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "b9559c05-7838-460c-ac41-dc8d1a18f995",
                    "def8b697-7cd4-4587-ba14-bacdd0ea45d4",
                    "2ba57cce-062d-464d-8d89-be3b9b2c7ec5",
                    8057.0
                ) {
                    Description = "kaDeYuOtBoCZgc4gwc8RSE7",
                    RequestId = "91641442-2fb5-4977-9d0b-b421e06ac073",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction3()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "b9559c05-7838-460c-ac41-dc8d1a18f995",
                    "def8b697-7cd4-4587-ba14-bacdd0ea45d4",
                    "2ba57cce-062d-464d-8d89-be3b9b2c7ec5",
                    8057.0
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    Description = "fAkho5yO5EQGpb9AHk6UF1UjWUyw97H5Wi0UlM5hWRopq8fm3QjwrUJDS6QIEgbGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwa",
                    RequestId = "67d01e06-b05a-4602-b9f6-7dcf6d06ffee",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
