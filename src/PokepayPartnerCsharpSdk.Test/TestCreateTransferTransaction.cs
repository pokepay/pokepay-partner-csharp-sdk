// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransferTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransferTransaction0()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "b197b1f9-901d-4a36-b372-eb1f540fbc52",
                    "4b6a223c-2015-467b-975a-d2cef1d66243",
                    "4051b039-c9e0-4fe2-9c2e-9b112a3bf95d",
                    8212.0
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction1()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "b197b1f9-901d-4a36-b372-eb1f540fbc52",
                    "4b6a223c-2015-467b-975a-d2cef1d66243",
                    "4051b039-c9e0-4fe2-9c2e-9b112a3bf95d",
                    8212.0
                ) {
                    RequestId = "5d254159-6728-4b16-82ca-b055184311a7",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction2()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "b197b1f9-901d-4a36-b372-eb1f540fbc52",
                    "4b6a223c-2015-467b-975a-d2cef1d66243",
                    "4051b039-c9e0-4fe2-9c2e-9b112a3bf95d",
                    8212.0
                ) {
                    Description = "FWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6j",
                    RequestId = "7c6223bb-b16e-41c4-ba45-41880740d26d",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction3()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "b197b1f9-901d-4a36-b372-eb1f540fbc52",
                    "4b6a223c-2015-467b-975a-d2cef1d66243",
                    "4051b039-c9e0-4fe2-9c2e-9b112a3bf95d",
                    8212.0
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    Description = "inmBAkCQlWqd4VgtaT7nx9nCCSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiutZ4wFjGxBLsRpo",
                    RequestId = "29933978-8f36-43f5-87d8-101fa80a7e4c",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
