// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransferTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransferTransaction0()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "6dbac2a1-8e0f-4e42-8406-c45eecd93fd4",
                    "60960fbd-eda1-4a5f-bcde-d59dca28166a",
                    "0f36e4c6-a6c9-4884-b1b8-9bef8c8a21bf",
                    786.0
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction1()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "6dbac2a1-8e0f-4e42-8406-c45eecd93fd4",
                    "60960fbd-eda1-4a5f-bcde-d59dca28166a",
                    "0f36e4c6-a6c9-4884-b1b8-9bef8c8a21bf",
                    786.0
                ) {
                    RequestId = "34dddcc0-5e52-4112-b0e7-95c3488afbc0",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction2()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "6dbac2a1-8e0f-4e42-8406-c45eecd93fd4",
                    "60960fbd-eda1-4a5f-bcde-d59dca28166a",
                    "0f36e4c6-a6c9-4884-b1b8-9bef8c8a21bf",
                    786.0
                ) {
                    Description = "oDiEOfsuO3LMtzPm5pmHiztzTLcjSe",
                    RequestId = "1d81264e-f7f9-4cf6-a5ef-3c0f69ef4bdd",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction3()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "6dbac2a1-8e0f-4e42-8406-c45eecd93fd4",
                    "60960fbd-eda1-4a5f-bcde-d59dca28166a",
                    "0f36e4c6-a6c9-4884-b1b8-9bef8c8a21bf",
                    786.0
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    Description = "r1SbLY9f9RM3h2SXQaAm6iMSYVoPQWfV62UhTGJS1L9KLOsA2Q2Z23Mwd98ipOldTUQCXPcZtLDZ6t1d7NhS3tIbiaQ9UqJHQZFkEmVia7WMZwoONY9mY",
                    RequestId = "15a4e1e3-696a-4ed5-8433-fc42d90374fc",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
