// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransferTransaction
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransferTransaction0()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "5d743523-864b-4d1f-a9b4-f5b1e4b3804d",
                    "555e5ecb-47f2-4f4a-9d38-1e758febb733",
                    "6b57a04a-4623-48f4-800b-5d07452a8a19",
                    4040.0
                );
                Response.Transaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction1()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "5d743523-864b-4d1f-a9b4-f5b1e4b3804d",
                    "555e5ecb-47f2-4f4a-9d38-1e758febb733",
                    "6b57a04a-4623-48f4-800b-5d07452a8a19",
                    4040.0
                ) {
                    RequestId = "e52b4877-2ab1-4533-820a-294a04452a4c",
                };
                Response.Transaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction2()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "5d743523-864b-4d1f-a9b4-f5b1e4b3804d",
                    "555e5ecb-47f2-4f4a-9d38-1e758febb733",
                    "6b57a04a-4623-48f4-800b-5d07452a8a19",
                    4040.0
                ) {
                    Description = "qURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlI",
                    RequestId = "a9001573-4cdb-4a6a-a359-51644f40ebc4",
                };
                Response.Transaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
