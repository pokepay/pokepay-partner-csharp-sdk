// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransferTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransferTransaction0()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "a4e2af77-a9e0-46ba-8514-ca249aa3f92c",
                    "1e2f07ed-c741-4dc5-b36b-418d68e18718",
                    "cd69f120-62d9-4c9c-b41a-bd87caf06d94",
                    7068.0
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction1()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "a4e2af77-a9e0-46ba-8514-ca249aa3f92c",
                    "1e2f07ed-c741-4dc5-b36b-418d68e18718",
                    "cd69f120-62d9-4c9c-b41a-bd87caf06d94",
                    7068.0
                ) {
                    RequestId = "5623f03e-62c6-4add-b371-922b41cd05d3",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction2()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "a4e2af77-a9e0-46ba-8514-ca249aa3f92c",
                    "1e2f07ed-c741-4dc5-b36b-418d68e18718",
                    "cd69f120-62d9-4c9c-b41a-bd87caf06d94",
                    7068.0
                ) {
                    Description = "7LjBzaahyxuSjCeY8XUCVwnkncT5IIScC6hwMcWk14akfxJeOq7WXYzp3T51H9cCCbgjPRImqCDcMSsBhf6zWYJyLP86DDajbOAj46dXywe6jRwpLlu971KVJhq6y0uDxp6AAxjhmEBTdqoUVfZ6aD",
                    RequestId = "b148eaa5-1ef0-477e-9117-7c35bfd1e4a0",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction3()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "a4e2af77-a9e0-46ba-8514-ca249aa3f92c",
                    "1e2f07ed-c741-4dc5-b36b-418d68e18718",
                    "cd69f120-62d9-4c9c-b41a-bd87caf06d94",
                    7068.0
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    Description = "DWAbOsGevRVN7djIb2oboXiq1O5l8vicmNmmmTS3VPkVRpmw624PrgEMWSoIT6fRV4tW2in2zZMxOQMYDjMKTIw69pUcPnxjpz68ed4DafsAQEY9LZZ0WRxmXJSoCPbk7SI1hzBF2sKYjmHnBHKIC2C7ZhBVB3RWCzVizgVTEWapYhv1brDPg559sRsDecSUB7ZflRL1",
                    RequestId = "2a0887e5-e190-4f56-8c37-b7fe5bb66bf9",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
