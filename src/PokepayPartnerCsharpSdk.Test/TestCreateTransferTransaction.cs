// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransferTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransferTransaction0()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "06948b05-dad5-4e63-a358-f7e5a9aee353",
                    "fa1170e7-4b00-4dbe-b7a5-758761d8c3e3",
                    "f3343904-cece-477f-9f39-63e9201eead8",
                    4223.0
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction1()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "06948b05-dad5-4e63-a358-f7e5a9aee353",
                    "fa1170e7-4b00-4dbe-b7a5-758761d8c3e3",
                    "f3343904-cece-477f-9f39-63e9201eead8",
                    4223.0
                ) {
                    RequestId = "44219d6d-3b46-4e2c-99b7-ddb64066fc5d",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction2()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "06948b05-dad5-4e63-a358-f7e5a9aee353",
                    "fa1170e7-4b00-4dbe-b7a5-758761d8c3e3",
                    "f3343904-cece-477f-9f39-63e9201eead8",
                    4223.0
                ) {
                    Description = "5iW8jP7aozbfeRvE8qDo8cFhYRD6X7f2Ni9LEvubxbAi31PGfekYTxylojI9VBcwd5cYoyAZukIB03OoSOpexlvpy4MTYuULwUzpBCw6BBq6jwh3husQtQWPT53GWSOUwi7mPmFkaCO",
                    RequestId = "3f349a2a-7c9a-46f6-8761-9701f03f01e1",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction3()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "06948b05-dad5-4e63-a358-f7e5a9aee353",
                    "fa1170e7-4b00-4dbe-b7a5-758761d8c3e3",
                    "f3343904-cece-477f-9f39-63e9201eead8",
                    4223.0
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    Description = "IZlpkAxywCOUTyZiPTE4UgKf1mfXV2smOtzmSUjsUl27isZzi14kKGhY9K38x0HgKvGFgoKm8vZ7DaJUagsfcVUeoHOBdOULACedc1lV651paub3hI5dqfPYQpPqYNkxAHzcWcmJFkmFbHU8v5O9ary3lDaRo1TXNtyE8VzHlWrh8xP",
                    RequestId = "cba192b8-aebf-477f-b484-e20786b5f1c0",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
