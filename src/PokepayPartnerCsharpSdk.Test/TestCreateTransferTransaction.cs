// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransferTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransferTransaction0()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "72ba548b-61df-47cb-b046-ae9c95c9b5c8",
                    "a5024acc-06f9-4e4c-996e-2d1e5e5dd8f6",
                    "deb457dc-5dfa-4054-a4df-60464dea9de6",
                    94.0
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction1()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "72ba548b-61df-47cb-b046-ae9c95c9b5c8",
                    "a5024acc-06f9-4e4c-996e-2d1e5e5dd8f6",
                    "deb457dc-5dfa-4054-a4df-60464dea9de6",
                    94.0
                ) {
                    RequestId = "95f56e59-fb8a-4731-9bca-2b167cad46cf",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction2()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "72ba548b-61df-47cb-b046-ae9c95c9b5c8",
                    "a5024acc-06f9-4e4c-996e-2d1e5e5dd8f6",
                    "deb457dc-5dfa-4054-a4df-60464dea9de6",
                    94.0
                ) {
                    Description = "DoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQK",
                    RequestId = "68909fcd-5a85-40a6-b3e9-4b1b2aa48499",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransferTransaction3()
        {
            try {
                Request.CreateTransferTransaction request = new Request.CreateTransferTransaction(
                    "72ba548b-61df-47cb-b046-ae9c95c9b5c8",
                    "a5024acc-06f9-4e4c-996e-2d1e5e5dd8f6",
                    "deb457dc-5dfa-4054-a4df-60464dea9de6",
                    94.0
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    Description = "lyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvHQFKDImV0W8uMWRziTXMumFe",
                    RequestId = "a6716e61-64c5-4648-a40a-41163b9005e8",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
