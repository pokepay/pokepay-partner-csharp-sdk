// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreatePaymentTransactionWithBill
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreatePaymentTransactionWithBill0()
        {
            try {
                Request.CreatePaymentTransactionWithBill request = new Request.CreatePaymentTransactionWithBill(
                    "03f6104d-06e4-4248-b15a-224ce7192092",
                    "5cf0f56c-b000-4b76-b0b1-e186782db0bd"
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreatePaymentTransactionWithBill1()
        {
            try {
                Request.CreatePaymentTransactionWithBill request = new Request.CreatePaymentTransactionWithBill(
                    "03f6104d-06e4-4248-b15a-224ce7192092",
                    "5cf0f56c-b000-4b76-b0b1-e186782db0bd"
                ) {
                    Strategy = "money-only",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreatePaymentTransactionWithBill2()
        {
            try {
                Request.CreatePaymentTransactionWithBill request = new Request.CreatePaymentTransactionWithBill(
                    "03f6104d-06e4-4248-b15a-224ce7192092",
                    "5cf0f56c-b000-4b76-b0b1-e186782db0bd"
                ) {
                    RequestId = "42b8b147-1196-4ea0-b182-68cf1063889f",
                    Strategy = "point-preferred",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreatePaymentTransactionWithBill3()
        {
            try {
                Request.CreatePaymentTransactionWithBill request = new Request.CreatePaymentTransactionWithBill(
                    "03f6104d-06e4-4248-b15a-224ce7192092",
                    "5cf0f56c-b000-4b76-b0b1-e186782db0bd"
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "811a5d15-e4a7-4b98-9f8a-70256162186e",
                    Strategy = "point-preferred",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
