// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransactionsV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransactionsV20()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2(
                    "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
                );
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV21()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2(
                    "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
                ) {
                    PerPage = 766,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV22()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2(
                    "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
                ) {
                    PrevPageCursorId = "f23dfb3c-d41c-41b3-9ee1-ee815b6ab0cd",
                    PerPage = 52,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV23()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2(
                    "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
                ) {
                    NextPageCursorId = "ba561d3f-444d-41c6-ac0b-5153fdaa47ee",
                    PrevPageCursorId = "1417e536-7921-4c5a-a239-539d82972cfe",
                    PerPage = 48,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV24()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2(
                    "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
                ) {
                    To = "2019-08-06T13:05:49.000000+09:00",
                    NextPageCursorId = "1f35db70-8630-4b3a-a40b-705924be95c1",
                    PrevPageCursorId = "2d3588c9-2d77-46cb-907f-0a1ed3f4776e",
                    PerPage = 750,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV25()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2(
                    "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
                ) {
                    From = "2018-11-07T10:47:46.000000+09:00",
                    To = "2017-10-31T01:07:34.000000+09:00",
                    NextPageCursorId = "372e71c8-ca69-400e-af8c-541e6d4b754b",
                    PrevPageCursorId = "b23030ba-eb37-4eb7-b5a0-86c6c0c4db55",
                    PerPage = 491,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV26()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2(
                    "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
                ) {
                    Types = new string[]{"exchange_outflow", "topup", "exchange_inflow"},
                    From = "2020-05-24T17:36:21.000000+09:00",
                    To = "2016-12-31T01:05:13.000000+09:00",
                    NextPageCursorId = "8fbf65c6-e8ad-4e55-8cc0-81486cdcb5c3",
                    PrevPageCursorId = "d3d03f11-76b5-4997-be78-6e2326c6801a",
                    PerPage = 384,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV27()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2(
                    "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
                ) {
                    IsModified = true,
                    Types = new string[]{"cashback"},
                    From = "2020-07-27T22:15:44.000000+09:00",
                    To = "2018-04-20T03:35:35.000000+09:00",
                    NextPageCursorId = "2ee0ef4b-347a-40bb-8545-5e46d1ce1e72",
                    PrevPageCursorId = "8b340176-3230-4a84-86f0-96b569f2b4d6",
                    PerPage = 68,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV28()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2(
                    "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
                ) {
                    TransactionId = "2XFSxI",
                    IsModified = false,
                    Types = new string[]{},
                    From = "2018-10-22T21:26:40.000000+09:00",
                    To = "2020-05-23T08:19:55.000000+09:00",
                    NextPageCursorId = "294d4197-8c63-4d36-b6db-313371b196bc",
                    PrevPageCursorId = "36ef5f0e-8275-4b9c-b95a-021040631461",
                    PerPage = 551,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV29()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2(
                    "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
                ) {
                    Description = "EMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcdpEzIZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1U",
                    TransactionId = "jf1qu",
                    IsModified = true,
                    Types = new string[]{"payment", "exchange_outflow"},
                    From = "2023-04-19T18:37:40.000000+09:00",
                    To = "2021-12-24T19:59:15.000000+09:00",
                    NextPageCursorId = "574cb36e-e328-4aa0-874b-7db30643aa33",
                    PrevPageCursorId = "90d0d627-fe16-412a-a6db-2459e0bf26b2",
                    PerPage = 138,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV210()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2(
                    "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
                ) {
                    CustomerName = "PKkmh",
                    Description = "gdj",
                    TransactionId = "1RbwEd",
                    IsModified = true,
                    Types = new string[]{"payment", "cashback", "exchange_outflow", "topup"},
                    From = "2016-12-18T19:10:28.000000+09:00",
                    To = "2017-03-01T22:29:46.000000+09:00",
                    NextPageCursorId = "faa5b900-9944-428f-9a2a-b745b058a667",
                    PrevPageCursorId = "de760078-73fb-4ab5-8577-64070047582e",
                    PerPage = 198,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV211()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2(
                    "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
                ) {
                    CustomerId = "207a091b-4c99-45dc-aa92-fdd4633ab088",
                    CustomerName = "OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA",
                    Description = "6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42",
                    TransactionId = "AhylpmFO",
                    IsModified = true,
                    Types = new string[]{"exchange_inflow", "payment"},
                    From = "2019-12-01T08:09:28.000000+09:00",
                    To = "2016-04-16T09:54:49.000000+09:00",
                    NextPageCursorId = "18247ec2-021f-45da-a472-d81e19d13e67",
                    PrevPageCursorId = "4861db91-7698-4d9d-a8b9-d21c6724cbb8",
                    PerPage = 148,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV212()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2(
                    "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
                ) {
                    TerminalId = "5722f1a9-4ffd-4bd2-a33e-5973cb3e846c",
                    CustomerId = "3d5dd7c4-31bb-4724-845f-efc227a88a14",
                    CustomerName = "oJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczx",
                    Description = "zKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJ",
                    TransactionId = "Mjy6rf",
                    IsModified = true,
                    Types = new string[]{"cashback", "payment", "topup", "exchange_inflow", "exchange_outflow"},
                    From = "2017-01-21T09:05:02.000000+09:00",
                    To = "2022-01-17T10:42:01.000000+09:00",
                    NextPageCursorId = "8e1f4384-77d5-4ec8-a4a7-cf27063f9dfd",
                    PrevPageCursorId = "964ee947-fcbd-4659-b963-3336009a1d16",
                    PerPage = 354,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV213()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2(
                    "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
                ) {
                    ShopId = "843efa88-d4f6-493c-b284-bc825b68fc69",
                    TerminalId = "6f87cf5b-6c13-41ee-af05-c451c2e974ed",
                    CustomerId = "a2044eef-963b-440b-b37a-73fafcdce77a",
                    CustomerName = "7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86D9XZfo8j2fPJCGzVYdohDRxcepsSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5",
                    Description = "xJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUH",
                    TransactionId = "zS51rJLdw",
                    IsModified = true,
                    Types = new string[]{"exchange_outflow", "payment", "exchange_inflow"},
                    From = "2024-03-05T15:58:13.000000+09:00",
                    To = "2018-03-17T03:28:47.000000+09:00",
                    NextPageCursorId = "e539eb72-6c30-4c37-b8fc-d9f9fbe44c57",
                    PrevPageCursorId = "7b7c3c5f-2a95-4ff2-b07a-888a59dfc9fd",
                    PerPage = 844,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV214()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2(
                    "3b7ec431-ccbe-4203-ac3c-d168bb673b22"
                ) {
                    OrganizationCode = "q-CM-uQ--pFfQ---hP",
                    ShopId = "e9a689cc-cf03-47e5-9c89-eff4913535f5",
                    TerminalId = "07884c70-4ae9-45cc-87a2-a14aa537b547",
                    CustomerId = "ffbce94b-b298-4c80-9f24-0041baddc988",
                    CustomerName = "08kULtDXm7mGq20CccqYOFtqhMLy1fS",
                    Description = "rOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3",
                    TransactionId = "9oA",
                    IsModified = false,
                    Types = new string[]{"cashback", "payment", "topup"},
                    From = "2023-01-09T07:14:02.000000+09:00",
                    To = "2023-04-23T06:24:20.000000+09:00",
                    NextPageCursorId = "d07de8a5-468e-4a6b-b069-38f3c04a0430",
                    PrevPageCursorId = "32e841f1-0879-47b5-8d66-d0c9007e208f",
                    PerPage = 137,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
