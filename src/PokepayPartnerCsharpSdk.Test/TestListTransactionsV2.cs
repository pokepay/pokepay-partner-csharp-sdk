// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransactionsV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransactionsV20()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2();
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV21()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PerPage = 919,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV22()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PrevPageCursorId = "3580c4d2-028a-4796-9842-f025a2f41ce1",
                    PerPage = 963,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV23()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    NextPageCursorId = "0706164f-d02d-459a-a482-fb8edacd3057",
                    PrevPageCursorId = "6784f557-b9ab-4c04-9228-6f478252a04a",
                    PerPage = 884,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV24()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    To = "2023-06-26T08:22:04.000000+09:00",
                    NextPageCursorId = "270f32a0-4407-4887-8b29-f1417229627e",
                    PrevPageCursorId = "dfdbdc26-3ff2-4e67-99a3-7ac95ca97e26",
                    PerPage = 607,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV25()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    From = "2023-04-28T23:57:41.000000+09:00",
                    To = "2020-06-25T12:11:33.000000+09:00",
                    NextPageCursorId = "e871a3ed-bacd-43d6-a416-ec6c2dc4d301",
                    PrevPageCursorId = "e1dcdf9f-e897-43b3-b13e-1dece65c4803",
                    PerPage = 792,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV26()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    Types = new string[]{"expire", "payment"},
                    From = "2022-07-22T05:53:04.000000+09:00",
                    To = "2023-05-16T12:44:52.000000+09:00",
                    NextPageCursorId = "c512e76c-40fc-4937-9a21-5cfed5a9d92d",
                    PrevPageCursorId = "d07280a2-3f55-40c8-a824-c11168220404",
                    PerPage = 379,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV27()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    IsModified = false,
                    Types = new string[]{"expire", "exchange_outflow", "exchange_inflow", "topup", "cashback"},
                    From = "2023-05-01T01:22:20.000000+09:00",
                    To = "2023-11-10T11:11:51.000000+09:00",
                    NextPageCursorId = "3853e632-aa6e-4db2-b4d1-473bda0390e6",
                    PrevPageCursorId = "fdb745ee-b8a7-4f7b-808d-68d814ade819",
                    PerPage = 158,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV28()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    TransactionId = "078",
                    IsModified = true,
                    Types = new string[]{"payment", "exchange_inflow", "exchange_outflow", "expire", "cashback", "topup"},
                    From = "2022-02-20T01:58:35.000000+09:00",
                    To = "2023-12-25T17:38:13.000000+09:00",
                    NextPageCursorId = "fde713fb-cbbc-4784-9bc9-d3ca0deb4372",
                    PrevPageCursorId = "80c15927-f442-4824-84b5-3f441dff992f",
                    PerPage = 568,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV29()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    Description = "pKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mGq20CccqYOFtqhMLy1fSrOZfn",
                    TransactionId = "mwT",
                    IsModified = false,
                    Types = new string[]{"cashback", "exchange_inflow", "exchange_outflow"},
                    From = "2022-07-17T16:43:00.000000+09:00",
                    To = "2022-03-03T09:05:02.000000+09:00",
                    NextPageCursorId = "a2ae1316-ff74-48cf-8672-9863aefcb860",
                    PrevPageCursorId = "22dfc944-ae9e-495e-bb06-d74c482a7837",
                    PerPage = 44,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV210()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    CustomerName = "osyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3",
                    Description = "SdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqzVsahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISprQ3cmpI6bh8YrVsWGSghDCw1U",
                    TransactionId = "nnaTSFcz",
                    IsModified = true,
                    Types = new string[]{"exchange_outflow", "expire", "cashback"},
                    From = "2021-08-01T03:32:16.000000+09:00",
                    To = "2020-05-21T08:24:35.000000+09:00",
                    NextPageCursorId = "152b45f3-0798-4c98-abe1-66f461698421",
                    PrevPageCursorId = "46be782a-4282-4ce7-9408-245376dff141",
                    PerPage = 108,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV211()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    CustomerId = "8dab7933-e2e1-4c88-b889-cc1f27f5c4ad",
                    CustomerName = "TcT02JvhzyAvEGRwH1gqt79bzapcrIrLu",
                    Description = "lrAgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1",
                    TransactionId = "tIL",
                    IsModified = false,
                    Types = new string[]{"exchange_inflow", "expire", "payment", "cashback", "exchange_outflow", "topup"},
                    From = "2023-04-20T08:04:40.000000+09:00",
                    To = "2024-04-06T18:16:52.000000+09:00",
                    NextPageCursorId = "f06def02-1d81-4ae3-8e2c-f1039aeee37c",
                    PrevPageCursorId = "86770697-e978-4707-8723-20e2bc00efb1",
                    PerPage = 296,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV212()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    TerminalId = "731b55a1-608e-4077-9015-3b3045d45c5e",
                    CustomerId = "3fc35406-8866-4e3b-81d8-020dd52a9143",
                    CustomerName = "RcSE6z5QHSLVITcWy",
                    Description = "XkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHGDImjW34z4j",
                    TransactionId = "8W9hhk",
                    IsModified = true,
                    Types = new string[]{"payment", "cashback", "exchange_inflow"},
                    From = "2023-11-28T12:29:41.000000+09:00",
                    To = "2022-08-01T14:09:45.000000+09:00",
                    NextPageCursorId = "bb3702f5-c4f9-4f76-9027-2662bbfc8cce",
                    PrevPageCursorId = "c0bb9c6b-e298-4766-a12f-c57d9351ab93",
                    PerPage = 301,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV213()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    ShopId = "49e210ba-246b-4b71-a4a2-d24717d67f7c",
                    TerminalId = "46882ea2-a760-43cf-9259-9162eeef0961",
                    CustomerId = "2038d534-f1b2-4274-9788-6f2f8bbd03cb",
                    CustomerName = "ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypEu4pqRk9KXyywxfAsvQQw8eNXwtPfKAW4UwDxtqXzHNdytk1inQrWiktMK0FHLyLnvzTdFf0Y1JODoBhEE",
                    Description = "s7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTY",
                    TransactionId = "7eEYL",
                    IsModified = true,
                    Types = new string[]{"cashback", "payment", "topup", "exchange_outflow"},
                    From = "2022-03-14T04:18:21.000000+09:00",
                    To = "2022-12-06T11:12:12.000000+09:00",
                    NextPageCursorId = "c3531a8c-a8ed-4356-b091-5857b2e951de",
                    PrevPageCursorId = "5c5ccdb8-56bf-410a-8075-44cd59f7311d",
                    PerPage = 543,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV214()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    OrganizationCode = "-INuP-Brx71-H5nVNeMB074",
                    ShopId = "64bd1eb1-c7c9-420a-97c0-99d326c4bfb7",
                    TerminalId = "5a912ffa-51d4-4933-9e8a-d1a247a9e608",
                    CustomerId = "786dd1a6-ad7e-4197-aa0e-056d6e24073a",
                    CustomerName = "F3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbGph7rDrumGN6tQ3vZwFKRF7w",
                    Description = "plclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hbo",
                    TransactionId = "1V",
                    IsModified = true,
                    Types = new string[]{"payment", "topup", "exchange_inflow", "cashback"},
                    From = "2021-05-01T13:59:53.000000+09:00",
                    To = "2021-12-14T15:00:33.000000+09:00",
                    NextPageCursorId = "28c4527c-837a-43a3-b48d-3119e1827a37",
                    PrevPageCursorId = "c03d9bc8-8238-4876-a635-c6cf6301ce59",
                    PerPage = 217,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV215()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PrivateMoneyId = "6b2f2a8e-6781-4632-829a-8e5d880292fd",
                    OrganizationCode = "469-xrU--0eU1",
                    ShopId = "7fd3464e-b7a1-408d-9e74-826b05b316d9",
                    TerminalId = "e9ed32a8-4b14-43ea-85d0-041a7e6c2d3e",
                    CustomerId = "22eacfac-2002-477c-ba58-38558d8d9879",
                    CustomerName = "1V0r5CHRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxg",
                    Description = "f0eAPjokEVHRFLghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62f8FNzaDel7ro4JT6XY3Y33ek4ahxmsrZJPb5B1K9ZLJjlQzrcG4cFx990D5go4dBLdUCSZVd4cTqnNfSRiXLw6IXxof4N3",
                    TransactionId = "b",
                    IsModified = true,
                    Types = new string[]{"cashback", "exchange_inflow", "payment"},
                    From = "2020-12-03T06:40:14.000000+09:00",
                    To = "2020-05-16T04:34:19.000000+09:00",
                    NextPageCursorId = "5b86a321-4a3e-4a4d-9905-d3a8050307fb",
                    PrevPageCursorId = "47ad2773-a22a-44d2-8066-65db981607b9",
                    PerPage = 887,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
