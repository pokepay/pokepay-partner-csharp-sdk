// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransactionsV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransactionsV20()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2();
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV21()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PerPage = 672,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV22()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PrevPageCursorId = "c44eac1e-b281-442f-a106-7170f5b43173",
                    PerPage = 852,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV23()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    NextPageCursorId = "fa6a8cf3-e010-4ba8-a1e4-0e8ee5e510a5",
                    PrevPageCursorId = "6a0df75e-0165-45e3-b3f0-6985e1de09de",
                    PerPage = 198,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV24()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    To = "2022-06-11T19:12:13.000000Z",
                    NextPageCursorId = "cf8a14e3-7292-4ac8-b625-c07ad5798eaa",
                    PrevPageCursorId = "2aa71041-3949-4e4d-8be0-6280b6b3f6b8",
                    PerPage = 502,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV25()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    From = "2023-05-05T17:58:04.000000Z",
                    To = "2023-10-09T14:10:01.000000Z",
                    NextPageCursorId = "f62c2e14-2fb8-4458-a67b-bee6ada018b3",
                    PrevPageCursorId = "6481f61a-2228-4de5-90c4-47010df61e71",
                    PerPage = 146,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV26()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    Types = new string[]{"expire", "exchange_outflow"},
                    From = "2020-08-23T01:14:15.000000Z",
                    To = "2020-07-18T14:38:56.000000Z",
                    NextPageCursorId = "6b7636b7-9597-430a-9419-565220b5235d",
                    PrevPageCursorId = "cb57a87c-ff50-453d-b07b-eb0e8ea6097d",
                    PerPage = 869,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV27()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    IsModified = true,
                    Types = new string[]{"payment", "expire"},
                    From = "2021-02-01T23:30:01.000000Z",
                    To = "2025-10-14T12:33:29.000000Z",
                    NextPageCursorId = "7c205df2-fc58-49d3-8b8f-d36edd61016e",
                    PrevPageCursorId = "190bfb54-1249-4ce2-b72d-59b6c9fe2604",
                    PerPage = 251,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV28()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    TransactionId = "TEtm8AaIiu",
                    IsModified = true,
                    Types = new string[]{"expire", "payment"},
                    From = "2022-04-28T18:07:08.000000Z",
                    To = "2024-03-11T17:47:52.000000Z",
                    NextPageCursorId = "5a8f5c98-c561-45ec-8fcd-77d5d5bc7f83",
                    PrevPageCursorId = "43f03935-8ef6-4a69-a77c-fa58d3e76ed8",
                    PerPage = 184,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV29()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    Description = "Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDX",
                    TransactionId = "mGq20Ccc",
                    IsModified = false,
                    Types = new string[]{"payment", "expire"},
                    From = "2022-12-21T20:34:48.000000Z",
                    To = "2020-05-14T22:51:09.000000Z",
                    NextPageCursorId = "fa9de85f-d7a4-494d-8c9c-cb79c773cfb1",
                    PrevPageCursorId = "50482f66-ed9f-4b27-a4de-64536fe160a0",
                    PerPage = 499,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV210()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    CustomerName = "ZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZP",
                    Description = "hn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89r",
                    TransactionId = "gV81h6",
                    IsModified = true,
                    Types = new string[]{"exchange_outflow", "expire"},
                    From = "2021-05-20T09:10:22.000000Z",
                    To = "2020-08-05T10:22:10.000000Z",
                    NextPageCursorId = "9cbc03fe-4206-48e5-8156-199a56339ba3",
                    PrevPageCursorId = "9a6210a0-6627-4953-9598-192c2b21cba7",
                    PerPage = 77,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV211()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    CustomerId = "b2e65638-6bcd-4e0b-aa50-fbe6207ce132",
                    CustomerName = "nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqz",
                    Description = "sahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISp",
                    TransactionId = "Q3c",
                    IsModified = true,
                    Types = new string[]{"expire", "topup", "exchange_inflow", "exchange_outflow"},
                    From = "2023-05-08T12:40:28.000000Z",
                    To = "2025-10-16T02:12:00.000000Z",
                    NextPageCursorId = "1e0c35c9-20dc-4d3a-b662-fe68aa868938",
                    PrevPageCursorId = "5c88a5d9-a572-4e60-96f3-5e94715b46aa",
                    PerPage = 930,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV212()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    TerminalId = "f8bce857-6328-4ac7-9304-efe702a48fe8",
                    CustomerId = "e23518c4-202b-4d28-9443-025fc1900b77",
                    CustomerName = "Un7nnaTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79",
                    Description = "bzapcrIrLur4lrA",
                    TransactionId = "RY4qmYCD",
                    IsModified = true,
                    Types = new string[]{"exchange_outflow", "payment", "cashback"},
                    From = "2020-11-13T11:11:10.000000Z",
                    To = "2021-07-17T05:16:25.000000Z",
                    NextPageCursorId = "c13d55f9-6e22-465c-bb37-5845aebb53f8",
                    PrevPageCursorId = "2b8b8db4-8c7a-4d26-9ccc-b0798d3a473f",
                    PerPage = 36,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV213()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    ShopId = "f7aa365e-0d2c-41fd-8cac-605c856148d9",
                    TerminalId = "47d51d1c-7d7d-4eed-8f26-2a2b344a5456",
                    CustomerId = "58ef04fd-d975-4375-b71d-2c52ab07695a",
                    CustomerName = "nfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypE",
                    Description = "u4pqR",
                    TransactionId = "KXyywxfAsv",
                    IsModified = true,
                    Types = new string[]{"payment", "topup", "exchange_inflow", "exchange_outflow"},
                    From = "2021-10-04T00:58:06.000000Z",
                    To = "2022-06-09T11:49:57.000000Z",
                    NextPageCursorId = "a642911b-cd4e-4ed8-b7c0-f474be05a3bf",
                    PrevPageCursorId = "d43d7f2e-ff50-4b40-a627-801fbd785b3e",
                    PerPage = 460,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV214()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    OrganizationCode = "ZgPolr77",
                    ShopId = "b5151169-b7eb-4d40-b44d-f284f22b159d",
                    TerminalId = "72885693-789f-428b-8bdf-87cba7fe9730",
                    CustomerId = "a9c7a746-ae9c-45c8-8cf9-0e4cee78db99",
                    CustomerName = "vzTdFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvHQFKDImV0W8uM",
                    Description = "WRziTXMumFeaEHdh8PePoMZwnAEmuU",
                    TransactionId = "6p",
                    IsModified = true,
                    Types = new string[]{"cashback"},
                    From = "2024-05-28T06:33:55.000000Z",
                    To = "2023-08-07T07:43:51.000000Z",
                    NextPageCursorId = "5a912ffa-51d4-4933-9e8a-d1a247a9e608",
                    PrevPageCursorId = "786dd1a6-ad7e-4197-aa0e-056d6e24073a",
                    PerPage = 315,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV215()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PrivateMoneyId = "df0b090b-c303-485d-8e60-30c6064b1e33",
                    OrganizationCode = "v5U24s--7tQx3sNh6kDy-727",
                    ShopId = "86746977-0637-4cf0-9e40-d06cbd28eb63",
                    TerminalId = "658089af-4fec-4195-a33d-a357ce7bec1e",
                    CustomerId = "1d65d842-203f-4539-a2ce-0e0061bc8952",
                    CustomerName = "Q0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CH",
                    Description = "RNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjd",
                    TransactionId = "x",
                    IsModified = false,
                    Types = new string[]{"payment", "exchange_inflow", "topup", "expire", "cashback", "exchange_outflow"},
                    From = "2021-03-06T21:37:34.000000Z",
                    To = "2020-02-21T23:58:15.000000Z",
                    NextPageCursorId = "c4390188-56a5-4166-a8cd-e8909bad5eff",
                    PrevPageCursorId = "c90bb837-c45a-475f-9d13-d8706ccc3568",
                    PerPage = 582,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
