// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransactionsV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransactionsV20()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2();
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV21()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PerPage = 399,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV22()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PrevPageCursorId = "38601e09-f983-4154-a8a7-9ffcefcef7f7",
                    PerPage = 709,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV23()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    NextPageCursorId = "67dfb275-c8f1-4428-b1fa-60afec38ac65",
                    PrevPageCursorId = "d047e4f7-82ba-468c-bff3-1ba901d5f406",
                    PerPage = 334,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV24()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    To = "2020-08-03T05:37:09.000000+09:00",
                    NextPageCursorId = "0f1d2049-7a02-4878-9f7e-9d92d09e5294",
                    PrevPageCursorId = "e68bc994-01b1-4468-b012-297dbf94367a",
                    PerPage = 138,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV25()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    From = "2017-05-29T20:51:12.000000+09:00",
                    To = "2024-01-11T02:50:40.000000+09:00",
                    NextPageCursorId = "dbaf5b17-3b63-4199-bfc3-10ba6e27d265",
                    PrevPageCursorId = "b8dfa52b-f778-4413-85a1-dc9f68776122",
                    PerPage = 209,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV26()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    Types = new string[]{},
                    From = "2022-05-23T21:38:51.000000+09:00",
                    To = "2018-01-30T18:10:16.000000+09:00",
                    NextPageCursorId = "feb30142-3595-4e2b-830f-72883845314a",
                    PrevPageCursorId = "6ed73a32-9fd1-460b-b741-773ceb0d7033",
                    PerPage = 905,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV27()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    IsModified = true,
                    Types = new string[]{"expire", "cashback", "exchange_inflow", "topup", "payment"},
                    From = "2022-03-29T21:09:21.000000+09:00",
                    To = "2016-12-26T04:16:23.000000+09:00",
                    NextPageCursorId = "05ffea7c-7ed5-4e5b-9316-f00fdee16baf",
                    PrevPageCursorId = "2e9e95ee-fbfd-48ed-9713-9a1aded27c66",
                    PerPage = 44,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV28()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    TransactionId = "Mf158jbodx",
                    IsModified = false,
                    Types = new string[]{},
                    From = "2019-09-29T05:18:29.000000+09:00",
                    To = "2019-04-05T02:30:13.000000+09:00",
                    NextPageCursorId = "a4f6ed14-46aa-4ab6-84dc-16d11c68c7fc",
                    PrevPageCursorId = "e8ef4b77-6fbb-4c05-a4bf-afc9d8709fba",
                    PerPage = 967,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV29()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    Description = "vA",
                    TransactionId = "WCZ",
                    IsModified = false,
                    Types = new string[]{"exchange_outflow", "expire"},
                    From = "2017-11-17T08:07:31.000000+09:00",
                    To = "2016-08-16T03:34:17.000000+09:00",
                    NextPageCursorId = "1ff17578-7bf5-4e4e-981f-2973ace14362",
                    PrevPageCursorId = "b4518284-4ab8-4fcb-b49d-5308630a6058",
                    PerPage = 250,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV210()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    CustomerName = "Q60l6nZCLpElUd6iH1X66E0nqBBGmKnZ6uDIn3iuFQrrg",
                    Description = "eXzyNXNrNkeWa9hWsLSo6RhlRrNdmMatyDW12s5SKsd",
                    TransactionId = "6",
                    IsModified = true,
                    Types = new string[]{"payment", "topup", "expire", "cashback", "exchange_outflow", "exchange_inflow"},
                    From = "2024-09-04T04:24:24.000000+09:00",
                    To = "2024-02-12T22:55:12.000000+09:00",
                    NextPageCursorId = "7f4a29fb-6264-4bd5-a2ca-617f8c00bcb2",
                    PrevPageCursorId = "a558e74e-1e3e-496b-b090-4022ccefa593",
                    PerPage = 387,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV211()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    CustomerId = "0cb5257e-06c4-4f39-aca8-3084552820d8",
                    CustomerName = "Rln1g4q1AmzenaBAIYsPX5BEVEkSwN7Jl7UfMqNeIWxDQ5mYkDBp76iPlz0WyF7I2Snzg812cd0lMhCHFE2kwBpeHriIaXxYmUfeD23BKTCZPKhRk3w9r2MS5qnBpeG29hBWbNKIGuoyWD",
                    Description = "3BHeU5bcdtREmG3PoPoUnVURoRDP0303M0EUzCR0XC7UBINwESq7hPy7a3F5MBC2C7VfANu3p62KDWO8TDrLXiDq8ZM4HpSJ7ezaoKVM6PG4nVxadlDXYh8F3jX5Rw62VEObOlMsi",
                    TransactionId = "l1b",
                    IsModified = true,
                    Types = new string[]{"exchange_outflow"},
                    From = "2020-12-13T17:11:14.000000+09:00",
                    To = "2017-01-03T15:50:21.000000+09:00",
                    NextPageCursorId = "e35dea43-f02e-4644-882a-8c066fb50996",
                    PrevPageCursorId = "75781691-1e86-4405-98ab-af438b1c72bc",
                    PerPage = 727,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV212()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    TerminalId = "48c165a2-5d8d-49e1-899e-149a652a7026",
                    CustomerId = "7a2313ea-1d76-4096-8358-cd59c0a594b9",
                    CustomerName = "buv1P",
                    Description = "GDaqpxNAcB7XJ2PMH0HA7mMCxlziaJ",
                    TransactionId = "np",
                    IsModified = true,
                    Types = new string[]{"payment"},
                    From = "2023-11-06T02:07:59.000000+09:00",
                    To = "2015-12-31T19:26:51.000000+09:00",
                    NextPageCursorId = "c1016f8a-80b6-4770-a4f9-4b8d34ec7872",
                    PrevPageCursorId = "44f3e66a-4837-4e59-ac8e-02456a5f329b",
                    PerPage = 355,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV213()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    ShopId = "9ad53da0-9335-432d-89a3-b100c69ddefd",
                    TerminalId = "81ee872d-0442-48c9-a2d0-8a7e3e902777",
                    CustomerId = "e273e881-ba5a-4a57-a21b-a2f050c5d9ae",
                    CustomerName = "tKeWMAfjTzhjO10bQwyTU6ZUhrOp80a47LYIcD579HHiyd",
                    Description = "wYbStQsIHShYuqMOfry8huKLaun9q8fRCMt2pzYekawpUouvYHKlj0GUL0Fcnz7fEngR6pF3m54VmwYrgFgT3RyUt1",
                    TransactionId = "Kexb2ZIYN0",
                    IsModified = false,
                    Types = new string[]{"expire", "payment", "exchange_outflow", "cashback"},
                    From = "2016-10-28T02:52:27.000000+09:00",
                    To = "2018-09-27T04:45:54.000000+09:00",
                    NextPageCursorId = "7c2f279c-8f5e-4ea3-8444-8e805b506c51",
                    PrevPageCursorId = "66af633c-a0d9-4df0-956b-13821993f6b9",
                    PerPage = 255,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV214()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    OrganizationCode = "8--3tn45---3w33v-",
                    ShopId = "83231620-d1f9-4379-b584-12daee5db26e",
                    TerminalId = "dbaf36b4-5131-4b2e-bcd6-56fa68c4f08b",
                    CustomerId = "1bbff35f-9fcc-4a5b-8b0d-c1913ac4c00c",
                    CustomerName = "g3om1YNfeeKoLdFE8Hmt9R8Bv1AJsBz3l6W699PQnfTErfIkmiU4i2bFcYt3zvnnQAgg6WKGNaTc3A08bOic61",
                    Description = "u1yVQPNCQEFIkbwhO9RJiR7mxn7kYGzShazSiZH6DDfNqfsVRi3zxzsVzVJLxpF9uCjOUSNMH9fWh27PiOpr3HMMXsb4Lh4b0Gko8iE0P3Cu0AOaTlKzyVFYYoK00acoGlEqYYGWZUMgU5LJ",
                    TransactionId = "nedbEkL6V",
                    IsModified = false,
                    Types = new string[]{"exchange_inflow", "expire", "cashback", "payment"},
                    From = "2025-06-25T14:19:14.000000+09:00",
                    To = "2022-10-08T22:47:58.000000+09:00",
                    NextPageCursorId = "32342add-60ff-48af-993e-73911594d243",
                    PrevPageCursorId = "9739c57d-1a3b-499d-9afd-b1c6fff44c5b",
                    PerPage = 652,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV215()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PrivateMoneyId = "2e148e30-fc59-47ea-9872-2207f18fbb19",
                    OrganizationCode = "1-t-e--04Ot94OKjz8d6h-qC-6-286-",
                    ShopId = "d60cebfe-0d6a-4e00-9b99-55b59bf59b5b",
                    TerminalId = "4bdc0dcb-300d-4bd0-b7a9-919b7ba6d043",
                    CustomerId = "7baf8881-af29-4361-9ad8-292a917c9de0",
                    CustomerName = "5R9O7hnOQMfDj4u8or1Z5ajnFBytvfCWU5lvasIan6Df8qsq",
                    Description = "k3ETquM3SQujWFDE153B47G8gAIFr9zY1ABG4Q6S1AZ81ee9F1z",
                    TransactionId = "eU",
                    IsModified = false,
                    Types = new string[]{"topup", "exchange_inflow", "cashback", "expire"},
                    From = "2025-05-30T19:30:32.000000+09:00",
                    To = "2022-05-21T06:00:03.000000+09:00",
                    NextPageCursorId = "5afb7b67-e2da-40fa-924f-b15d9d1f50de",
                    PrevPageCursorId = "f67ec3a2-30de-4429-8668-de0637c40a05",
                    PerPage = 942,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
