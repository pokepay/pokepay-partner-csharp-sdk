// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransactionsV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransactionsV20()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2();
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV21()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PerPage = 444,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV22()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PrevPageCursorId = "f5a0a724-8804-455f-8214-44758e35ccbe",
                    PerPage = 496,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV23()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    NextPageCursorId = "ca611224-ad01-4d4a-84d3-4b5c6fc42549",
                    PrevPageCursorId = "b3d07c46-db55-47f2-a9d4-a4d24837f1ee",
                    PerPage = 486,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV24()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    To = "2017-11-21T06:59:50.000000+09:00",
                    NextPageCursorId = "397a70f5-4e7e-4638-8201-11cbff6ba018",
                    PrevPageCursorId = "5959ff6d-49cf-408a-8efb-76d9518b5503",
                    PerPage = 217,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV25()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    From = "2018-10-28T03:18:08.000000+09:00",
                    To = "2019-06-22T06:11:19.000000+09:00",
                    NextPageCursorId = "10ba260a-857b-4805-a560-f6b67e1a3323",
                    PrevPageCursorId = "a6f8f6ce-f33b-4d2e-ad0d-9f3d6db0b526",
                    PerPage = 360,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV26()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    Types = new string[]{"expire", "payment", "exchange_inflow"},
                    From = "2022-11-08T16:42:05.000000+09:00",
                    To = "2020-03-12T00:50:17.000000+09:00",
                    NextPageCursorId = "f0237c6d-c327-4c09-94b9-754eb3e15b37",
                    PrevPageCursorId = "b346ee7b-28d9-483e-a4ef-af7977acaeba",
                    PerPage = 873,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV27()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    IsModified = true,
                    Types = new string[]{"payment", "exchange_outflow", "topup"},
                    From = "2020-10-06T21:53:29.000000+09:00",
                    To = "2024-03-22T22:21:35.000000+09:00",
                    NextPageCursorId = "ff16ff76-330d-48f0-b489-2b3ca1e2ed33",
                    PrevPageCursorId = "7d5f74cf-3d0c-4098-8534-16e2e0d0c0c7",
                    PerPage = 472,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV28()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    TransactionId = "PwqWxwC",
                    IsModified = false,
                    Types = new string[]{},
                    From = "2020-07-07T21:19:07.000000+09:00",
                    To = "2020-08-08T02:37:56.000000+09:00",
                    NextPageCursorId = "070abb5f-cfda-46d9-a21e-53ced5836904",
                    PrevPageCursorId = "f7c31a9a-bd49-4f16-86ae-a3f265fb6259",
                    PerPage = 73,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV29()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    Description = "kTuO",
                    TransactionId = "zryw",
                    IsModified = false,
                    Types = new string[]{"exchange_outflow", "exchange_inflow", "cashback", "topup", "payment"},
                    From = "2024-01-25T02:05:15.000000+09:00",
                    To = "2019-07-13T08:52:16.000000+09:00",
                    NextPageCursorId = "bd25a6fd-e37c-43ff-a6e9-1727e5559a6e",
                    PrevPageCursorId = "970e68ba-83a4-4af2-b75b-76d8a5076bc0",
                    PerPage = 130,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV210()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    CustomerName = "r9y8K62vZdczxzKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMj",
                    Description = "y6rf4CluMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5",
                    TransactionId = "iYZhX71qxx",
                    IsModified = false,
                    Types = new string[]{"cashback", "exchange_inflow", "topup", "payment"},
                    From = "2021-12-03T00:56:47.000000+09:00",
                    To = "2018-06-23T05:51:10.000000+09:00",
                    NextPageCursorId = "c7e88ff3-01e2-4eb8-8c36-e5c401efb57f",
                    PrevPageCursorId = "c67a7ea4-0fb9-4996-9808-4b5a7273850d",
                    PerPage = 164,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV211()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    CustomerId = "0e88aee6-acef-4605-8c7b-c388346e7a0e",
                    CustomerName = "8j2fPJCGzVYdohDRxcepsSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk",
                    Description = "hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7",
                    TransactionId = "UH",
                    IsModified = true,
                    Types = new string[]{"cashback", "exchange_outflow", "payment", "expire", "exchange_inflow"},
                    From = "2017-07-17T12:43:03.000000+09:00",
                    To = "2021-12-22T00:34:28.000000+09:00",
                    NextPageCursorId = "4f5febbc-83e4-4ef7-b26e-5db295b554f4",
                    PrevPageCursorId = "4c180dd1-473b-40e6-aea7-6f7b9fa5aa40",
                    PerPage = 398,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV212()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    TerminalId = "e46c68d8-e819-409d-b230-ec37cc7f5eb8",
                    CustomerId = "3fcfb8fc-d9f9-4c57-9f95-3ff24cf326f0",
                    CustomerName = "KRIJrBD5D7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mGq20CccqYOFtqhMLy1fSrOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9b",
                    Description = "FfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW",
                    TransactionId = "hP0V",
                    IsModified = false,
                    Types = new string[]{"topup", "exchange_inflow", "cashback", "exchange_outflow", "payment"},
                    From = "2018-01-22T04:08:35.000000+09:00",
                    To = "2017-09-27T02:56:30.000000+09:00",
                    NextPageCursorId = "4f5ef823-46b7-4371-8004-4cb18dbb14dd",
                    PrevPageCursorId = "f200a9d3-a919-48ea-8eea-e961148064f4",
                    PerPage = 363,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV213()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    ShopId = "1a8314ea-41c4-475a-98ba-7f3a7b56015e",
                    TerminalId = "864ff5a9-6a37-4dd2-894b-7f24bf77d93e",
                    CustomerId = "ab3957a1-1192-4316-82ba-f98e4240d32c",
                    CustomerName = "gDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3Keptre",
                    Description = "ugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqzVsahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02",
                    TransactionId = "y90GW",
                    IsModified = false,
                    Types = new string[]{"cashback", "payment", "topup"},
                    From = "2016-01-17T17:59:22.000000+09:00",
                    To = "2016-05-24T16:25:10.000000+09:00",
                    NextPageCursorId = "86344282-5e73-4a99-afbd-0f9730dde716",
                    PrevPageCursorId = "e651608a-2583-451f-ba41-7ef0d956ceba",
                    PerPage = 61,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV214()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    OrganizationCode = "1t-5jb-",
                    ShopId = "764d0cbc-7370-45c9-9c3a-3b366b751e62",
                    TerminalId = "238ffe68-8938-45d9-b260-2bd638823cf3",
                    CustomerId = "88095e94-46aa-4fa1-9728-fac7ca0c4553",
                    CustomerName = "ghDCw",
                    Description = "Un7nnaTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79",
                    TransactionId = "bzap",
                    IsModified = false,
                    Types = new string[]{"exchange_outflow", "topup", "exchange_inflow", "expire", "cashback"},
                    From = "2022-08-18T20:45:40.000000+09:00",
                    To = "2019-07-28T13:36:14.000000+09:00",
                    NextPageCursorId = "c25be7a7-6e41-4b67-9286-015e6c04c9d9",
                    PrevPageCursorId = "acdcc534-b39c-4922-b1ed-8b9551ef6d59",
                    PerPage = 221,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV215()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PrivateMoneyId = "96ac0ae0-c312-4485-83c4-9efc9d55c712",
                    OrganizationCode = "Ga--GQMi1545ktd12P",
                    ShopId = "5aa24321-e825-4213-b4c9-e23a309164cc",
                    TerminalId = "bec140d3-d76b-4574-8b07-92f127977031",
                    CustomerId = "4f1c3e05-bf3b-4118-a494-ef02c8061d81",
                    CustomerName = "Nxb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypEu4pqRk9KXyywxfAsvQQw8eN",
                    Description = "tPfKAW4UwDxtqXzHNdytk1inQrWiktMK0FHLyLnvzTdFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3S",
                    TransactionId = "8MPeFKTY",
                    IsModified = true,
                    Types = new string[]{},
                    From = "2024-10-21T05:13:35.000000+09:00",
                    To = "2023-05-12T23:30:06.000000+09:00",
                    NextPageCursorId = "650b19c8-75de-4451-aac6-334b9d1fc9c4",
                    PrevPageCursorId = "3d6da9c9-e10d-4411-8c8c-a8ed611f8356",
                    PerPage = 689,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
