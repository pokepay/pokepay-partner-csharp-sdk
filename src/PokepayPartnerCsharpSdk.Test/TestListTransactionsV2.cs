// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransactionsV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransactionsV20()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2();
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV21()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PerPage = 202,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV22()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PrevPageCursorId = "85ddd4d4-c103-4bac-a6ab-a5eb580a95a7",
                    PerPage = 322,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV23()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    NextPageCursorId = "7ae4aaf7-bae8-4b2a-b56b-db33cf010cb2",
                    PrevPageCursorId = "346914e0-b47a-43a0-aedc-a2d145387f4e",
                    PerPage = 436,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV24()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    To = "2016-11-21T15:18:49.000000+09:00",
                    NextPageCursorId = "7c74706c-9873-464e-8b30-98e54d98fc37",
                    PrevPageCursorId = "4c7d1924-58ef-483a-a62c-f85ba86981da",
                    PerPage = 977,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV25()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    From = "2022-01-13T02:10:41.000000+09:00",
                    To = "2018-11-03T00:41:55.000000+09:00",
                    NextPageCursorId = "68ed65bc-ec47-4c01-9115-ccf2c5af7fad",
                    PrevPageCursorId = "a2edf208-9464-48cb-bdd5-0af6bfd9950f",
                    PerPage = 576,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV26()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    Types = new string[]{"cashback", "exchange_inflow", "topup", "expire", "payment"},
                    From = "2021-01-10T05:56:39.000000+09:00",
                    To = "2016-04-15T16:00:35.000000+09:00",
                    NextPageCursorId = "f591bcee-bcae-4a77-bb6b-f3288e3e02dc",
                    PrevPageCursorId = "ce52e926-f713-4d13-a9d3-345ce6d126ca",
                    PerPage = 93,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV27()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    IsModified = true,
                    Types = new string[]{"cashback", "exchange_inflow", "expire", "payment", "exchange_outflow", "topup"},
                    From = "2021-07-25T14:13:50.000000+09:00",
                    To = "2017-11-26T08:00:03.000000+09:00",
                    NextPageCursorId = "e4f45b8f-b147-45a0-8175-8af6dd01fed1",
                    PrevPageCursorId = "fffcb921-5380-4d15-bdf6-50b5ba8f13b0",
                    PerPage = 300,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV28()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    TransactionId = "7QUHnY",
                    IsModified = true,
                    Types = new string[]{"payment", "expire", "exchange_inflow", "exchange_outflow"},
                    From = "2019-03-06T02:24:41.000000+09:00",
                    To = "2023-07-24T09:37:22.000000+09:00",
                    NextPageCursorId = "0a38426c-c8be-4cb8-a853-18cc002bcfa9",
                    PrevPageCursorId = "5be5052a-2534-4ae1-bbf4-51d748665654",
                    PerPage = 108,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV29()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    Description = "0hJO7lJxzbynDCdZobvj0UWpDDm74CmD3Yp6pDTXNpXVvnAZW2I1Q2fdO4nli5MZVA6dN9LaXcWbR6ddJz83a1dexqVQlm68J0QtAIJNmgkvmpw3PshSdbwx55pCGmeXxeiecOsiiE4s3e8p1Rkij8JaxcQth3HznJaXVKuMqotpW2ALD8r",
                    TransactionId = "7D",
                    IsModified = true,
                    Types = new string[]{"expire", "exchange_inflow", "topup", "payment"},
                    From = "2016-08-13T09:20:05.000000+09:00",
                    To = "2019-09-23T14:14:30.000000+09:00",
                    NextPageCursorId = "f98e30e1-3c4b-4929-9e58-bebd136aefe7",
                    PrevPageCursorId = "c8d8e458-77de-48f5-904f-314189a23599",
                    PerPage = 772,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV210()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    CustomerName = "LqR2iigYrnH449kgfpgiiLmLZmJiwhu1d8XaXcAHHoVxSMQ6bhRrawW1xl6o",
                    Description = "ce3NTiG6X5PGQUpYjdxP8lvQmEKL9PzOCpBWpfqh07PNLgrz0aD2oiteBrQZtTvZFe5NdFm0i",
                    TransactionId = "jgHW",
                    IsModified = false,
                    Types = new string[]{"topup", "cashback", "exchange_outflow", "expire"},
                    From = "2017-04-03T08:36:21.000000+09:00",
                    To = "2017-02-26T19:02:23.000000+09:00",
                    NextPageCursorId = "049bc82c-d15f-4594-9e20-0f415e155108",
                    PrevPageCursorId = "6662154d-a37c-4a50-b49f-ae2eb9eeb368",
                    PerPage = 219,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV211()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    CustomerId = "4371f40a-b3c5-4f56-8a26-937203a1a18d",
                    CustomerName = "jVTEJM20b9GljgNsWIa2vtJUfIwEl4UtLY1M6I0WhcXKePVJI",
                    Description = "sIL9tdeMoffu94KvescETPXW",
                    TransactionId = "b",
                    IsModified = false,
                    Types = new string[]{},
                    From = "2023-03-23T00:47:04.000000+09:00",
                    To = "2022-01-12T03:26:15.000000+09:00",
                    NextPageCursorId = "a9535bd0-57ae-4af6-abed-8862ff9f3022",
                    PrevPageCursorId = "e25fa84a-6d9f-4c5b-bc5d-166a1ec81b20",
                    PerPage = 312,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV212()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    TerminalId = "21dec5d9-0d57-44e8-af63-6db0332bc78c",
                    CustomerId = "e218a676-81fc-4d82-8c40-a206eaf9114b",
                    CustomerName = "9fcv7wHjxy9a3WkFEYp61fsPiaGYycbMJmtd036cLUsApcS4apTeNTVgqNvumg",
                    Description = "UCkJdoOjH3kE8WhksxhlcugHV4u1YYhunGeY3VlItkcxNtromAunfP7TljFc0GWbz079",
                    TransactionId = "K024iCs",
                    IsModified = true,
                    Types = new string[]{"cashback"},
                    From = "2019-08-26T08:16:41.000000+09:00",
                    To = "2024-04-20T16:34:39.000000+09:00",
                    NextPageCursorId = "d79e6f57-c832-474e-9707-f122b2267340",
                    PrevPageCursorId = "e49b3941-8ec2-40f8-bb74-1033deea4f4b",
                    PerPage = 465,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV213()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    ShopId = "8d1d178e-e957-4bbf-93e7-464308181342",
                    TerminalId = "54220551-2415-4919-be97-6eabbe54d26b",
                    CustomerId = "5357310f-1d44-4b09-a0ab-a1fe4b07aa53",
                    CustomerName = "Dtul2KIUbkifin9bUXfrsPQjBMqrUSCFUEICPCAyQWT3bVsecKq6veq0A9xqeXBpsq2ukf1JYwcbISH87EwiDUOep1ML8q3zJGCxptbwaTqy3rAyhu9HQrZGVWz2auiVYsfVcZssbl4rDromTUFkVG6mew2wG8lamWDzI44erlG",
                    Description = "2XfkDZQHmWZCbqBR4Gw2wK6uWHrI1bkfDRzPQRKtswIQlhaWB1vsR7carSK",
                    TransactionId = "gEHRjF1rW",
                    IsModified = true,
                    Types = new string[]{"exchange_outflow", "expire", "topup"},
                    From = "2022-11-23T18:11:54.000000+09:00",
                    To = "2019-12-06T03:29:43.000000+09:00",
                    NextPageCursorId = "39cd6d88-a086-4b55-875f-bffbc324a0c4",
                    PrevPageCursorId = "61dcea30-ae3b-47df-9e4f-b8661eae9328",
                    PerPage = 167,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV214()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    OrganizationCode = "5K--wQH-Qs9Q3",
                    ShopId = "6486413c-281c-4892-80e5-6cc7d136e916",
                    TerminalId = "ad0b7eb2-918c-4901-8c0a-878beabd2079",
                    CustomerId = "01686e68-c016-444a-9c73-d8169f3dd97e",
                    CustomerName = "6RkUQdo4ey9xgUbstrtM8wATMfpy9qLA9DtrNViLZ73gBtgSXJFtW1zFDAYpvV191Wqp8NZsn0ho0eA7gVwhkx3s7h7KP8taZENoFKIsXaNzL54o1R6C0NWqnDgPkv5dza0wW9h9zvrtHEl4QkFzioATsXSEBWbA551HcMWxtKAcWYvfnDBf817MxFXeA6t562ACH4A0LFRUB",
                    Description = "o5ZxTdceQoXQLrM1bS08tTz8FnXtKUUdd85A8Mkq1mOChDZ7dXXilMrGz73vaJmqTrZylKB0XcDOtFGb3gAlT3JFLwQ0jM4kB9",
                    TransactionId = "r",
                    IsModified = false,
                    Types = new string[]{"payment", "cashback"},
                    From = "2022-03-13T05:44:41.000000+09:00",
                    To = "2018-12-01T02:11:10.000000+09:00",
                    NextPageCursorId = "a5dc52f8-9c09-41af-bd82-9a5f7c158937",
                    PrevPageCursorId = "5c66c411-e3af-4042-a192-86246f003ac2",
                    PerPage = 839,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV215()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PrivateMoneyId = "62ff9ef8-c453-40b9-b8b5-63bd737105bf",
                    OrganizationCode = "y6-JK-14Et-i2-aJ0-2OAO-",
                    ShopId = "d3916032-a28e-4c06-a07c-226a27c87a68",
                    TerminalId = "10e29170-2d0b-4475-82c8-fb87ee32105d",
                    CustomerId = "dad465a1-0419-4d88-9339-1ac0d076b6b2",
                    CustomerName = "WC1cGMXisJzise9zpc2LGSx8PQBZCHJPG",
                    Description = "1IgJGXz3qPxumGx2AbkMBEbedwnirZMjbtXQM4cQZ3nip3W30RrCPKihCkZBXNAdBtWJ6B0STS",
                    TransactionId = "Ti7YRAAwM",
                    IsModified = false,
                    Types = new string[]{"payment"},
                    From = "2022-10-27T15:55:58.000000+09:00",
                    To = "2017-08-10T10:42:09.000000+09:00",
                    NextPageCursorId = "d819e876-f773-4475-94a7-4a06cb95c9c6",
                    PrevPageCursorId = "7995b760-d8e4-4449-b4a6-7ae2c7ff759a",
                    PerPage = 788,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
