// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransactionsV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransactionsV20()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2();
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV21()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PerPage = 136,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV22()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PrevPageCursorId = "fc527984-a5e8-44f2-a31f-4c7f0cdfdd95",
                    PerPage = 313,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV23()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    NextPageCursorId = "fb22ffa1-f122-40d1-a829-257fab34ceea",
                    PrevPageCursorId = "3ccd8c04-5759-4eec-bb42-5cb460baa4a3",
                    PerPage = 307,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV24()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    To = "2022-06-12T16:45:46.000000Z",
                    NextPageCursorId = "b59dafbc-912c-4bef-bb8d-474796f0ec41",
                    PrevPageCursorId = "61cefb16-141f-40a0-a8bf-97792c4e46ec",
                    PerPage = 369,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV25()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    From = "2022-05-13T22:51:50.000000Z",
                    To = "2021-03-13T23:51:09.000000Z",
                    NextPageCursorId = "fece7a94-33ac-43dd-8b1b-1ec60b163d4f",
                    PrevPageCursorId = "4caa26ae-5ef7-4ec3-a49f-d4a4805d1b3f",
                    PerPage = 831,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV26()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    Types = new string[]{"exchange_outflow", "expire"},
                    From = "2023-05-12T04:41:04.000000Z",
                    To = "2021-06-07T00:06:19.000000Z",
                    NextPageCursorId = "8cf2e07e-679f-4d8f-821f-65dac7d4c4e4",
                    PrevPageCursorId = "f2538a72-d81e-4e67-9198-2d9d4a0aa3e8",
                    PerPage = 442,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV27()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    IsModified = true,
                    Types = new string[]{"topup", "cashback", "exchange_inflow", "payment"},
                    From = "2022-10-11T10:49:34.000000Z",
                    To = "2021-12-28T16:25:23.000000Z",
                    NextPageCursorId = "cb3e846c-d7c4-41bb-a404-c55fc895efc2",
                    PrevPageCursorId = "27a88a14-4475-4cbe-af24-ad0171a19d4a",
                    PerPage = 645,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV28()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    TransactionId = "IFUr",
                    IsModified = false,
                    Types = new string[]{"cashback", "exchange_inflow", "topup"},
                    From = "2021-09-05T06:44:01.000000Z",
                    To = "2020-10-14T01:18:45.000000Z",
                    NextPageCursorId = "6dd14e7e-5638-4902-81cb-a0185959ff6d",
                    PrevPageCursorId = "e93949cf-e08a-46ce-bbd9-55031442dcd8",
                    PerPage = 281,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV29()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    Description = "ce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzry",
                    TransactionId = "GRNkAeSH",
                    IsModified = false,
                    Types = new string[]{"expire", "topup", "payment"},
                    From = "2020-05-01T18:04:20.000000Z",
                    To = "2021-09-07T23:55:30.000000Z",
                    NextPageCursorId = "5fcd5437-265b-46d8-8081-5f3706143e05",
                    PrevPageCursorId = "1a0a7af2-ad93-4e89-9e39-0928d69b0d5c",
                    PerPage = 423,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV210()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    CustomerName = "8K62vZdczxzKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86D9XZfo8j2fPJCGzVYdohDRxcepsSsdecspEcH6zAIM8ju98",
                    Description = "f3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRt",
                    TransactionId = "mknLVk7hQO",
                    IsModified = false,
                    Types = new string[]{"exchange_outflow", "exchange_inflow", "cashback", "expire", "payment"},
                    From = "2020-12-02T05:29:29.000000Z",
                    To = "2022-02-09T17:20:58.000000Z",
                    NextPageCursorId = "e5b630a8-6881-4a04-8d83-81465bf9cfa5",
                    PrevPageCursorId = "bdbe4cff-86e8-422a-a0a9-f10b73fdd11b",
                    PerPage = 827,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV211()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    CustomerId = "9d99c341-5555-4bb2-894c-ad6eb8ec2dca",
                    CustomerName = "GL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpK",
                    Description = "eG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mGq20CccqYOFtqhMLy1fSrOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG",
                    TransactionId = "9bLFf",
                    IsModified = true,
                    Types = new string[]{"payment", "cashback", "topup", "exchange_inflow"},
                    From = "2022-09-13T20:18:07.000000Z",
                    To = "2023-09-26T20:31:25.000000Z",
                    NextPageCursorId = "6abc9db9-7c38-4cdd-9601-a9f053d20a4f",
                    PrevPageCursorId = "ab3f5867-04a3-49bb-ad88-c58f0213e999",
                    PerPage = 868,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV212()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    TerminalId = "15cbab96-7008-4b38-b0fc-29ae27c00c53",
                    CustomerId = "98d4869b-13b7-42d7-955d-8695dbb97e9d",
                    CustomerName = "iumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3",
                    Description = "9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf",
                    TransactionId = "ESdF",
                    IsModified = true,
                    Types = new string[]{"exchange_inflow", "payment", "expire", "exchange_outflow", "topup"},
                    From = "2022-06-06T10:38:03.000000Z",
                    To = "2022-11-23T05:39:52.000000Z",
                    NextPageCursorId = "5d685570-9b2e-403c-850a-60b143b8297c",
                    PrevPageCursorId = "bd2b7e86-c9fd-459e-b9e7-5db8278cb9b9",
                    PerPage = 627,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV213()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    ShopId = "006d11ab-04d5-4f0b-bf1d-902772835f67",
                    TerminalId = "55325684-d1fd-4d11-96b8-2131a83d9ba4",
                    CustomerId = "95901060-912a-477d-9314-936851642711",
                    CustomerName = "6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqzVsahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISprQ3cmpI6bh8YrVsWGSghDCw1Un",
                    Description = "nnaTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79bzapcrIrLur4lrAgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHG",
                    TransactionId = "ImjW3",
                    IsModified = true,
                    Types = new string[]{"exchange_outflow", "expire", "exchange_inflow"},
                    From = "2022-04-02T04:19:54.000000Z",
                    To = "2022-09-02T08:24:37.000000Z",
                    NextPageCursorId = "63e5715b-e038-487b-9715-19b9ff9442aa",
                    PrevPageCursorId = "9a3946e8-cfe8-49eb-b09f-c5596e9aa017",
                    PerPage = 728,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV214()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    OrganizationCode = "1sxp-",
                    ShopId = "5afd0db1-785d-48fb-85d4-5797d56626da",
                    TerminalId = "713d02df-bad6-45fd-b269-b22386f4452e",
                    CustomerId = "4ac97787-846d-4758-99bc-153beaf7ae51",
                    CustomerName = "2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypEu4pqRk9KXyywxfAsvQQw8eNXwtPfKAW4Uw",
                    Description = "xtqXzHNdytk1inQrWiktMK0FHLyLnvzTdFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvHQFKDImV0W8uMWRziTXMumFeaEHdh8PePoMZwnAEmuUL6pb761IWS7zT3jmF3XMzgKDKO5",
                    TransactionId = "UqQsbMF",
                    IsModified = false,
                    Types = new string[]{"topup", "expire", "exchange_inflow", "exchange_outflow", "cashback", "payment"},
                    From = "2020-02-03T08:11:05.000000Z",
                    To = "2023-06-29T18:25:12.000000Z",
                    NextPageCursorId = "30f1ff9d-ef59-4f88-953a-1d6e057e9d65",
                    PrevPageCursorId = "4860306d-5194-4efa-9c52-df967e6670e4",
                    PerPage = 861,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV215()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PrivateMoneyId = "037875d2-a2cf-48cb-a21d-4c4705c5bba4",
                    OrganizationCode = "-X2-C07GVrnb4d-B4--",
                    ShopId = "34dc55ac-a31b-4d3e-ad69-82ee07a1bdec",
                    TerminalId = "301a1fbb-1b9e-48be-938a-00ff3831334a",
                    CustomerId = "41652a06-e107-4103-a2df-97e77f4ab73e",
                    CustomerName = "COpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CHRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXf",
                    Description = "zIWogjdxJNEfM7ZphEzx62f8FNzaDel7ro4JT6XY3Y33ek4ahxmsrZJPb5B1K9ZLJjlQzrcG4cFx990D5go4dBLdUCSZVd4cTq",
                    TransactionId = "NfSRiXL",
                    IsModified = false,
                    Types = new string[]{"exchange_outflow", "payment", "cashback", "topup", "exchange_inflow", "expire"},
                    From = "2020-03-21T03:35:25.000000Z",
                    To = "2021-01-28T09:27:41.000000Z",
                    NextPageCursorId = "eb184385-8def-41e0-a634-4d0f5c103d4e",
                    PrevPageCursorId = "1c990833-aae0-4762-985c-e437b7a43332",
                    PerPage = 122,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
