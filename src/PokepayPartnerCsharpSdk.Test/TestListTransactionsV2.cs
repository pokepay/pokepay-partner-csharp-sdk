// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransactionsV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransactionsV20()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2();
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV21()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PerPage = 29,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV22()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PrevPageCursorId = "04e72a3f-308d-4ac1-8b24-7a85bf70fc21",
                    PerPage = 825,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV23()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    NextPageCursorId = "f852c880-5cfb-45c4-b752-a0bef37dc6f4",
                    PrevPageCursorId = "41013c76-1bbe-4614-8cf7-18d2585f004e",
                    PerPage = 569,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV24()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    To = "2021-11-17T19:48:17.000000+09:00",
                    NextPageCursorId = "fe6fdca8-e582-4fd1-ad17-c112e4ad5060",
                    PrevPageCursorId = "7b3af2d8-e293-4ee9-aa48-68c93e1bfdf9",
                    PerPage = 803,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV25()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    From = "2024-02-15T13:44:45.000000+09:00",
                    To = "2022-07-31T03:01:25.000000+09:00",
                    NextPageCursorId = "8112fdc7-1283-4878-b213-d7e7e056e313",
                    PrevPageCursorId = "32c5a628-21d4-4b28-b808-1a7230da325e",
                    PerPage = 539,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV26()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    Types = new string[]{"expire", "exchange_outflow", "exchange_inflow", "payment"},
                    From = "2022-09-11T06:26:58.000000+09:00",
                    To = "2022-09-21T20:33:16.000000+09:00",
                    NextPageCursorId = "4cdb18e3-5410-4432-a2de-27a1df2dd27c",
                    PrevPageCursorId = "b8baa3b7-e309-4382-81f1-dee4203ee740",
                    PerPage = 418,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV27()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    IsModified = true,
                    Types = new string[]{"payment", "exchange_inflow", "topup"},
                    From = "2022-12-04T11:17:16.000000+09:00",
                    To = "2021-11-30T04:22:51.000000+09:00",
                    NextPageCursorId = "232f3a16-b2e1-4355-a134-0174b10513f3",
                    PrevPageCursorId = "0de0e74e-bf7e-497d-afa7-260fb5874171",
                    PerPage = 385,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV28()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    TransactionId = "OUthYSxSa5",
                    IsModified = true,
                    Types = new string[]{"payment"},
                    From = "2022-05-02T08:07:03.000000+09:00",
                    To = "2021-12-28T18:19:55.000000+09:00",
                    NextPageCursorId = "de8aa563-2b64-49f0-85a2-eb932cddcca9",
                    PrevPageCursorId = "99f1d695-bc7a-405e-8925-185ab2fb806f",
                    PerPage = 173,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV29()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    Description = "GgQ8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9P",
                    TransactionId = "fQ",
                    IsModified = true,
                    Types = new string[]{"exchange_inflow", "topup", "cashback", "expire"},
                    From = "2020-02-26T22:38:43.000000+09:00",
                    To = "2022-09-16T00:32:14.000000+09:00",
                    NextPageCursorId = "461a3cfa-aca5-4b66-8033-46ed38e41057",
                    PrevPageCursorId = "9b930dc1-5bc5-49c8-a206-5ef7d10da4ce",
                    PerPage = 610,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV210()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    CustomerName = "fuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrgh98RslDBuoJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bG",
                    Description = "PwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4C",
                    TransactionId = "luMJ3q8",
                    IsModified = true,
                    Types = new string[]{"expire", "payment", "exchange_outflow", "cashback", "topup", "exchange_inflow"},
                    From = "2020-10-11T08:50:33.000000+09:00",
                    To = "2023-02-23T07:05:29.000000+09:00",
                    NextPageCursorId = "09419c63-3336-4d16-a188-d4f62a07d93c",
                    PrevPageCursorId = "93f9f732-4d84-4c82-a95b-6c1322fa61ee",
                    PerPage = 112,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV211()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    CustomerId = "4cba8005-c451-44ed-af3b-a40b44fdf3f3",
                    CustomerName = "zzj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86D9XZf",
                    Description = "8j2fPJ",
                    TransactionId = "GzVY",
                    IsModified = true,
                    Types = new string[]{"topup"},
                    From = "2021-08-29T19:33:47.000000+09:00",
                    To = "2022-04-15T00:14:21.000000+09:00",
                    NextPageCursorId = "a590c063-ac65-469f-9e81-f42f308d0fa1",
                    PrevPageCursorId = "8925d006-7170-4173-93f3-e01085a85ba8",
                    PerPage = 34,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV212()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    TerminalId = "d86984e4-0e8e-40a5-9e65-45e37527def3",
                    CustomerId = "83f1cff0-6985-49de-850d-14e384ac7292",
                    CustomerName = "6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D",
                    Description = "7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mGq2",
                    TransactionId = "C",
                    IsModified = true,
                    Types = new string[]{"topup", "cashback", "expire", "payment", "exchange_outflow"},
                    From = "2022-06-17T13:32:43.000000+09:00",
                    To = "2023-05-04T03:42:22.000000+09:00",
                    NextPageCursorId = "16009ca8-12f1-4ce8-9d5f-d7a4493f994d",
                    PrevPageCursorId = "4451164c-419c-4b79-b166-ed9fca07ab27",
                    PerPage = 549,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV213()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    ShopId = "7f9332de-6453-40a0-b2cf-2e8343ba613b",
                    TerminalId = "603e44a7-dd11-4207-a77e-061252c21887",
                    CustomerId = "93980d89-607e-412b-a605-2cda7e4c661c",
                    CustomerName = "nZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTI",
                    Description = "uwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV",
                    TransactionId = "1h6fR4XXA",
                    IsModified = true,
                    Types = new string[]{"exchange_outflow"},
                    From = "2020-03-20T04:31:35.000000+09:00",
                    To = "2020-05-02T21:46:59.000000+09:00",
                    NextPageCursorId = "daf2b795-e398-492c-a74c-5638da7a6bcd",
                    PrevPageCursorId = "bd0d0e0b-686a-4750-a632-3e2b2f05596e",
                    PerPage = 837,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV214()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    OrganizationCode = "Cz--R2wF8J",
                    ShopId = "fa31af8b-f231-46ad-b7d2-c42b9507b3a8",
                    TerminalId = "62e27792-a1d4-46f1-9c87-7a7715750571",
                    CustomerId = "1e012cde-c398-43fa-9686-d03ceb1a2f3f",
                    CustomerName = "sahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQB",
                    Description = "HozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISprQ3cmpI6bh8YrVsWGSghDCw1Un7nnaTSFczRArCskatgTSAk3a8TcT02",
                    TransactionId = "hzyAvEG",
                    IsModified = true,
                    Types = new string[]{"expire", "payment", "topup"},
                    From = "2021-03-24T01:26:06.000000+09:00",
                    To = "2023-04-27T07:24:48.000000+09:00",
                    NextPageCursorId = "3648a2ac-eca6-4f05-b1f4-2d37005b7822",
                    PrevPageCursorId = "a8346f39-080e-448c-9da3-487e921f5a62",
                    PerPage = 763,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactionsV215()
        {
            try {
                Request.ListTransactionsV2 request = new Request.ListTransactionsV2() {
                    PrivateMoneyId = "62a72e0f-b661-4d70-a306-f272a1a48d49",
                    OrganizationCode = "-YgmD9n-6VXS",
                    ShopId = "ab07695a-9aea-49ee-abdd-0b66985c2180",
                    TerminalId = "08958c40-c753-46cf-a166-d439054b129a",
                    CustomerId = "f6456230-a6c9-4a0c-8c68-74baf52b5a31",
                    CustomerName = "nEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9Tu",
                    Description = "4ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypEu4pqRk9KXyywxfAsvQQw8eNXwtPfKAW4",
                    TransactionId = "Uw",
                    IsModified = true,
                    Types = new string[]{"topup", "payment", "exchange_outflow"},
                    From = "2022-08-31T03:20:17.000000+09:00",
                    To = "2021-10-18T22:34:00.000000+09:00",
                    NextPageCursorId = "adf60dfa-9bfb-40c8-a99b-bece8dc39a26",
                    PrevPageCursorId = "7474e8dc-e8a1-422a-a5fd-96644d9814bf",
                    PerPage = 506,
                };
                Response.PaginatedTransactionV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
