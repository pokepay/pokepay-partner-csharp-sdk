// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCustomerAccount
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCustomerAccount0()
        {
            try {
                Request.UpdateCustomerAccount request = new Request.UpdateCustomerAccount(
                    "4176344d-49e1-46ee-88e2-726e5bf63cd3"
                );
                Response.AccountWithUser response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCustomerAccount1()
        {
            try {
                Request.UpdateCustomerAccount request = new Request.UpdateCustomerAccount(
                    "4176344d-49e1-46ee-88e2-726e5bf63cd3"
                ) {
                    Metadata = "{\"key1\":\"foo\",\"key2\":\"bar\"}",
                };
                Response.AccountWithUser response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCustomerAccount2()
        {
            try {
                Request.UpdateCustomerAccount request = new Request.UpdateCustomerAccount(
                    "4176344d-49e1-46ee-88e2-726e5bf63cd3"
                ) {
                    ExternalId = "E1",
                    Metadata = "{\"key1\":\"foo\",\"key2\":\"bar\"}",
                };
                Response.AccountWithUser response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCustomerAccount3()
        {
            try {
                Request.UpdateCustomerAccount request = new Request.UpdateCustomerAccount(
                    "4176344d-49e1-46ee-88e2-726e5bf63cd3"
                ) {
                    AccountName = "pzUuFBC2YALiRTgbjqcdmQliCKHEztMZDqTjx0Z9ZM5oxU05AkAGxB5ouzK8aqMU7zGD122Aj56qUCV9VGKc43X7JKrtbIUCcgwokeLuTHz6NCcviY6xe6LHkTuVpPamsVnk7glHM1Flzv8oSwAI8Snh56Ml",
                    ExternalId = "lDgmospIl0Doyz44FHfPsl5i1gbErX1kM",
                    Metadata = "{\"key1\":\"foo\",\"key2\":\"bar\"}",
                };
                Response.AccountWithUser response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCustomerAccount4()
        {
            try {
                Request.UpdateCustomerAccount request = new Request.UpdateCustomerAccount(
                    "4176344d-49e1-46ee-88e2-726e5bf63cd3"
                ) {
                    Status = "pre-closed",
                    AccountName = "tFXM1RYY4pjdoWw5b96EWEwNqZJdf9FIZ2GbAJNHYdnpF6I7N5OVFdlqLks3vK4gyDw63j57hluiANfQMUDbLQGQ3AH5PfXPROBLS6BFHGi2R3NUuFka5Q2GIeyen5asc93XiVCpg4GiayQa6xtNGNsGPc2gyTFR5rJpyllXQXmgJ7aLaawHuJGI4D641liiyTgcBrDJuTbu",
                    ExternalId = "ZfYO",
                    Metadata = "{\"key1\":\"foo\",\"key2\":\"bar\"}",
                };
                Response.AccountWithUser response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
