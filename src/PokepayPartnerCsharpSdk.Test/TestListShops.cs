// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListShops
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListShops0()
        {
            try {
                Request.ListShops request = new Request.ListShops();
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops1()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PerPage = 3789,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops2()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Page = 7350,
                    PerPage = 1184,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops3()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    WithDisabled = true,
                    Page = 6200,
                    PerPage = 7153,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops4()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    ExternalId = "Z9YDI8tXmzHmiueI6UU9ZU4aFjlasI0x",
                    WithDisabled = false,
                    Page = 3264,
                    PerPage = 7947,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops5()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Email = "0xvLqiAyQq@hjhV.com",
                    ExternalId = "BKUk7xDPHrlDFFRapaLQ4sLv3",
                    WithDisabled = true,
                    Page = 3345,
                    PerPage = 9186,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops6()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Tel = "0415870210",
                    Email = "oNBIouge1t@SGMb.com",
                    ExternalId = "8A6C6Gm",
                    WithDisabled = true,
                    Page = 7363,
                    PerPage = 6302,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops7()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Address = "Snlz6Q9252V9TgUbGLSS9I5nuoPMabyF1qazV31PjD3Mhol2WN0v7rBRhoVee7EPHDItBE0OPlFn7hVUzEEJiEW4FozJvl5tDzw6YJCpQvZlwmHt9z1myfzh3rSNbjRJIwmRuGKZhsCOlLEOvqmMlfShyXlAO7rtALE2WUJwcHKiJ6ZtYoQFp1n45VgGKdPVH1J43QEz2Cw0k6n4h3qZiTSM",
                    Tel = "01888310638",
                    Email = "4mS1u6mrTH@jmLk.com",
                    ExternalId = "4DAELt5cNuY",
                    WithDisabled = false,
                    Page = 3503,
                    PerPage = 1274,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops8()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PostalCode = "597-2550",
                    Address = "uNaNfRwmFhaLZImMl0ztIT95gqAn",
                    Tel = "05-319-1053",
                    Email = "BvEV2bMSgK@rUXX.com",
                    ExternalId = "uG57TXNvknjIty",
                    WithDisabled = false,
                    Page = 3567,
                    PerPage = 8154,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops9()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Name = "yJatlw8EclRffkMXaMD5jxQmxhToKVmlLRhgSSdzsoKNK",
                    PostalCode = "0087751",
                    Address = "f8dMIPHYLCGIEq1cohoW",
                    Tel = "04-120510",
                    Email = "Ur1kKJbggH@0kqw.com",
                    ExternalId = "J2RLAf9TML7nVzl",
                    WithDisabled = false,
                    Page = 1220,
                    PerPage = 7554,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops10()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PrivateMoneyId = "0214d773-4712-4781-86d7-ee55fc8dd729",
                    Name = "xfjX6YOFVctJTQQREHb6EQf1UILP1Vy4eBoWXQibouiGDqgDYMMPQW3oXcpea24jVPnYvuLHQUMrwhLwBKHj55Xd517u5qdPpcGarbU6BNzXQWoNULc3uyyShbWlm0Y8MtVfy8Bdlp",
                    PostalCode = "3147136",
                    Address = "vrZU32B6aTh4d69f2YsXNm3p7RuPlvfsqb2U9moykbBE85GM7ItBW7C55V7Q36XQ4G50Jx777Yt3mpTQ5",
                    Tel = "06005594-1047",
                    Email = "7tPCkx6ew2@gcKs.com",
                    ExternalId = "yX3I8",
                    WithDisabled = false,
                    Page = 531,
                    PerPage = 7560,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops11()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    OrganizationCode = "jRne-w-0e6",
                    PrivateMoneyId = "4a958345-e6cb-492e-8ee4-059f21b4d68f",
                    Name = "biNNNUmxeFOtcyaC7PUht7Yz68y5nzrXFvFpMz7aBTPjahMctq2eXnPhSXznlyJG6kspGHkC5AHcqYJCNkotGWrYwAtEMGpG3zsjAeiRvNTJp7KvjtDhZzP6mTcVgKFKxHznR1ZjA8kYZZxsiSk4bcv9EAUXtPecnFUm3EZL9Myq1a5wceYzzyCjDIaiuRQdMTzNhjDpWXqZaNjvkgWGBrBM9NhXcvIUjm4Lzb1RSbBmNnCGSryB6gjRewqzn0",
                    PostalCode = "2517108",
                    Address = "YiRMPjAsg8wZVhDRJMxukQh0Nrd6fRSn0QMYr25dqWPgqA9aQuwbsvOe9qpMA1tBaG2pHWXew3Bi4sjvPDOQohNw3tShoOomgqvIyS5exsch9IHuxLrp8pnxfM0or7Bj6UluiZc7UZuNa897l3KLY7qgZcU3xvv8ofLKxa285QlCExINJFqDijDwoCy7Ux1rFUlPjBuHzvTH7Ol4BkQ4",
                    Tel = "08545319",
                    Email = "SrOeMpuzxb@cGdP.com",
                    ExternalId = "N",
                    WithDisabled = false,
                    Page = 4715,
                    PerPage = 2415,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
