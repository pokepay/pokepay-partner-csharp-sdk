// DO NOT EDIT: File is generated by code generator.
#nullable enable
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListShops
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListShops0()
        {
            try {
                Request.ListShops request = new Request.ListShops();
                Response.PaginatedShops response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops1()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PerPage = 1932
                };
                Response.PaginatedShops response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops2()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Page = 7616,
                    PerPage = 1536
                };
                Response.PaginatedShops response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops3()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    ExternalId = "nRoU2x23XKfAMBShU6I6qbRR",
                    Page = 8688,
                    PerPage = 1560
                };
                Response.PaginatedShops response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops4()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Email = "0KsKQjbIFp@DLYb.com",
                    ExternalId = "Mvlh9JCT1xGcQL",
                    Page = 8741,
                    PerPage = 9088
                };
                Response.PaginatedShops response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops5()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Tel = "099243-783",
                    Email = "zi1Z89pSvP@CqCp.com",
                    ExternalId = "yZq50fssjoNHB",
                    Page = 706,
                    PerPage = 5184
                };
                Response.PaginatedShops response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops6()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Address = "Un0qZzCUWIZlu3nVCPU",
                    Tel = "07386677775",
                    Email = "l2cQL9XINJ@3Yd9.com",
                    ExternalId = "s5R5vReMbbVX8HS4JwKvfQBXbwG5FfOb",
                    Page = 9955,
                    PerPage = 3660
                };
                Response.PaginatedShops response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops7()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PostalCode = "5332783",
                    Address = "US6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZXmsoGSwaJTi7OUK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2Ra1BMEr62gevnEoyfpAANnkoel9aD",
                    Tel = "038655-1456",
                    Email = "5bTvMyHpd2@S0WD.com",
                    ExternalId = "3FaqRKAgoYEGpNOGzwWmNqL0QHxylFW",
                    Page = 6715,
                    PerPage = 4995
                };
                Response.PaginatedShops response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops8()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Name = "u94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpq",
                    PostalCode = "8448831",
                    Address = "dnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7s",
                    Tel = "0487651",
                    Email = "BCUmbexHlO@YPdR.com",
                    ExternalId = "D",
                    Page = 6227,
                    PerPage = 9853
                };
                Response.PaginatedShops response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops9()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PrivateMoneyId = "937597c6-f4c5-4acb-bd29-557d254a3965",
                    Name = "bPAHiatKRmL7K8IMJIBW1vB1RC8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLiOm0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzP",
                    PostalCode = "624-0001",
                    Address = "c7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz2lX0WFgkUTJYHHOr63hjnglJCcSZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8",
                    Tel = "03578270",
                    Email = "OqOmjPQjCJ@Iqdu.com",
                    ExternalId = "yEzfF4ihEMnqIdNLL8T5msTmgqj81RXJ3",
                    Page = 6492,
                    PerPage = 8200
                };
                Response.PaginatedShops response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops10()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    OrganizationCode = "qx",
                    PrivateMoneyId = "bb4edf12-fdab-4899-ac7e-41f2c7163d7c",
                    Name = "Pa8fbLwdjVaS9JydpHqXjqW7D3uCGCdE3Z7gIcLSudPl4JIrQmLFWJxcGB9NLriuIsMTYyCUoOEa9YZaUNPTMagDSPeHLGCGYvgqbqCIdoPTyGfjAlvbOwBRftL3mTfJhTjDs9c8QNUGvnht1",
                    PostalCode = "359-2648",
                    Address = "wjqe7Rve16qe5BUa3mrtCxkktMbdZ0Ff5nebRZC0vDYNEWMfxXSVHRY4YZdsEswk",
                    Tel = "0694-146928",
                    Email = "jsUzeefEvU@98BI.com",
                    ExternalId = "4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H",
                    Page = 4790,
                    PerPage = 124
                };
                Response.PaginatedShops response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
