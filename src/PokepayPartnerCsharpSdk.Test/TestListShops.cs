// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListShops
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListShops0()
        {
            try {
                Request.ListShops request = new Request.ListShops();
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops1()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PerPage = 3846,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops2()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Page = 3806,
                    PerPage = 5940,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops3()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    WithDisabled = false,
                    Page = 9569,
                    PerPage = 696,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops4()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    ExternalId = "eydGENMPuSUGCPN",
                    WithDisabled = false,
                    Page = 9309,
                    PerPage = 6089,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops5()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Email = "ip0Y3dBWcN@dXe1.com",
                    ExternalId = "IjLSVztCspdpKcDGU85LATApzQ2dQG",
                    WithDisabled = true,
                    Page = 7180,
                    PerPage = 3197,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops6()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Tel = "0388405-6881",
                    Email = "fzmKZw4jAX@5TdV.com",
                    ExternalId = "ZA3FsBWHTaR7q8",
                    WithDisabled = true,
                    Page = 7402,
                    PerPage = 4809,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops7()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Address = "ovbTWoPNbCUX3WmvU0lnYW7MWulxJqejEoXiemEzy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv36YuE4jw",
                    Tel = "0009-4524",
                    Email = "4I5KLiOrRK@q3qx.com",
                    ExternalId = "t",
                    WithDisabled = false,
                    Page = 1469,
                    PerPage = 2120,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops8()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PostalCode = "9616221",
                    Address = "5uojwDmQdLNOKHIlDiaOh78QfhNbZ3YfGhlbqaOElvScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnAdDrY96Gn0OAQ9xSN0zfKx7ivixiVqjgvBNcsQLQxAtJmVTcXWtKUzkNd35gyuBKlwozbM8BIp6WWFtoNM3mKKWyblmmAHRS",
                    Tel = "06049-761",
                    Email = "0SY48ZoA8o@j9al.com",
                    ExternalId = "EKYDjBWPKCwbirzvScUvjsqVkcSInvOjFPI",
                    WithDisabled = true,
                    Page = 4282,
                    PerPage = 7843,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops9()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Name = "lVMwg0ANEHCj5eM805Swtsg2NkJBDvuxWoqdLq3QmHRbZpwbPRidVG7B6hajGJrCJBxTKH0YUW8iwJJuJPCjlaztijN3vebjT869RjYRPCqvnZ1Yzd",
                    PostalCode = "1327987",
                    Address = "XKNoGDpqqjYUa42N",
                    Tel = "0870-47183",
                    Email = "T9CjYdhYyR@9ZtW.com",
                    ExternalId = "MAKSZHQ2Tjahc0hASAcEi",
                    WithDisabled = true,
                    Page = 3605,
                    PerPage = 4510,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops10()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PrivateMoneyId = "e20c6be0-47ea-4405-9fbc-706b8cc70b75",
                    Name = "1fdQetgL0O7DlAFrkXVihIdQWu7J4NYirXryPP6taqbm6hsnA9hELkacVB4dzDqQ1LbTyVIgVP7fIz1xemnrDx9P7HPwLX5lwWZKuWWf4n5wNPq2rjN28QfQLnQ9Qr2gs4rAyEVt2ws7WkJzpgGUX4mtxobZ9ZC",
                    PostalCode = "0749172",
                    Address = "G6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFw",
                    Tel = "0914-3057793",
                    Email = "Dr0Djt9M12@BOno.com",
                    ExternalId = "cj",
                    WithDisabled = true,
                    Page = 7246,
                    PerPage = 1207,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops11()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    OrganizationCode = "j-se---3-",
                    PrivateMoneyId = "6a178a9b-a379-434d-a8ef-32b22121e702",
                    Name = "6iqol80j1t4n3lpnoezOx6Ov6eGwjQCqxdtQnDY4S9N4HhJ5rCsXRcUZY47cpIh03BvqB7CzLjYHoO28zEE65UlKtMCe12MUV2dxrA2428zEWnFZLX87qtedPzV8NdiYCurcmVOPZzwMWHgQ0VESfspW9b9NBdczTSynCfTiWLEN2pEbq7ZeB8PVJkE9NzaeTptZ5kX9rLpagdWQnEnTlLyubwibc5uG",
                    PostalCode = "994-3366",
                    Address = "pRZ5NX6gFb5nuODlmm9rpn022H3wQmNFzbLFmfFSz1uperYHhU5vbLxW8Yq15XpRuu",
                    Tel = "01-9990248",
                    Email = "YO2oQiAYMc@KkXB.com",
                    ExternalId = "WEu4RSjxgCW3jFlgob7yobgqdqFl",
                    WithDisabled = false,
                    Page = 9574,
                    PerPage = 4183,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
