// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListShops
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListShops0()
        {
            try {
                Request.ListShops request = new Request.ListShops();
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops1()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PerPage = 9588,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops2()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Page = 6595,
                    PerPage = 5135,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops3()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    WithDisabled = false,
                    Page = 1967,
                    PerPage = 1202,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops4()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    ExternalId = "k6p1M3AaDCD",
                    WithDisabled = false,
                    Page = 5945,
                    PerPage = 6486,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops5()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Email = "2M3hy0vfxt@wSmq.com",
                    ExternalId = "p6yKARh5ZRW",
                    WithDisabled = false,
                    Page = 76,
                    PerPage = 8797,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops6()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Tel = "09-4445-451",
                    Email = "uVlFabCqRi@kwgb.com",
                    ExternalId = "JfM",
                    WithDisabled = true,
                    Page = 8297,
                    PerPage = 1267,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops7()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Address = "TPQaRFRzLrLpSH0GqkthOAKJR8VBFpRQxxKQexm5F4TlRS3PsnDMFQKcrRJGtyzouTG0fNi1S",
                    Tel = "006707-6799",
                    Email = "ebwBbgsjlu@VjYr.com",
                    ExternalId = "ryI60OsM6yKVZ",
                    WithDisabled = true,
                    Page = 1030,
                    PerPage = 7805,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops8()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PostalCode = "956-0096",
                    Address = "npNVd9AFxrpWfPQQvIa1xbdNYJvyCZXCjbARIpuKvOzHCuCdyUUls75UdwXdZijuTLMB27QQHuatNtp6PKSLh839k28z03zy6Qc9GYSlX2n5lak1n33o382bj7JojzlN4lU5sMlhBuyia62bkzzlqIc0ydT6mqiA8RNdj3UyTqHUrIwecp",
                    Tel = "0480793-1558",
                    Email = "aMJL6dBoxy@3dS4.com",
                    ExternalId = "GnuDl1WGraodKKbLrRBG",
                    WithDisabled = false,
                    Page = 5475,
                    PerPage = 390,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops9()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Name = "LtxgB5z5qrK2mXuD0UWST9ldTa29xEBfE4j",
                    PostalCode = "1790355",
                    Address = "aw81ksIPXpJoHnKZwzgtMuSjmXprQOJIDMtkxUA3CwMowYwsohy6o54EyGXhKAybq9is4L00eclCf6ygQgmzcLUKbT5feGtXeOgCjHXo",
                    Tel = "0848-490885",
                    Email = "DdYfk0Kl5l@QobW.com",
                    ExternalId = "MeUrTL0yrW2IFnoVrabBtuZMnnkajdA",
                    WithDisabled = false,
                    Page = 4398,
                    PerPage = 3243,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops10()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PrivateMoneyId = "4cad4c9f-2077-47da-8b61-d97ae4e4a08a",
                    Name = "ac8bckasxqrpu0M7pIUsW64iTD7nd9oi4jTu3F0HRYKCBEMlkDUnah6fkhvDARp5vX7MupP6FVnb6JjAKYX8HzepSQlFXs1g1p8h9cEw94TVm3QEXbRfQ4MBKBqC3S2iDFnRE3SwskPWs7mGvsLBFz2",
                    PostalCode = "490-3318",
                    Address = "5QIcpZb2q5YnZ6axCoTTIbjOEPBaRli2lUAMJ7CyG5TMfzsA0CzHGei6FNa5iNHS8ae3s1VgKjc7Q8j7Z0SWMLPnzw7xhc",
                    Tel = "027012483",
                    Email = "tgDKKsPg1t@K8tF.com",
                    ExternalId = "jwQnBp1nMIeAnY6Xeri5tCJDZsGcVm",
                    WithDisabled = false,
                    Page = 1818,
                    PerPage = 5249,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops11()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    OrganizationCode = "lqS25G-",
                    PrivateMoneyId = "bb79b4b8-f0ca-4fd8-bd5f-e0c1bcd4ee9b",
                    Name = "kOFKSHaiDX11U4V4mzkiQ9KgdufJCOqQoqEQic9b7rjANNhMIW5uX0nomeRn6xi8YDAJH7HJXNF3Oy8VhKyGvyermibojKhVPIv",
                    PostalCode = "019-8636",
                    Address = "olySSXeAcLtwR11xDAJrx0pv2XvsLcCeEcDmfq2CKw2F1KvbCjTFkaD9SEmE89oiZ9sjCAHNKHbkDV7xD9UgYkUYCn38T5jddntLP9wvyYD1qoSVwF6tpYAPGi6YnBQDM8MlLw6WNmhQ1XbNNNiRTERN1SPoqCbHjtLPWoEeyLYkaItEzRnlzKYkySdT2Gi04uqdwqTzZvD1PwMG5sUToLzAoDfdSJfprAX",
                    Tel = "094034-106",
                    Email = "GjNfTvZeWl@NcmF.com",
                    ExternalId = "OSukrPpaSteC",
                    WithDisabled = true,
                    Page = 7737,
                    PerPage = 5402,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
