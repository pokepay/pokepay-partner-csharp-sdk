// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListShops
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListShops0()
        {
            try {
                Request.ListShops request = new Request.ListShops();
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops1()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PerPage = 6924,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops2()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Page = 862,
                    PerPage = 9402,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops3()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    WithDisabled = true,
                    Page = 6390,
                    PerPage = 3113,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops4()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    ExternalId = "a6yj28Vdekz",
                    WithDisabled = true,
                    Page = 3374,
                    PerPage = 6467,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops5()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Email = "cFNLhJxrUK@m0ly.com",
                    ExternalId = "3ee",
                    WithDisabled = false,
                    Page = 9419,
                    PerPage = 3258,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops6()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Tel = "088970927",
                    Email = "Sg9POKUlcf@VM7o.com",
                    ExternalId = "c7ce3PdjaBiIyYOfh",
                    WithDisabled = true,
                    Page = 6157,
                    PerPage = 1746,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops7()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Address = "7Vs61lgX6q4dgGRVbvGTRQ4k8TlBsFFC5ZB6RLswBhJ4",
                    Tel = "0237617-610",
                    Email = "tXVq5e9OXe@t0GX.com",
                    ExternalId = "MVM77jiyzsbzlYLL3F0lKzdJuHKMEXi",
                    WithDisabled = true,
                    Page = 5191,
                    PerPage = 5297,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops8()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PostalCode = "052-3051",
                    Address = "YPvQI9MGCsnd9pk2kG6Tu8hRDk5ikLZj2H2KNv83vI4gMRg83OZHcEqhTgM3eNaJnVdhY2QV5YapLiK3uaGOk",
                    Tel = "096696593",
                    Email = "074gV7vBrN@PpUS.com",
                    ExternalId = "wwOZjZ6r1JcKQOOam0P7aiDNO",
                    WithDisabled = false,
                    Page = 6536,
                    PerPage = 3766,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops9()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Name = "4jvgwtrH6f4dyqsCN0ToFbOTs77EkPylPUMct1PSPGYkLs7XuysOZEgP8RBseW3x",
                    PostalCode = "403-8795",
                    Address = "aaEvba4IHnm8fSoU0qkbhd4XK0h9SZImvY3DSuv1omO3Ei2Hpd5JfGNVsANKaqTPRPUKAWKKLWW0dFVAaDAsJGi6Gdz9lz9llAua5K42CcIuptOnY2nlNaI8sGdk0zvYA0WLStsX7DoyaHJsHVDdXB3538EZc9",
                    Tel = "0741-49481060",
                    Email = "mEVW2RrRlD@E0L6.com",
                    ExternalId = "U",
                    WithDisabled = true,
                    Page = 5250,
                    PerPage = 2012,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops10()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PrivateMoneyId = "15f344cd-8554-4a3f-a0e1-7eb1728739f1",
                    Name = "N8piIbC9Pox",
                    PostalCode = "780-9354",
                    Address = "miYs4LzG1URnCh12Vp6ec3qnulZKmeQrbP0GKsWnfDrIU67lHJicDWbAKkHV3nXTyKjAPd2H4Rmz4jnal6MngNKVOgj00exHo5jSbNsVcwuQCF2Oe2zlUvcbRGIl4EvX14kxK6IeL3dd4j6",
                    Tel = "01-77-692",
                    Email = "GIBsWEdcLp@jhu7.com",
                    ExternalId = "uRTD2ehY02",
                    WithDisabled = true,
                    Page = 365,
                    PerPage = 6500,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops11()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    OrganizationCode = "b",
                    PrivateMoneyId = "caafec76-2af1-4e6e-a063-98b533e1baea",
                    Name = "GMBK6CF3gfhNgOREC7InVBBlAfNcZlpQomYCClXRAUqBPKGis2RBretQ1dwgD1Tm3CE2IWbmfyoTjoOObiDljyTGfeCs7wOUjf7cHtUt7Q7KDyTIT7nevlUiLs9Br",
                    PostalCode = "6680193",
                    Address = "Z",
                    Tel = "08-919138",
                    Email = "drV1JHDaIt@V4Qs.com",
                    ExternalId = "TUTAZNu",
                    WithDisabled = false,
                    Page = 6006,
                    PerPage = 4962,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
