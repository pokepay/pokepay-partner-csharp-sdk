// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListShops
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListShops0()
        {
            try {
                Request.ListShops request = new Request.ListShops();
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops1()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PerPage = 1226,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops2()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Page = 6609,
                    PerPage = 3417,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops3()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    WithDisabled = true,
                    Page = 133,
                    PerPage = 3618,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops4()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    ExternalId = "HbwzqWvCOPwgzbB",
                    WithDisabled = false,
                    Page = 5604,
                    PerPage = 7981,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops5()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Email = "4waQtEJJ6c@H0Zg.com",
                    ExternalId = "Ds6733rG0f6wwaCQfp2yrqFI1zO45",
                    WithDisabled = true,
                    Page = 6974,
                    PerPage = 2701,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops6()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Tel = "062457893",
                    Email = "6Y3JnoXnfh@I5Mg.com",
                    ExternalId = "TOjH7LQeWc71VZqe0TiiPcPUF0mWR",
                    WithDisabled = false,
                    Page = 8874,
                    PerPage = 7065,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops7()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Address = "nVPGX3t9DSdv",
                    Tel = "008-21512132",
                    Email = "yWpt5sh4oz@7j2z.com",
                    ExternalId = "wSPcSo0",
                    WithDisabled = false,
                    Page = 5210,
                    PerPage = 990,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops8()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PostalCode = "569-7007",
                    Address = "RMoVrIBYTVKLlkjt5dVQSfgKXB4v7TZyzO1xxxuZkmHJXBUjMMoA38T1u6H0XhfAySLLl3fi7KvBN268m7tID4z5OLiwk9GozyxVyGuWU1vBC3zEsNcJB2yCHHDEDyu4hhRZd4iVulN40SsH7wTVii6lQvMPgvXlL8N89BmZTrN64xjlRahBbAV7T9JjgJd",
                    Tel = "035-930354",
                    Email = "ylxYOhjM3m@FaXb.com",
                    ExternalId = "vZI6iiT0AEYTJZ22nyV4",
                    WithDisabled = true,
                    Page = 917,
                    PerPage = 1125,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops9()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    Name = "lUib7PRkE7tSgSNlXVRVvxj6xH1yyIVkS9hU0ECIKFsgh4O8WmhV3r52ICXGIBQTaygxm3ISvPMDTzvLf9zX523a9c5JqBj2SYXlZEYSr7scYVHOTQOc8rnVrquLm8B0c8PpqSnkO9u0FKnuRq3e3KKoq6q3PDRan",
                    PostalCode = "8319605",
                    Address = "mmV0eLbs1I60AS6MQgynUcNdlweVZDRyvmejhYSnIT0zCyRu4wgV4QaQVRkK5vRRrNwbRWoJ5YGW6CeYYNo01kxeiAgoaKUNXLGSooJBtv9s6np8w69i6FSBwpAOj0GRb8xx8lObg0vv5OtF6M",
                    Tel = "06785750",
                    Email = "gtZ5Fa9mUS@cogZ.com",
                    ExternalId = "iygE4BQ7z3A7ibP9CLTB2VDA3tD",
                    WithDisabled = false,
                    Page = 2273,
                    PerPage = 4157,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops10()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    PrivateMoneyId = "4db1768b-23c6-4f4c-b090-39d88729ca6e",
                    Name = "uLvpsNQHN4VxDT7hK65KlzVJB4pNBSkzWxfuxnyDXGIXMTUbdupc0D6yEDHiWA1xCGr47KOTYzViv4K7dYiXKMxgm5qcSYFbmx8vCUWJwIJdJtBFcc3Y",
                    PostalCode = "411-1841",
                    Address = "djDnrY9c9dwoiyLrl7ry0IPpTz4QEtbQNqSf5WyWDVMWJ6WVr3jHZaUySRc29pNhEQOV3R0Rdlk3DOyB5rnSCDo5ScoCoVlWrniPflU",
                    Tel = "02-86-2928",
                    Email = "6PuZCDM9zf@XAMc.com",
                    ExternalId = "FmDCsGT8z2wowFZD9T5W8jJeubVOUIy",
                    WithDisabled = false,
                    Page = 6463,
                    PerPage = 7020,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListShops11()
        {
            try {
                Request.ListShops request = new Request.ListShops() {
                    OrganizationCode = "-k-OKdJ1mj0-U",
                    PrivateMoneyId = "04c24241-cb14-4e3f-9fd9-ad2d68553409",
                    Name = "kcCxkTI9d7Jsn9QccjND7bGvda7aNMhJEC5G4oBiTstX0WiRjOhsNgtqOeIyyxRYP301J1FCXpsK10BIkXMaiCohSzDm3NK5TzpqbYPKW4gVWnyPJ2FmQP8BFdj782lCRzxTLYRU4iYcxZKxkyxykYpcFxdBc",
                    PostalCode = "106-2017",
                    Address = "YZAL7B1szB0NLLAN7US0RVDqOghPUWHnpEsjkFgzfdU9gvFrHt83zBZld6EzDqzY6baUbs5TYyZAtZdk44KUIK7OJf8hlavU1V24un8fV9LG7IXdfAKHdiM8w9hkL2WBX1YB0LIzhvPAAOUrWB3H5VdX3Ik3XYaumbjOKpriSHoFIQPi3iu61FZ7wj9Ku71rdIt6zagBtLwu",
                    Tel = "043708866",
                    Email = "xVu0zRL6m3@oTHw.com",
                    ExternalId = "Gwox4oIfOwcS2MBjikud277ceaXmS1",
                    WithDisabled = true,
                    Page = 2064,
                    PerPage = 6624,
                };
                Response.PaginatedShops response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
