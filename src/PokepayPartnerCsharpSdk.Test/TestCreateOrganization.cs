// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateOrganization
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateOrganization0()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "aOPh40uyY7zI",
                    "a1dLLxrHG11vw1vq47MweLd7PEXecikrpiqy8sfzPeC95z6SUSQpi9Wzm3lpy1cb2RHdUOA0t8u9bgfw5lRkS6OP4v7xcpJRU1gAPOZCWBu1LN9FJ0cnlAGNGxl68QC9Lc8mXM6C7FzYciEIbzm3gXQmkrBpe2Ig2RcyGTEKbRkheq6QL08QyyZhWxWZXOgJUUSaNEWIfPAbzyBHOj",
                    new string[]{"b9001153-7f3a-4163-9e12-01bb96e53acd"},
                    "2HIOB9HTAl@ispE.com",
                    "bZ0nm2AG9f@UVip.com"
                );
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization1()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "aOPh40uyY7zI",
                    "a1dLLxrHG11vw1vq47MweLd7PEXecikrpiqy8sfzPeC95z6SUSQpi9Wzm3lpy1cb2RHdUOA0t8u9bgfw5lRkS6OP4v7xcpJRU1gAPOZCWBu1LN9FJ0cnlAGNGxl68QC9Lc8mXM6C7FzYciEIbzm3gXQmkrBpe2Ig2RcyGTEKbRkheq6QL08QyyZhWxWZXOgJUUSaNEWIfPAbzyBHOj",
                    new string[]{"b9001153-7f3a-4163-9e12-01bb96e53acd"},
                    "2HIOB9HTAl@ispE.com",
                    "bZ0nm2AG9f@UVip.com"
                ) {
                    ContactName = "Ambz3OlMcIwPiDhPvFVPSC9IO8VxniaFu09a6CuuEqXlxnf5GR396SeNDqXXKEJV0JkE3TjLaqeZOsjEI7E22Wl6YSAD7vVGJBWjZfkSD8toOPMhnrU8KE3wpUrjUs8sizjd1z2FtADy5Q3C5jNeYsU9MpL2cFyrblmxyYFjVJ1ksDCEql83astJ4f63IhsEWYCV1aJM8EwjAmRBWR0j6oBZVp6NIn0X9ZNmVTX8mLedIikedmC30",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization2()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "aOPh40uyY7zI",
                    "a1dLLxrHG11vw1vq47MweLd7PEXecikrpiqy8sfzPeC95z6SUSQpi9Wzm3lpy1cb2RHdUOA0t8u9bgfw5lRkS6OP4v7xcpJRU1gAPOZCWBu1LN9FJ0cnlAGNGxl68QC9Lc8mXM6C7FzYciEIbzm3gXQmkrBpe2Ig2RcyGTEKbRkheq6QL08QyyZhWxWZXOgJUUSaNEWIfPAbzyBHOj",
                    new string[]{"b9001153-7f3a-4163-9e12-01bb96e53acd"},
                    "2HIOB9HTAl@ispE.com",
                    "bZ0nm2AG9f@UVip.com"
                ) {
                    BankAccountHolderName = "E",
                    ContactName = "hoI72w",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization3()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "aOPh40uyY7zI",
                    "a1dLLxrHG11vw1vq47MweLd7PEXecikrpiqy8sfzPeC95z6SUSQpi9Wzm3lpy1cb2RHdUOA0t8u9bgfw5lRkS6OP4v7xcpJRU1gAPOZCWBu1LN9FJ0cnlAGNGxl68QC9Lc8mXM6C7FzYciEIbzm3gXQmkrBpe2Ig2RcyGTEKbRkheq6QL08QyyZhWxWZXOgJUUSaNEWIfPAbzyBHOj",
                    new string[]{"b9001153-7f3a-4163-9e12-01bb96e53acd"},
                    "2HIOB9HTAl@ispE.com",
                    "bZ0nm2AG9f@UVip.com"
                ) {
                    BankAccount = "1024663",
                    BankAccountHolderName = "D",
                    ContactName = "42KbdvTX1CfA4ud9qfvPOSoxFI1UweO2XRdO2hY0pCC8FQpyDiFdYn6ST7vY9DrqkrzPV8",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization4()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "aOPh40uyY7zI",
                    "a1dLLxrHG11vw1vq47MweLd7PEXecikrpiqy8sfzPeC95z6SUSQpi9Wzm3lpy1cb2RHdUOA0t8u9bgfw5lRkS6OP4v7xcpJRU1gAPOZCWBu1LN9FJ0cnlAGNGxl68QC9Lc8mXM6C7FzYciEIbzm3gXQmkrBpe2Ig2RcyGTEKbRkheq6QL08QyyZhWxWZXOgJUUSaNEWIfPAbzyBHOj",
                    new string[]{"b9001153-7f3a-4163-9e12-01bb96e53acd"},
                    "2HIOB9HTAl@ispE.com",
                    "bZ0nm2AG9f@UVip.com"
                ) {
                    BankAccountType = "saving",
                    BankAccount = "",
                    BankAccountHolderName = " ",
                    ContactName = "kJOO2v1m3AEScwYzlsFCHOKfiqVfddqZXHyl9FtM3BiAbJG4RFalUDm4QOG36z0pAjeCTeiy225IXwhDEUvB4npxY9ubMTI7cGyilStc03UjxERdVoe6HFhJgKELPhJZ4V6jG807jn",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization5()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "aOPh40uyY7zI",
                    "a1dLLxrHG11vw1vq47MweLd7PEXecikrpiqy8sfzPeC95z6SUSQpi9Wzm3lpy1cb2RHdUOA0t8u9bgfw5lRkS6OP4v7xcpJRU1gAPOZCWBu1LN9FJ0cnlAGNGxl68QC9Lc8mXM6C7FzYciEIbzm3gXQmkrBpe2Ig2RcyGTEKbRkheq6QL08QyyZhWxWZXOgJUUSaNEWIfPAbzyBHOj",
                    new string[]{"b9001153-7f3a-4163-9e12-01bb96e53acd"},
                    "2HIOB9HTAl@ispE.com",
                    "bZ0nm2AG9f@UVip.com"
                ) {
                    BankBranchCode = "",
                    BankAccountType = "current",
                    BankAccount = "5",
                    BankAccountHolderName = " ",
                    ContactName = "SZTliY3BcoO0R3ofHxO79PyMPuNxlOm9TssUDzbSN9easDT5qaXE9oVV6dzFzoMTL1nMwdKXWkN1V7WK5N3KEyrv8oYx3uFnGQ6ZUjk",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization6()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "aOPh40uyY7zI",
                    "a1dLLxrHG11vw1vq47MweLd7PEXecikrpiqy8sfzPeC95z6SUSQpi9Wzm3lpy1cb2RHdUOA0t8u9bgfw5lRkS6OP4v7xcpJRU1gAPOZCWBu1LN9FJ0cnlAGNGxl68QC9Lc8mXM6C7FzYciEIbzm3gXQmkrBpe2Ig2RcyGTEKbRkheq6QL08QyyZhWxWZXOgJUUSaNEWIfPAbzyBHOj",
                    new string[]{"b9001153-7f3a-4163-9e12-01bb96e53acd"},
                    "2HIOB9HTAl@ispE.com",
                    "bZ0nm2AG9f@UVip.com"
                ) {
                    BankBranchName = "uDzL1kINhlYHLw7eGbmo6z2mwFW2G7CePrEb6qc1vzC0TUXZ7gJxmZb",
                    BankBranchCode = "343",
                    BankAccountType = "other",
                    BankAccount = "6346",
                    BankAccountHolderName = "/",
                    ContactName = "44SiHUuKLea6KXKMTxnuRpjgiK",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization7()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "aOPh40uyY7zI",
                    "a1dLLxrHG11vw1vq47MweLd7PEXecikrpiqy8sfzPeC95z6SUSQpi9Wzm3lpy1cb2RHdUOA0t8u9bgfw5lRkS6OP4v7xcpJRU1gAPOZCWBu1LN9FJ0cnlAGNGxl68QC9Lc8mXM6C7FzYciEIbzm3gXQmkrBpe2Ig2RcyGTEKbRkheq6QL08QyyZhWxWZXOgJUUSaNEWIfPAbzyBHOj",
                    new string[]{"b9001153-7f3a-4163-9e12-01bb96e53acd"},
                    "2HIOB9HTAl@ispE.com",
                    "bZ0nm2AG9f@UVip.com"
                ) {
                    BankCode = "9454",
                    BankBranchName = "hsCVHvt0FegcXhZNGhoP3dbXW7",
                    BankBranchCode = "569",
                    BankAccountType = "saving",
                    BankAccount = "9",
                    BankAccountHolderName = "\\",
                    ContactName = "12cWukEiPRDcMrsI69et7tZGcxsWh3x4WMFG9JtXGOrRTCDsNsdOxykdQVM02fdP8dPWgv17gnjksnVKZ2Yg2XW7z7bqKh4VDMi81vkZfIvFF2aVGBrt4d4BQcmvC7IyShbMWHW8OrxkYJbese",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization8()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "aOPh40uyY7zI",
                    "a1dLLxrHG11vw1vq47MweLd7PEXecikrpiqy8sfzPeC95z6SUSQpi9Wzm3lpy1cb2RHdUOA0t8u9bgfw5lRkS6OP4v7xcpJRU1gAPOZCWBu1LN9FJ0cnlAGNGxl68QC9Lc8mXM6C7FzYciEIbzm3gXQmkrBpe2Ig2RcyGTEKbRkheq6QL08QyyZhWxWZXOgJUUSaNEWIfPAbzyBHOj",
                    new string[]{"b9001153-7f3a-4163-9e12-01bb96e53acd"},
                    "2HIOB9HTAl@ispE.com",
                    "bZ0nm2AG9f@UVip.com"
                ) {
                    BankName = "fuwz6QVslbgmox4sylqaj0m4NHRO5Zx",
                    BankCode = "",
                    BankBranchName = "4O3NjLEysHxuDJHz",
                    BankBranchCode = "863",
                    BankAccountType = "other",
                    BankAccount = "7714",
                    BankAccountHolderName = "\\",
                    ContactName = "bVQMVNIv43CsGJ1N1Ty1LpoGWtPPIzjjzRC7Vh9LObliCnClJEf5Qg177zO5rbJQyEp",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
