// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateOrganization
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateOrganization0()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "L5k",
                    "gs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKf",
                    new string[]{"4d329243-8190-48a8-b92f-84361ea67a44", "9d92f240-735f-4929-8f7c-ea1dc576ac5c", "d35331c2-123f-4aa5-8d88-18f6d85a6380"},
                    "uC0QTfx8l2@ZZBj.com",
                    "yQqeO19KhF@rkxi.com"
                );
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization1()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "L5k",
                    "gs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKf",
                    new string[]{"4d329243-8190-48a8-b92f-84361ea67a44", "9d92f240-735f-4929-8f7c-ea1dc576ac5c", "d35331c2-123f-4aa5-8d88-18f6d85a6380"},
                    "uC0QTfx8l2@ZZBj.com",
                    "yQqeO19KhF@rkxi.com"
                ) {
                    ContactName = "RAQ6FFjz1wnjIRjO9MofqJJncHBCR1qP1zId4mLJCzHpOgkhaasWI8ELqJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCF",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization2()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "L5k",
                    "gs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKf",
                    new string[]{"4d329243-8190-48a8-b92f-84361ea67a44", "9d92f240-735f-4929-8f7c-ea1dc576ac5c", "d35331c2-123f-4aa5-8d88-18f6d85a6380"},
                    "uC0QTfx8l2@ZZBj.com",
                    "yQqeO19KhF@rkxi.com"
                ) {
                    BankAccountHolderName = " ",
                    ContactName = "0Qv1brn8ATMTNMMEyVApkaDeYuOtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization3()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "L5k",
                    "gs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKf",
                    new string[]{"4d329243-8190-48a8-b92f-84361ea67a44", "9d92f240-735f-4929-8f7c-ea1dc576ac5c", "d35331c2-123f-4aa5-8d88-18f6d85a6380"},
                    "uC0QTfx8l2@ZZBj.com",
                    "yQqeO19KhF@rkxi.com"
                ) {
                    BankAccount = "63561",
                    BankAccountHolderName = "(",
                    ContactName = "Uyw97H5Wi0UlM5hWRopq8fm3QjwrUJDS6QIEgbGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1Gk",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization4()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "L5k",
                    "gs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKf",
                    new string[]{"4d329243-8190-48a8-b92f-84361ea67a44", "9d92f240-735f-4929-8f7c-ea1dc576ac5c", "d35331c2-123f-4aa5-8d88-18f6d85a6380"},
                    "uC0QTfx8l2@ZZBj.com",
                    "yQqeO19KhF@rkxi.com"
                ) {
                    BankAccountType = "other",
                    BankAccount = "",
                    BankAccountHolderName = "｢",
                    ContactName = "39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5BruF5QOJx8zwWTQtwhgEUQrpqVtFI20RqU84wWVej7KjR7",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization5()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "L5k",
                    "gs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKf",
                    new string[]{"4d329243-8190-48a8-b92f-84361ea67a44", "9d92f240-735f-4929-8f7c-ea1dc576ac5c", "d35331c2-123f-4aa5-8d88-18f6d85a6380"},
                    "uC0QTfx8l2@ZZBj.com",
                    "yQqeO19KhF@rkxi.com"
                ) {
                    BankBranchCode = "",
                    BankAccountType = "current",
                    BankAccount = "58",
                    BankAccountHolderName = "ﾔ",
                    ContactName = "2btzI2HvKaIy1dRKuzOlLMmdBSZr220xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization6()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "L5k",
                    "gs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKf",
                    new string[]{"4d329243-8190-48a8-b92f-84361ea67a44", "9d92f240-735f-4929-8f7c-ea1dc576ac5c", "d35331c2-123f-4aa5-8d88-18f6d85a6380"},
                    "uC0QTfx8l2@ZZBj.com",
                    "yQqeO19KhF@rkxi.com"
                ) {
                    BankBranchName = "IXmI4PlPvyiodipyOhBLvJd18F7msVClYIZ6Bq4ZCm153pAwidsKM1Zph",
                    BankBranchCode = "",
                    BankAccountType = "saving",
                    BankAccount = "94472",
                    BankAccountHolderName = "ｺ",
                    ContactName = "qmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ1h8km",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization7()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "L5k",
                    "gs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKf",
                    new string[]{"4d329243-8190-48a8-b92f-84361ea67a44", "9d92f240-735f-4929-8f7c-ea1dc576ac5c", "d35331c2-123f-4aa5-8d88-18f6d85a6380"},
                    "uC0QTfx8l2@ZZBj.com",
                    "yQqeO19KhF@rkxi.com"
                ) {
                    BankCode = "1001",
                    BankBranchName = "Z0UMnnwlo100h7H4BT2IdLeJZDTCEk",
                    BankBranchCode = "",
                    BankAccountType = "other",
                    BankAccount = "7959",
                    BankAccountHolderName = " ",
                    ContactName = "Ilt759XkPd0Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cUJMuQ1t83oitBAmKCKeNp7Z6KeHafoOKYuUs7zf9dIsiva1vYlz4sIXfB3ep9eHnNy54z9YZjsWtY1WGlubcf8poH65gFI1eD4xOb3KkBBLy",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateOrganization8()
        {
            try {
                Request.CreateOrganization request = new Request.CreateOrganization(
                    "L5k",
                    "gs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKf",
                    new string[]{"4d329243-8190-48a8-b92f-84361ea67a44", "9d92f240-735f-4929-8f7c-ea1dc576ac5c", "d35331c2-123f-4aa5-8d88-18f6d85a6380"},
                    "uC0QTfx8l2@ZZBj.com",
                    "yQqeO19KhF@rkxi.com"
                ) {
                    BankName = "mzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH",
                    BankCode = "",
                    BankBranchName = "jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrg",
                    BankBranchCode = "",
                    BankAccountType = "saving",
                    BankAccount = "",
                    BankAccountHolderName = "\\",
                    ContactName = "1Ud9jBS9CQqv6T7eIQXHJd8SnpNPnO39WNWvjXlHUhCIHkbLQ7KL6y3Sdoxdn1tpYM1z5XMrmRY7bQCW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp",
                };
                Response.Organization response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
