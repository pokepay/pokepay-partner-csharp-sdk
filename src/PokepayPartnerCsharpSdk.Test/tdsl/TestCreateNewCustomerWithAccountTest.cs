// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class CreateNewCustomerWithAccountTest
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task testCreateNewCustomerWithAccount()
        {
            string user_name = "user-name" + Util.RandomString(6);
            string account_name = "account-name" + Util.RandomString(6);
            Response.AccountWithUser customer_account = await new Request.CreateCustomerAccount(
                "4b138a4c-8944-4f98-a5c4-96d3c1c415eb"
            ) {

                UserName = user_name,
                AccountName = account_name,}
            .Send(client);
            Assert.AreEqual(user_name, customer_account.User.Name);
            Assert.AreEqual(account_name, customer_account.Name);
            string shop_name = "shop-name" + Util.RandomString(6);
            Response.ShopWithAccounts shop = await new Request.CreateShopV2(
                shop_name
            ) {

                PrivateMoneyIds = new string[]{
                    "4b138a4c-8944-4f98-a5c4-96d3c1c415eb"
                },
                CanTopupPrivateMoneyIds = new string[]{
                    "4b138a4c-8944-4f98-a5c4-96d3c1c415eb"
                },}
            .Send(client);
            Response.TransactionDetail topup_transaction = await new Request.CreateTopupTransaction(
                shop.Id,
                customer_account.User.Id,
                "4b138a4c-8944-4f98-a5c4-96d3c1c415eb"
            ) {

                MoneyAmount = 1000,
                PointAmount = 1000,}
            .Send(client);
            Assert.AreEqual(topup_transaction.Type, "topup");
            Response.TransactionDetail payment_transaction = await new Request.CreatePaymentTransaction(
                shop.Id,
                customer_account.User.Id,
                "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",
                100
            ).Send(client);
            Response.Bill bill = await new Request.CreateBill(
                "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",
                shop.Id
            ).Send(client);
            Response.Bill bill_updated = await new Request.UpdateBill(
                bill.Id
            ) {

                Amount = 200.0,}
            .Send(client);
            Response.TransactionDetail bill_payment = await new Request.CreatePaymentTransactionWithBill(
                bill.Id,
                customer_account.User.Id
            ).Send(client);
            Assert.AreEqual(payment_transaction.Type, "payment");
            Assert.AreEqual(bill_payment.Type, "payment");
            Response.PaginatedTransactionV2 transactions = await new Request.ListTransactionsV2() {

                PrivateMoneyId = "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",
                ShopId = shop.Id,
                CustomerId = customer_account.User.Id,}
            .Send(client);
            Response.PaginatedBillTransaction bill_transactions = await new Request.ListBillTransactions() {

                PrivateMoneyId = "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",
                ShopId = shop.Id,
                CustomerId = customer_account.User.Id,}
            .Send(client);
            Assert.AreEqual(transactions.Count, 3);
            Assert.AreEqual(bill_transactions.Count, 1);
        }
    }
}
