// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateUserAccount
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateUserAccount0()
        {
            try {
                Request.CreateUserAccount request = new Request.CreateUserAccount(
                    "0e626e42-d5b8-4d63-9d25-3ebf17409b07",
                    "58a19cf7-f415-488a-a286-0a7e4f2e1cf1"
                );
                Response.AccountDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateUserAccount1()
        {
            try {
                Request.CreateUserAccount request = new Request.CreateUserAccount(
                    "0e626e42-d5b8-4d63-9d25-3ebf17409b07",
                    "58a19cf7-f415-488a-a286-0a7e4f2e1cf1"
                ) {
                    Metadata = "{\"key1\":\"foo\",\"key2\":\"bar\"}",
                };
                Response.AccountDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateUserAccount2()
        {
            try {
                Request.CreateUserAccount request = new Request.CreateUserAccount(
                    "0e626e42-d5b8-4d63-9d25-3ebf17409b07",
                    "58a19cf7-f415-488a-a286-0a7e4f2e1cf1"
                ) {
                    ExternalId = "ewaqsu2VKxSbmSedHaEAX1wl5O",
                    Metadata = "{\"key1\":\"foo\",\"key2\":\"bar\"}",
                };
                Response.AccountDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateUserAccount3()
        {
            try {
                Request.CreateUserAccount request = new Request.CreateUserAccount(
                    "0e626e42-d5b8-4d63-9d25-3ebf17409b07",
                    "58a19cf7-f415-488a-a286-0a7e4f2e1cf1"
                ) {
                    Name = "lRf3WBUjdgyCBXEjQU4SZbeH2U1n1K1QopU8p3xk3MVdlgrxvTVEFkPnjarxgdId9d",
                    ExternalId = "sUshq9HQ1VwhZdSEE5M6WK9cPQ4RCflcxrJW3KbEhEBy",
                    Metadata = "{\"key1\":\"foo\",\"key2\":\"bar\"}",
                };
                Response.AccountDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
