// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateUserAccount
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateUserAccount0()
        {
            try {
                Request.CreateUserAccount request = new Request.CreateUserAccount(
                    "75a9e1a3-b5cc-45c2-a228-bf672ac9e3b5",
                    "cbfd35c7-b1ab-4dfe-b993-2ccc0a0e7d52"
                );
                Response.AccountDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateUserAccount1()
        {
            try {
                Request.CreateUserAccount request = new Request.CreateUserAccount(
                    "75a9e1a3-b5cc-45c2-a228-bf672ac9e3b5",
                    "cbfd35c7-b1ab-4dfe-b993-2ccc0a0e7d52"
                ) {
                    Metadata = "{\"key1\":\"foo\",\"key2\":\"bar\"}",
                };
                Response.AccountDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateUserAccount2()
        {
            try {
                Request.CreateUserAccount request = new Request.CreateUserAccount(
                    "75a9e1a3-b5cc-45c2-a228-bf672ac9e3b5",
                    "cbfd35c7-b1ab-4dfe-b993-2ccc0a0e7d52"
                ) {
                    ExternalId = "BZrOPHjmtfrHXohaQw0vxMg2xQLtF5bbW5vv5445g",
                    Metadata = "{\"key1\":\"foo\",\"key2\":\"bar\"}",
                };
                Response.AccountDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateUserAccount3()
        {
            try {
                Request.CreateUserAccount request = new Request.CreateUserAccount(
                    "75a9e1a3-b5cc-45c2-a228-bf672ac9e3b5",
                    "cbfd35c7-b1ab-4dfe-b993-2ccc0a0e7d52"
                ) {
                    Name = "bZbtYWu51GngH6hxhfTtTMVP3fLGjMlTxuI5OEJmWuM4052MAxknf6gDVLd8sQipgaopVGILEJZsd3JDSPWLChoVbiyZp9DJaCzCR7NkkhNVmGmBjQ1zBJ1Vay1wUSCcfKmyz6Z43GUf3geFh4P6C7pWstm3ZQ3QKwEB6tSiM5N1mQAFoDCkGtkbricDceCBF78GtVVOSSLNcOKzrhEYUzajBiFIojHW2ir3bZiNeJg3kkFaH4KZLBTnR1f",
                    ExternalId = "cntkSPQO3rOZz9TNb",
                    Metadata = "{\"key1\":\"foo\",\"key2\":\"bar\"}",
                };
                Response.AccountDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
