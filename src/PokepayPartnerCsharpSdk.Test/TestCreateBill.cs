// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateBill
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateBill0()
        {
            try {
                Request.CreateBill request = new Request.CreateBill(
                    "bfb647e7-b28b-4466-ba90-cd0e92953d7e",
                    "8657be4d-08e0-4a78-8098-778478abcc22"
                );
                Response.Bill response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateBill1()
        {
            try {
                Request.CreateBill request = new Request.CreateBill(
                    "bfb647e7-b28b-4466-ba90-cd0e92953d7e",
                    "8657be4d-08e0-4a78-8098-778478abcc22"
                ) {
                    Description = "rAhk9FQa1FNseTwEfm396sgLTN3iCtukLmZMmwtjbNN8v5gMLAq90ccFhgJgAQyMMOtgVrbqPWKubtoyqOpm",
                };
                Response.Bill response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateBill2()
        {
            try {
                Request.CreateBill request = new Request.CreateBill(
                    "bfb647e7-b28b-4466-ba90-cd0e92953d7e",
                    "8657be4d-08e0-4a78-8098-778478abcc22"
                ) {
                    Amount = 8386.0,
                    Description = "zPJfhkSDmJgr4ovoQaZWaSWktCljYIOs3ED8Fvyjx5z9cud4jOvvDjSxjJWUpkztMPftvbUzaENVNiaMuzf17rXcaVYgmDBe3ui6xIP6hbCjNbsXkmA91NfLhXClS7RCf9mMpUOkNXgXQll5TTUskpSSJrkcVxjz2FuB0GDk5UQf056Mgur751Gqj0gnO",
                };
                Response.Bill response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
