// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListOrganizations
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListOrganizations0()
        {
            try {
                Request.ListOrganizations request = new Request.ListOrganizations(
                    "db6cdce5-f6b7-4d98-92f6-dde5725a4431"
                );
                Response.PaginatedOrganizations response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListOrganizations1()
        {
            try {
                Request.ListOrganizations request = new Request.ListOrganizations(
                    "db6cdce5-f6b7-4d98-92f6-dde5725a4431"
                ) {
                    Code = "qe5BUa3",
                };
                Response.PaginatedOrganizations response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListOrganizations2()
        {
            try {
                Request.ListOrganizations request = new Request.ListOrganizations(
                    "db6cdce5-f6b7-4d98-92f6-dde5725a4431"
                ) {
                    Name = "mrtC",
                    Code = "kktMbdZ0F",
                };
                Response.PaginatedOrganizations response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListOrganizations3()
        {
            try {
                Request.ListOrganizations request = new Request.ListOrganizations(
                    "db6cdce5-f6b7-4d98-92f6-dde5725a4431"
                ) {
                    PerPage = 8551,
                    Name = "nebRZC",
                    Code = "0vDYNEWMfx",
                };
                Response.PaginatedOrganizations response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListOrganizations4()
        {
            try {
                Request.ListOrganizations request = new Request.ListOrganizations(
                    "db6cdce5-f6b7-4d98-92f6-dde5725a4431"
                ) {
                    Page = 3902,
                    PerPage = 2644,
                    Name = "HRY4YZd",
                    Code = "Eswk",
                };
                Response.PaginatedOrganizations response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
