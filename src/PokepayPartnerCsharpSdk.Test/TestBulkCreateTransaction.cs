// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestBulkCreateTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task BulkCreateTransaction0()
        {
            try {
                Request.BulkCreateTransaction request = new Request.BulkCreateTransaction(
                    "8zwWTQtwhgEUQrpqVtFI20RqU",
                    "84w",
                    "WVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzO"
                );
                Response.BulkTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task BulkCreateTransaction1()
        {
            try {
                Request.BulkCreateTransaction request = new Request.BulkCreateTransaction(
                    "8zwWTQtwhgEUQrpqVtFI20RqU",
                    "84w",
                    "WVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzO"
                ) {
                    CallbackUrl = "L",
                };
                Response.BulkTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task BulkCreateTransaction2()
        {
            try {
                Request.BulkCreateTransaction request = new Request.BulkCreateTransaction(
                    "8zwWTQtwhgEUQrpqVtFI20RqU",
                    "84w",
                    "WVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzO"
                ) {
                    PrivateMoneyId = "75eada7d-140e-4d98-a0bd-73a8e125323a",
                    CallbackUrl = "BSZr2",
                };
                Response.BulkTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task BulkCreateTransaction3()
        {
            try {
                Request.BulkCreateTransaction request = new Request.BulkCreateTransaction(
                    "8zwWTQtwhgEUQrpqVtFI20RqU",
                    "84w",
                    "WVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzO"
                ) {
                    Description = "20xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXmI4PlPvyiodipyOhBLvJd18F7msVCl",
                    PrivateMoneyId = "c2881e59-c991-4d49-9ab6-29113a312142",
                    CallbackUrl = "4Z",
                };
                Response.BulkTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
