// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListAccountBalances
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListAccountBalances0()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "d329bda6-cfb1-4ec7-89d2-a0498b0a1478"
                );
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances1()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "d329bda6-cfb1-4ec7-89d2-a0498b0a1478"
                ) {
                    Direction = "asc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances2()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "d329bda6-cfb1-4ec7-89d2-a0498b0a1478"
                ) {
                    ExpiresAtTo = "2016-02-17T20:15:17.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances3()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "d329bda6-cfb1-4ec7-89d2-a0498b0a1478"
                ) {
                    ExpiresAtFrom = "2018-02-18T13:33:39.000000+09:00",
                    ExpiresAtTo = "2018-10-23T00:10:20.000000+09:00",
                    Direction = "asc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances4()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "d329bda6-cfb1-4ec7-89d2-a0498b0a1478"
                ) {
                    PerPage = 1922,
                    ExpiresAtFrom = "2016-07-22T14:52:25.000000+09:00",
                    ExpiresAtTo = "2020-09-23T06:16:17.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances5()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "d329bda6-cfb1-4ec7-89d2-a0498b0a1478"
                ) {
                    Page = 5299,
                    PerPage = 3913,
                    ExpiresAtFrom = "2022-10-26T06:44:05.000000+09:00",
                    ExpiresAtTo = "2021-05-06T03:48:18.000000+09:00",
                    Direction = "asc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
