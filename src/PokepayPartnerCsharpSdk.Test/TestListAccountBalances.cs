// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListAccountBalances
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListAccountBalances0()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "124a3fe8-1e88-4803-9195-15bbd1722f1a"
                );
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances1()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "124a3fe8-1e88-4803-9195-15bbd1722f1a"
                ) {
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances2()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "124a3fe8-1e88-4803-9195-15bbd1722f1a"
                ) {
                    ExpiresAtTo = "2021-05-19T16:07:19.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances3()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "124a3fe8-1e88-4803-9195-15bbd1722f1a"
                ) {
                    ExpiresAtFrom = "2018-05-08T14:00:21.000000+09:00",
                    ExpiresAtTo = "2019-08-29T14:43:17.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances4()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "124a3fe8-1e88-4803-9195-15bbd1722f1a"
                ) {
                    PerPage = 9044,
                    ExpiresAtFrom = "2015-11-13T07:54:24.000000+09:00",
                    ExpiresAtTo = "2023-12-17T09:40:00.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances5()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "124a3fe8-1e88-4803-9195-15bbd1722f1a"
                ) {
                    Page = 5673,
                    PerPage = 5586,
                    ExpiresAtFrom = "2022-06-09T18:09:43.000000+09:00",
                    ExpiresAtTo = "2017-11-03T08:44:37.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
