// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListAccountBalances
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListAccountBalances0()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "6f6c42e3-8943-4f74-ba27-c5cb5290106a"
                );
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances1()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "6f6c42e3-8943-4f74-ba27-c5cb5290106a"
                ) {
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances2()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "6f6c42e3-8943-4f74-ba27-c5cb5290106a"
                ) {
                    ExpiresAtTo = "2024-10-10T03:53:18.000000+09:00",
                    Direction = "asc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances3()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "6f6c42e3-8943-4f74-ba27-c5cb5290106a"
                ) {
                    ExpiresAtFrom = "2017-05-30T23:49:09.000000+09:00",
                    ExpiresAtTo = "2020-01-13T20:34:30.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances4()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "6f6c42e3-8943-4f74-ba27-c5cb5290106a"
                ) {
                    PerPage = 1614,
                    ExpiresAtFrom = "2016-06-24T06:06:55.000000+09:00",
                    ExpiresAtTo = "2020-11-22T02:36:04.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances5()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "6f6c42e3-8943-4f74-ba27-c5cb5290106a"
                ) {
                    Page = 1505,
                    PerPage = 5701,
                    ExpiresAtFrom = "2019-03-28T08:33:15.000000+09:00",
                    ExpiresAtTo = "2016-06-01T09:33:01.000000+09:00",
                    Direction = "desc",
                };
                Response.PaginatedAccountBalance response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
