// DO NOT EDIT: File is generated by code generator.
#nullable enable
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListAccountBalances
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListAccountBalances0()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "3640ac4c-2e6d-4426-9b46-41c2bd9b0ecd"
                );
                Response.PaginatedAccountBalance response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances1()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "3640ac4c-2e6d-4426-9b46-41c2bd9b0ecd"
                ) {
                    Direction = "asc"
                };
                Response.PaginatedAccountBalance response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances2()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "3640ac4c-2e6d-4426-9b46-41c2bd9b0ecd"
                ) {
                    ExpiresAtTo = "2023-01-15T03:20:22.000000+09:00",
                    Direction = "asc"
                };
                Response.PaginatedAccountBalance response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances3()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "3640ac4c-2e6d-4426-9b46-41c2bd9b0ecd"
                ) {
                    ExpiresAtFrom = "2018-03-03T20:21:53.000000+09:00",
                    ExpiresAtTo = "2025-01-10T04:46:02.000000+09:00",
                    Direction = "asc"
                };
                Response.PaginatedAccountBalance response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances4()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "3640ac4c-2e6d-4426-9b46-41c2bd9b0ecd"
                ) {
                    PerPage = 9061,
                    ExpiresAtFrom = "2017-05-31T01:36:36.000000+09:00",
                    ExpiresAtTo = "2022-03-09T11:53:53.000000+09:00",
                    Direction = "desc"
                };
                Response.PaginatedAccountBalance response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListAccountBalances5()
        {
            try {
                Request.ListAccountBalances request = new Request.ListAccountBalances(
                    "3640ac4c-2e6d-4426-9b46-41c2bd9b0ecd"
                ) {
                    Page = 7919,
                    PerPage = 130,
                    ExpiresAtFrom = "2025-05-20T02:28:44.000000+09:00",
                    ExpiresAtTo = "2020-07-10T22:07:30.000000+09:00",
                    Direction = "desc"
                };
                Response.PaginatedAccountBalance response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
