// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListCoupons
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListCoupons0()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "bc44764c-1bf1-4f1b-9a7d-20a757c827bf"
                );
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons1()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "bc44764c-1bf1-4f1b-9a7d-20a757c827bf"
                ) {
                    PerPage = 3351,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons2()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "bc44764c-1bf1-4f1b-9a7d-20a757c827bf"
                ) {
                    Page = 7812,
                    PerPage = 1825,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons3()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "bc44764c-1bf1-4f1b-9a7d-20a757c827bf"
                ) {
                    AvailableTo = "2018-09-02T00:21:19.000000+09:00",
                    Page = 9032,
                    PerPage = 908,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons4()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "bc44764c-1bf1-4f1b-9a7d-20a757c827bf"
                ) {
                    AvailableFrom = "2023-04-18T18:23:16.000000+09:00",
                    AvailableTo = "2016-05-17T17:33:03.000000+09:00",
                    Page = 137,
                    PerPage = 373,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons5()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "bc44764c-1bf1-4f1b-9a7d-20a757c827bf"
                ) {
                    AvailableShopName = "D9cO",
                    AvailableFrom = "2022-08-30T13:21:43.000000+09:00",
                    AvailableTo = "2025-06-10T18:56:11.000000+09:00",
                    Page = 7592,
                    PerPage = 9522,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons6()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "bc44764c-1bf1-4f1b-9a7d-20a757c827bf"
                ) {
                    IssuedShopName = "21",
                    AvailableShopName = "Vkj",
                    AvailableFrom = "2025-04-25T04:48:36.000000+09:00",
                    AvailableTo = "2020-09-13T23:32:42.000000+09:00",
                    Page = 4802,
                    PerPage = 2183,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons7()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "bc44764c-1bf1-4f1b-9a7d-20a757c827bf"
                ) {
                    CouponName = "AursWmY",
                    IssuedShopName = "lUcPFFH8O",
                    AvailableShopName = "O0g",
                    AvailableFrom = "2018-03-07T11:25:40.000000+09:00",
                    AvailableTo = "2016-06-18T04:21:00.000000+09:00",
                    Page = 3748,
                    PerPage = 8567,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons8()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "bc44764c-1bf1-4f1b-9a7d-20a757c827bf"
                ) {
                    CouponId = "Lk",
                    CouponName = "MJawdwCa",
                    IssuedShopName = "Z0f5A4WuoS",
                    AvailableShopName = "1IAZg",
                    AvailableFrom = "2020-03-24T06:57:19.000000+09:00",
                    AvailableTo = "2022-11-06T08:52:30.000000+09:00",
                    Page = 6727,
                    PerPage = 9471,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
