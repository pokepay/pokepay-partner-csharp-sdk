// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListCoupons
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListCoupons0()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "11f054f5-0f7c-4dac-a69d-64ae621661b3"
                );
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons1()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "11f054f5-0f7c-4dac-a69d-64ae621661b3"
                ) {
                    PerPage = 8922,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons2()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "11f054f5-0f7c-4dac-a69d-64ae621661b3"
                ) {
                    Page = 2147,
                    PerPage = 9331,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons3()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "11f054f5-0f7c-4dac-a69d-64ae621661b3"
                ) {
                    AvailableTo = "2022-11-30T15:55:45.000000+09:00",
                    Page = 1517,
                    PerPage = 3718,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons4()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "11f054f5-0f7c-4dac-a69d-64ae621661b3"
                ) {
                    AvailableFrom = "2021-01-26T02:58:53.000000+09:00",
                    AvailableTo = "2023-10-30T15:58:06.000000+09:00",
                    Page = 3689,
                    PerPage = 6512,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons5()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "11f054f5-0f7c-4dac-a69d-64ae621661b3"
                ) {
                    AvailableShopName = "F4dC",
                    AvailableFrom = "2020-04-10T09:36:04.000000+09:00",
                    AvailableTo = "2023-02-08T00:52:53.000000+09:00",
                    Page = 4759,
                    PerPage = 874,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons6()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "11f054f5-0f7c-4dac-a69d-64ae621661b3"
                ) {
                    IssuedShopName = "LQRCAlQboU",
                    AvailableShopName = "K",
                    AvailableFrom = "2022-04-12T09:18:49.000000+09:00",
                    AvailableTo = "2023-03-18T10:44:36.000000+09:00",
                    Page = 5804,
                    PerPage = 3844,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons7()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "11f054f5-0f7c-4dac-a69d-64ae621661b3"
                ) {
                    CouponName = "nnn4tKblM",
                    IssuedShopName = "G",
                    AvailableShopName = "EY6YeD7",
                    AvailableFrom = "2021-02-21T03:59:25.000000+09:00",
                    AvailableTo = "2022-07-26T06:45:19.000000+09:00",
                    Page = 7387,
                    PerPage = 6505,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons8()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "11f054f5-0f7c-4dac-a69d-64ae621661b3"
                ) {
                    CouponId = "q",
                    CouponName = "yc",
                    IssuedShopName = "qvCdeqYtL",
                    AvailableShopName = "hF8",
                    AvailableFrom = "2022-05-10T06:41:39.000000+09:00",
                    AvailableTo = "2022-06-12T10:03:26.000000+09:00",
                    Page = 6432,
                    PerPage = 4494,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
