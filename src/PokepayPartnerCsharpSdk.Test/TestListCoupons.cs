// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListCoupons
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListCoupons0()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "1e053cbf-4880-43c4-8df7-1d468707ead1"
                );
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons1()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "1e053cbf-4880-43c4-8df7-1d468707ead1"
                ) {
                    PerPage = 2758,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons2()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "1e053cbf-4880-43c4-8df7-1d468707ead1"
                ) {
                    Page = 4216,
                    PerPage = 2156,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons3()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "1e053cbf-4880-43c4-8df7-1d468707ead1"
                ) {
                    AvailableTo = "2017-02-17T15:46:45.000000+09:00",
                    Page = 1878,
                    PerPage = 4670,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons4()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "1e053cbf-4880-43c4-8df7-1d468707ead1"
                ) {
                    AvailableFrom = "2025-02-05T18:03:50.000000+09:00",
                    AvailableTo = "2024-11-08T07:54:16.000000+09:00",
                    Page = 9167,
                    PerPage = 8555,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons5()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "1e053cbf-4880-43c4-8df7-1d468707ead1"
                ) {
                    AvailableShopName = "DbcUm",
                    AvailableFrom = "2017-04-14T13:26:34.000000+09:00",
                    AvailableTo = "2024-09-15T10:54:08.000000+09:00",
                    Page = 9334,
                    PerPage = 4260,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons6()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "1e053cbf-4880-43c4-8df7-1d468707ead1"
                ) {
                    IssuedShopName = "jnQfEMB",
                    AvailableShopName = "gsC2HA",
                    AvailableFrom = "2017-09-15T05:12:14.000000+09:00",
                    AvailableTo = "2021-01-27T07:35:08.000000+09:00",
                    Page = 5059,
                    PerPage = 5800,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons7()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "1e053cbf-4880-43c4-8df7-1d468707ead1"
                ) {
                    CouponName = "xHsgpXI",
                    IssuedShopName = "gsY6jwFCcZ",
                    AvailableShopName = "op0RHWvkl",
                    AvailableFrom = "2022-05-04T09:31:18.000000+09:00",
                    AvailableTo = "2019-05-05T01:22:58.000000+09:00",
                    Page = 4482,
                    PerPage = 7033,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons8()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "1e053cbf-4880-43c4-8df7-1d468707ead1"
                ) {
                    CouponId = "W5KzV8",
                    CouponName = "zQZUx",
                    IssuedShopName = "02LGg7xKO",
                    AvailableShopName = "fke",
                    AvailableFrom = "2022-07-15T08:22:24.000000+09:00",
                    AvailableTo = "2025-06-26T19:13:41.000000+09:00",
                    Page = 5129,
                    PerPage = 5025,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
