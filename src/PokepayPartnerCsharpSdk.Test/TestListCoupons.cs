// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListCoupons
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListCoupons0()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "4a46b616-ee66-4a54-ab23-c78a1b5c879d"
                );
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons1()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "4a46b616-ee66-4a54-ab23-c78a1b5c879d"
                ) {
                    PerPage = 3154,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons2()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "4a46b616-ee66-4a54-ab23-c78a1b5c879d"
                ) {
                    Page = 9710,
                    PerPage = 5373,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons3()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "4a46b616-ee66-4a54-ab23-c78a1b5c879d"
                ) {
                    AvailableTo = "2021-08-12T18:24:41.000000+09:00",
                    Page = 6129,
                    PerPage = 4670,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons4()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "4a46b616-ee66-4a54-ab23-c78a1b5c879d"
                ) {
                    AvailableFrom = "2016-04-19T01:44:15.000000+09:00",
                    AvailableTo = "2018-06-09T04:20:29.000000+09:00",
                    Page = 9915,
                    PerPage = 3541,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons5()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "4a46b616-ee66-4a54-ab23-c78a1b5c879d"
                ) {
                    AvailableShopName = "9Bxz",
                    AvailableFrom = "2018-08-03T11:16:18.000000+09:00",
                    AvailableTo = "2017-08-29T06:14:56.000000+09:00",
                    Page = 622,
                    PerPage = 4493,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons6()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "4a46b616-ee66-4a54-ab23-c78a1b5c879d"
                ) {
                    IssuedShopName = "C1",
                    AvailableShopName = "2P8KB",
                    AvailableFrom = "2021-11-04T01:46:36.000000+09:00",
                    AvailableTo = "2022-05-24T01:46:36.000000+09:00",
                    Page = 5603,
                    PerPage = 282,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons7()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "4a46b616-ee66-4a54-ab23-c78a1b5c879d"
                ) {
                    CouponName = "cWq",
                    IssuedShopName = "SM8l",
                    AvailableShopName = "qg",
                    AvailableFrom = "2023-04-15T10:36:33.000000+09:00",
                    AvailableTo = "2017-08-19T06:56:48.000000+09:00",
                    Page = 4073,
                    PerPage = 2684,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCoupons8()
        {
            try {
                Request.ListCoupons request = new Request.ListCoupons(
                    "4a46b616-ee66-4a54-ab23-c78a1b5c879d"
                ) {
                    CouponId = "V8d6IKjy",
                    CouponName = "gdmNM4",
                    IssuedShopName = "FQji",
                    AvailableShopName = "h",
                    AvailableFrom = "2020-05-11T08:51:26.000000+09:00",
                    AvailableTo = "2024-02-17T16:27:21.000000+09:00",
                    Page = 8691,
                    PerPage = 6454,
                };
                Response.PaginatedCoupons response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
