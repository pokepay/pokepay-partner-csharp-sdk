// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListCampaigns
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListCampaigns0()
        {
            try {
                Request.ListCampaigns request = new Request.ListCampaigns(
                    "f3463bc2-349f-41a0-bdd1-7649fd7843ed"
                );
                Response.PaginatedCampaigns response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCampaigns1()
        {
            try {
                Request.ListCampaigns request = new Request.ListCampaigns(
                    "f3463bc2-349f-41a0-bdd1-7649fd7843ed"
                ) {
                    PerPage = 3,
                };
                Response.PaginatedCampaigns response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCampaigns2()
        {
            try {
                Request.ListCampaigns request = new Request.ListCampaigns(
                    "f3463bc2-349f-41a0-bdd1-7649fd7843ed"
                ) {
                    Page = 4010,
                    PerPage = 31,
                };
                Response.PaginatedCampaigns response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCampaigns3()
        {
            try {
                Request.ListCampaigns request = new Request.ListCampaigns(
                    "f3463bc2-349f-41a0-bdd1-7649fd7843ed"
                ) {
                    AvailableTo = "2020-03-21T02:19:51.000000Z",
                    Page = 2212,
                    PerPage = 28,
                };
                Response.PaginatedCampaigns response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCampaigns4()
        {
            try {
                Request.ListCampaigns request = new Request.ListCampaigns(
                    "f3463bc2-349f-41a0-bdd1-7649fd7843ed"
                ) {
                    AvailableFrom = "2020-01-12T10:32:20.000000Z",
                    AvailableTo = "2023-11-03T13:07:02.000000Z",
                    Page = 5677,
                    PerPage = 19,
                };
                Response.PaginatedCampaigns response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCampaigns5()
        {
            try {
                Request.ListCampaigns request = new Request.ListCampaigns(
                    "f3463bc2-349f-41a0-bdd1-7649fd7843ed"
                ) {
                    IsOngoing = false,
                    AvailableFrom = "2022-05-01T12:37:02.000000Z",
                    AvailableTo = "2023-07-28T00:52:46.000000Z",
                    Page = 561,
                    PerPage = 34,
                };
                Response.PaginatedCampaigns response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
