// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListBills
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListBills0()
        {
            try {
                Request.ListBills request = new Request.ListBills();
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills1()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills2()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    UpperLimitAmount = 8374,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills3()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    LowerLimitAmount = 414,
                    UpperLimitAmount = 3796,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills4()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    ShopId = "db454cdb-2563-4ac8-b0e7-d118290fa6e1",
                    LowerLimitAmount = 937,
                    UpperLimitAmount = 3109,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills5()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    ShopName = "j8ZeP1HDPDTHzzRIdWxHjKy82N74miDUcOuIVqRIEU93kljq1Q8TjukgNdosrcsbqXkWqVhxkWkSbCcQV2KWKaXCJgJ38wW32AKvILX828FihWZQyqSbK0FMXzQI3K0upT8cYY",
                    ShopId = "94cc5713-2995-4c41-89a2-4575114060c5",
                    LowerLimitAmount = 3553,
                    UpperLimitAmount = 5130,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills6()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    CreatedTo = "2023-10-09T22:21:55.000000+09:00",
                    ShopName = "yo1Pr6ZXG8JSWzel5X6ggilnbIikjMsDtvgyHs8kXaVldBOvstCOu5vNtx3bBib1BS1IIGWD4",
                    ShopId = "874fa5ed-b7f0-49db-8954-3ad99a1b5897",
                    LowerLimitAmount = 9824,
                    UpperLimitAmount = 8975,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills7()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    CreatedFrom = "2020-04-02T18:45:34.000000+09:00",
                    CreatedTo = "2021-04-23T15:02:20.000000+09:00",
                    ShopName = "PcbcfJ8JMK49acleVRspcldtQ5tmURvImdniels4ZrQj5DbpL3fJFTwwcn9WP3m8VyuReCX",
                    ShopId = "fdbe7b8b-788f-4c00-a578-5635ad054457",
                    LowerLimitAmount = 2310,
                    UpperLimitAmount = 5672,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills8()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    Description = "s7Yv5KDLwBcz7zjgazophuiC1VR8XiXW8JGdOuAk94khcXRAwlFr4tlYuwMI02c6YHU8uGe8qGNvTmA6H2tH06f3cp",
                    CreatedFrom = "2020-08-28T22:18:38.000000+09:00",
                    CreatedTo = "2022-11-20T18:31:07.000000+09:00",
                    ShopName = "GDNNhHR4jcwCrCwplpzKOK41muEKIO2q9f",
                    ShopId = "f11af890-deb6-4b64-a11b-8551a0684435",
                    LowerLimitAmount = 7259,
                    UpperLimitAmount = 2726,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills9()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    OrganizationCode = "9-7z-8w3g4i0s-qc68-o8Z-X1I",
                    Description = "0mKrSXl5b4zkBhHXIiOwN14umNbs9HzTMzg2AFGgoFwChMKy",
                    CreatedFrom = "2024-03-08T02:15:34.000000+09:00",
                    CreatedTo = "2022-08-08T09:36:18.000000+09:00",
                    ShopName = "jnp6NWuVTvukHEJJxjvwAaSkrlPscgFZA7kgmnQGh0g7xEy0gjIfqsy3qqeO2uL3gmJXocI00jDfhi9nkYKzlD45lOs5FqPThDPFGAn6g717B9KAWVHYRkMJaQT0YWfQtgxVhq9RVZQG6j5A",
                    ShopId = "7d2e4932-835e-4c26-9b97-20be777d5ffd",
                    LowerLimitAmount = 5399,
                    UpperLimitAmount = 2300,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills10()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    PrivateMoneyId = "f64c70ea-1713-4f8e-96ae-45ef681ba46e",
                    OrganizationCode = "DfI8m6yK1Wqzvc4-Y64R3lG-HAr---Y",
                    Description = "XFJczCMVyjlRecAjobCopZKVFLb9UiV0XEmtc9iB2syyuELfawMoOZtkTktpas3rTKhS7CSUreJUtTC5W6xtdNcZmGzg6LOAwdB03Wi69g5bppku3R9lJVdDaUu8gKI7uxlsX8tJTVN",
                    CreatedFrom = "2021-11-25T19:10:18.000000+09:00",
                    CreatedTo = "2021-01-24T12:08:17.000000+09:00",
                    ShopName = "o4Avhi0fX5dozKzovfXQ3PHUhjHLVEtSIaxZ8O9N2SLzG35Urh2rbZx2aArvrKFEW0caD1nqOzKQjZCyx1Ep4VkAmGgvgI7Y",
                    ShopId = "e0022502-24e7-45bc-84d6-f9cb2470602d",
                    LowerLimitAmount = 1791,
                    UpperLimitAmount = 5791,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills11()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    BillId = "C9Rf",
                    PrivateMoneyId = "9492ff51-775b-4fe9-bbd3-22f0bef68154",
                    OrganizationCode = "3--Ef1-KE6-WX0z-64b50d-",
                    Description = "4YN59s59xIWGujcTxFFrrXyLyMOsteVH8YLvoUoraYyVUvoHuSd144X7ZEq8UGlMat7Q5BMcC1v73v60y8DMLWrlnr061xWZsz1ogogHitDMic7XGDhIwoiIw8buBfBCDG7j4DoWkpZIbqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7QMsIb",
                    CreatedFrom = "2022-02-20T21:04:58.000000+09:00",
                    CreatedTo = "2022-05-21T04:35:18.000000+09:00",
                    ShopName = "CAj1GsSvfXjxUW5PMdDuBsMe04PTf8vSsZQwwHu7ykbtkzGPhzROeLpMaUZfjz7mGpF3omDB92rueqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ95sfTG55oAI4VCG4sTwcYeFwcP7ZmLygXYRtjxN2aIco6xNkWo0aY",
                    ShopId = "f2691625-d1ae-44f2-b17d-a48924f7fcf9",
                    LowerLimitAmount = 5681,
                    UpperLimitAmount = 1611,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills12()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    PerPage = 8325,
                    BillId = "mQGL",
                    PrivateMoneyId = "1c61fd90-0b30-4427-894d-8c3357943445",
                    OrganizationCode = "--w",
                    Description = "yotPxhlRj2vkjikjfOo5Zy9zD8cfycxdjXF6cmwiKvevzAx7rHin0M",
                    CreatedFrom = "2023-05-31T16:56:40.000000+09:00",
                    CreatedTo = "2020-09-26T05:44:57.000000+09:00",
                    ShopName = "FpvhqZUg2yG4Wo0L4evFZLjpsodOQD43fZ5T5bk20dIu",
                    ShopId = "f9ebff8b-a9c2-417c-b021-e59791e29e97",
                    LowerLimitAmount = 6845,
                    UpperLimitAmount = 5183,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills13()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    Page = 9740,
                    PerPage = 3363,
                    BillId = "e25agSX",
                    PrivateMoneyId = "c0e1a4f9-56c5-49c7-a7be-48feb4db6ee9",
                    OrganizationCode = "y-5--4691-5rd-4V",
                    Description = "FUG9Fme9wlEEj2gZC8ckmFOzWRdKb11QTIHM0x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFy",
                    CreatedFrom = "2020-12-13T08:42:34.000000+09:00",
                    CreatedTo = "2022-10-30T09:23:29.000000+09:00",
                    ShopName = "fyt6Bg95FB",
                    ShopId = "29a2f902-17b1-46a5-8a61-302328a8b58c",
                    LowerLimitAmount = 3383,
                    UpperLimitAmount = 9289,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
