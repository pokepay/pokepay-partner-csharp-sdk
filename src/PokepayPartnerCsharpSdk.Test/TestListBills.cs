// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListBills
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListBills0()
        {
            try {
                Request.ListBills request = new Request.ListBills();
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills1()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills2()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    UpperLimitAmount = 6593,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills3()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    LowerLimitAmount = 6625,
                    UpperLimitAmount = 3111,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills4()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    ShopId = "6fbcee84-6012-4808-9007-ff262ca426cf",
                    LowerLimitAmount = 5475,
                    UpperLimitAmount = 6592,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills5()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    ShopName = "1Q7k5JeJZBQ8Lm6b2lK2ejnBuO8Z4mYRc0XY4V7oGjldCrVFeCzAS1owmgglINEYHO5BupRMc",
                    ShopId = "77ead338-cb39-4dc8-84d7-35209f97820e",
                    LowerLimitAmount = 6655,
                    UpperLimitAmount = 737,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills6()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    CreatedTo = "2022-02-02T04:57:58.000000+09:00",
                    ShopName = "Dz4gqYrwg2Kc8vrcyxXHZgssBBaMZHkUPWbPQfATuqGVc7tpuxiQUOrwUMHTJSTNFKniKVjMF8uKMMHFdIDDVFp6Km7U6MqhNKaeb0xTpXcGBHfhHzK6o8HkIEUBF2onl2UrHnbVVfut6rNSgtbliw36HjITSdTaxubYFUi2uoCRV5XCWSmppQ6H35UX6fR10405kZoqRfbkS9TVpZz3",
                    ShopId = "19f44c15-b29b-4bd5-9f1c-c4b93440bbb0",
                    LowerLimitAmount = 1194,
                    UpperLimitAmount = 876,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills7()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    CreatedFrom = "2022-12-15T22:28:34.000000+09:00",
                    CreatedTo = "2021-01-14T22:09:52.000000+09:00",
                    ShopName = "ILWfN2gIKEkkpYT0veKupr8y7oO45W1EwIPbJBf23IvUjcFrcwcFo65dw04ZZe10NItz9ixL",
                    ShopId = "f9b4af99-f78b-491d-ad6f-2e64a8649013",
                    LowerLimitAmount = 938,
                    UpperLimitAmount = 191,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills8()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    Description = "JxuAubtb",
                    CreatedFrom = "2022-05-07T12:16:18.000000+09:00",
                    CreatedTo = "2021-04-16T02:40:30.000000+09:00",
                    ShopName = "yFYv3JNP9melT5yaBudS667mHYNSHZLWoJ6Q3XwZJyYtmzvAE7IpHvA9e6i98HRa9q0EwEdpgBCSZdWwV1kI3mv1qvEq0MuKEiyY9QNigtOAb9ygBWlbVmKZDFZnH",
                    ShopId = "5354f37c-f3f1-43ad-9085-eb90d14f802c",
                    LowerLimitAmount = 6195,
                    UpperLimitAmount = 1619,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills9()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    OrganizationCode = "-h10krY-k-Q--rLR-6HgA1---4bJY",
                    Description = "dQRolivfDXOzXETonVFE6k2O5VKrXUKQMhfd3TYRFU2rEObUOepafql0slMRMxyoJvGEhegvvDN4Nz52vAjHV9F77UWLOw9FWobqlhyhduMlb6KikWW19KDN3tAbwF20yx6YX1TnSHqRjvneqvhqVXOwAzEFWNHX23LFJ3k6nAero",
                    CreatedFrom = "2021-01-15T07:58:21.000000+09:00",
                    CreatedTo = "2021-07-28T03:32:23.000000+09:00",
                    ShopName = "UrouaQkBB9",
                    ShopId = "52fcc87d-0333-4307-9f26-3d37a9420680",
                    LowerLimitAmount = 1454,
                    UpperLimitAmount = 5730,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills10()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    PrivateMoneyId = "8175a125-79e4-4e94-958a-0592372fcf2d",
                    OrganizationCode = "41",
                    Description = "LJqxGfft1Tbf41q4TkpLyf382phb4sE2KvgJJsNbIe7uqUlKdVzcBcMcxBsjzYhYJyboVeI2NqiBRR7x5nzPBNLYqJctsa",
                    CreatedFrom = "2022-10-14T07:30:03.000000+09:00",
                    CreatedTo = "2020-04-02T08:00:47.000000+09:00",
                    ShopName = "B426EcXBJqgt3XyVp80DAhbo2bZzdlkt0oJwyhzM7qw3NEj8fh7hjNtZ4ZcKjQTJC0kMb2lO80EVu",
                    ShopId = "c6649b5e-87d8-4614-8472-44030b1ddec9",
                    LowerLimitAmount = 795,
                    UpperLimitAmount = 7099,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills11()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    BillId = "u",
                    PrivateMoneyId = "3304d645-12e7-4a5a-88a5-d9edec02eff9",
                    OrganizationCode = "-I5WM5-gb",
                    Description = "b61etXbWEDp2X9hztbLFnLuNJ0FiOEAYcq9ibzyPCrKwy1AeWTkg5KDM9ZXjw1AfNTSI6g5wyoDFOT1uqrxAxmG9HkBlJ25xxgMh5Lzb3ya0GgNQcyT6O7kNWFW28nwm7sThJNMFkfOJlIkISrXir7ZrBTGkReQ01P3wk",
                    CreatedFrom = "2023-04-06T08:36:48.000000+09:00",
                    CreatedTo = "2022-10-05T10:24:29.000000+09:00",
                    ShopName = "FCCysO30NlWaZwU5zIEBb5Zij9yhX3hCb6Xzeg3fJlJOgNt0Xi4YgrguuC1pf7VKKdi0QfMjhrypLhwmdnu9IzLtVvz2LwvEE8Ixe8TCMN8GkANO4lcOg59GMANMZ",
                    ShopId = "aadc1932-e8e2-40d8-b1b4-5d130bf3469d",
                    LowerLimitAmount = 4965,
                    UpperLimitAmount = 6081,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills12()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    PerPage = 1246,
                    BillId = "nCjnAufL",
                    PrivateMoneyId = "0ff42b6d-87f4-4a61-a07e-65ec255958bc",
                    OrganizationCode = "a14t-nh4C0m-MAQ-63YC4c-p--L-5Z",
                    Description = "LNyXliq3Y9JFqQwQ1NeLN0BZcOp776ku",
                    CreatedFrom = "2023-01-19T18:51:32.000000+09:00",
                    CreatedTo = "2023-10-16T12:12:30.000000+09:00",
                    ShopName = "W42SstAgwALAClzVHE8pGXeB8qYI3QO",
                    ShopId = "f555cbb9-1606-421d-8e19-401c4f854f1e",
                    LowerLimitAmount = 6540,
                    UpperLimitAmount = 9121,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills13()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    Page = 5346,
                    PerPage = 4798,
                    BillId = "lHvfJru",
                    PrivateMoneyId = "12dabb31-f070-4903-b0ea-ca9277bbf85f",
                    OrganizationCode = "n-Q",
                    Description = "crqni3aruT0ZcDbbu13NvpReiTfPMcHveXO6ILiPMxqZ012ktX2CwsXBUkGAPov78I43Meb8QWhTb7tmCneE0MmYCR9BFZb0ROOIu0yWt9Q85D19krQKPgucM0LJTlb3G1WVIpv",
                    CreatedFrom = "2021-07-16T03:23:17.000000+09:00",
                    CreatedTo = "2021-01-28T20:03:14.000000+09:00",
                    ShopName = "17RRmEzpxpqxHOYmImUqbIZZbQ9faPlmvDhqYAH3OzquSd2ZXoINeVtgMQ2OPp1GLoV6SebIKlwxIHPpQPBWU6DIKLAAlBrqhl1Lw4Xd5M9hutXsysfXMzVGUducixqvqVIVtWTX",
                    ShopId = "732b4863-bc8d-4ad2-ace6-35c13c1df98a",
                    LowerLimitAmount = 6008,
                    UpperLimitAmount = 713,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
