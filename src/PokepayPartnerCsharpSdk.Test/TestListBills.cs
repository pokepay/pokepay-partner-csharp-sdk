// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListBills
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListBills0()
        {
            try {
                Request.ListBills request = new Request.ListBills();
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills1()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills2()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    UpperLimitAmount = 5799,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills3()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    LowerLimitAmount = 5990,
                    UpperLimitAmount = 2221,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills4()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    ShopId = "728adb16-2c48-4667-a58c-8c81f79c1663",
                    LowerLimitAmount = 1865,
                    UpperLimitAmount = 391,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills5()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    ShopName = "4FyRST7ScfdaiXI0aphnQpmaEH46JpxMwBWB66twUXazpjqxEREjqmyq",
                    ShopId = "5fb260ca-1c3b-4f92-abdb-d0c5febeff64",
                    LowerLimitAmount = 9702,
                    UpperLimitAmount = 9090,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills6()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    CreatedTo = "2020-04-23T07:33:03.000000+09:00",
                    ShopName = "viMgBpZAYBbcvRZzaI37qk5Qpl5Gz36NQavWZXSE0IrKdpz0FXntwLwsP6PlvtKfS7zk6Hoi0oeAT0NWEwBSET0oVnBy6crZKnvytNg93oYMrwaGFqX3wegLSKGRpqSEuwLWT9k07B088F",
                    ShopId = "244dd304-b210-4e0f-86e0-d425423cfde6",
                    LowerLimitAmount = 7374,
                    UpperLimitAmount = 3418,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills7()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    CreatedFrom = "2023-06-09T19:33:55.000000+09:00",
                    CreatedTo = "2025-06-05T18:37:46.000000+09:00",
                    ShopName = "L9APcDhFVXImIJBKStcO3wB304Jmf05hgJ0rNiPO7Acqsb1X8oQj9wf9SU4WjLK1VT02GEDFloz09QK5UFuC5JXRVayFf6oyQZu5",
                    ShopId = "67c97b81-30e0-4ab6-83c1-2b3138d95277",
                    LowerLimitAmount = 5463,
                    UpperLimitAmount = 1046,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills8()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    Description = "TTxm1brwQKhHT3R75Hu8YJJm39h1WaxTt5SssiAjKWyz1Cvo6cvEGDQNsufaSx2VVAwQqeQUNQCi",
                    CreatedFrom = "2016-10-04T02:10:18.000000+09:00",
                    CreatedTo = "2023-08-18T23:44:38.000000+09:00",
                    ShopName = "5yyQTl9w",
                    ShopId = "3114ffd4-e807-43ad-97bc-d78ca07ef95c",
                    LowerLimitAmount = 4189,
                    UpperLimitAmount = 7018,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills9()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    OrganizationCode = "be5-55I-Gv-F-0B-ni-l3-4",
                    Description = "sNuqqVdUDyaVdHFVHz0uI",
                    CreatedFrom = "2023-06-17T06:20:36.000000+09:00",
                    CreatedTo = "2023-11-17T21:44:37.000000+09:00",
                    ShopName = "FKJoDWeoZQYdDyUkA8",
                    ShopId = "5212260b-9706-402c-884d-6aeaa5ef9300",
                    LowerLimitAmount = 1965,
                    UpperLimitAmount = 1501,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills10()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    PrivateMoneyId = "c1ee567c-fff8-4ca8-9459-82e3234370f5",
                    OrganizationCode = "t17--34--63--8tg2L",
                    Description = "GfIfeAIGZfO7",
                    CreatedFrom = "2023-02-13T20:05:14.000000+09:00",
                    CreatedTo = "2017-11-22T15:13:57.000000+09:00",
                    ShopName = "r8B2QPQ9Y2Rpsj0heI1pcWBx1T31cQtfbPCATbfETgM8KooCtS8z1fc4bmpdjKCTfj1GK9RSuRp80JIGIfZb0zQJuIdXR7obZEoGLvyrYRSePLUjWmS1Vfe4rF1Hr4pu5zkebHCqAbvDaj08T6AqfU9VC96cIIeErItINWil5t",
                    ShopId = "22465104-4fc6-41e4-9e3e-26b5cb4612e6",
                    LowerLimitAmount = 9153,
                    UpperLimitAmount = 7839,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills11()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    BillId = "xEmA",
                    PrivateMoneyId = "c5125058-0dc3-4475-a3e1-74440e2eaf2d",
                    OrganizationCode = "T5Wbp-nA-l3--c-",
                    Description = "fpnmC2KuXyRgGfUfNENrDu8T1J2YZjgzjmCRB6BbdWS6JCIuNd5OFNrZXER72QaNrZpzYfcTDxwidoKxhgH4IlA44068ievlutMBS788",
                    CreatedFrom = "2019-10-30T01:13:03.000000+09:00",
                    CreatedTo = "2023-03-26T08:01:44.000000+09:00",
                    ShopName = "7UEqSzLy9xJxJq4hHbOAXXYVgVjKzFhmxuYV64qe5o2B2OlLXdk5kJbuw4YuJbyUdwtweakDyg0TFsZujDlCiTABlfIhphFt9MZHKK4Bljx7sJ424DF7dkePprAJ",
                    ShopId = "6f3f7075-6687-4b71-855f-960c1be02d86",
                    LowerLimitAmount = 7182,
                    UpperLimitAmount = 7107,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills12()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    PerPage = 4666,
                    BillId = "lGjqY",
                    PrivateMoneyId = "c0b49263-445b-41b5-b35b-825cd260ec6b",
                    OrganizationCode = "5C",
                    Description = "sHeK96R7zZjofXop8q4Bfps6VchHwOSBaSP",
                    CreatedFrom = "2018-02-11T04:05:59.000000+09:00",
                    CreatedTo = "2022-01-30T00:15:19.000000+09:00",
                    ShopName = "NKxM4bPYPan8UYIR",
                    ShopId = "0f47b898-66bc-47c1-89bf-8d93ca299ed3",
                    LowerLimitAmount = 3847,
                    UpperLimitAmount = 9618,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills13()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    Page = 263,
                    PerPage = 7988,
                    BillId = "nbw",
                    PrivateMoneyId = "f44aecd0-06ff-4839-b577-cc91c1596caf",
                    OrganizationCode = "0-0--u7G85n-9X4JF--w87--",
                    Description = "3fLMEPLjDOHvTYhO06QE7ACXnugqJAsKtBEhfGR87",
                    CreatedFrom = "2016-09-27T20:35:04.000000+09:00",
                    CreatedTo = "2017-03-29T03:20:33.000000+09:00",
                    ShopName = "zBbDtq5K3lfoJShMC6uD2oZ5QpD7GXwDffXUt",
                    ShopId = "6e75eadc-8406-4c3e-98c2-633b4d8e8b16",
                    LowerLimitAmount = 3001,
                    UpperLimitAmount = 2790,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
