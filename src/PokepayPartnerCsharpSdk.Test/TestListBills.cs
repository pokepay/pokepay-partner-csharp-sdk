// DO NOT EDIT: File is generated by code generator.
#nullable enable
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListBills
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListBills0()
        {
            try {
                Request.ListBills request = new Request.ListBills();
                Response.PaginatedBills response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills1()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills2()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    UpperLimitAmount = 6550,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills3()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    LowerLimitAmount = 5371,
                    UpperLimitAmount = 1502,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills4()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    ShopId = "0744757a-0466-40a2-9fd3-6d2dc831404e",
                    LowerLimitAmount = 503,
                    UpperLimitAmount = 2063,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills5()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    ShopName = "UPij0JCeKaErwIngTct5VctC8ahSG576Yk267hNuqsd2aOEu5ugI0fcKmGRUw7sMhCFW8ODbHkZSUPXBsmObvnHUjDTSSciw3PX7IImkvl5vCAHh7QD95u0YIcm0Sp2RluFOAxJTKKlkJp5ENq52OLTcJlnsa7zuy",
                    ShopId = "621c603a-c6b1-4df4-9d75-62f3e2935501",
                    LowerLimitAmount = 1015,
                    UpperLimitAmount = 5477,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills6()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    CreatedTo = "2024-02-09T16:55:33.000000+09:00",
                    ShopName = "Z1wrrgdxWfKkMLwrBpORQ9LHlnKRmCd4nadmeyKnqGyqpn3W7S36l34SSSOxW72gqSjd8QPzbjt0rt7UmerReZGbvGgvAZbyLJ1Lea6an4P1AnQALadFsAzgfKjbtuXgZDedIJqTHGgnOhGiwZBj5AvHdO2AtfcLabY2vDzXzQx3sP8V6IT9VFC5",
                    ShopId = "6a438f62-b511-446f-b093-638a0541d53f",
                    LowerLimitAmount = 344,
                    UpperLimitAmount = 4198,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills7()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    CreatedFrom = "2017-10-06T00:37:12.000000+09:00",
                    CreatedTo = "2022-10-15T14:09:50.000000+09:00",
                    ShopName = "8jPQ0hMJ4nPgNJOUuVI3xkUSOX0vTgyFK1FOp7pl9MWii2exAarzlUllrgsQZQAnUYeKIbZQuPYAKNLvTyMcIYlLoYSz5jRHNPv9LO3MtPyt1wTnktL8AYkBvD7caRgncONv8Kje2pUTWzADND",
                    ShopId = "195e4ee5-eb1d-4906-b8b7-82efe5592669",
                    LowerLimitAmount = 193,
                    UpperLimitAmount = 7876,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills8()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    Description = "B6ZsUUsk6umIdkjysmBoCy1Ud1e5PrxfXmPZX1V",
                    CreatedFrom = "2025-06-28T06:22:12.000000+09:00",
                    CreatedTo = "2022-10-09T02:35:10.000000+09:00",
                    ShopName = "ebv0ckwSJ4e9e0pY47yGoAwg28Msl4sq96mAewFZHEg2RF0uEHwK5Jbwu9JRSn5a7ymUxn4mfvD7ycun86BZW4IWD5GZy4J15w0ovSrq2HjQnZoVWhOdLDSpe9mEjTApY38vZyrfHaX2ePxiTIXhf26BicGgC0Q3onqPmyIzFPAF7SEHME8DlS2m5Kv5IbgTWsj7MinGr0IGEeLzU5ms0HjwVmUqLVvuFmzvx3MioePO7gkONN",
                    ShopId = "4faa4393-bfc1-4501-bb6a-b042c64b79ab",
                    LowerLimitAmount = 1219,
                    UpperLimitAmount = 729,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills9()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    OrganizationCode = "AsqS2Z-V79-dtNkY7",
                    Description = "xuQUV",
                    CreatedFrom = "2023-06-24T23:35:38.000000+09:00",
                    CreatedTo = "2022-08-08T06:45:21.000000+09:00",
                    ShopName = "ZD3LHlYNS3c0MUvvhZyFdpqg4zFLwpBAFUZ73GCZjYfwcSTcjOL0y0KRT0zFenF09DVyQoaELlrJk6MRPKi62IzWH9emhQ0CqvNNBrhyRg9xxzNXJhnMZrEqyRqPCGzbSmOoYCMUQNjvF4AYLzd022rwQVNfYYCfZZWpAcyBWwWi1DgvTt4hTTZowFPycMflfcbIe",
                    ShopId = "515d81cf-56c9-4e2d-8b3e-fcaf1c1fe59d",
                    LowerLimitAmount = 4965,
                    UpperLimitAmount = 6298,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills10()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    PrivateMoneyId = "864ea212-382c-493b-9df3-443f4fd60db0",
                    OrganizationCode = "Q0--Vm51xP51j-Uc-1fe-3Z-e---",
                    Description = "TscHpgaN0j8ZeP1HDPDTHzzRIdWxHjKy82N74miDUcOuIVqRIEU93kljq1Q8TjukgNdosrcsbqXkWqVhxkWkSbCcQV2KWKaXCJgJ38wW32AKvILX828FihWZQyqSbK0FMXzQI3K0upT8cYYAuEa7VHyo1Pr6ZXG8JSWzel5X6ggilnbIikjMsDt",
                    CreatedFrom = "2019-04-11T19:02:55.000000+09:00",
                    CreatedTo = "2016-03-28T17:19:29.000000+09:00",
                    ShopName = "Hs8kXaVldBOvstCOu5vNtx3bBib1BS1IIGWD4mpTYqNNFPcbcfJ8JMK49acle",
                    ShopId = "54afd3d6-a852-4a73-bc70-69e31ba6b2ec",
                    LowerLimitAmount = 868,
                    UpperLimitAmount = 2036,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills11()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    BillId = "5tmURvImdn",
                    PrivateMoneyId = "ed6fdaa7-91e9-45e5-9b29-8dec29b3be0c",
                    OrganizationCode = "DoRXh-Y-9SWD-l-fv-u",
                    Description = "Ys7Yv5K",
                    CreatedFrom = "2016-09-06T09:57:24.000000+09:00",
                    CreatedTo = "2023-02-14T22:10:18.000000+09:00",
                    ShopName = "cz7zjgazoph",
                    ShopId = "e79838f5-c921-4023-9669-1143c81ef931",
                    LowerLimitAmount = 9302,
                    UpperLimitAmount = 3548,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills12()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    PerPage = 447,
                    BillId = "XiXW8JGdO",
                    PrivateMoneyId = "5050d80d-c7ba-4f99-ad8b-b975c78d25bf",
                    OrganizationCode = "z",
                    Description = "uwMI02c6YHU8uGe8qGNvTmA",
                    CreatedFrom = "2021-03-11T17:24:05.000000+09:00",
                    CreatedTo = "2024-02-26T23:31:28.000000+09:00",
                    ShopName = "H06f3cpkGDNNhHR4jcwCrCwplpzKOK41muEKIO2q9f6dQ5BvDAnz25uvrmGGKjRYVWTh4n3trK0bvzHyQJ1u0mKrSXl5b4zkBhHXIiOwN14umNbs9HzTMzg2AFGgoFwChMKyFjnp6NWuVTvukHEJJxjvwAaSkrlPscgFZA7kgmnQGh0g7xEy0gjIfqsy3qqeO2uL3gmJXocI00jDfhi9nkYKzlD45lOs5FqPThDPFGAn6g717B9KA",
                    ShopId = "e1400ce0-47d7-451c-9618-89c8bbd88a9a",
                    LowerLimitAmount = 2172,
                    UpperLimitAmount = 8069,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills13()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    Page = 5228,
                    PerPage = 6990,
                    BillId = "aQT0YWfQtg",
                    PrivateMoneyId = "aa0d8a40-f689-4fdb-b8d6-736898ef5371",
                    OrganizationCode = "-4V-k1D8HboK--w-uW",
                    Description = "LerXQe8LjF8Q6qvpD5ZbBwXFvQ1skGDixXFJczCMVyjlRecAjobCopZKV",
                    CreatedFrom = "2024-12-05T21:24:47.000000+09:00",
                    CreatedTo = "2021-12-15T16:10:53.000000+09:00",
                    ShopName = "9UiV0XEmtc9iB2syyuELfawMoOZtkTktpas3rTKhS7CSUreJUtTC5W6xtdNcZmGzg6LOAwdB03Wi69g5bppku3R9lJVdDaUu8gKI7uxlsX8tJTVN1o4Avhi0fX5dozKzovfXQ3PHUhjHLVEtSIaxZ8O9N2SLzG35Urh2rbZx2aArvrKFEW0caD1nqOz",
                    ShopId = "ef491acb-060a-4810-910f-e7adbe43b402",
                    LowerLimitAmount = 2666,
                    UpperLimitAmount = 8542,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
