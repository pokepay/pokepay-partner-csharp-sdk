// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListBills
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListBills0()
        {
            try {
                Request.ListBills request = new Request.ListBills();
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills1()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills2()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    UpperLimitAmount = 8426,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills3()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    LowerLimitAmount = 4346,
                    UpperLimitAmount = 4429,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills4()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    ShopId = "8d044e89-3399-4bd0-a207-9dd535d7baae",
                    LowerLimitAmount = 500,
                    UpperLimitAmount = 8647,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills5()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    ShopName = "zXY1hbqFjN34KAxjCKyzX4vYX24NlChI1yLS7gQep4x37g0oD0fb3mipbhM8GcrRjw7z9CDHfSqZLYtGoI2R1JqXTrld1adXHxyrjenKdTtUAxD5b7hdhbG6LBTuNGrJDdYvL2cYQF0qnrrKKtCe",
                    ShopId = "4bd7d3f8-0706-41ed-a702-fa52304fca62",
                    LowerLimitAmount = 9471,
                    UpperLimitAmount = 6847,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills6()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    CreatedTo = "2021-07-19T16:47:13.000000+09:00",
                    ShopName = "qSsgNjfSxbV9yF5kYDmIUTQxiLIozbxa2p2k2dVK9pV2uqUhtIfvq4609cRzZ2diGwwziemP6D4Fzkw7EWoNexdF9xJIUsEySEHs3rNNNE7tEGUxq2gNlLJtZf4dX8oZnbf4LvdpDnUgP7YFdFRaOfmI9VMRpWVjdcFBj6YyR80VFD3sRok8KtAt20DVHwPglasJ6eM35B6LZGGAApVFpBXBSiJ2wTut5xTvW7sOLoBNRYdFxkKvv",
                    ShopId = "3c3e5b2a-2220-48c9-aead-94cd8e923c3e",
                    LowerLimitAmount = 9105,
                    UpperLimitAmount = 3498,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills7()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    CreatedFrom = "2024-08-13T10:11:01.000000+09:00",
                    CreatedTo = "2018-01-10T01:35:55.000000+09:00",
                    ShopName = "3RJwx2CwNz5zMIRwyRVFTM3PGJrIgO5GHhuyCRME8YegbxmCOKL0xGy0yCfAXpwpWPNeKUze0oauD1cvmwmgD4MOJZ9HVEKbBZkb4yKbcFn1BT9eseorAQn4vphXDbjyXE8TwzxsaZpPn7MPdTYZy7RnXxmM4J6S18NeMHynWkaxRy1ABfXCgcXT9EiPeZSgXG0M53BZLbjApMy2jmXESM1YYILKzNeTMSRB1pYUpRzdqtvjyjrrwFOHuo",
                    ShopId = "9feb1f8c-b8d0-4684-a263-58a40940bbb9",
                    LowerLimitAmount = 5824,
                    UpperLimitAmount = 5707,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills8()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    Description = "DcxqAaqgY0eUhMevoxLJ9pOEQZarEd2m3f8nPbqcf1Ul8e90ysvnyRtdk8y5fKTQfWh9RxNmoZ8jKOM2tzGaWRPtuXYb14U4kqSsWHzztTwHXacN0AsTms7apBwrdvKBIxJKCH9uqiLiF3rGNQItAr4IUNqiaQo1uSMzAcOCRkxRjvYu5Li",
                    CreatedFrom = "2024-05-26T07:28:28.000000+09:00",
                    CreatedTo = "2017-03-11T17:35:43.000000+09:00",
                    ShopName = "k2wKaerDFHG9UO17M4t209FIFgXGP6WpCKT12jHe2sK22Xnb26jIVWZVQPtXjMDZsgr7bp1A",
                    ShopId = "6b21187e-0871-4299-8f9f-341dcaf04c00",
                    LowerLimitAmount = 7781,
                    UpperLimitAmount = 3838,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills9()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    OrganizationCode = "X-j-MtdZ8ME7gE--O7iVj7vN-OfFO-",
                    Description = "3DJTHdAWUUlPjIeeiw5ZMmKDwBaINp7lEenC5dutjIuPx1Nn5YQemmuibL9QI",
                    CreatedFrom = "2025-05-29T17:05:54.000000+09:00",
                    CreatedTo = "2019-01-16T11:59:38.000000+09:00",
                    ShopName = "0JLpZORivJNIPV5aBTQzp3MM50dOaqlXLwm5l8ZfpzZURQV0u0giOnlo3wxMeC9E9tLJcZwOCa0EB57pXjboPySGMSw61OpRqpGLaO50itqeEohpGGLcybiCdMeiN005wqlG128Y80zuhjVDhd2pJkXzQ7VXA6uGY5FcfsVKOZztzme3qoevEJn8UjwZvGdgO887KnJGdxo7G6QfTYczDOmoIC9SpcwEDLy20mU4VYW9",
                    ShopId = "2bcb72eb-8826-49c9-9459-b655a35cf053",
                    LowerLimitAmount = 2088,
                    UpperLimitAmount = 343,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills10()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    PrivateMoneyId = "c78a4b8a-6613-40ff-a157-9a8f8b211073",
                    OrganizationCode = "--UT-pCg3f6-12v-N-2--09c",
                    Description = "npC8pX",
                    CreatedFrom = "2022-07-12T12:36:23.000000+09:00",
                    CreatedTo = "2025-01-19T04:27:38.000000+09:00",
                    ShopName = "4za55PbUdAJ7zTPls8cByk8eiWG3FPUus2kjYE8NnOh6mOEvBdbTLjfq4UnhMFpl6Wzj3YhODswxTqcRZPAGQYJPvkXADjoZq2OEHRyA1WWTe",
                    ShopId = "6b1e70ae-0717-4f3d-beed-bc2c34187f29",
                    LowerLimitAmount = 4524,
                    UpperLimitAmount = 1391,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills11()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    BillId = "wCDWM",
                    PrivateMoneyId = "510c81ab-2f00-4c2b-a189-40b60c58a3c6",
                    OrganizationCode = "3--2R--8RR0qa3eZ0U5-1g6Xz1kawP-",
                    Description = "AR",
                    CreatedFrom = "2020-05-20T17:58:37.000000+09:00",
                    CreatedTo = "2022-08-18T19:05:57.000000+09:00",
                    ShopName = "LhRBk4fCmHoAOVjumsEBNi5JQKbuzQbCTTzMyj3VdETXw8GPqeZUSOAzAYc1GQhu7PjTLvz8VboAr8rixMkUoSHtPFlXrEnwFXvZM2xCttrPGwxdbvO3WUvynxL3yB92b3trknsKjaqExWyVJ5mYxstBjMBgKnWMXc4wrQrwbvxzytwspq9xDi6SNzh9KdnSmSp1cinkxbXiPKvpdsm3DNRTpiCNsEzoO8DMWWVQy4",
                    ShopId = "0c7c9242-883d-4db4-806e-246c8ed7b505",
                    LowerLimitAmount = 6606,
                    UpperLimitAmount = 8949,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills12()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    PerPage = 2309,
                    BillId = "V8IfX6",
                    PrivateMoneyId = "7af2bc6d-001a-4d42-bd03-d996204ad490",
                    OrganizationCode = "f---WK1---3-qqv",
                    Description = "ZIH92nhwbLrTnxMtSMfcKxuAqqWFfBwsZGPxkAtOJWKHTb7EnzFWwilLeYKSAYxRJxF4B6JMhplWA3Pmq44zvGv2plOsrxJWYVtYTO0QKw3CWISZBaQ",
                    CreatedFrom = "2016-05-03T22:27:16.000000+09:00",
                    CreatedTo = "2023-07-03T15:08:34.000000+09:00",
                    ShopName = "ACFBAPdDNzwZ3iRKfkr4GHkf8P4ISxp78senjKEbnJkM7Edi3AZRidKbIFh7AxVzJkVsouyyvOXeQPYgZJkYTgOy2Gq9WodqGV3kd8JZcGo1LiT3M5ZClr20QPZuuF31oqWJPSU4x",
                    ShopId = "ac909395-69dc-4706-b69e-acea6ab8906d",
                    LowerLimitAmount = 9861,
                    UpperLimitAmount = 5150,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills13()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    Page = 6986,
                    PerPage = 8064,
                    BillId = "f6",
                    PrivateMoneyId = "3d86037d-5342-4db2-9e97-f669959405e8",
                    OrganizationCode = "fFYY29-684--sp8-8-U-ToW",
                    Description = "kiBAFaBrxsXUwN2lg9smmZkieXvVR5mogtpP6nUudKUJzxAlZNfGRBxBcJbWYJWkp2KOVSDboQ0Sve8J7BrA",
                    CreatedFrom = "2025-03-04T18:19:49.000000+09:00",
                    CreatedTo = "2017-12-14T12:11:27.000000+09:00",
                    ShopName = "0zpFAFX15nXTfDGyqh99Vd36FOZDodqjNHAboTzyLshValeZMTLn16fmbIYEtucicJr2ZVXclELOrGESeyXGzrtkTwMCi7B2dugAFr6sIFDlRt2Mn9HhrZaF564Pvq8Eb173vdt9ajXPMVdP0bp9qvFiyq1cuEBtOwx8FUfsNRln8",
                    ShopId = "b153b769-b819-4499-94a5-e6eb076f9a38",
                    LowerLimitAmount = 2725,
                    UpperLimitAmount = 9226,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
