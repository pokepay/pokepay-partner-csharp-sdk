// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListBills
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListBills0()
        {
            try {
                Request.ListBills request = new Request.ListBills();
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills1()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills2()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    UpperLimitAmount = 8423,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills3()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    LowerLimitAmount = 6563,
                    UpperLimitAmount = 2635,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills4()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    ShopId = "15d86b91-30ee-45af-91a3-b67f1fdd4a65",
                    LowerLimitAmount = 4574,
                    UpperLimitAmount = 9732,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills5()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    ShopName = "jIgxNyfmbEhGmJJMzYucWYrm4KgzKAz4l9QicZCCJ0A05jBfSeBTBvHCxU1NvY",
                    ShopId = "17d7537b-5ae6-40d6-9cc5-96c07055f653",
                    LowerLimitAmount = 4537,
                    UpperLimitAmount = 7723,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills6()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    CreatedTo = "2024-10-12T18:34:39.000000+09:00",
                    ShopName = "R1FDoaYRXkvCXPPl24Azknf4IW4knrGHl0TR1xxEjRkzP55FkN9KaqhLJYNFjdQdDPcKYswz1KGIIQxemmG",
                    ShopId = "9722d7d3-ad06-4edf-a742-de9dcbf4897d",
                    LowerLimitAmount = 1958,
                    UpperLimitAmount = 3655,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills7()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    CreatedFrom = "2024-05-18T18:38:37.000000+09:00",
                    CreatedTo = "2019-06-09T22:51:07.000000+09:00",
                    ShopName = "1x9",
                    ShopId = "c61ff0e5-0b36-4735-9f2d-5b994e6dedad",
                    LowerLimitAmount = 1131,
                    UpperLimitAmount = 6342,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills8()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    Description = "SZdnC8Nbd0GAMDtpExjAOL9txxvBDq74Zcv4lxbZkZAsxqjGZZnD30rTzVwJllk7AmnUWAZFPyOt3pktOJBQNvyxNd81mETXBAwcDbgRS83ISSTE08jfX2Omd3NMjFlR",
                    CreatedFrom = "2018-07-04T22:38:50.000000+09:00",
                    CreatedTo = "2023-12-13T07:43:01.000000+09:00",
                    ShopName = "LJvC6KKEtPK2Yi",
                    ShopId = "a3916a84-b7d7-4049-a691-d2ee1b6d6eb9",
                    LowerLimitAmount = 6254,
                    UpperLimitAmount = 5803,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills9()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    OrganizationCode = "71113--zTgJU2-",
                    Description = "1sBGXi6YlkUDHHbRk8fI6wbpNh1friFqDo6JGjFLLOGZO0oAllJiZr4re6LWLgSkk2ZDUPdz1BhJvWNhb1UlY8gVa2hXfzW4DNhu8v9wZu0fWkZyfAZKnUDFE99Mnwnu5OtOf4ilY3NpmdcwanlDlu0IrmsH8EsDe",
                    CreatedFrom = "2015-11-12T17:19:10.000000+09:00",
                    CreatedTo = "2021-04-19T04:48:32.000000+09:00",
                    ShopName = "YkSH918X0jGAYz0AuaoOoyLPqw51DmjCWv1MDES09bsjDJFkIb5xAqDpTjFMPKMQ13CORng41h3amcuul1yByCRpmXDgHNBQaoIMR9zPGyY",
                    ShopId = "5799b7ed-2592-40fc-a788-a0369f9be0fe",
                    LowerLimitAmount = 5683,
                    UpperLimitAmount = 479,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills10()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    PrivateMoneyId = "f47177be-84a1-4e79-a360-bef99833112a",
                    OrganizationCode = "TfEXvFv",
                    Description = "boo5hpfF1Hpb0RbR7D8yvhSwIzpaQ4KzL2meWNVVwDgpJqef1CpLupibRMoXLp8MHMfUv2FJ",
                    CreatedFrom = "2019-05-09T23:24:47.000000+09:00",
                    CreatedTo = "2023-07-28T19:04:08.000000+09:00",
                    ShopName = "Mo734XdeCG7BhDwLeeL5nECXsF8aQJM1W9qqWFcIV1r4RUzmB5Y2djRhGfa0yLPBNXYOJzOncitmbWDPrz6dz37AZYeiF76ZwhFQ3FAy9yso4lFSwRswxdTAQ9WC0cvkqgX",
                    ShopId = "384454eb-1152-4265-b172-f95d29f4e8d3",
                    LowerLimitAmount = 178,
                    UpperLimitAmount = 5631,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills11()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    BillId = "ixBY",
                    PrivateMoneyId = "fb9118a4-4bb4-48ad-ba18-6a717f3c2989",
                    OrganizationCode = "3-4L17-n2SP-DD--G7qP",
                    Description = "esKnaA2925CICFc9YiF",
                    CreatedFrom = "2023-04-17T09:42:08.000000+09:00",
                    CreatedTo = "2018-01-26T02:00:32.000000+09:00",
                    ShopName = "xZx0kErjYhFF8L0s3HmTbCv0vs46AUUu2p",
                    ShopId = "7f38bba1-ba80-4429-a66d-b55302e2bb28",
                    LowerLimitAmount = 6543,
                    UpperLimitAmount = 4633,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills12()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    PerPage = 9820,
                    BillId = "rWkeGY78T",
                    PrivateMoneyId = "b37439ed-2fcc-4bdf-aff0-db4a8092a8eb",
                    OrganizationCode = "-4-3b3k---v--d2B-iA6ifYw-E7TL-",
                    Description = "gUY2AjilRovHayz8YyL84tSBRirOjWywMKpR0ZNHTQzlWhqAUDLyUjiL5h79b8Mq1iCGeBaSpQPD6dBfbbaTLCXXwtnmblF81hLyHqrkno1IRdYm",
                    CreatedFrom = "2022-03-14T06:11:03.000000+09:00",
                    CreatedTo = "2021-05-05T15:00:32.000000+09:00",
                    ShopName = "WqYy5cWhC8K9hq9NVk78eiqBVcclwSkXzM6GujXAvYOrdjeYiaUNpzopQa6AXRwrFPi8ZnQow3jmOnSTVflnP2oKp",
                    ShopId = "bc9fc241-1eeb-4094-a870-1e38e4965ad0",
                    LowerLimitAmount = 425,
                    UpperLimitAmount = 1865,
                    IsDisabled = true,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBills13()
        {
            try {
                Request.ListBills request = new Request.ListBills() {
                    Page = 5310,
                    PerPage = 4179,
                    BillId = "1sKy",
                    PrivateMoneyId = "56611b0f-4796-4cd9-a67f-f58ce1a37222",
                    OrganizationCode = "",
                    Description = "GOHFEzapKvNXPC1CkiwHqFmPHg1nDo4oueFOj023vS0mewatHnea0dCU94sWp47O7C5wT4wYrVN1K9mYldOQjsir5CqIfO5L8Zq3bTMBqwr9Z5qKSziS34atNThxJhMGQiNXxPc9X24Y9K063jeiC0sEMTifXwPUAwxE0",
                    CreatedFrom = "2023-03-21T14:35:39.000000+09:00",
                    CreatedTo = "2019-03-05T09:39:46.000000+09:00",
                    ShopName = "ioYGgiTWexQGgsWhjEbcteNrFFjyWUeOcoTl6khkqH4OC72gKDbHJYxfd9c8VQaX76eUjZSlzlz06kFlTp3fMR0xZZbBlf7T31FgYL8AmsRrLUI6eSrCAHV3kHGscOhgsN9D6p9JGwN67nitnvEXl7HTtWDnKgmYJWOFJqIru7u3eDlXpCUVae0iDE64cm6yBc",
                    ShopId = "dce1d6e6-dbc0-4b1b-a4e3-66139904740c",
                    LowerLimitAmount = 9674,
                    UpperLimitAmount = 6545,
                    IsDisabled = false,
                };
                Response.PaginatedBills response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
