// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateShop
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateShop0()
        {
            try {
                Request.CreateShop request = new Request.CreateShop(
                    "wfRsdmSnnsKFojcLOuuurZaaP5zVuitJAWBnMTQrqQLb4F27"
                );
                Response.User response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShop1()
        {
            try {
                Request.CreateShop request = new Request.CreateShop(
                    "wfRsdmSnnsKFojcLOuuurZaaP5zVuitJAWBnMTQrqQLb4F27"
                ) {
                    OrganizationCode = "-z-B-kU06azg5meu5-oZm02ZiT----M",
                };
                Response.User response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShop2()
        {
            try {
                Request.CreateShop request = new Request.CreateShop(
                    "wfRsdmSnnsKFojcLOuuurZaaP5zVuitJAWBnMTQrqQLb4F27"
                ) {
                    ShopExternalId = "xmBEPErY",
                    OrganizationCode = "iGnGU--B3g6CQRl-9w-J-4",
                };
                Response.User response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShop3()
        {
            try {
                Request.CreateShop request = new Request.CreateShop(
                    "wfRsdmSnnsKFojcLOuuurZaaP5zVuitJAWBnMTQrqQLb4F27"
                ) {
                    ShopEmail = "RvriMMqT8Y@2wPx.com",
                    ShopExternalId = "WWXEUoqg0zXsuvc8LF4mbP1hyPDbNVjct",
                    OrganizationCode = "1H-9-0vw--e2vqh0-",
                };
                Response.User response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShop4()
        {
            try {
                Request.CreateShop request = new Request.CreateShop(
                    "wfRsdmSnnsKFojcLOuuurZaaP5zVuitJAWBnMTQrqQLb4F27"
                ) {
                    ShopTel = "0686588082",
                    ShopEmail = "edAo6IB1Jw@I4Ht.com",
                    ShopExternalId = "HPlHFEuPGo3Gk",
                    OrganizationCode = "-sScpLT--l3-N",
                };
                Response.User response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShop5()
        {
            try {
                Request.CreateShop request = new Request.CreateShop(
                    "wfRsdmSnnsKFojcLOuuurZaaP5zVuitJAWBnMTQrqQLb4F27"
                ) {
                    ShopAddress = "8epkaCTJpPbbkDn1ZrOBafUzNTBXIV1wGp1Rn3U4KQsAmdVQrUihNu2f4606Zw3XOf",
                    ShopTel = "0179-11-332",
                    ShopEmail = "qaG2p9irVN@MOOM.com",
                    ShopExternalId = "Eypf2sbMz5sG",
                    OrganizationCode = "-VsAf-Z6--674a3",
                };
                Response.User response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateShop6()
        {
            try {
                Request.CreateShop request = new Request.CreateShop(
                    "wfRsdmSnnsKFojcLOuuurZaaP5zVuitJAWBnMTQrqQLb4F27"
                ) {
                    ShopPostalCode = "046-0038",
                    ShopAddress = "LoMele3ppOb8vOALeCaVZzJ21Wkjwh096vY0YkfqArkVOxtHaQbqrekxj6KVFbsIqYgBl99xXSIGv3Ovn3SH7ljqEdpqCcPOpWjivoOnvdw0Yvld3IeJyhTlRgTT2NxSiphZRlLoLjMmLSHQhe4tHPdlvKxC8QojNKN0zq",
                    ShopTel = "0365-40-2058",
                    ShopEmail = "IsHw9iaxaP@zoaD.com",
                    ShopExternalId = "v6U6SXLkHad9cOSRej1Twb2rvpiwJ",
                    OrganizationCode = "99s4-2d",
                };
                Response.User response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
