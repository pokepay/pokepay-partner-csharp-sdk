// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListBillTransactions
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListBillTransactions0()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions();
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBillTransactions1()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions() {
                    PerPage = 251,
                };
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBillTransactions2()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions() {
                    PrevPageCursorId = "046ecadf-cff8-4325-8b36-3688c4b817b2",
                    PerPage = 926,
                };
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBillTransactions3()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions() {
                    NextPageCursorId = "88872d66-8a04-4db8-86ce-d8240313967a",
                    PrevPageCursorId = "1405e00e-41dc-4d61-aa2e-c644530c2dde",
                    PerPage = 102,
                };
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBillTransactions4()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions() {
                    To = "2020-04-24T00:42:20.000000Z",
                    NextPageCursorId = "cb5638b7-35f2-4f19-af3e-dcff3655868e",
                    PrevPageCursorId = "b8a0577e-a297-41b4-ac7e-e19d11304099",
                    PerPage = 971,
                };
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBillTransactions5()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions() {
                    From = "2023-05-30T19:45:24.000000Z",
                    To = "2024-03-09T17:23:43.000000Z",
                    NextPageCursorId = "0dbee5d8-8fd9-4b7b-8233-f43efbea5b14",
                    PrevPageCursorId = "fbbe5059-489d-4cb3-9584-c9917637f333",
                    PerPage = 646,
                };
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBillTransactions6()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions() {
                    IsModified = false,
                    From = "2021-01-26T23:32:39.000000Z",
                    To = "2021-04-10T03:58:29.000000Z",
                    NextPageCursorId = "1068ba0e-ffeb-44db-bafb-db0f25acd5b4",
                    PrevPageCursorId = "616664a7-590e-48a5-a680-3be15b55e700",
                    PerPage = 920,
                };
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBillTransactions7()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions() {
                    BillId = "c38e1368-27f8-4e40-ad73-ba121ece97f2",
                    IsModified = true,
                    From = "2021-12-10T13:06:18.000000Z",
                    To = "2024-10-16T22:54:17.000000Z",
                    NextPageCursorId = "e583c950-2126-4897-9c3e-a862bd666eb5",
                    PrevPageCursorId = "045c253c-dd42-4e03-b14b-1db97a90f05a",
                    PerPage = 205,
                };
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBillTransactions8()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions() {
                    TransactionId = "91e07a02-75ca-49fe-aaec-ea2538478551",
                    BillId = "52d09cfa-b872-47e3-8734-6ae30c2d7e46",
                    IsModified = true,
                    From = "2025-06-09T09:42:37.000000Z",
                    To = "2022-07-27T21:59:21.000000Z",
                    NextPageCursorId = "b43f9739-b630-4f44-b59d-2ae787857385",
                    PrevPageCursorId = "6cda36ef-09b4-427e-a48d-fe0498f19e01",
                    PerPage = 323,
                };
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBillTransactions9()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions() {
                    Description = "dUCSZVd4cTqnNfSRiXLw6IXxof4N3bX72yEerLNEKMYsRf9vriYiP8HndtLKgFWIeB413C8zcpa0a0ipuLt3IQKQQHb6fikVg8U3XBigR3jya01cL7edhmrVi5NIsblUeDquiQL8YRreNoLAWMJdywYSICtYcbHl2ktF16gpa54attROZcBbejZS9wdnnNKI",
                    TransactionId = "b10db97b-a94e-4a9c-8937-4af636e755ea",
                    BillId = "fc3b965c-302b-4bc0-8fa4-853802df57f1",
                    IsModified = true,
                    From = "2022-07-11T04:49:09.000000Z",
                    To = "2020-06-14T14:08:04.000000Z",
                    NextPageCursorId = "bdd6d88c-0106-4950-aff3-fc64433762ca",
                    PrevPageCursorId = "83ab91b8-a90e-4d4a-ab83-fa4c75d5f4b6",
                    PerPage = 76,
                };
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBillTransactions10()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions() {
                    TerminalId = "13882e24-4e1d-41b4-a6bc-fa629739e1a5",
                    Description = "tzmymsdzvhUXmrc210VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5mnetJol0g7uhhZVwBBSB9NQuG198o4cE8ye",
                    TransactionId = "d572948e-622e-4838-85bb-f7f8e1316024",
                    BillId = "6f90e1e9-9e23-4243-b074-9472a3a15640",
                    IsModified = true,
                    From = "2022-01-30T04:10:01.000000Z",
                    To = "2023-11-14T17:24:08.000000Z",
                    NextPageCursorId = "1d65782b-e8a8-4958-9a14-4913d296a933",
                    PrevPageCursorId = "ff821423-1911-4cfe-8f21-c8d1b17cfe53",
                    PerPage = 549,
                };
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBillTransactions11()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions() {
                    CustomerName = "s9cvMVMzYpf",
                    TerminalId = "fbb99212-f945-4edd-9748-de27e191eb48",
                    Description = "q4AVCPhpFJVl2NE9OohrFLhvABt92YjeNGkeRyZCxDwnyuzPdWfYw482S6oHFs",
                    TransactionId = "070af7da-d2a3-431e-8c68-ed39a53219ac",
                    BillId = "559a0dbe-c0eb-4bad-bdaf-42864a4ad514",
                    IsModified = true,
                    From = "2023-01-27T05:15:58.000000Z",
                    To = "2020-09-26T16:19:44.000000Z",
                    NextPageCursorId = "77dc6e96-dd0d-4d01-b154-48d3d4379d4b",
                    PrevPageCursorId = "30465051-2efb-4fd9-a14c-7074857aec8f",
                    PerPage = 520,
                };
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBillTransactions12()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions() {
                    CustomerId = "f11ae404-efe7-47fc-825f-20c66ca83432",
                    CustomerName = "1Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy2qiGNeSDJueWNAF2iLhkB08mWoSEw4Yfnz5e3bjXKldANGzSZe49qKV1rholLnfHAgpNJKDDEjuzS",
                    TerminalId = "a16f420f-2ffc-43ed-8fba-c4dffcc846a9",
                    Description = "TPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2aiyvcn732KUYpvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zD",
                    TransactionId = "590061a1-d44a-45db-b6a7-11cb18bed4da",
                    BillId = "be5427d4-2c23-4311-9bc5-4e6b0f3dd314",
                    IsModified = true,
                    From = "2023-04-01T05:20:08.000000Z",
                    To = "2020-11-09T18:23:35.000000Z",
                    NextPageCursorId = "168a35c4-be7f-4452-87f1-46bf34566564",
                    PrevPageCursorId = "a3e61a38-206a-4b97-9047-04e996067b68",
                    PerPage = 711,
                };
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBillTransactions13()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions() {
                    ShopId = "0371e632-2329-4192-9cfa-c3ef55523aa6",
                    CustomerId = "36eecb80-acb2-42c7-99a3-b6ce67b30b8e",
                    CustomerName = "QYDG6CZS1PVe5LZzi2NmWBluHrzflOytNd3ROmH9nMfAHnX3LOs6P3dxLhDjrt4CFESWJnPCLUxGLtrgoghS3pPHE574eeX1ksH4R2MgyW6z149JBRZmQUgzecqWdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYdlIHfSBBKI1KQl4cK6HLes",
                    TerminalId = "daaeae93-14ef-4aa3-8e37-569fe6361d41",
                    Description = "sxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6b",
                    TransactionId = "c5e209c0-0700-4a43-aa9a-76f22a54117e",
                    BillId = "805e28c4-0e83-4ee0-a72c-66af1745b151",
                    IsModified = false,
                    From = "2020-08-06T20:55:48.000000Z",
                    To = "2024-01-30T01:53:20.000000Z",
                    NextPageCursorId = "e06ee9e9-f3c2-487a-b8e8-a5e053dd6e8c",
                    PrevPageCursorId = "30b2daae-3fef-4970-baec-746557fbf3a8",
                    PerPage = 472,
                };
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBillTransactions14()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions() {
                    OrganizationCode = "4-0T5lf-",
                    ShopId = "0e45ff1e-39d2-4f5c-8385-d41f53e917ab",
                    CustomerId = "8013a725-4b4d-458c-96bf-ae19402967d9",
                    CustomerName = "MVxniANdM0yy6srRZNC9bYJUFWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6jnDEmNinmBAkCQlWqd4VgtaT7nx9nCCSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiutZ4wFjGxBLsRpox6uXLc6he8Kxv6FPaZ8I6Axi",
                    TerminalId = "a24cb979-2ebb-468d-a249-5f551b90ab64",
                    Description = "JlMSQ6V8dRYSFDiggsas4Nm4Pbqn0MLycuAIyd8Tc91YrDumA0B",
                    TransactionId = "2f6d392a-1915-4726-8597-07a29add4615",
                    BillId = "6576170d-512d-4450-a178-9706225dde5b",
                    IsModified = false,
                    From = "2022-01-25T18:09:00.000000Z",
                    To = "2024-02-02T20:01:29.000000Z",
                    NextPageCursorId = "eaea0068-447a-4cb8-8184-f1f1d8eed3ac",
                    PrevPageCursorId = "7a87ea82-0af5-4548-b838-ed0e04639fe7",
                    PerPage = 669,
                };
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListBillTransactions15()
        {
            try {
                Request.ListBillTransactions request = new Request.ListBillTransactions() {
                    PrivateMoneyId = "0828e659-df7e-4cf1-9c96-2cd1cabc2c27",
                    OrganizationCode = "8hH-9hZ-hjR--D-tC-4xRR",
                    ShopId = "540d029f-7244-4b2e-8abf-6a8ea1b97f06",
                    CustomerId = "90ae7852-48ed-4e3d-97c3-e08827ab045d",
                    CustomerName = "XV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjUez1G0bwCFurxmaLHHuXDOcuycPW2WYY40yWZt9ZjHKqLir6qm",
                    TerminalId = "4fe8a8c3-cf18-4bde-bb0b-3bff4482c2c6",
                    Description = "zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRswwQSmiJco3KwhjqpMqyENnnotJKNM2DvQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdgsrsB",
                    TransactionId = "d7c3650e-903c-4a37-8ebb-b46eb003dee6",
                    BillId = "d089a704-45b3-4280-bab7-60a75789eafa",
                    IsModified = false,
                    From = "2020-06-10T06:18:31.000000Z",
                    To = "2025-06-17T03:23:59.000000Z",
                    NextPageCursorId = "9d961e59-2271-454c-aada-7c29e1ff0268",
                    PrevPageCursorId = "b6b93de4-31ab-4e32-85d6-785d3d5d606d",
                    PerPage = 879,
                };
                Response.PaginatedBillTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
