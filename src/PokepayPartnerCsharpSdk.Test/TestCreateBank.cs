// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateBank
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateBank0()
        {
            try {
                Request.CreateBank request = new Request.CreateBank(
                    "66ebe454-4b75-46b7-a493-9cbe631f80c6",
                    "1c132aca-610e-4364-82ee-3b076bbc5a8d",
                    "2zmSdxoMEo7iiWiK2okJZnHKT3QpgRV3We5qngMPLFaOJCfBkbEgvIJ3k4RMSK5pjHrQT",
                    "plQIfuTqFWa"
                );
                Response.BankRegisteringInfo response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateBank1()
        {
            try {
                Request.CreateBank request = new Request.CreateBank(
                    "66ebe454-4b75-46b7-a493-9cbe631f80c6",
                    "1c132aca-610e-4364-82ee-3b076bbc5a8d",
                    "2zmSdxoMEo7iiWiK2okJZnHKT3QpgRV3We5qngMPLFaOJCfBkbEgvIJ3k4RMSK5pjHrQT",
                    "plQIfuTqFWa"
                ) {
                    Birthdate = "qc4g",
                };
                Response.BankRegisteringInfo response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateBank2()
        {
            try {
                Request.CreateBank request = new Request.CreateBank(
                    "66ebe454-4b75-46b7-a493-9cbe631f80c6",
                    "1c132aca-610e-4364-82ee-3b076bbc5a8d",
                    "2zmSdxoMEo7iiWiK2okJZnHKT3QpgRV3We5qngMPLFaOJCfBkbEgvIJ3k4RMSK5pjHrQT",
                    "plQIfuTqFWa"
                ) {
                    Email = "CD2cwBoBEV@WMH3.com",
                    Birthdate = "Ty",
                };
                Response.BankRegisteringInfo response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
