// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreatePaymentTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreatePaymentTransaction0()
        {
            try {
                Request.CreatePaymentTransaction request = new Request.CreatePaymentTransaction(
                    "b24bc923-cdbe-4c8b-9311-123be2588cd5",
                    "9572bf4f-ca52-4b38-8998-c53865a579dc",
                    "68a45805-2f46-40fb-b729-87080d91088f",
                    2517.0
                );
                Response.Transaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreatePaymentTransaction1()
        {
            try {
                Request.CreatePaymentTransaction request = new Request.CreatePaymentTransaction(
                    "b24bc923-cdbe-4c8b-9311-123be2588cd5",
                    "9572bf4f-ca52-4b38-8998-c53865a579dc",
                    "68a45805-2f46-40fb-b729-87080d91088f",
                    2517.0
                ) {
                    RequestId = "36792ae2-d2e4-4a27-b681-ed2453d5f8a5",
                };
                Response.Transaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreatePaymentTransaction2()
        {
            try {
                Request.CreatePaymentTransaction request = new Request.CreatePaymentTransaction(
                    "b24bc923-cdbe-4c8b-9311-123be2588cd5",
                    "9572bf4f-ca52-4b38-8998-c53865a579dc",
                    "68a45805-2f46-40fb-b729-87080d91088f",
                    2517.0
                ) {
                    Description = "EIlmfbIWBjq1h3aM3MFSn6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqYPn",
                    RequestId = "49232d5c-6211-437c-adad-e0b46addf326",
                };
                Response.Transaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
