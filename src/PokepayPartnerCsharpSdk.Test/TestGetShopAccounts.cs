// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestGetShopAccounts
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task GetShopAccounts0()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "cefac7bd-7c9f-4b80-8497-6f58374d0405"
                );
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetShopAccounts1()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "cefac7bd-7c9f-4b80-8497-6f58374d0405"
                ) {
                    IsSuspended = false,
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetShopAccounts2()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "cefac7bd-7c9f-4b80-8497-6f58374d0405"
                ) {
                    CreatedAtTo = "2022-04-20T13:19:07.000000+09:00",
                    IsSuspended = false,
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetShopAccounts3()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "cefac7bd-7c9f-4b80-8497-6f58374d0405"
                ) {
                    CreatedAtFrom = "2023-06-22T06:11:54.000000+09:00",
                    CreatedAtTo = "2020-12-13T09:02:00.000000+09:00",
                    IsSuspended = false,
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetShopAccounts4()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "cefac7bd-7c9f-4b80-8497-6f58374d0405"
                ) {
                    PerPage = 2964,
                    CreatedAtFrom = "2018-02-16T12:42:28.000000+09:00",
                    CreatedAtTo = "2020-07-10T19:56:26.000000+09:00",
                    IsSuspended = true,
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetShopAccounts5()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "cefac7bd-7c9f-4b80-8497-6f58374d0405"
                ) {
                    Page = 743,
                    PerPage = 5060,
                    CreatedAtFrom = "2022-08-28T18:33:16.000000+09:00",
                    CreatedAtTo = "2019-06-07T10:01:10.000000+09:00",
                    IsSuspended = false,
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
