// DO NOT EDIT: File is generated by code generator.
#nullable enable
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestGetShopAccounts
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task GetShopAccounts0()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "066f3f17-d0e7-432b-b946-ce13b9cc687c"
                );
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetShopAccounts1()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "066f3f17-d0e7-432b-b946-ce13b9cc687c"
                ) {
                    IsSuspended = true
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetShopAccounts2()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "066f3f17-d0e7-432b-b946-ce13b9cc687c"
                ) {
                    CreatedAtTo = "2021-09-20T21:35:53.000000+09:00",
                    IsSuspended = false
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetShopAccounts3()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "066f3f17-d0e7-432b-b946-ce13b9cc687c"
                ) {
                    CreatedAtFrom = "2021-11-08T14:28:08.000000+09:00",
                    CreatedAtTo = "2018-01-01T15:34:21.000000+09:00",
                    IsSuspended = false
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetShopAccounts4()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "066f3f17-d0e7-432b-b946-ce13b9cc687c"
                ) {
                    PerPage = 9476,
                    CreatedAtFrom = "2022-03-18T22:11:23.000000+09:00",
                    CreatedAtTo = "2017-04-25T17:30:35.000000+09:00",
                    IsSuspended = false
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetShopAccounts5()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "066f3f17-d0e7-432b-b946-ce13b9cc687c"
                ) {
                    Page = 3344,
                    PerPage = 2794,
                    CreatedAtFrom = "2015-11-03T10:35:15.000000+09:00",
                    CreatedAtTo = "2025-06-13T12:56:13.000000+09:00",
                    IsSuspended = true
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
