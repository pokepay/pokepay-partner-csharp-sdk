// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestGetShopAccounts
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task GetShopAccounts0()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "488be0e7-043d-49c3-b09b-b9a763d8c707"
                );
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetShopAccounts1()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "488be0e7-043d-49c3-b09b-b9a763d8c707"
                ) {
                    IsSuspended = true,
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetShopAccounts2()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "488be0e7-043d-49c3-b09b-b9a763d8c707"
                ) {
                    CreatedAtTo = "2018-01-31T23:55:15.000000+09:00",
                    IsSuspended = false,
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetShopAccounts3()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "488be0e7-043d-49c3-b09b-b9a763d8c707"
                ) {
                    CreatedAtFrom = "2017-09-19T15:58:03.000000+09:00",
                    CreatedAtTo = "2019-01-11T11:12:23.000000+09:00",
                    IsSuspended = true,
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetShopAccounts4()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "488be0e7-043d-49c3-b09b-b9a763d8c707"
                ) {
                    PerPage = 849,
                    CreatedAtFrom = "2023-04-09T12:37:48.000000+09:00",
                    CreatedAtTo = "2017-02-11T14:50:54.000000+09:00",
                    IsSuspended = false,
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task GetShopAccounts5()
        {
            try {
                Request.GetShopAccounts request = new Request.GetShopAccounts(
                    "488be0e7-043d-49c3-b09b-b9a763d8c707"
                ) {
                    Page = 8443,
                    PerPage = 3728,
                    CreatedAtFrom = "2017-07-22T21:21:06.000000+09:00",
                    CreatedAtTo = "2018-11-18T09:07:04.000000+09:00",
                    IsSuspended = true,
                };
                Response.PaginatedAccountWithUsers response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
