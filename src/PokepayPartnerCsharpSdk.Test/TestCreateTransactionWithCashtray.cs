// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransactionWithCashtray
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransactionWithCashtray0()
        {
            try {
                Request.CreateTransactionWithCashtray request = new Request.CreateTransactionWithCashtray(
                    "dd04e86b-ab38-4b64-b820-1475cc94934b",
                    "1e05a79c-7385-4309-80e7-04a75e82aa9c"
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransactionWithCashtray1()
        {
            try {
                Request.CreateTransactionWithCashtray request = new Request.CreateTransactionWithCashtray(
                    "dd04e86b-ab38-4b64-b820-1475cc94934b",
                    "1e05a79c-7385-4309-80e7-04a75e82aa9c"
                ) {
                    RequestId = "d375a943-ad0d-4246-8994-9f3d1b0065b0",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransactionWithCashtray2()
        {
            try {
                Request.CreateTransactionWithCashtray request = new Request.CreateTransactionWithCashtray(
                    "dd04e86b-ab38-4b64-b820-1475cc94934b",
                    "1e05a79c-7385-4309-80e7-04a75e82aa9c"
                ) {
                    Strategy = "money-only",
                    RequestId = "bc1cfa3e-d776-4931-9ce2-af72ac04bb6e",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
