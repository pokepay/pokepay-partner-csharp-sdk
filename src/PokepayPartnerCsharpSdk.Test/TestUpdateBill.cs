// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateBill
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateBill0()
        {
            try {
                Request.UpdateBill request = new Request.UpdateBill(
                    "36ad2c93-0068-4ea4-b1ae-4b9b432b11f3"
                );
                Response.Bill response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateBill1()
        {
            try {
                Request.UpdateBill request = new Request.UpdateBill(
                    "36ad2c93-0068-4ea4-b1ae-4b9b432b11f3"
                ) {
                    IsDisabled = true,
                };
                Response.Bill response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateBill2()
        {
            try {
                Request.UpdateBill request = new Request.UpdateBill(
                    "36ad2c93-0068-4ea4-b1ae-4b9b432b11f3"
                ) {
                    Description = "sLEbEWPKl9WkWniNMe57GaUoeFKUhuzR92flJna3o8lSubVHDQKnCMFBUToCMNtZ6d7oqX5HAjEgFXSsN9r5fYqwBwIeFwCdwWTHBvTSeC4v5viv0SuTrdZ8q3Q4Tuionr4icEoYIZ8TnBORlevStTp",
                    IsDisabled = true,
                };
                Response.Bill response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateBill3()
        {
            try {
                Request.UpdateBill request = new Request.UpdateBill(
                    "36ad2c93-0068-4ea4-b1ae-4b9b432b11f3"
                ) {
                    Amount = 1910.0,
                    Description = "kwGTx4XeaHsbnASQL7dNbIjKdxZ4qw5diKtbXpwhzV4pZWBByF0VHHSTDwDvpGuPijQkiZTa2NELJfD",
                    IsDisabled = true,
                };
                Response.Bill response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
