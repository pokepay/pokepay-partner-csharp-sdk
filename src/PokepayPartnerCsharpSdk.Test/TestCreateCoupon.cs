// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCoupon0()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 7588,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon1()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 4563,
                    StorageId = "fc7f998c-9b05-4732-ab72-0347d884e950",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon2()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 5577,
                    MinAmount = 6442,
                    StorageId = "5763cf15-7600-4191-bc0e-37df36d5e838",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon3()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 2514,
                    UsageLimit = 7024,
                    MinAmount = 9157,
                    StorageId = "7e541e33-4974-42e5-8550-636955941961",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon4()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 2393,
                    Code = "eN8nco",
                    UsageLimit = 4962,
                    MinAmount = 4060,
                    StorageId = "31e3f4ef-09d3-4a2b-9c42-d702404a9b87",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon5()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 6445,
                    IsPublic = true,
                    Code = "erEt",
                    UsageLimit = 2494,
                    MinAmount = 2280,
                    StorageId = "31f7ba96-5f27-4cc6-a77b-2a859b16ff4a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon6()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 9700,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "kgg6",
                    UsageLimit = 5196,
                    MinAmount = 6221,
                    StorageId = "1969a8b7-d089-4b7f-8489-ae4833196868",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon7()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 6097,
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "g7pW5tL",
                    UsageLimit = 8893,
                    MinAmount = 1220,
                    StorageId = "3d001682-6bd3-42cc-b3dc-993ebe6120fe",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon8()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 6808,
                    DisplayEndsAt = "2021-05-02T10:23:42.000000Z",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "XvMXdIXxGA",
                    UsageLimit = 7035,
                    MinAmount = 6200,
                    StorageId = "70cea93c-5c65-41fb-8f11-208949b22993",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon9()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 8541,
                    DisplayStartsAt = "2020-11-19T20:34:12.000000Z",
                    DisplayEndsAt = "2023-08-24T18:20:23.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "Z",
                    UsageLimit = 6518,
                    MinAmount = 4214,
                    StorageId = "6a7b700e-8233-4260-957a-9f7905141dda",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon10()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 9643,
                    DiscountUpperLimit = 7944,
                    DisplayStartsAt = "2021-04-07T09:51:20.000000Z",
                    DisplayEndsAt = "2023-03-10T15:15:22.000000Z",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "P",
                    UsageLimit = 2611,
                    MinAmount = 3793,
                    StorageId = "0ccbf3df-e253-4a22-a548-82a26c6e5eac",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon11()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 3443,
                    Description = "zKal8UJ7mvjTFU0wWAMu89mD0TpxWczQUyWaVgBaLWMWptjgf0FiZZDEEO2PZA9",
                    DiscountUpperLimit = 649,
                    DisplayStartsAt = "2022-02-17T13:36:31.000000Z",
                    DisplayEndsAt = "2021-01-02T18:17:49.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "1E81",
                    UsageLimit = 8298,
                    MinAmount = 3734,
                    StorageId = "e9939a2c-918b-4ac3-81e0-9fd2c37e29fd",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon12()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 7008,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"e1dcd6bc-92e2-416b-b74d-3952f0959724", "aaf070b1-527c-4ab7-bf97-27a0f9ae99c3", "47d77836-9552-45dc-af46-52b606b2394c", "df5ddf79-980c-4f4d-baf8-aaa740b65217", "606192c2-c841-470f-9aa6-fff8ece17406", "c7a869af-9010-442c-8e3b-1d83cdaea6f2", "992a2241-8d9e-49d3-846a-2ddbfd0255b9", "41531856-02c7-4d7b-b2b6-d9f28a0ac851", "4f216c15-1ebe-4ed7-852b-a766361f40ac"},
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon13()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 325,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"dee955fb-0401-4b37-b397-e39638ade7b2"},
                    StorageId = "95c51566-1c19-49b7-9d66-42b5ae5da5f2",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon14()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 1034,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"3c604534-2e0f-4f67-8fee-497b0a24f24a"},
                    MinAmount = 7514,
                    StorageId = "8ea1b429-e31a-4084-a027-0a3ef7665c24",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon15()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 2184,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"68caca0d-e33a-4343-ba16-9d38291c06de", "23f118ba-da8e-4631-bb18-e0580145209d", "d3c9c19b-1e10-40ce-af75-1d63a52af179"},
                    UsageLimit = 1665,
                    MinAmount = 9615,
                    StorageId = "939209e2-1c45-48a9-88f0-db8fd62e7f87",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon16()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 3832,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"1c3722c6-fa2f-4a5c-afd8-5f23c60a500f", "4c56c0b7-012d-44d0-88af-dd440b482109", "82a7e1e7-4d98-4b2d-a772-eafa695c876e", "72cc23ce-0757-4f8a-8256-02097379a4b0"},
                    Code = "p9BBTT",
                    UsageLimit = 2544,
                    MinAmount = 4779,
                    StorageId = "348c5d29-80b6-4f9c-81c7-84f09203a94d",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon17()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 4878,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"2b68eaa3-3ae0-428f-9d3e-09cfdad7109e", "950b447e-4e3d-4e81-b3e2-17745dfcd0c0", "9da3ff48-daad-4f59-a39c-a61729d6e947"},
                    IsPublic = false,
                    Code = "4Qa",
                    UsageLimit = 1260,
                    MinAmount = 8194,
                    StorageId = "d40a1b75-b1b6-4f03-9c00-85120c5d789e",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon18()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 611,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"e9372fba-ec3b-4ca2-8417-5bd6a5e268b2", "880e6120-18d0-45e3-9aea-5a0d3513c814", "5836580c-8bdc-4ca4-9e01-13b234b7ce63", "f53038ff-1bf4-4691-b6ed-835aba2d3afa", "9e18b688-f22f-49bd-967b-6c75247c5717", "a4ee250d-9f47-4035-b32d-55f125e5dedd", "7cee915a-53d7-4dd4-80d9-b37ffdb0ea02", "eb80c67a-c302-4210-a047-bb215c85b113"},
                    IsHidden = false,
                    IsPublic = true,
                    Code = "uuBX6L",
                    UsageLimit = 509,
                    MinAmount = 8924,
                    StorageId = "465eedd5-4ad5-4b5f-8ca0-5cd5c354b3c2",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon19()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 4602,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"74fc4d52-caa6-4431-8a38-209c7c0d3772", "7d6788ce-b60f-48d1-826a-3c545e094841", "f2b3f3bb-fbd2-4f78-a3cb-d75fe35ee889", "943d08bf-acd7-40e3-a4e2-e20852639309", "11487c20-4a31-48ee-b9cc-fdcc84a859d6", "d5a9fd88-30c9-43ad-a73b-d0e62e5f33a4", "dc520a40-d837-46d0-8a0f-a39a4637eab4", "72b16440-ab50-42cb-9bc9-b8590968a897", "5ca8f1d2-1cc1-436c-b15d-d955b7f4f943", "72c47a75-0ddc-4993-917b-6b79700af5e3"},
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "lQrGdRq",
                    UsageLimit = 9087,
                    MinAmount = 2134,
                    StorageId = "4811f464-3533-42c3-82fd-964958b8b996",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon20()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 9669,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"9127d928-3be0-46ab-a4a5-c24ffbe3d5ac"},
                    DisplayEndsAt = "2022-12-29T15:05:28.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "7PJayBT5Ig",
                    UsageLimit = 4417,
                    MinAmount = 8609,
                    StorageId = "9367407e-da4b-4d35-a239-9a9bbbef8bba",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon21()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 1640,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"c7e9af20-637e-42ba-bc5a-9da940023c01", "795ea3aa-43e8-4f63-9a5f-d1e8a4d90487", "5ea13da1-6d38-4b4d-920a-1975a768db53", "aa4be814-456c-45d6-9291-82232c3854af", "7178a2a2-e23e-4416-9ccb-4b67d1282607", "3fe30b43-9053-43f0-890f-8aaaf95b3ccc", "1e087eb1-67bb-40b3-9959-9575a2dc8b83", "85d966c7-01ce-4d31-b772-c4e63df21a54", "131e4e39-f828-4922-84ee-9e9be3587d4f", "1004698c-f525-4674-a9fc-c87d65221743"},
                    DisplayStartsAt = "2024-02-03T11:17:15.000000Z",
                    DisplayEndsAt = "2024-01-18T04:11:46.000000Z",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "uSxp7i1rc",
                    UsageLimit = 6241,
                    MinAmount = 5347,
                    StorageId = "b3b32ad2-d47d-4fab-b47e-4e8c77cbbec5",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon22()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 8981,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"affaad01-e34a-43d2-999a-81c50fcd555c", "844b0030-9296-4baa-989e-e1f631d907df", "2d017067-6ccc-4a9d-9188-e4be6365b03d", "73692afc-75c7-4423-9804-c9a6ed17fd6e", "c4bd47b2-a51d-4080-934f-3de4a6b9e52d", "b1013bfd-8b0f-4160-901c-7c2cdb9948e0"},
                    DiscountUpperLimit = 7160,
                    DisplayStartsAt = "2023-03-21T19:50:49.000000Z",
                    DisplayEndsAt = "2023-11-06T14:03:41.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "ViuwKt",
                    UsageLimit = 9342,
                    MinAmount = 618,
                    StorageId = "bf113df3-69a3-4540-a952-d56afbbb867a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon23()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountAmount = 1188,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"1704b51f-51f6-4baa-a2bf-89bffc5b3938", "48ddfa58-ef28-458e-9501-d9ee8c9c2d09", "172f53e5-42bc-4389-808a-77c78ed15c4e", "5d0c663f-4bce-4130-9667-531c01fef6e3", "ff98c062-465e-4105-a0ea-65c89188679f", "a31c3a83-ecbc-46c5-b079-ef26ebddeb6b", "3fb2de4f-abd7-4486-b21b-e43a400a139b", "a8947579-c7a5-47fe-bdd6-c9eca8c9db92", "60cf41c8-1dee-47af-a408-fb4de028601b", "7488f382-6d1e-457c-a70b-9ebff23ca28b"},
                    Description = "AdWY9HjNAOFWD0f28rlwLb9YSbpNpmMET",
                    DiscountUpperLimit = 9981,
                    DisplayStartsAt = "2022-08-25T11:20:42.000000Z",
                    DisplayEndsAt = "2021-05-19T01:35:12.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "pC8utok",
                    UsageLimit = 4816,
                    MinAmount = 4488,
                    StorageId = "bc8bf171-c330-4631-a0b6-5663b21c6f05",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon24()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 5002.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon25()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 8687.0,
                    StorageId = "975565dd-9913-41f1-a766-a8bbe42f483e",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon26()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 9449.0,
                    MinAmount = 1427,
                    StorageId = "6f579280-37a8-4713-9e8b-69a94b2e1c29",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon27()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 2005.0,
                    UsageLimit = 3590,
                    MinAmount = 6951,
                    StorageId = "f10f2ad8-6c78-4e91-a346-d59dc58fd3df",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon28()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 8747.0,
                    Code = "zN5",
                    UsageLimit = 789,
                    MinAmount = 6541,
                    StorageId = "85dd6745-ace6-4fa8-a46f-cdffd0594ebc",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon29()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 7356.0,
                    IsPublic = true,
                    Code = "qVIJLmWFeG",
                    UsageLimit = 1226,
                    MinAmount = 1340,
                    StorageId = "96563e26-0771-4cd9-a279-9911fc385298",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon30()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 8934.0,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "xqeV9Lg6T",
                    UsageLimit = 3567,
                    MinAmount = 1298,
                    StorageId = "c9123897-c3ef-47d2-b81c-fd4b61b6a42b",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon31()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 9233.0,
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "Rr3h8eg",
                    UsageLimit = 9933,
                    MinAmount = 6105,
                    StorageId = "21b19c55-9890-4bc3-8eb7-1614cae1d03a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon32()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 7121.0,
                    DisplayEndsAt = "2021-06-28T16:41:32.000000Z",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "Q",
                    UsageLimit = 6815,
                    MinAmount = 4860,
                    StorageId = "231f3f07-0e07-49a1-975c-bc81fd259dd7",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon33()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 8812.0,
                    DisplayStartsAt = "2022-09-17T22:51:29.000000Z",
                    DisplayEndsAt = "2022-11-24T11:06:39.000000Z",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "L88aL",
                    UsageLimit = 2603,
                    MinAmount = 7721,
                    StorageId = "f26e6043-fd14-442e-a6e4-89b3f1eea2ac",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon34()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 5890.0,
                    DiscountUpperLimit = 2547,
                    DisplayStartsAt = "2023-10-10T18:05:25.000000Z",
                    DisplayEndsAt = "2021-08-18T04:51:24.000000Z",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "XIU",
                    UsageLimit = 9705,
                    MinAmount = 5509,
                    StorageId = "5dcd4bbf-ed59-4e08-b092-f60dffc51c5e",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon35()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 9621.0,
                    Description = "TvNgfaK3PoowpKAx3kfA31wXd04SY1O8gGOF1kRrye61uzmBIXdnENFs3jBlwZrD72DB37CRt8PxiPIwClGZ1KOGgE2sj7Hu6WK5M7npguch6s2J670P8hn4WhIeMSn521mnmeh5QEBdCZJtrUa6Fgp7ym0hYqDU",
                    DiscountUpperLimit = 7105,
                    DisplayStartsAt = "2023-03-29T22:56:31.000000Z",
                    DisplayEndsAt = "2021-05-09T05:42:20.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "fGNC0wV",
                    UsageLimit = 1538,
                    MinAmount = 2438,
                    StorageId = "dccb7f06-37a0-4ee1-8d88-1d4222273e06",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon36()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 6863.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"e3318449-72a8-4820-a72d-b3fd44ef8838", "79ebe268-20bf-44d2-8f25-39db0ec70a98"},
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon37()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 1222.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"140389a5-642c-43cd-9e01-4faa37658b6c", "4fcef8ea-4148-4147-98f2-018973b1b1f0", "3bdf1d0a-bfd6-409d-82ac-20d32b3256eb", "ccabd753-a0e4-402d-8c51-7a89b96380af"},
                    StorageId = "9d6f1a42-8fa4-4140-82d1-020fe84c139a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon38()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 4220.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"262e0558-3948-4bdf-979f-6526c52b8443", "1b2b5deb-5538-4b38-9e8b-aa799f32623e"},
                    MinAmount = 2241,
                    StorageId = "2ee0967f-fca4-49e4-ab2a-b37f75f8f05c",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon39()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 4128.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"4911012f-f403-451b-9528-d99a01668adc", "44ab489c-c05f-4ad5-be87-f66c16cd0313", "facae258-bb0a-4a70-b22d-92c01c43930f"},
                    UsageLimit = 7539,
                    MinAmount = 3295,
                    StorageId = "6bc1dd03-d12e-43d4-9bb5-4e852cd73d9b",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon40()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 5543.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"be14805e-510f-4154-a338-ed301f6677bc", "19ec7b39-4fa2-4e41-9c85-c61cca853811"},
                    Code = "bvtJaU",
                    UsageLimit = 6649,
                    MinAmount = 688,
                    StorageId = "c858cc20-7a81-4e10-85cb-0ab52f71dd20",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon41()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 8943.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"a9141c89-439f-4efc-92c9-abb23560f241", "b57222e6-53ad-4315-8f2d-ca0c5531a82b", "8ccf1b76-1f99-4921-b523-501a151ec737"},
                    IsPublic = true,
                    Code = "S8pT",
                    UsageLimit = 9100,
                    MinAmount = 6283,
                    StorageId = "2973fab7-d969-48f7-8eec-858944142f9d",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon42()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 2873.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"8f1f38cb-f505-4e4e-8035-583f3c425d00", "b934fcaf-69f9-4018-80a0-58a833d7499f", "af737ec3-04a0-4a73-8214-8444256f39cd", "b8afc1be-5f18-4075-941c-315ebc383975"},
                    IsHidden = false,
                    IsPublic = false,
                    Code = "g6vjoZFJ",
                    UsageLimit = 85,
                    MinAmount = 5941,
                    StorageId = "be4a09f1-6fbf-4f3b-8a1d-02f505bd6cf7",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon43()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 5976.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"e557e7ba-6a4a-44b5-859d-a160d4ad3e9b", "98b867ac-c3a2-4d71-8336-c1971e6ab6c7", "2de80ce3-fe4e-4b50-aec3-e820f6c36e12", "896d3d9a-6f45-4956-9bfb-800fe51e3250", "a028813e-26a4-40f1-b436-bc40ed8305c7", "a4de3b64-17c9-4f50-a52c-684a0d4b58ed", "c7157023-9538-47e1-9c63-de9d32085c28"},
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "z4K3IA8J",
                    UsageLimit = 7744,
                    MinAmount = 9440,
                    StorageId = "166ea7c9-32a7-46cc-9ef7-e3c493cd0592",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon44()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 8281.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"c7d7a0c8-1c11-49d7-b1bc-2d39b9495d07", "63afb068-bf14-48b3-bee1-0e7962946410", "9e4f50d9-2482-46f8-a14e-c5fbad91fde7", "8fb414a4-6012-417f-a71f-90a02f3e865c", "9b6fe81e-45cf-4319-804a-b839408d8efe", "0691c084-bbec-4c7a-8f2d-80b72d6e7596", "0e85051e-5148-4c0f-8df3-9d376dd4e2ad", "8616a8f2-12ae-4938-984d-dba6716a363c", "05d7c8f7-8c22-4370-9d0e-6a1e0d7f3bbf"},
                    DisplayEndsAt = "2022-02-02T07:15:39.000000Z",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "fo",
                    UsageLimit = 9859,
                    MinAmount = 3570,
                    StorageId = "054efdb2-fdfc-4f7e-a71f-32168bf9c2b0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon45()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 4104.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"d9a9773d-bd66-45fe-a324-96bafa3bed7e", "65a077dd-aa5a-4596-a0d9-7099d1f1b390", "24b56786-6392-4831-b554-aeec496545a8", "a39a3544-46a1-4366-af58-ea7a044a3830", "868ec575-6044-47e5-af11-233d6319ecf6", "1dc51783-f87b-4cb2-8712-ef272d10b961", "f770e2e0-3f78-4f11-a885-e43f3814f8a6", "570004cc-1789-4a85-8da9-eb6add3ac78b", "f528585a-9d82-4ca6-a84d-fa7e8c924137", "a4d8b217-ea07-41e6-8218-9abe663e2bf4"},
                    DisplayStartsAt = "2021-03-31T10:30:04.000000Z",
                    DisplayEndsAt = "2023-10-18T11:21:08.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "PQLWJArP",
                    UsageLimit = 9201,
                    MinAmount = 3123,
                    StorageId = "6dd3f59e-6e1a-4af4-b0ac-5a0f60ef3f9a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon46()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 2217.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"1348c0e3-4f38-4be7-8ba4-3f77691e83ba", "9d43c561-aa64-4707-8eee-a8c0beafb8fb", "e029f795-c6de-46f7-b5e5-f2a0372530c3", "ef6c267f-f209-4220-8b71-659c4536f594", "687962e6-2e0d-49da-a46b-ce9bf426cc19", "39eb0edd-4d3c-42f3-bfd6-2c4ceacac711"},
                    DiscountUpperLimit = 8879,
                    DisplayStartsAt = "2022-08-29T16:53:22.000000Z",
                    DisplayEndsAt = "2022-01-14T05:47:38.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "Ja8YkV10V0",
                    UsageLimit = 4515,
                    MinAmount = 6632,
                    StorageId = "f265e527-cdba-4fa0-89bf-f766531418b8",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon47()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3e5abddd-282f-4612-9b28-1bb05661efbe",
                    "abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4",
                    "2020-01-05T02:33:18.000000Z",
                    "2023-12-03T02:07:18.000000Z",
                    "48bdac3e-5f2f-4fd3-9586-9eac55ddb844"
                ) {
                    DiscountPercentage = 7429.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"7b1724ac-a17f-4af4-9147-95aa2da74bc8", "edccfea7-2070-4dba-8c29-66f64a475c33", "3ac17578-6ad0-4c51-baa1-c2502b58ffa5", "83b226ce-b83b-4d82-bb87-2abe67ab8d97", "306e84bf-ad5a-454d-bae1-b3b323e760e3", "77eebe54-fced-47bb-aa10-51d43d19673f", "c03a7df3-603d-4b6c-9f54-092670d9ee44", "a22afca9-8005-4348-badd-34718eaec1b0"},
                    Description = "0PkzT3rjRscSaTDEUxwAJXNLOLDUjAEUO9KUSGzbSRmda66Hxc4wf0VsciZqVg9CY4JyxUqm9QYX9eOR0RPX1REGDLSjexe42N6h2JPSKXOz8JwoXWD3OcRqlTHYwOestfQFum",
                    DiscountUpperLimit = 7633,
                    DisplayStartsAt = "2021-05-07T23:33:42.000000Z",
                    DisplayEndsAt = "2021-10-06T04:45:26.000000Z",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "Usw4hfYXr",
                    UsageLimit = 8120,
                    MinAmount = 852,
                    StorageId = "90c85dad-cf77-4f73-b76b-aa1f5bba0f00",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
