// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCoupon0()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 5887,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon1()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 2355,
                    StorageId = "be475e1f-f3f9-44b8-9749-b7f478fe0ac3",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon2()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 5177,
                    MinAmount = 8066,
                    StorageId = "8e954ed6-a859-4b94-a280-5310e78a1060",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon3()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 615,
                    UsageLimit = 6537,
                    MinAmount = 1811,
                    StorageId = "ad351f28-6079-42e4-85e1-256c69d8c247",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon4()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 8507,
                    Code = "6qE4T1vO",
                    UsageLimit = 6603,
                    MinAmount = 6541,
                    StorageId = "5854cf41-fa1e-4834-8977-7aa5242f0104",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon5()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 8787,
                    IsPublic = false,
                    Code = "gi",
                    UsageLimit = 2057,
                    MinAmount = 2858,
                    StorageId = "d6c4b46a-25d7-4d08-9279-2ca9b40588f8",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon6()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 3608,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "ekV8cI",
                    UsageLimit = 477,
                    MinAmount = 5316,
                    StorageId = "e2cb1bdb-265b-452f-9430-c9a029af4c5e",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon7()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 4762,
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "8h8evW68NK",
                    UsageLimit = 1776,
                    MinAmount = 3221,
                    StorageId = "a2ee087f-c55e-4c64-ab0b-9471fa211a30",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon8()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 6224,
                    DisplayEndsAt = "2021-09-15T04:42:53.000000Z",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "o6iR",
                    UsageLimit = 6922,
                    MinAmount = 8020,
                    StorageId = "634603de-a741-450b-88f0-e1237598b70b",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon9()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 1797,
                    DisplayStartsAt = "2021-04-05T13:18:21.000000Z",
                    DisplayEndsAt = "2022-04-02T23:15:26.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "TXOxFwqhkp",
                    UsageLimit = 7770,
                    MinAmount = 6358,
                    StorageId = "194600a2-bb96-4c61-8468-100a21e1c3f0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon10()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 7750,
                    DiscountUpperLimit = 3100,
                    DisplayStartsAt = "2020-07-12T09:55:31.000000Z",
                    DisplayEndsAt = "2020-06-18T03:03:23.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "p5bfKVt9D",
                    UsageLimit = 1488,
                    MinAmount = 2085,
                    StorageId = "9ad990d6-defa-4f56-80b6-6c9db1029295",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon11()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 374,
                    Description = "yI6ywfpyKilj5zg8pn57kF0DYbPLXjuwrpeD0A9IDYP4sAiFNwaac9r9GBqh0SVIl9M1spjv4mKXU1rVLf6U0K44BovHKqYzk7GBG1DZKj2tBRFerhSuL22gGga7pF0nmLMfnIYTQdqHJZ8WnDHEVfpIBtEOMP2U7IkYygmkkDxd3MzpkzvPsPo2vcZvKaf470Dw5YI6SeAOBDBgRAgmjxZGGCqaBwJ9iXjXSEfbkdsvlfnd1NOUEcUOGTeYu",
                    DiscountUpperLimit = 3253,
                    DisplayStartsAt = "2022-01-17T11:30:12.000000Z",
                    DisplayEndsAt = "2020-02-02T19:16:06.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "n8lh",
                    UsageLimit = 1339,
                    MinAmount = 1865,
                    StorageId = "ab264084-1055-49a0-a30d-307e9ab05a67",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon12()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 7369,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"aeb859b0-cfae-446f-8e60-a0885720cc84", "b6f0068a-70a8-4555-9234-0e082de60bfd", "4797d3bb-6924-4512-80a4-b11bfffb57da", "054c1ef4-990e-48da-91da-d6cf389cc0e2", "657156c8-059d-43a6-ad64-a97275646730", "ce24fd00-247b-4fce-8207-2836adcfaf94", "5b631576-4ff9-41ec-a009-7e1c53d3927d", "28cb5c94-0c0c-4aee-ac5e-fada8c446052", "398df768-72c7-43a1-a4c4-014d8dabcd02", "f3c9e73b-74f8-4703-82aa-86f54c8abfea"},
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon13()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 9231,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"14352341-1522-45b7-ad65-32a2a431bd92", "4311e0a5-8cc4-452b-9b2a-09a65d3eac3d", "af629f84-ffcf-4403-81ab-d003c5759a98", "f25ab157-7cab-4a11-a5af-7aef734c8015", "ccbbf4c4-eaf0-4465-93c6-3bdf84ce1ee0", "2152fa0b-1036-4803-b6e3-f453400bb3f9", "319ef67b-b41b-40e7-9c31-4cce8fac1e39", "146e7b91-e870-4d94-ac78-ca37bd64587c", "7f97ce2f-3dea-4019-9c6a-6cc8f65646cb"},
                    StorageId = "40b2b7a0-1531-4545-96fb-2631261b8750",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon14()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 8533,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"6a264609-5e2b-4175-967f-0ffab378b03a", "8d34de8f-67fc-4792-a40d-62542ca59b80", "03573026-6816-445b-a0a1-15b2ee307e06", "15eb5690-31be-4a59-9656-7c3b8047dbce", "1613d2a1-d667-420b-9d5d-a96b141ed168", "7843dec7-5c5b-423e-897e-f8e9b28173cf", "221091e1-d024-494a-966b-b5b8597d6512", "69be73a4-3023-4d27-8857-255713274b9f", "66188be2-f3d8-4c4f-9e92-5c4df788de73", "a4e113f9-bc1a-44cd-8cde-f2d6d2fa8a90"},
                    MinAmount = 5122,
                    StorageId = "e2a1890b-32a3-4a91-a81b-e89171f35dcc",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon15()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 4401,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"e8daf159-ac0f-4830-a85f-639b908a2646", "83f0ff3e-8f13-4a26-897a-b78d46c24eaa", "4f431e0b-782f-4ed6-87e0-1504196c1490", "dc60e31b-0eab-4af1-8fcb-e5c657e5156f", "d7a3fe55-3833-4217-b893-84ca3202aace", "b7533690-eb4b-4360-ad75-4d7fae2206e1", "19b6bf44-f4f2-43a2-9e34-cd3f8836d5e3", "7b41a313-9d80-4b2a-bd7e-222c471f01a0", "d8b394cd-8153-40ab-8108-a400d7d95667", "c7be4dc8-42c4-4a14-8140-586cec7d39cc"},
                    UsageLimit = 6034,
                    MinAmount = 2830,
                    StorageId = "1d001a50-ea36-42cc-af1a-6b11f68f5d07",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon16()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 7861,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"a93a3179-012f-4b53-832a-f7b12d940d94", "30d98b10-d7f6-4237-8804-414c71377bb6", "3ef65e3d-e46c-4a43-8d34-5ef996b2c940", "1a5a5186-589a-4812-b271-00bbeb417ab4"},
                    Code = "3mHyvfAo1Z",
                    UsageLimit = 7065,
                    MinAmount = 631,
                    StorageId = "e96c086b-5918-4064-a4b2-3001a1f872c1",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon17()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 6167,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"f732fd8b-ff79-444e-b132-85a0883470bc", "d101cbd0-8ad7-439d-b9e5-aed0364c695a", "988b178f-7c48-4687-9f5c-3eb192de26d6"},
                    IsPublic = false,
                    Code = "DlcE5mr",
                    UsageLimit = 9908,
                    MinAmount = 8344,
                    StorageId = "edd9e114-4d49-4aad-bbb9-532d06880809",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon18()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 3582,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"e175cad0-74dd-45f1-bf86-e0317118449a", "72ac22eb-356c-4bfe-a58e-987dc5facb29", "e970cad0-7a1a-480f-86d9-e1c9a735bb85", "03a74be9-f7b4-4d7e-a61c-1367a873a25a"},
                    IsHidden = true,
                    IsPublic = true,
                    Code = "F",
                    UsageLimit = 9607,
                    MinAmount = 4994,
                    StorageId = "0e275e39-db99-4f76-bb5d-ac844cb86720",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon19()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 6226,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"e3e4242c-9d8d-4c94-84a5-c75584cdb638", "a3dcb9ca-3bb5-4539-9e4f-305bb01b001c", "f84498f4-d4e3-41ef-9feb-243c4bc11f86", "9feb237f-4e1d-4b2b-bea8-b5c5a6cda5df", "27d27a84-f216-42a8-8d4d-38d601024e5e", "23140d9b-985d-4389-a86d-cacb6a3ee0db", "4cef74fa-54b2-4a8b-a97b-6cdb22b0c82c"},
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "oGU",
                    UsageLimit = 5553,
                    MinAmount = 4303,
                    StorageId = "f4657b8d-1103-44f8-9f81-4a55e26667c0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon20()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 2849,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"0357376c-163a-4406-81b7-6a094660d76a", "08f6d53d-1502-456c-9cd7-6e787359ddc0", "9b1fbd99-d9f2-4c66-8394-6a10c8674f45", "5d77d74b-d84d-475f-9182-6738bf14bec6", "7c0274a7-d99e-4643-b3b0-cba871f0518f", "1e17f736-87b2-4b50-8c62-083500584439", "3096f979-ad2d-4366-ba6e-e769b9f4e0f7", "a6286e1a-a71a-4a38-ae5a-0b60ac43cdae", "ba336eaa-c8b7-4c54-b2af-81eafd716822", "3e4557d7-d900-4d68-935e-8fb0ff54fc91"},
                    DisplayEndsAt = "2020-06-20T00:24:34.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "rr7bO",
                    UsageLimit = 1572,
                    MinAmount = 6485,
                    StorageId = "86034266-1a4a-4417-9bee-f97d70258996",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon21()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 730,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"2e16e56f-0267-4878-9365-c143ee94cb9e", "b408127e-a90e-4357-b81f-ad8e80ccf0e2", "d1c4b363-53b4-48a8-b75d-f8eccac7f85d", "92bc7786-5c3d-4fbd-b050-e7b2b796cbc4"},
                    DisplayStartsAt = "2020-05-21T00:45:30.000000Z",
                    DisplayEndsAt = "2023-09-27T14:09:03.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "DSK2",
                    UsageLimit = 1971,
                    MinAmount = 6605,
                    StorageId = "a4e76683-6980-4edd-ab3f-2b38ff753a16",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon22()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 9092,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"757b9ac3-4bec-4dee-9d28-c030ff79b96e", "4d4efb8a-00e5-4293-b878-50352b484c8d", "caa77ac3-8045-49f7-b57e-a404750c1c12", "9e3df9b8-7633-403c-8a32-72d770a2385f", "ce5efc45-1f42-4069-a9dc-dacf175cd196", "7f542ac6-327b-4c10-b577-7d6e034b0e80", "7c52413f-4187-461b-ad65-ee3b097df35b"},
                    DiscountUpperLimit = 1288,
                    DisplayStartsAt = "2024-02-01T23:55:52.000000Z",
                    DisplayEndsAt = "2022-06-16T23:20:52.000000Z",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "H1pqqlIh",
                    UsageLimit = 7688,
                    MinAmount = 2304,
                    StorageId = "eff9f69d-34cb-4beb-924f-b6ee68c7b650",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon23()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountAmount = 3739,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"a21ed365-d0b3-4967-88b3-5c4f5a1751f1", "44314f59-c120-4fcd-bc86-367fbd47aa44", "77a55c36-d540-40d9-a737-f91ccd8b502f", "49b3b702-c566-4f1d-aa10-e189b772e76c", "d3e3cbba-506f-4770-8a70-96dcdc5c834c", "68b87730-ef03-4d9f-b684-a8f73e0c8d52", "a71836cf-e7d1-4496-bf5a-1d2b6acfd233", "d8e3a817-4d8e-4e33-a41c-5453a0a2a88a"},
                    Description = "51CrQZVorM80jAnbL9pF2AijYf8ydTws4HIQ4AniWPzD9CM0oL6ak44VafBlkQEtaE8xbTpd0PiIwS54q66i2nXWkvfusE3magR",
                    DiscountUpperLimit = 4440,
                    DisplayStartsAt = "2021-11-29T02:34:42.000000Z",
                    DisplayEndsAt = "2022-05-31T06:28:06.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "N1",
                    UsageLimit = 2481,
                    MinAmount = 421,
                    StorageId = "6e51bde4-f77f-4069-a454-254921597d50",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon24()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 7961.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon25()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 9549.0,
                    StorageId = "fda064a7-5e79-4bfc-a326-231c5edf658a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon26()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 2284.0,
                    MinAmount = 2735,
                    StorageId = "af42ed24-b7d0-4937-b8d8-214a5287d249",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon27()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 3890.0,
                    UsageLimit = 9952,
                    MinAmount = 4966,
                    StorageId = "35149deb-f3ef-418b-998d-7611adbaff07",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon28()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 7060.0,
                    Code = "uaeWPZ9",
                    UsageLimit = 5663,
                    MinAmount = 5409,
                    StorageId = "eb89a999-202d-4332-9d12-27cb488fccb6",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon29()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 8794.0,
                    IsPublic = true,
                    Code = "1zTkBm",
                    UsageLimit = 8190,
                    MinAmount = 3281,
                    StorageId = "b0d3005b-4ffb-4409-bff3-e055d340694a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon30()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 3167.0,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "79pUjuQLW",
                    UsageLimit = 6154,
                    MinAmount = 4554,
                    StorageId = "0fa512d1-9515-4ac1-88ec-fce3225aea29",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon31()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 2224.0,
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "fIBEGWMOe",
                    UsageLimit = 6539,
                    MinAmount = 8342,
                    StorageId = "5bde6687-5f8c-4efb-96fe-907a56916a8a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon32()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 7542.0,
                    DisplayEndsAt = "2021-11-04T16:20:23.000000Z",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "f46VZC1gRO",
                    UsageLimit = 8119,
                    MinAmount = 7551,
                    StorageId = "b431fa85-9887-43f9-bcdb-8bc4de099877",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon33()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 6135.0,
                    DisplayStartsAt = "2022-02-14T00:49:50.000000Z",
                    DisplayEndsAt = "2021-05-19T14:59:28.000000Z",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "r",
                    UsageLimit = 326,
                    MinAmount = 2796,
                    StorageId = "3e5abddd-282f-4612-9b28-1bb05661efbe",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon34()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 4408.0,
                    DiscountUpperLimit = 7777,
                    DisplayStartsAt = "2022-12-18T11:53:07.000000Z",
                    DisplayEndsAt = "2023-12-27T21:12:28.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "qydMn",
                    UsageLimit = 3684,
                    MinAmount = 3115,
                    StorageId = "c761280a-09a5-4489-a7a8-ae3cee2dc6e0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon35()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 2106.0,
                    Description = "sD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4nyVSUDS2rGPI8RxpE3teEPiaYEe",
                    DiscountUpperLimit = 1336,
                    DisplayStartsAt = "2020-09-14T07:21:18.000000Z",
                    DisplayEndsAt = "2023-06-01T20:38:59.000000Z",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "oSB",
                    UsageLimit = 5890,
                    MinAmount = 7047,
                    StorageId = "49dab42c-3348-492d-bc93-adbcdd2caee5",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon36()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 8998.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"e926cede-9074-4e3d-be47-88e831f7ba96", "1ec55f27-dcc6-4b67-bb85-ff4a3a5d3c22", "76bb3bad-e5e4-49f8-88dd-c26c12486a73", "c22019eb-c167-4967-b64c-b3a645c3184d", "1969a8b7-d089-4b7f-8489-ae4833196868", "8880ff57-fd49-47d1-b286-b261e8e8645c"},
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon37()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 2070.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"a6c160b7-4515-4070-97bc-4d9e04b70235", "5b3b93a6-0bf4-4f88-8cbd-84c43d001682", "21b46bd3-82cc-4733-9c3e-20fe32359a98", "32829cae-a545-477c-907f-dd59b53c32fb", "1e68af05-3a58-4376-98dc-e84d0fc9be2b", "ec37eb8f-15d8-4364-acfc-b74970ad2558", "33814ddc-7d06-4ff8-9fc7-14c1e72f9b7b", "011c5838-a93c-4c65-bb4f-dd11b8312089"},
                    StorageId = "49b22993-7d74-43be-9d64-f5c436dbbe67",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon38()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 2824.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"69ac7627-42dd-48de-9a3d-3c143aa0ec1c"},
                    MinAmount = 6518,
                    StorageId = "6ea37fbe-d076-400e-b360-fc5525a9ae7a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon39()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 8057.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"f2619f98-688a-447d-aaeb-325027b300d0", "9dbdfee5-7bcc-4a33-91df-e25386354a22", "44ff5ae5-4248-42a2-ac73-b43eda88e901", "10bb385e-0b3d-4c0b-a0fa-2d4b7a84ce61", "d2d55b9c-dbec-45b8-954a-b32bfc8c4337", "6704b400-a16d-4e5f-b6ea-9b89404b4554", "d44effc6-43bb-4755-b077-6ad72abb12fc", "ace5ccc1-8dcd-4505-bff5-66a86e5b1db8", "8be34139-750a-496d-84b0-acbfd026f388"},
                    UsageLimit = 7764,
                    MinAmount = 8458,
                    StorageId = "754736bd-c6f8-4e5c-ae25-d3d7a05bbfa2",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon40()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 1795.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"9be7f5d1-fc80-4d55-9379-6c98cb700fd7", "f9549461-e256-4ae7-820b-f0612d119b4c"},
                    Code = "MWptjgf0",
                    UsageLimit = 966,
                    MinAmount = 8041,
                    StorageId = "d9aea15a-31da-4b03-8493-0c601fa20991",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon41()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 1243.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"73f83ac5-c04f-45b2-bcfb-7050cc7526da", "0bdca3ad-03dc-40c1-a0b9-68e29a6de9e9", "18d9c289-baef-4484-912b-6e5fc1e4d7cd", "22906b88-0350-4247-9331-9f2b24ffac94", "450483c5-83b8-4bb1-ae6a-ce96e9939a2c", "1b9d918b-cac3-41c1-a0d2-29fd77437129", "45ab5b60-a95c-46d8-bce2-716b36a133b7"},
                    IsPublic = false,
                    Code = "17C",
                    UsageLimit = 5458,
                    MinAmount = 1500,
                    StorageId = "b28af5af-9a46-42b6-8c79-980cc6cd1f4d",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon42()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 4600.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"606192c2-c841-470f-9aa6-fff8ece17406", "c7a869af-9010-442c-8e3b-1d83cdaea6f2", "992a2241-8d9e-49d3-846a-2ddbfd0255b9", "41531856-02c7-4d7b-b2b6-d9f28a0ac851", "4f216c15-1ebe-4ed7-852b-a766361f40ac", "2150c145-bd28-42d0-bb01-eb37dc2a7773", "2afcef97-e396-47b2-a619-e9b75626559d", "fe828b66-42b5-45f2-8a54-91a03c604534"},
                    IsHidden = false,
                    IsPublic = false,
                    Code = "2Cz81XNouc",
                    UsageLimit = 1665,
                    MinAmount = 9615,
                    StorageId = "939209e2-1c45-48a9-88f0-db8fd62e7f87",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon43()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 3832.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"1c3722c6-fa2f-4a5c-afd8-5f23c60a500f", "4c56c0b7-012d-44d0-88af-dd440b482109", "82a7e1e7-4d98-4b2d-a772-eafa695c876e", "72cc23ce-0757-4f8a-8256-02097379a4b0"},
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "BBTTp6AGpM",
                    UsageLimit = 4878,
                    MinAmount = 5581,
                    StorageId = "35039622-eaa3-4ae0-8f9d-0e3e8a4c09cf",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon44()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 4254.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"b0fe2133-5ce2-4774-8048-daad4fb5bf59", "eb4bfca3-6f9c-4617-87e9-f5aa038b2dc2"},
                    DisplayEndsAt = "2021-08-10T20:48:40.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "al",
                    UsageLimit = 8194,
                    MinAmount = 7029,
                    StorageId = "1662b1b6-af03-429c-8012-789e3c0c4263",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon45()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 360.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"a369adc4-0317-4bd6-b220-18d0eb4a55e3", "08abf01a-b1ea-4a0d-940c-8bdca1423ca4", "bdc0f29e-7601-43b2-a3f4-76913c8e20f6"},
                    DisplayStartsAt = "2022-05-03T00:48:45.000000Z",
                    DisplayEndsAt = "2022-07-29T04:38:50.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "uG53qZW",
                    UsageLimit = 3328,
                    MinAmount = 1658,
                    StorageId = "8d68c302-5210-4ea0-8721-b113b98f6eef",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon46()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 6944.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"36a6f82a-b023-4175-8075-f54278575cdd", "e63fda58-b3b6-41a1-8cfd-e2dc465eedd5", "7d744ad5-4b5f-4f8c-a0d5-b3c2f4507fc5", "fdd6f8ce-d1fa-48bf-b952-caa6838cc431", "c997380a-2538-409c-b2ce-b60f3f1618d1", "d1727302-c76a-4c54-81bb-fbd259de9f78", "c4714663-ddcb-475f-89bf-acd7c943f0e3", "c3451d24-92e2-4208-8920-4a31932f18ee", "811b8379-4fcc-4dcc-9688-30c9160693ad"},
                    DiscountUpperLimit = 5799,
                    DisplayStartsAt = "2020-08-15T06:31:23.000000Z",
                    DisplayEndsAt = "2023-05-22T07:07:16.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "PKIYR",
                    UsageLimit = 7361,
                    MinAmount = 4972,
                    StorageId = "c4afa331-685d-4955-8375-0ddc9ccdf993",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon47()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "901ca15e-13ad-4082-bb64-8a93ee34f22c",
                    "cpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7SrCjimdlgwn9qvauQ2kDhj5HLJcSNTCm3",
                    "2021-01-02T06:39:44.000000Z",
                    "2021-06-09T15:15:05.000000Z",
                    "a2034002-634b-4989-9a5b-9213447539bd"
                ) {
                    DiscountPercentage = 9681.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"700af5e3-ddd7-4b67-9846-2f6ca99c995b", "ee279551-dcf2-4b94-9ec7-8a2f3e83bc2d", "23746f5b-a15c-4de4-9bd2-6e8f6939c371", "ee21a37f-b22d-4856-a433-42c386afe982", "c7c944fd-9649-4996-acc5-f8b359a968a0", "9127d928-3be0-46ab-a4a5-c24ffbe3d5ac", "55a1cbb8-c8c8-4e92-a47d-eae9453d1f81", "be39fdaf-5840-482f-a8b7-7c2b4efba1d0", "87c07719-7129-4f83-8ae1-27ff5b05fb28", "c642fe5d-b701-4579-82d4-8ab567c9ee3e"},
                    Description = "IgAK5b9hyZhcZh8MuSlVRKgCSpIL13YYuGN17rfT9nOtCiuSxp7i1rcacR4EWmJRYE0vgLGn2OdxgxwF29eViuwKtjsRjzvb8XUneGNN0gcbjHE0ykOW2yVlHndMAdWY9HjNAOFWD0f28rlwLb9YSbpNpmMET9MPbipC8utokX",
                    DiscountUpperLimit = 4816,
                    DisplayStartsAt = "2022-03-02T22:41:12.000000Z",
                    DisplayEndsAt = "2022-06-01T20:56:17.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "coqfiAU",
                    UsageLimit = 3590,
                    MinAmount = 6951,
                    StorageId = "f10f2ad8-6c78-4e91-a346-d59dc58fd3df",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
