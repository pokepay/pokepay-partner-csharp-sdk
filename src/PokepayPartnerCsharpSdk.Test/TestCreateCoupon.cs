// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCoupon0()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 2681,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon1()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 6011,
                    StorageId = "3b63aaf6-f8ae-4566-813e-9def6896acb1",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon2()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 7612,
                    MinAmount = 4954,
                    StorageId = "24c65b99-f16b-4277-ab18-606462089fa4",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon3()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 4786,
                    UsageLimit = 6167,
                    MinAmount = 324,
                    StorageId = "7935ed8d-cdef-4c12-8b79-744e98ba5b71",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon4()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 5170,
                    Code = "P",
                    UsageLimit = 2775,
                    MinAmount = 3257,
                    StorageId = "5de441e5-aed0-495a-8f48-6687d0fc785f",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon5()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 2140,
                    IsPublic = false,
                    Code = "16DlcE5",
                    UsageLimit = 6363,
                    MinAmount = 4717,
                    StorageId = "271d709b-8d7b-4772-89b4-a098edd9e114",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon6()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 3401,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "qCPq1klPYI",
                    UsageLimit = 3049,
                    MinAmount = 7550,
                    StorageId = "fc1b0366-1c1c-4367-9a7a-8cde77df3c2e",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon7()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 7355,
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "9vCRDU8",
                    UsageLimit = 4510,
                    MinAmount = 28,
                    StorageId = "f84498f4-d4e3-41ef-9feb-243c4bc11f86",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon8()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 9087,
                    DisplayEndsAt = "2020-08-24T10:30:29.000000Z",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "MMVhmKz2i",
                    UsageLimit = 9083,
                    MinAmount = 2092,
                    StorageId = "a2ae1eaf-bedf-4128-aac2-f0ef12eb22c7",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon9()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 9557,
                    DisplayStartsAt = "2021-08-28T13:14:25.000000Z",
                    DisplayEndsAt = "2022-05-03T16:47:09.000000Z",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "Um",
                    UsageLimit = 7179,
                    MinAmount = 2558,
                    StorageId = "610fe149-376c-463a-8681-28b7766a6a09",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon10()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 5994,
                    DiscountUpperLimit = 5437,
                    DisplayStartsAt = "2023-02-05T18:31:30.000000Z",
                    DisplayEndsAt = "2020-04-03T02:09:27.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "fEK",
                    UsageLimit = 6221,
                    MinAmount = 1887,
                    StorageId = "7595e5d1-4982-4738-86a7-d99e94f85643",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon11()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 9587,
                    Description = "62PLb59yfzniw8Z7TrjWh0BQdrr7bOC0AUfJnZnSogxeCWxbc4wl0P2Dqh3DSK23Mk8m6Cln0nexx5CEw583J2WEBiiOFuwneTfWH1pqqlIhFKkOnPRe3g3OqYMD6Y7flopJpL06wROQZ33dSb51CrQZVorM80jAnbL9pF2AijYf8ydTw",
                    DiscountUpperLimit = 6324,
                    DisplayStartsAt = "2022-02-13T00:10:59.000000Z",
                    DisplayEndsAt = "2020-11-12T23:24:26.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "WPzD9CM0oL",
                    UsageLimit = 5388,
                    MinAmount = 6703,
                    StorageId = "5e37f491-a613-43df-b661-77bfa3fdb404",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon12()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 5307,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"480d0db4-9ba6-43d6-bd5d-7061b57d6d06", "d5ed2fe6-aaff-4794-bd42-9300a1ba0dec", "fc1cc96b-f051-4c45-95bd-e1f4fdd4c6e1", "46fdb0c5-6087-4d0e-b8f8-712e24f1148f", "a2d38a62-4f19-4b54-b0e4-073ff1940585"},
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon13()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 2341,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"10ef8fe9-7849-47a4-afde-18de028f3a0f", "1b86900c-6877-445d-9e9b-2453304ae6b5", "450fcb3f-f834-47a1-97f1-a23611042d13", "4c53e1bc-2e36-4da9-a93f-871423cc2a0f", "69593e29-cb05-4c32-805c-ffeeade8d65d", "8944cf58-62d7-4dbf-bfeb-ef7cb219baf6", "66d24ce6-33a1-4a16-b580-cd73cec38da9", "b36f5521-4545-4bb3-8613-d985f663f4ed", "06c9b882-4de1-48e7-925a-7fc0a0cd5158", "13985b42-d476-46a0-9980-bc51d5ad334e"},
                    StorageId = "fcbb9489-1b31-49b1-a5e4-f77f02e1a069",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon14()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 6564,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"21597d50-1f19-454d-a779-2bfca98e67a3", "17bd0226-231c-458a-acaf-ed2414a1b7d0", "79983937-5838-4bd8-8a49-2b064193cf32", "f12066e0-1366-4deb-af8b-dd59de5a258d", "0dd47611-ff07-4b8e-9486-a92c81c1e0bd", "e556c586-a724-4a92-9b0a-199d05ffdb85", "ea7f6fbe-ec93-4f0e-ad85-b807fcfd9f75", "66e36dba-6b93-485d-ac1c-806157b9a002", "ed1cc5ae-a4a9-4465-ac57-658db9f71fd0", "06b350da-aa39-498e-9f28-d521eb89a999"},
                    MinAmount = 8237,
                    StorageId = "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon15()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 2172,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"24c06eeb-8eac-42bb-82ed-3e35dbe5eade", "08231ffe-af97-4cd1-9bfb-940988eaa93f", "0ebeb9f3-e055-494a-9f49-662e34d5370a", "cdbc1178-c737-413f-867f-4d9f7d3d6c60", "e5d42a39-98a8-49f0-95ea-3575f55af9dd"},
                    UsageLimit = 2444,
                    MinAmount = 6525,
                    StorageId = "fbc8c3d1-262a-424c-97ad-7fb3747b760b",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon16()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 6154,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"1cc39515-8ac1-4c08-ace3-ea295f65c8b0", "e4a1fc6d-7cae-4f97-b85b-2e5b08dc75e6"},
                    Code = "IB",
                    UsageLimit = 4507,
                    MinAmount = 3624,
                    StorageId = "c9b1bf3f-6147-4b2a-97cd-e7cf270cfa8b",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon17()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 9061,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"251dfa67-2096-4687-8cfb-ae56e90423fe", "365f907a-6a8a-402a-b647-8fed451831fd"},
                    IsPublic = false,
                    Code = "f46VZC1gRO",
                    UsageLimit = 8119,
                    MinAmount = 7551,
                    StorageId = "b431fa85-9887-43f9-bcdb-8bc4de099877",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon18()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 6135,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"fea3b0ef-d073-42f7-9acc-8350c818f340"},
                    IsHidden = true,
                    IsPublic = true,
                    Code = "08a",
                    UsageLimit = 7715,
                    MinAmount = 2658,
                    StorageId = "d8394992-a788-487c-be14-911ba93a3971",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon19()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 9956,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"10d52dfb-831a-405c-a05d-76aa00449d8d", "ecd45f9a-7a6e-4e64-ab0a-09a5e0972489", "8b525c67-78a8-4e3c-a094-eb37c5b6f14d", "4a05b26d-083a-4246-b344-d9ac47868a32", "82ac7997-679a-43ad-a2c3-dda5f476f381", "f5e6399d-caf0-4b5a-bf88-20984eba5966", "940b7839-962b-454b-8fed-85fa1b51a9f8", "8e70ae16-6d32-47e3-93f6-196390b4fc12"},
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "2",
                    UsageLimit = 9912,
                    MinAmount = 78,
                    StorageId = "5f47b150-a5fb-4dd7-b1ef-f93662280b58",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon20()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 4922,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"4b022302-b071-4e23-b209-6ed2f2170cb9", "c46d45ec-eae7-4298-b093-bdf46ba75bed", "86b6337a-b7b4-49ee-b9d6-ac3e859a5f2f", "b8545fd3-b6d5-4286-ac44-1da4e4b611d3", "fc7f998c-9b05-4732-ab72-0347d884e950", "8cdc15c9-592a-4f15-8091-723c5db35f0e", "45bd37df-e838-49d2-b870-23c57e541e33", "24884974-32e5-44c5-9069-1961bbfe4959"},
                    DisplayEndsAt = "2022-06-16T16:03:17.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "ncoL5boSB",
                    UsageLimit = 5890,
                    MinAmount = 7047,
                    StorageId = "49dab42c-3348-492d-bc93-adbcdd2caee5",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon21()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 8998,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"e926cede-9074-4e3d-be47-88e831f7ba96", "1ec55f27-dcc6-4b67-bb85-ff4a3a5d3c22", "76bb3bad-e5e4-49f8-88dd-c26c12486a73", "c22019eb-c167-4967-b64c-b3a645c3184d", "1969a8b7-d089-4b7f-8489-ae4833196868", "8880ff57-fd49-47d1-b286-b261e8e8645c"},
                    DisplayStartsAt = "2021-04-07T21:50:14.000000Z",
                    DisplayEndsAt = "2023-04-02T01:14:15.000000Z",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "5tLDSL3E",
                    UsageLimit = 976,
                    MinAmount = 6015,
                    StorageId = "83b5dd59-32fb-4f05-9876-a79829a407dc",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon22()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 5592,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"70ad2558-4ddc-4d06-b8df-33c7700614c1", "e72f9b7b-5838-493c-a5fb-cf4f5d63dd11", "b8312089-2993-4d74-be5d-4c6491aaf5c4", "36dbbe67-bcb4-4b08-a56d-03a069ac7627", "4c6342dd-a8de-4b5a-bd14-ec1c10f0f2f8", "b6486df8-d976-4fbe-b60e-8233ee676260", "e346fc55-ae7a-4f79-9aab-68ed275f1f08", "f2619f98-688a-447d-aaeb-325027b300d0", "9dbdfee5-7bcc-4a33-91df-e25386354a22", "44ff5ae5-4248-42a2-ac73-b43eda88e901"},
                    DiscountUpperLimit = 2877,
                    DisplayStartsAt = "2023-02-18T05:07:23.000000Z",
                    DisplayEndsAt = "2023-02-26T14:51:12.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "UJ7mvjTFU",
                    UsageLimit = 4400,
                    MinAmount = 4215,
                    StorageId = "307a6ad7-12fc-4cc1-8d05-ce3fa57732f5",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon23()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountAmount = 9896,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"ff73750a-f96d-4844-b0bf-f388bbeeaea8", "e9d1de54-baf0-410a-bdf8-0e5c71a724ae", "dac53c25-d3d7-4fa2-83e3-7efae01e42a1", "9be7f5d1-fc80-4d55-9379-6c98cb700fd7", "f9549461-e256-4ae7-820b-f0612d119b4c", "cf302757-3619-4ecd-9098-f7aa9daad557", "15b859f0-abde-4974-aae7-46bf2d14cb66", "daa4cdb0-43c6-4f69-9ada-2b0315cd9a44", "c2686193-0c60-4991-9b45-c90acfd535ae", "86f4f3ba-4596-4ac5-8fb2-58fc449050fb"},
                    Description = "ZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNoucyB",
                    DiscountUpperLimit = 1665,
                    DisplayStartsAt = "2021-11-24T07:33:54.000000Z",
                    DisplayEndsAt = "2022-05-26T22:20:53.000000Z",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "xFX7PDgg",
                    UsageLimit = 3698,
                    MinAmount = 1902,
                    StorageId = "72cc23ce-0757-4f8a-8256-02097379a4b0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon24()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 517.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon25()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 9913.0,
                    StorageId = "cc760a8d-8b08-41c2-820f-c754d694752c",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon26()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 2644.0,
                    MinAmount = 2544,
                    StorageId = "913d92ab-5d29-40b6-9cc1-dfc737e084f0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon27()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 4878.0,
                    UsageLimit = 5581,
                    MinAmount = 5666,
                    StorageId = "2b68eaa3-3ae0-428f-9d3e-09cfdad7109e",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon28()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 1150.0,
                    Code = "3b",
                    UsageLimit = 6004,
                    MinAmount = 4288,
                    StorageId = "9da3ff48-daad-4f59-a39c-a61729d6e947",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon29()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 1320.0,
                    IsPublic = true,
                    Code = "Qalu6",
                    UsageLimit = 8192,
                    MinAmount = 1298,
                    StorageId = "0c5d789e-4263-4168-a7ba-ec3be5bcdca2",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon30()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 791.0,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "P",
                    UsageLimit = 5603,
                    MinAmount = 6669,
                    StorageId = "3513c814-580c-4bdc-a49e-760186c413b2",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon31()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 3683.0,
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "mZzuG53",
                    UsageLimit = 7469,
                    MinAmount = 5617,
                    StorageId = "25e5dedd-915a-43d7-9400-71d9a37ab37f",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon32()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 1658.0,
                    DisplayEndsAt = "2020-06-30T14:50:47.000000Z",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "u",
                    UsageLimit = 7389,
                    MinAmount = 6744,
                    StorageId = "6c6bb3b6-21a1-4dcc-bddc-edd57d744ad5",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon33()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 2911.0,
                    DisplayStartsAt = "2022-02-10T10:02:08.000000Z",
                    DisplayEndsAt = "2022-09-14T02:35:01.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "R18rNQjTAR",
                    UsageLimit = 8056,
                    MinAmount = 1635,
                    StorageId = "aaf9ddcb-d75f-4889-bfd7-f0e3c3451d24",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon34()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 4834.0,
                    DiscountUpperLimit = 8712,
                    DisplayStartsAt = "2021-04-08T21:22:17.000000Z",
                    DisplayEndsAt = "2020-09-06T03:53:04.000000Z",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "If7PJ4P",
                    UsageLimit = 7361,
                    MinAmount = 4972,
                    StorageId = "c4afa331-685d-4955-8375-0ddc9ccdf993",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon35()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 9681.0,
                    Description = "ycWgFlQrGdRqVd3CIlE3dO8Hdi7PJayBT5IgAK5b9hyZhcZh8MuSlVRKgCSpIL13YYuGN17rfT9nOtCiuSxp7i1rcacR4EWmJRYE0vgLGn2OdxgxwF29eViuwKtj",
                    DiscountUpperLimit = 2473,
                    DisplayStartsAt = "2023-08-26T07:01:38.000000Z",
                    DisplayEndsAt = "2021-10-12T16:23:06.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "vb8XUneGNN",
                    UsageLimit = 2407,
                    MinAmount = 4892,
                    StorageId = "01fef6e3-c062-465e-8560-87ea746865c8",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon36()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 9925.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"e71bef26-eb6b-4e4f-9786-59b22324491b", "06ece43a-139b-4579-a5fe-06bd9057b7d6", "08e2c9ec-db92-41c8-aeaf-dde408eb7808", "f46ffb4d-601b-4382-9e7c-252760cb620b", "5e8f9ebf-a28b-4a20-9b41-d9647864fc7d", "aca7f457-3f0a-4fd9-9f80-e83c674cf45e", "e98b68b9-e512-42c8-90ea-f0079c0a304e", "0b5e4108-8cc1-4dac-8f46-1ed7036c135f", "f1c72d23-ac44-4c30-a632-5c229f271a38", "96c12f23-1006-4e8e-8ca6-f293a0d1e2f2"},
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon37()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 6764.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"7e1bc6e2-ae39-451a-ba8c-be2b2eb117d9"},
                    StorageId = "052dd5d3-f5e2-4e2d-b0ce-4e706716847d",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon38()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 5357.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"742874a9-eaa0-4e5e-bbba-43255b995e45", "8aeebed4-a6fd-4ba9-b94d-7a0a52988a50", "67a4bce2-0140-4169-96ad-2a701666ee43"},
                    MinAmount = 3974,
                    StorageId = "3aa39c8f-c908-4c98-95bb-69380e947921",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon39()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 5382.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"625a8d75-0d74-44ef-abd8-52d0a4141188"},
                    UsageLimit = 816,
                    MinAmount = 1585,
                    StorageId = "81c75320-9ab6-4663-858a-a1ef975565dd",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon40()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 6419.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"66e88466-a8bb-483e-a9c1-85936f579280", "d3f237a8-7713-455e-8ba9-1c29782607d5", "14eb34d7-8e06-4b27-9878-9e91f086b0ff", "29926623-5746-459d-9f2b-b9d2b6d8a27a", "4e481ea4-ae0f-4b3c-913f-c0cedd7ea3b5", "e5e90315-343d-498d-85e6-8fa85818fea4", "9dd3c46f-cdff-4ebc-ac14-677567749cbc", "7151ddba-3e9f-46a9-b1d6-1749a162cd9e"},
                    Code = "JLm",
                    UsageLimit = 6926,
                    MinAmount = 2775,
                    StorageId = "7abe410a-5e46-48e5-87ca-a9bb2e55453c",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon41()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 1905.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"2270ea79-9911-4298-a69b-2fb908d9a7fb", "9209360e-a098-4578-b165-0f2a4e615ad6", "2966deb9-ebcc-47aa-9ae7-ea24b2154984"},
                    IsPublic = true,
                    Code = "4ooRx",
                    UsageLimit = 9259,
                    MinAmount = 9233,
                    StorageId = "5f8ae4be-73b5-4acb-9c0c-17a68e56fdde",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon42()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 8530.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"cbed5ead-a833-4329-9628-3d86ab536a68", "d46cb0fb-c48e-4db8-a567-bb8e10a8bc46", "92bb66cd-57d9-4c55-90c3-c2ce418886b7"},
                    IsHidden = true,
                    IsPublic = true,
                    Code = "J0",
                    UsageLimit = 5696,
                    MinAmount = 1617,
                    StorageId = "a72b5a9f-722a-47fc-bc07-0e07fe0b49a1",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon43()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 1116.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"9b0ae26c-4401-4881-b189-6f3f5e728f77", "cf56edf4-2f3f-4ec4-8c38-48389cb8dc61", "2d772fcc-f566-423f-abdb-7267b0104a2b", "21a39e29-6043-4d14-aea6-82e4780089b3", "f1eea2ac-d702-4bed-b365-a28c2310b0cc", "50b56751-f3fd-4d28-822c-d12473b9a058", "b755c049-e101-4a1e-95e9-15855dcd4bbf", "a40aed59-2e08-46f0-920d-1c5e6682e595"},
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "v",
                    UsageLimit = 4517,
                    MinAmount = 7758,
                    StorageId = "02376599-3411-4a06-a7e6-78a04c1ec3e1",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon44()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 1553.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"05cd51b3-80dc-4150-af6f-559829430677", "b45bc1f0-6d4b-40c1-b825-1e338f4a248f", "bf657a1f-f56b-4f0f-a466-8d872f0aa841", "4b3da133-13b1-45f7-9864-2ab013d03334", "5667229a-d7df-4ca7-92a7-ca5348a40e59"},
                    DisplayEndsAt = "2022-02-28T16:11:13.000000Z",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "g",
                    UsageLimit = 2444,
                    MinAmount = 3982,
                    StorageId = "82d40bac-d8bb-4021-8afb-422dda5c77a0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon45()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 9694.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"a418d31c-40b1-46eb-925f-e572f6d62bbd", "49afa228-f312-423b-a60a-c9f9782a7081", "80fd0f7d-3165-49a2-b6b1-ae26bcb61775", "5f7057fa-483f-448a-adc2-908975705f49", "68f95cdf-7683-4500-9864-329b601846bc", "59fde46e-2c9f-491a-85ce-6446fa3ba695", "c2bee2f3-fd29-4f88-b32e-6624bae15a8e"},
                    DisplayStartsAt = "2020-04-19T12:49:46.000000Z",
                    DisplayEndsAt = "2021-06-20T07:52:06.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "ZrD72DB3",
                    UsageLimit = 7716,
                    MinAmount = 4832,
                    StorageId = "cadaea37-0726-4b13-87c3-4e8bd595fb52",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon46()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 6260.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"4163155e-efd0-4ca7-bc78-3c08c7c6f3ff", "9de1771f-a2e9-40d0-be49-581a03b901f7", "f6e311c3-cabe-446c-871c-109add2f9c25", "776437da-2d31-42cb-a2cf-7ec75cbea909", "a2e80ce7-e3c5-4a32-9cf3-346a1169a18e", "0c8e87fd-760f-4637-bddb-3dc89d1e2475", "d432b436-e6d7-4a4b-89a1-eab5f91dfd0c", "db3e202c-47dc-4bcd-8382-95a27361eebc", "30d6b222-741f-4b88-b785-546eb3e17cdd"},
                    DiscountUpperLimit = 2466,
                    DisplayStartsAt = "2021-02-16T21:51:44.000000Z",
                    DisplayEndsAt = "2021-05-10T17:52:59.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "uch6s2J6",
                    UsageLimit = 1719,
                    MinAmount = 1665,
                    StorageId = "ccd03250-f729-4bb8-a81c-256e4e391cbd",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon47()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "40e5f803-a1f6-42e3-93f9-f67b347fb41b",
                    "1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGqOKFoU3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq",
                    "2021-05-29T06:39:55.000000Z",
                    "2020-08-17T06:59:21.000000Z",
                    "bf53782b-ca33-43ed-882a-a2af306de60f"
                ) {
                    DiscountPercentage = 215.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"eb499449-11e5-4085-8dd3-14865cd6f4a4", "b7447cbd-9b9f-48a2-aebd-b3042480af11", "c74f1123-9935-45b2-87b1-af97b0f90007", "be3bfc7f-d592-43a7-a28d-32fc42d4f3c0", "aad70bed-a26e-4bbb-ad85-81009b5d5688", "c8f30165-e609-4068-b581-c4d1e0d294c5", "794c54c2-b164-470a-9cc3-b75a59bc474a", "33ab4b3d-6f74-4420-ac72-0955e4d69461", "8daaa3b6-ccc6-45e7-b037-51a9383ca85c"},
                    Description = "ym0hY",
                    DiscountUpperLimit = 6437,
                    DisplayStartsAt = "2020-12-01T23:21:21.000000Z",
                    DisplayEndsAt = "2021-05-15T09:10:32.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "UAWMYxWf",
                    UsageLimit = 6335,
                    MinAmount = 9180,
                    StorageId = "0509c92d-cb03-43c7-aa8b-832ba61c384e",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
