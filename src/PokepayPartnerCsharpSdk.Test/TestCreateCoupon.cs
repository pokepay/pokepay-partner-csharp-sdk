// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCoupon0()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 4117,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon1()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 4349,
                    Description = "GBwMsxmq0OaKp2rMxRPgpqecGqs3CMn7BpRo1xULpdF2S1bbfFGCvWqRbEgr4cRv3aBf5O291wurVNtqR4ujWNq2VjuXzmLG7vMHZt7hcZH6R0EORrsSgDJ5BysOoqpg1VosSZNt4dxudIQvSje4ZffSxdPhbN7OaaZ9OZ9jAlOvxWXlmJ7XUIuwuwkwZpSQRcMRBAphW3Q1VLmHg3NzMfwNMT3f29AIvDZWd",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon2()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 7956,
                    DiscountUpperLimit = 6889,
                    Description = "aSlQF3JcvNJlkeLS2DG0eOmmi9I5QPmdKSPbz6756GNJayPuXLGI7qJBM1k0GkOn3zFNmGsuXFPxpOKGLZNqGnQv4vAM4r6k1ysoOUTs9zNmVeqkO2HiOhqwCqqPDu4SgomC9nedZzxQTidYmtav4FJyEpc6fvQQvc0fWHGsoS3SQjrwnqyuJz3rhvOk0k",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon3()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 1743,
                    DisplayStartsAt = "2023-12-12T17:14:07.000000+09:00",
                    DiscountUpperLimit = 8227,
                    Description = "pp9pUqjgGKrCCAcywqoua2zNWyYtKLlgqN9Zs1pUt5UbWk4OEpm9iFq0Z2dJDNqZLisZgHeh4cLipKDMya1yxaxqS948a8GVSiMLTGCHie0UpNS7b5eMre50n4DEji251VHzeaOiVXQUttglHTVHdpbs4tvzpxjoXfMoK0BU1OChZjtvlJxfNT39g9wrYaR9Ui9EFOJgqWiFDix6WKi0Hh",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon4()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 8032,
                    DisplayEndsAt = "2024-02-22T06:39:44.000000+09:00",
                    DisplayStartsAt = "2023-10-05T09:52:06.000000+09:00",
                    DiscountUpperLimit = 216,
                    Description = "jjfXgIYqJx6YZ8bpaaYmVx0vIEqcfNP8kz7tMM02GtTVs09FE7pSTL76FtrtcLxew1KgoXDF0kwa3gO32uQ46ScNdcf70EHUIOQ6q0NpQT4G2hGSWJdWXbgbpKs3jlAW8rtul0aKXH5PNDEX3X91Lg2YH8LMcITgQuo9E97gv0XEjAo5TcUnQnzhXNxPKp4leaaROMlJzb8LUMKDCRtzgPJ72xM3Wh27rZ8l2R3iMRm5crGgqdfCcqHCYCgZ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon5()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 504,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-07-16T03:16:23.000000+09:00",
                    DisplayStartsAt = "2021-12-26T13:18:20.000000+09:00",
                    DiscountUpperLimit = 7149,
                    Description = "XKa1ER7l6Wpj1OivIE8qXDfF03xZnMTPKfhWtHIfHB5bcM4gYkQXT6PX",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon6()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 9475,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-12-30T03:09:14.000000+09:00",
                    DisplayStartsAt = "2022-12-08T12:10:04.000000+09:00",
                    DiscountUpperLimit = 7060,
                    Description = "CD6urmheLdkcDiwPBiz3CtQEHgPaIg8kGowYMycf2177RYHEh0tKRiQcIkFUCICbyuu2vjmFwjxmCWQaJGn6VLpH1xgp4gxCT9pxdjzZdUJ9ZB4Q1hmV1bABhmuoOc9RWkRCQpHPWBk4EuPXA",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon7()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 9808,
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-07-05T16:05:01.000000+09:00",
                    DisplayStartsAt = "2024-10-14T14:23:53.000000+09:00",
                    DiscountUpperLimit = 5176,
                    Description = "lZhZeEREMPOrt6FiPMjvdOWMTWBSrV2DZcDZOYuP6lQNwYNr6HR2LU1R05Nv6BVAU7LaM8C1ttRgDjJEPO94kDr9zzklHhLNGhiY9k5KzsrYX7bP3YPoI9UxkPJeYoqNUwbKFBIRbj9Eg8Qvk9TqpVlTxM9MTE0puB6bniBgIOe13YGFPN4WO9oC8wB",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon8()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 7202,
                    Code = "C82e5HWpM",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-01-20T17:38:28.000000+09:00",
                    DisplayStartsAt = "2025-08-09T18:36:12.000000+09:00",
                    DiscountUpperLimit = 1368,
                    Description = "gLndbja9BagjKY8DAtd1IlBKZGUtp1yt25DCohJ0WI6uoMwMuyn7N72FwpgJBTN7373I9afOLjH0wT1NOOLS3zdOyRDH145hmO2o6RcmRhxtM8hwZxQJdgv71mEPAQmNtjFE8w6kHxQ9GKKiLa7wapNpgvn7zhSx0nMTEd3IN9oleqVD9bMPwBMaJDzU3jZCiJp9",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon9()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 9472,
                    UsageLimit = 8237,
                    Code = "1Nb",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2019-08-04T23:39:57.000000+09:00",
                    DisplayStartsAt = "2020-07-15T03:16:09.000000+09:00",
                    DiscountUpperLimit = 7557,
                    Description = "A9MyKPTa3PHkwc0v6VoqT8OklIR",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon10()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 8612,
                    MinAmount = 2672,
                    UsageLimit = 177,
                    Code = "p3ZVb3ZD",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2018-09-27T00:44:36.000000+09:00",
                    DisplayStartsAt = "2021-08-07T17:03:31.000000+09:00",
                    DiscountUpperLimit = 8625,
                    Description = "S",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon11()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 4471,
                    IsShopSpecified = true,
                    MinAmount = 7835,
                    UsageLimit = 1046,
                    Code = "Phe",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2018-07-31T07:05:43.000000+09:00",
                    DisplayStartsAt = "2022-06-18T01:55:34.000000+09:00",
                    DiscountUpperLimit = 1433,
                    Description = "PO8dNwLJ79C4HEmSFv8wqEli1FhdlbeV7rduMQ0iVTpqORmDgK6Pp5EC3ubP2ahHggCNgfYMWblPAKHGqKufwq0AQKU0jSImlit9sH08Ht6LEZzhLeNoISpFG6YnHtjIV8sNsXDdkcTQPBN8kGMTJf9zKbNZXFLNgk8GGTYkNzzSlUZEVsCFNB41WdE0BNiYQ9Y02HHz1i6LrOhemSTwPbLUcSt9CyVFc7PLHmvinqy",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon12()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 9115,
                    AvailableShopIds = new string[]{"199d51cf-fd84-48fc-baca-590b8bd8ab48", "c54c90b8-52ff-4953-90af-615a211edd69", "bb29c874-3e41-4a61-949d-19aae8527e27", "0ac14c23-bc67-4ddf-9dd4-134cd7ce1378", "ae250cf3-4fbd-4b88-9c45-0e3de679b4ec", "25481faa-cad4-450c-b6cb-29004ae28cf1", "e2162e1c-65a9-4be8-9ba0-86480114fea6", "e95ddc1f-4138-43fa-9e60-4406bf96af46"},
                    IsShopSpecified = false,
                    MinAmount = 1755,
                    UsageLimit = 859,
                    Code = "02c76ti",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2024-03-05T09:28:36.000000+09:00",
                    DisplayStartsAt = "2021-05-10T09:03:48.000000+09:00",
                    DiscountUpperLimit = 2783,
                    Description = "p3wsQfqM7qAkNxDziguOq6kvIaVUCnQEm63F2hBbaWFNMPuRWahOjJMIViwMNip",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon13()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 3472,
                    StorageId = "2188f174-34c4-45c2-9209-2bab4a842119",
                    AvailableShopIds = new string[]{"c4c2b630-7ee5-416b-9271-edf65be22004"},
                    IsShopSpecified = true,
                    MinAmount = 494,
                    UsageLimit = 2913,
                    Code = "GyWvwk",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-02-02T12:38:57.000000+09:00",
                    DisplayStartsAt = "2016-01-23T00:41:50.000000+09:00",
                    DiscountUpperLimit = 9266,
                    Description = "lTpjHx1jBoDYI1Hw0p4fwRrPybs5yDMLmTLEg64dlv7m6y77N5PNH3Vu1zcnjphzdEYKjzgIlEcnGLjEnF5OLaM9TqpoBKWRbr8UbgFKuoqV6TTY0XBK633PwHGHpQLaws",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon14()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 9533,
                    DiscountPercentage = 1712.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon15()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 8653,
                    DiscountPercentage = 661.0,
                    Description = "DVwlqu4gYHwVkRp0KSsfDJjimvHnUhtDthUKIUxNxKFAfEPUvNXfrMK4D03okjAWrI7nZDm7NNhS7rle8b9gx3QeGMFGjXUd4iQj9lzUP5j4RBN0fNdJMNuWxc5QrZSH8Xc9JhT97AsqdKaze85OipZdDLwjA815y15aHGjLpP0oh1XSb4",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon16()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 8880,
                    DiscountPercentage = 4331.0,
                    DiscountUpperLimit = 5850,
                    Description = "S2C6Il196NGDUzFWf7ijGU3A8xnvLKLjNJMZOW6vfTJ0C6o1m91e1ZOsEFkTJnMbDXQDA23k5E0HebLpdlTBjpVyoSu74LkSxnQBIlRvuKdB5E4faLfd4zuz7h9e34YgAIJVbGwY",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon17()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 2132,
                    DiscountPercentage = 5781.0,
                    DisplayStartsAt = "2018-10-19T21:05:28.000000+09:00",
                    DiscountUpperLimit = 415,
                    Description = "CmUsVUV3QSwHYw0C1lokR5i5yGmSvJYhub2Bxk8Llgc04UR1ZEGicxNnAkxw94vbRKasMVjZsiP",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon18()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 4306,
                    DiscountPercentage = 8588.0,
                    DisplayEndsAt = "2022-08-14T16:16:17.000000+09:00",
                    DisplayStartsAt = "2017-05-29T18:12:09.000000+09:00",
                    DiscountUpperLimit = 7919,
                    Description = "qzhOo55T3JTFerg82wFxmzM7tb0BiNdJ47xNE1UvMz8QtqkHTI2kT9QU5AsukdC6nKd582v9gAUashM9zI5lXg248Miru5qVyelvmGvZEmJIx09I1aw7AToYjyiKZIsfbM837",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon19()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 2254,
                    DiscountPercentage = 275.0,
                    IsDisabled = true,
                    DisplayEndsAt = "2024-11-02T22:49:44.000000+09:00",
                    DisplayStartsAt = "2019-05-18T23:21:02.000000+09:00",
                    DiscountUpperLimit = 5060,
                    Description = "ueQd0sROe9i8R1mqjKuOPDZ28WeWGwG4PqFMKMdJ11gQlHTpQ9ZjAt7YouMHzTREMwtPxYYpZ5yQyDlB3DPgS5A788OLqirt2lBEvCfZnRTFq8AoWOf0dn9KyCT0f9AAnTgNee7Bcb8wu5jGodVuifBCBP1wPvRrCvaYLi9Wna9Lt4Hg7NIXpWUbQDC8yrGLIftJxZKd3hoEqWa",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon20()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 6974,
                    DiscountPercentage = 8982.0,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2019-02-26T09:10:38.000000+09:00",
                    DisplayStartsAt = "2020-06-18T02:05:52.000000+09:00",
                    DiscountUpperLimit = 6634,
                    Description = "OqGn1BCfNpr1gPVGesL16c3WO8rvZxeXRJh2EcfRQ1P0ogs15uXrMKh4opGarTI84nLeMAjMXmtxjxxXqSOtaAbZ9Hn9FkPlyLXC1fgSIdhMKWnFNGnH6zZnGnWiFcHf1LjqUJMVpNLzn1mgMlCESayiJWTMigrNwV49nDvc3uT6Eiwv",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon21()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 8981,
                    DiscountPercentage = 8455.0,
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-06-26T05:32:59.000000+09:00",
                    DisplayStartsAt = "2021-04-15T19:11:32.000000+09:00",
                    DiscountUpperLimit = 6388,
                    Description = "jqJZyxk5fVzC0M9dVc",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon22()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 5767,
                    DiscountPercentage = 9148.0,
                    Code = "RJCL",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-11-28T06:14:27.000000+09:00",
                    DisplayStartsAt = "2018-09-14T12:45:33.000000+09:00",
                    DiscountUpperLimit = 9369,
                    Description = "lg2UBElYlPYEVFtPzRbmI3nDUKfjXJtbjb8NjIdDY9hp4n5QbFCQbmE4Qhj",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon23()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 7527,
                    DiscountPercentage = 5284.0,
                    UsageLimit = 2802,
                    Code = "SnPz65ojO",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-03-18T16:57:42.000000+09:00",
                    DisplayStartsAt = "2022-12-24T00:31:28.000000+09:00",
                    DiscountUpperLimit = 4666,
                    Description = "r0VyJVKABk5KUuwT83Vu9oL8O",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon24()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 781,
                    DiscountPercentage = 7531.0,
                    MinAmount = 602,
                    UsageLimit = 8901,
                    Code = "zOmJP7Wu",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2025-07-25T21:06:36.000000+09:00",
                    DisplayStartsAt = "2017-08-25T12:53:14.000000+09:00",
                    DiscountUpperLimit = 5504,
                    Description = "NxmbwD6Lp5l4zTD9MGMQhrR",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon25()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 3617,
                    DiscountPercentage = 2310.0,
                    IsShopSpecified = false,
                    MinAmount = 9396,
                    UsageLimit = 7297,
                    Code = "bhzXFNxx",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2025-06-09T00:26:19.000000+09:00",
                    DisplayStartsAt = "2023-03-14T00:15:42.000000+09:00",
                    DiscountUpperLimit = 1958,
                    Description = "e5PEISusKosrZ9GRXHGUVN3TcoeRAKZ5VyVy1ZvgwUsaJm6O4gvey7juIBAV1GJ7Eh2riKvsQOA",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon26()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 8228,
                    DiscountPercentage = 5396.0,
                    AvailableShopIds = new string[]{"17989a86-f67e-4d15-86f3-7fea35951438", "4e989e1e-ef84-4813-8370-328aea1ff101", "6e605b13-752f-42fe-904f-7351f3941fd6", "ff787099-5514-437b-a5cf-59a6897dc783", "14816f5f-a5c8-456f-a1fe-bce79fba468d", "36e6ee53-b58e-496e-b51c-670625115a0b"},
                    IsShopSpecified = true,
                    MinAmount = 6637,
                    UsageLimit = 9143,
                    Code = "8",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-12-13T12:41:34.000000+09:00",
                    DisplayStartsAt = "2024-01-03T05:26:08.000000+09:00",
                    DiscountUpperLimit = 1976,
                    Description = "4Aw2wPgSlFTjq3KPo6UApcuYf92YVt73XhU05gZ7zdkP0m1PwrtmKZ8AA5ohPnjPtoWu4h4fT8RC5UMlL7wodad86dLerlaT588Nld2jPwucIfmfFww2L3OtkZkr4R9lAjsuBEM8YI1ruk4cMH01Acx9Rc9aG55xFeG0IE40X16RMwyCfefTBENBH66S20XWQnRTic9",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon27()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountAmount = 8448,
                    DiscountPercentage = 1588.0,
                    StorageId = "4e58729b-5b42-47ab-bd04-5e369c3ac5a1",
                    AvailableShopIds = new string[]{"02c82938-704a-4476-9376-aa6a44b5f8de", "cdbc59d4-79d7-4792-9035-77258b9ab44c", "6c4391ef-3309-4191-b768-76254aae581b", "f5e82b81-f165-4162-831d-72b884dc05b6", "de80de0b-f635-4960-bc5a-65f735f2dcd3", "8a98822e-d21a-48f2-8c80-b9ada7700d1c", "549497fc-d328-40d8-9bca-2547bd00493b", "87729d99-430a-4c6f-91e7-03eff861ac8b"},
                    IsShopSpecified = true,
                    MinAmount = 5564,
                    UsageLimit = 4991,
                    Code = "EBj5IAz",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-02-20T12:30:38.000000+09:00",
                    DisplayStartsAt = "2016-09-08T11:30:16.000000+09:00",
                    DiscountUpperLimit = 278,
                    Description = "3CqBH43SHyxLMN7FTnOdgJ3p6nPSMNRiuvGm738DnRP15LWzAcpK2EA7jJhXT9t9qTRuwUy3HtljiMlrSaeYYa9Z9HQVesbceN19RwiN6iSqScGJd7luYWbqFbYiTN7EjN0sDI7fM5wVsRWGr4hq1z50nrxmQpQxyzNakfQvB45tL56VivnLmVBt2qJvSQBYoUUWYJbtHy8pqca2DR4Y",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon28()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountPercentage = 1867.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon29()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountPercentage = 7941.0,
                    Description = "9pyINGdbiQ1kDPSyDFBe8Rqfu3w9dYGXqNbJmUqv1PkV50lkZvFTAb1zi8rg8ifls4phosiArT",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon30()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountPercentage = 6016.0,
                    DiscountUpperLimit = 1559,
                    Description = "g4hrO2W",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon31()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountPercentage = 408.0,
                    DisplayStartsAt = "2019-08-23T21:07:56.000000+09:00",
                    DiscountUpperLimit = 4575,
                    Description = "gCBgpBszCdjBQcmSHHZAHu1X47RzDRXrLNjeN4H0algZxXL139XXDhhHao4tuBSVCmtGCU4ItI92X473ekQW07Ra60eYNHy4L00cHiOuKsDwF",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon32()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountPercentage = 1888.0,
                    DisplayEndsAt = "2017-02-16T17:49:50.000000+09:00",
                    DisplayStartsAt = "2023-10-25T13:46:21.000000+09:00",
                    DiscountUpperLimit = 3049,
                    Description = "NxIRHQgl0Z6hljLgNebZ6QfSFSYFLP8K1xc1rgDHU8bc9goiJqEIvZOegUiJPfeM590JAFm8H7hZItZP7kubakxTdgLz0tzOQPfTTp057TvLpxiOZLtmgHtxN8pxPbZm9jQEDYYhRHs6ZUqRt3HlHYHCIhlapZlEC0TxPXjkfR2qI8CRHx4HSlh",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon33()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountPercentage = 9948.0,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-04-09T08:46:08.000000+09:00",
                    DisplayStartsAt = "2021-08-30T13:45:22.000000+09:00",
                    DiscountUpperLimit = 7027,
                    Description = "IOXGAz6LHrfI5l4NHbnQQMtQSzK9uo6OIeIbkZVjVDFe1nreYVy1DkXftjjnpLe45Vz2xVMhDgo0kaeZHrnvivjCaNW68ZuTLzv05X24jnOMF7N49OcmgVSVD44y7itvX3D7DCzobuZHT8jDZuT0iv5JCIl2R0czhS3C3XFpG17UpToznICCmOuoaXEea",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon34()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountPercentage = 8242.0,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-10-19T07:52:27.000000+09:00",
                    DisplayStartsAt = "2018-03-21T08:03:11.000000+09:00",
                    DiscountUpperLimit = 1513,
                    Description = "1zq1AVbNFE7TlzianzgbhcsnW",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon35()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountPercentage = 9268.0,
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2017-12-06T08:20:32.000000+09:00",
                    DisplayStartsAt = "2018-02-12T14:19:01.000000+09:00",
                    DiscountUpperLimit = 7870,
                    Description = "xCaOL9vwTSmXwzF8wHWQYQaJO82kUiK4RL8YcddgHYVOexd4ADQQ8zRT7Lqe0Juj8qrYOb4ChKV8bmpiPHAUO0gskqZSFivFZkWXElMAXGrucNpUyWYz4k9da78kPCZiQJeg5QRMykKwT1nKPOyuyYf16oBkGXS2TEXtL",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon36()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountPercentage = 5332.0,
                    Code = "Z8",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2021-03-20T21:25:28.000000+09:00",
                    DisplayStartsAt = "2016-08-02T21:02:39.000000+09:00",
                    DiscountUpperLimit = 2490,
                    Description = "azVejNTcE0g5ebTKgQZjHPRpECX0mNRLBoKKROcW5HZMXRzNGpZUOPSxJzHmldFfZIeLnOjM50aytzBkUbLVJBMaU0OLkYwn5ycjkQWrmI",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon37()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountPercentage = 7169.0,
                    UsageLimit = 2272,
                    Code = "2JhWKWP",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-01-27T01:32:37.000000+09:00",
                    DisplayStartsAt = "2023-05-01T20:07:34.000000+09:00",
                    DiscountUpperLimit = 6277,
                    Description = "bEvT9THGLM5M4RXhjsTAx9mFPmLTtKfRLj52cqLv8rfcw71GKyz2wlj0Jcco5ZdCFwUsyl",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon38()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountPercentage = 4179.0,
                    MinAmount = 6652,
                    UsageLimit = 7276,
                    Code = "2vuO",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-07-17T14:56:14.000000+09:00",
                    DisplayStartsAt = "2022-02-23T05:31:29.000000+09:00",
                    DiscountUpperLimit = 3135,
                    Description = "O6o92t1Fz",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon39()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountPercentage = 5556.0,
                    IsShopSpecified = false,
                    MinAmount = 8582,
                    UsageLimit = 1319,
                    Code = "Jx",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-05-30T23:51:39.000000+09:00",
                    DisplayStartsAt = "2020-10-24T13:55:49.000000+09:00",
                    DiscountUpperLimit = 6940,
                    Description = "0fRUPO499n5aV7B0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon40()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountPercentage = 603.0,
                    AvailableShopIds = new string[]{"a66bd2b7-cabe-44c9-8ea5-bb440b6f9466", "2ea235fa-b26a-405d-8629-18ccb5e4668f", "d420ffec-49f6-4371-a134-5634b612cf2c", "257e4a02-e5c5-49bb-b497-a3f9c1f30e15", "10d4d41b-4738-4739-a247-e020670ffefd", "79395d6b-d3ae-450f-9898-fab90ebe946d", "3119e5ea-68d8-4051-a356-55cfe6572fca"},
                    IsShopSpecified = true,
                    MinAmount = 122,
                    UsageLimit = 7751,
                    Code = "rIY7",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2018-02-24T00:18:19.000000+09:00",
                    DisplayStartsAt = "2025-05-29T02:24:32.000000+09:00",
                    DiscountUpperLimit = 463,
                    Description = "2DNRwOhvWoj4zPzhOg87ZArE7smsf0TnBXgREevWm9oP1W",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon41()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "269da601-8994-4fd0-a490-22be10aa1e0a",
                    "fsQ62",
                    "2022-04-19T01:27:08.000000+09:00",
                    "2025-01-01T04:17:53.000000+09:00",
                    "b9e84269-782b-48a5-862d-ea98510d4caf"
                ) {
                    DiscountPercentage = 2063.0,
                    StorageId = "958f5d5e-e19a-45c6-bc22-541a50c20717",
                    AvailableShopIds = new string[]{"a07bc3a4-22de-4d6f-91ee-97de4eade9c0", "96d6b843-567e-4e1f-a8ac-5ae57bef00ac", "3def7dc4-9652-4268-a20d-81fe5a9dfe12", "8d19b424-23fa-4bcc-afad-a40570bc7561", "f2102781-5d04-4e2a-8c09-321a255bb156", "5a331a54-8de5-4f22-8639-8cc3781a09cc", "18faa62d-f5b8-4b84-897c-8d8920343d8e", "e10ac1d6-6bbb-4b7c-90de-d2ce5599aeae"},
                    IsShopSpecified = false,
                    MinAmount = 3183,
                    UsageLimit = 5225,
                    Code = "15cR",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-11-23T12:51:05.000000+09:00",
                    DisplayStartsAt = "2019-08-09T06:38:34.000000+09:00",
                    DiscountUpperLimit = 8414,
                    Description = "0RLToszV1eVmzTG0JYvgv48GmpltVrz7o4fQqw5y8hT1WtaswCMmBTgu96kXJpoQRCGNuopFXURwi61amgbL5EYMyZqIc88v5XDcJy82HU0ZAZB4HjSO2acuzibU3LPiMOp47l4GNjUIlUJTNaI1Ftyl6pVi1FdhhCzOxOnTNLIHrq2zqFovpxow7L0HENV0J35zcTrgdu3sV0rMFoszIDb0q",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
