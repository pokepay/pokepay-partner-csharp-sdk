// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCoupon0()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 2602,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon1()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 8787,
                    StorageId = "66b2a4d9-5fb4-41ae-b23d-f04009640174",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon2()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 7372,
                    MinAmount = 4681,
                    StorageId = "6a5a0468-d8dd-45d4-b3d1-47f491c2f222",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon3()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 1638,
                    UsageLimit = 2336,
                    MinAmount = 590,
                    StorageId = "27092927-0e6c-4948-bcce-72d522c5656c",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon4()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 9737,
                    Code = "xPCHvPH",
                    UsageLimit = 3173,
                    MinAmount = 180,
                    StorageId = "7333752f-c767-4e90-8600-3e016b0aba2c",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon5()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 6026,
                    IsPublic = true,
                    Code = "CJRD8",
                    UsageLimit = 3255,
                    MinAmount = 4806,
                    StorageId = "a399c7b5-773a-4d9a-9a1d-c8cf478f835b",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon6()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 7027,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "m",
                    UsageLimit = 5119,
                    MinAmount = 838,
                    StorageId = "6a8914d5-839c-4762-9e09-5576594e774e",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon7()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 1624,
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "S",
                    UsageLimit = 920,
                    MinAmount = 7953,
                    StorageId = "c08c5b69-5ac4-44de-99a6-24a1559bf6ae",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon8()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 6877,
                    DisplayEndsAt = "2023-12-09T12:15:34.000000+09:00",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "AP",
                    UsageLimit = 1133,
                    MinAmount = 3527,
                    StorageId = "a1635e73-7548-4898-b038-e8c544404790",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon9()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 2626,
                    DisplayStartsAt = "2025-01-07T11:29:04.000000+09:00",
                    DisplayEndsAt = "2021-01-19T15:13:40.000000+09:00",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "J",
                    UsageLimit = 4857,
                    MinAmount = 4484,
                    StorageId = "3e07b270-aec9-4a10-84b4-42b29be9395e",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon10()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 1865,
                    DiscountUpperLimit = 4078,
                    DisplayStartsAt = "2015-10-22T04:44:03.000000+09:00",
                    DisplayEndsAt = "2024-03-05T11:46:30.000000+09:00",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "56VL",
                    UsageLimit = 3947,
                    MinAmount = 2455,
                    StorageId = "99aa0dce-cdf9-46c5-899d-b685c33ea991",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon11()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 9813,
                    Description = "lWSa6lZGo7PhTYTGs3X1TO4wzYkyXyy6lwP0N21ySbpkemDM3awKQy2zT4JKnzi5L8cpHHMwXcAIRcjNLk0u",
                    DiscountUpperLimit = 4746,
                    DisplayStartsAt = "2020-01-01T09:03:32.000000+09:00",
                    DisplayEndsAt = "2018-02-17T09:21:53.000000+09:00",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "NHUqo",
                    UsageLimit = 6963,
                    MinAmount = 7000,
                    StorageId = "5c6290d5-3792-4c5e-8e1c-f363689a6993",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon12()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 8367,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"215390d3-8bb2-4eae-9602-3c3adf181573", "7400f35a-22d3-44b4-8c6a-589bde5482b4", "0c86d047-0deb-4244-89be-331807578cb0"},
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon13()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 8943,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"e0688552-48c4-42f4-a8c2-b48c9372caca", "40ce3c78-b792-4888-a0f6-5062a4a09831", "bf09d5b1-fa66-4e6d-a5fe-b3c0a48826fc", "f18bfe14-7c58-4bae-a117-a4c1c7a0f4ce", "db172a59-f74d-4866-a634-f01ac58dab1f", "192c386c-1166-4452-9d90-faf21b211a9c", "3ad19606-9ce0-4c05-9e7e-e1c67276b2a1", "50c40623-138f-4d53-87c4-fc32c48f82ae"},
                    StorageId = "c2cff447-3255-4bad-afbe-4e30b03cb5d5",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon14()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 1456,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"96f07bd3-61ac-4a41-98a3-9488bce03c7b", "4ffd23b1-5bd1-4b0e-8bbf-30bf43a1ae97", "93d4bd22-dd1b-4738-b9f3-610fa77b0af3", "c9bc240f-8c43-4db5-8062-7770af073b58", "6b1122f7-495e-4c8f-8181-0a6fa539aa2c", "3f2341ea-9831-43b3-b6b0-e5116b3b29aa", "942fef54-edcc-4697-aeb4-adf8fcb3d096", "65b16bfe-5386-40e6-bc04-e96b122cd7da", "0720f074-3197-431b-87cb-aa6dd12c46e3"},
                    MinAmount = 1384,
                    StorageId = "74bb9a3f-b296-46dd-89a6-ef108c5f07b1",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon15()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 2885,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"ba6a0534-8f4d-430f-9a35-3ffb65fb79b1", "dc1b4a72-6ce2-400e-8d3c-de9dfc8f5846", "a94664d5-2bd5-4b31-8d60-7feaab24e5d6", "84c89d6c-fa47-4561-b852-e2e3209f5e19", "03090fe0-d38e-49cf-9b87-62361714f97d", "4f78871e-a5ae-452d-9081-793f21f689f7"},
                    UsageLimit = 1061,
                    MinAmount = 299,
                    StorageId = "10941edc-4921-4343-8dbc-9f1a473593ba",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon16()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 6272,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"c2b8b1b9-4f20-43bd-856a-d561614be59f", "68eafeb3-3785-427c-9c63-2d8170eab18d", "7fd6401c-3704-405c-858f-c50cd55cbdd6", "14deab1a-7ee8-4302-b75c-23aad209d6e3", "cd62f353-7744-4736-a424-1869697b5011", "65831091-db89-4bc4-897e-7d5191fe7777", "c2d7ff2f-8b70-461b-a8db-e79a79e09db5", "a203ef54-6555-4f19-9dd4-d62d4793facd"},
                    Code = "16YqrHAO8r",
                    UsageLimit = 2671,
                    MinAmount = 1751,
                    StorageId = "a6de629a-773c-4d35-8712-969f5b542a99",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon17()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 6117,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"90be62c0-0a0e-4b7d-a481-483b1cccaed9", "f4430ff2-d628-4c47-84c3-2b026d4185e6", "9fb0f630-26e9-420b-b478-a314bcdc2a16", "af932118-a53c-4780-9e52-17b152587920", "1eda6159-8ae5-4af5-9ce1-767230188523"},
                    IsPublic = true,
                    Code = "VLqKYaajZ4",
                    UsageLimit = 2412,
                    MinAmount = 2482,
                    StorageId = "adbaba45-1de4-482a-b0f8-b7dd38a61591",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon18()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 505,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"c680015a-7ed7-46e2-8f63-8995e1a9ce0f", "11d8d5d3-dd65-4651-9cd3-5f7f6fce1c53", "db2e8343-2fbd-488a-a506-0208f1851afc", "17753938-6039-40d8-b602-012cf8f97139", "d8a930e3-8d43-41bb-b804-edeb970b20b1", "e6f6ee6c-245c-4a98-adea-65728a02f625"},
                    IsHidden = false,
                    IsPublic = false,
                    Code = "2",
                    UsageLimit = 4770,
                    MinAmount = 2001,
                    StorageId = "983d8c6e-7880-4938-9e93-80579b8cf456",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon19()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 1495,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"7df81d3a-29ba-47b4-a570-ff638a7a2ab5", "7fa3984f-fa3b-464a-975b-653acd5a789d", "a7b9424c-a306-4a80-bbed-ec5409ae8d9b", "9a168672-c1b6-4e32-b66f-3c00f29c6134"},
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "2rICXA",
                    UsageLimit = 9668,
                    MinAmount = 1360,
                    StorageId = "d7711884-1c5e-4548-b863-18a0bc5b11b5",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon20()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 3822,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"2b5ba260-4ff8-4745-9c7e-be846dafb3b6", "ac0cd164-1c12-494f-939d-0da5185933fd", "0f4da337-b751-4e62-851e-585c7f035e6b", "c756b10d-cdf2-4c73-b881-ece5a6e5ad46", "dbf4e9dc-8a93-4f93-9c1a-a1aa5afbcf52", "b41796f2-59e4-4f56-b1e7-39acbca6b3d1", "3861f7f8-ac3c-4a0b-a40f-bff590b7973b", "7c2a908c-8579-42c2-b301-36a8cc362524"},
                    DisplayEndsAt = "2025-07-20T21:17:22.000000+09:00",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "Kn8CB",
                    UsageLimit = 118,
                    MinAmount = 5749,
                    StorageId = "23a581d2-7b6f-4227-a140-5adfbe8b7bb1",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon21()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 1935,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"3544aef2-5cc0-4e99-92fc-4b04e5cbf95e", "29f5ccd0-d53a-4152-9e1a-26f3e0177203", "a7fc386e-218f-4b66-8e80-fd5098bc751d", "2b0958f3-ced9-44ff-b50d-1f53f111bdb9", "93947bee-b68f-4705-a842-41acc3f6f49b", "6486a74e-8d6f-4bec-ab8a-00195b27c08a", "eb76c2b3-fa9b-4ffc-9c04-ff2f479e8a1e", "8c6a7376-55a3-4d06-beb7-8c604a686bec", "b30278ac-2fd6-491b-bb79-2a743c3a461e"},
                    DisplayStartsAt = "2016-01-10T22:10:24.000000+09:00",
                    DisplayEndsAt = "2021-07-06T21:35:52.000000+09:00",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "hEuqcV",
                    UsageLimit = 3438,
                    MinAmount = 2061,
                    StorageId = "3b88d4b5-98bb-4d32-b351-624032f2f1b4",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon22()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 1440,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"878d93af-efa8-4429-9d84-d5cecda82796"},
                    DiscountUpperLimit = 432,
                    DisplayStartsAt = "2017-06-30T00:15:20.000000+09:00",
                    DisplayEndsAt = "2017-12-19T12:06:16.000000+09:00",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "GvFKD",
                    UsageLimit = 739,
                    MinAmount = 9101,
                    StorageId = "59b41081-19fb-4f17-afdd-35be8b92a638",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon23()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountAmount = 8711,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"49db4160-6ba6-4ac9-8ad3-a3db76ce7f8a", "8ab4f061-9739-42af-9045-0792e890c865", "a04f13e2-e5eb-4a93-a857-1b31a429868d", "7809e19b-2460-44c4-9b40-55144cc63beb"},
                    Description = "2wmIfJ50Imwzo4spi93QyENqmwOx8YnV9T8kaR9yxVki0Ybh350uvTmXJ3taiP6zrMBCvrTp2KPzJXVVtSjH7KpG4W7WMlwVoyitMfaSwwyI0wlFPTcSqX1OcJJCpH4abwAvDfIYbVEzwXEzeX76CubBULZ7mvZavHGIwQGFD3y3WQcOQ77GqTbykQNeXwfkirPrCHC",
                    DiscountUpperLimit = 1462,
                    DisplayStartsAt = "2016-09-03T16:15:21.000000+09:00",
                    DisplayEndsAt = "2016-08-31T22:20:32.000000+09:00",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "WlOvBKR",
                    UsageLimit = 5291,
                    MinAmount = 3703,
                    StorageId = "bfcb5d02-2d4a-4331-9203-e413b143b9c2",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon24()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 4909.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon25()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 177.0,
                    StorageId = "ccb45d58-9ee6-4b30-98f3-02ca1090be3b",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon26()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 3517.0,
                    MinAmount = 5165,
                    StorageId = "c399e855-e23e-411a-89ad-328f60a29479",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon27()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 4783.0,
                    UsageLimit = 3029,
                    MinAmount = 6433,
                    StorageId = "59645a4e-021f-4580-9084-b3788edb3f03",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon28()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 3781.0,
                    Code = "n8d7",
                    UsageLimit = 8784,
                    MinAmount = 2078,
                    StorageId = "e6a4f7cf-8adc-465c-b7e6-deb29dfec583",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon29()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 925.0,
                    IsPublic = false,
                    Code = "YZgpwkatf",
                    UsageLimit = 2756,
                    MinAmount = 4568,
                    StorageId = "4f4cb108-238d-4068-b685-81f768a0d56a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon30()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 7779.0,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "gPgh",
                    UsageLimit = 5903,
                    MinAmount = 7020,
                    StorageId = "5fceab59-8843-4fa6-b173-326f80bdbdf4",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon31()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 4107.0,
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "hNzacM",
                    UsageLimit = 2579,
                    MinAmount = 7760,
                    StorageId = "a28fc747-208e-4852-9724-9a39180072bb",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon32()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 984.0,
                    DisplayEndsAt = "2024-05-05T04:46:32.000000+09:00",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "LKH2dLAX",
                    UsageLimit = 2698,
                    MinAmount = 4976,
                    StorageId = "b9293d7d-06a4-4d6c-9916-d4fb5999a5c1",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon33()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 2220.0,
                    DisplayStartsAt = "2019-11-25T03:07:34.000000+09:00",
                    DisplayEndsAt = "2017-03-28T20:52:41.000000+09:00",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "KjPvdUw",
                    UsageLimit = 5469,
                    MinAmount = 3543,
                    StorageId = "64b1d664-49da-46e8-b0cc-5a387eb0aff1",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon34()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 9518.0,
                    DiscountUpperLimit = 1995,
                    DisplayStartsAt = "2015-12-15T21:54:19.000000+09:00",
                    DisplayEndsAt = "2022-07-23T03:32:20.000000+09:00",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "4Tq0PqVhzC",
                    UsageLimit = 2336,
                    MinAmount = 3295,
                    StorageId = "e4ef59bd-19fe-4921-bb26-6beb9e8fb0bf",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon35()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 2732.0,
                    Description = "OCStDoZvAY3OKa5oCE4xLFobA9UOrBeN520IjUnvAonmJrl0Qqm11RMoDMOSwDGwLJ7XtGOGgKQwzAg5IknDwgdQyyCPmcszk1DSduCpdgUz5UizzupfDUVzOTa3MaAaf4kTfREjRbk7TIk1gephK43IsijpvrzedeO1cdtY9cqUS5AzQzHdKGL1guEaRrfiOPX45f7SdsQcMHW7he8",
                    DiscountUpperLimit = 8358,
                    DisplayStartsAt = "2021-02-12T11:21:44.000000+09:00",
                    DisplayEndsAt = "2019-07-08T00:48:28.000000+09:00",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "u",
                    UsageLimit = 8953,
                    MinAmount = 2297,
                    StorageId = "76da6545-0b03-4209-8ab0-1b32ff199b4d",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon36()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 6584.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"620fef84-444e-45f4-95cb-a50b00101c98", "e370e4e6-fef0-4472-88f0-bdc7a373e7e1", "a846f2d6-c3e3-4043-9689-d1fbf4334d4f", "7ddd07c5-2e1a-4d8d-aee5-2592ff2093d7", "fe0d0085-d59f-458f-a221-89b72576dd11"},
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon37()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 1552.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"bb29de88-d104-4b25-9bd1-caa5260888c9", "a1d65433-b271-4538-969b-b7f1ac31d573", "1d50aa8e-31ec-4575-aa78-83462daea39f", "8f0061b3-23ba-48af-ae09-ede047564bdf"},
                    StorageId = "09f4500e-c398-4fb4-8a85-b11536d74b5b",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon38()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 2871.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"2b472792-33d6-4f2c-9b90-04ab43e300ac", "c2181766-f470-4819-b3f6-4b52532a54a4", "ae5e1f4a-c20d-43cc-8cee-e2d3581da220", "eb498fe7-087e-49e9-8cd0-9d6a7cf7b50e", "851c72ee-4a63-4a91-b481-f7001228c46b", "e66d519e-d5d1-4860-bc30-ba01bc82c5c8", "c65df381-e8e4-447b-b92a-69541d715eef", "6b19799c-9bf2-452f-b50b-f5840a618ebb"},
                    MinAmount = 5212,
                    StorageId = "e52874ad-90ac-432e-b336-d01654054b58",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon39()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 1999.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"98be3356-86cd-43b3-9c58-2ca9a7c69fa0", "5108f958-72a4-429d-8fd1-a63372411374", "66b57047-9be9-4db0-a9c3-e74a9fb1af48", "9c87e4b7-1617-4656-8d67-19dc39211c6b", "20e5e35a-9d56-496b-864d-0be1aafcca8d", "a4430e97-e6cf-4008-b813-932b63649e43"},
                    UsageLimit = 5634,
                    MinAmount = 1549,
                    StorageId = "4371e396-84d1-46b0-8aad-75c9affbc53a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon40()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 9748.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{},
                    Code = "1H9R",
                    UsageLimit = 4747,
                    MinAmount = 1645,
                    StorageId = "eebf9268-6fb1-4dfe-9d5c-53211658b53a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon41()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 7193.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"59aca549-a005-4826-9795-5a38b20a19aa", "c522a38c-25ba-4d3e-bf9e-d214eaf3b3ce", "b6f42991-95c6-4b20-adec-292368703b7c", "7995ba7f-80dd-4e8a-b6f2-1c114fa42bec", "8161c08e-c64d-48f6-8e0b-0404e8f87a9a", "1935254c-f09a-4677-92c5-4d12db528cf3", "9c06d36e-c062-47ce-8b54-e0535f7d5db2", "a5eec468-90b7-4703-b547-e7466727fa99"},
                    IsPublic = false,
                    Code = "UpjoAlQvJ",
                    UsageLimit = 4382,
                    MinAmount = 5123,
                    StorageId = "465a72c3-373c-4255-bc38-f3c947363dfc",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon42()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 6759.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"ae236389-055e-4c51-bee6-73ee824f2bd0", "1f9090a3-83be-4e95-a7e2-c1349c951e02", "b12618aa-a47f-4854-b4e0-dd80cf0bb8c4", "1a21622f-2a1e-4445-946b-7be771307850", "9c662e84-df4c-45ac-9d3e-d1c406238ab0", "d5945f98-d418-4cf8-98da-d424c343bca8", "8600a1cd-6e64-4d35-b98a-70981de2c7ea", "a6d60d27-21de-40a2-ae48-7174e80caae9", "4ede8226-5550-4c7a-9b86-48cbce3c3881"},
                    IsHidden = false,
                    IsPublic = true,
                    Code = "9uB",
                    UsageLimit = 958,
                    MinAmount = 9261,
                    StorageId = "0669b56b-d749-480c-a80e-26dcd73a9a38",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon43()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 5401.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"7873f0ff-5371-4a73-9401-2777fed2bad5", "b6fb04f1-0639-45fb-8e2b-1e854298d44d", "e1b9dcc9-218d-424d-a464-ee7c94bf00b1", "97987ef6-477b-42b5-b0f4-d403175441fb", "1c5fdd13-6712-452f-85e9-324b8a0dba35", "39f5c456-22fd-4d2d-8055-ddb88c867d8c"},
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "Z",
                    UsageLimit = 2790,
                    MinAmount = 8436,
                    StorageId = "305e81c4-dc8c-4d5d-8058-8affa399d2d9",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon44()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 3129.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"b8ffb88f-03ac-4432-9ab1-f1aca5cc40af", "496fa7ba-56ba-489e-bfa5-9d4c7c935239", "5d7baae9-40c3-498a-975b-9d9981895803", "1822d01c-55da-483f-9b97-ffc41175de3b", "4dbf7ae7-dc1f-4bcf-8818-38f62f2b24ad"},
                    DisplayEndsAt = "2021-05-29T11:55:24.000000+09:00",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "bKA9",
                    UsageLimit = 8620,
                    MinAmount = 7707,
                    StorageId = "6e87947a-87c0-4b08-8e3d-6907a6e8c9e1",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon45()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 1600.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"cdb499ee-62f2-4650-9ded-fbe763943618", "880ba8bf-f3e3-4869-b147-84c0fd97e378", "2f68b968-7047-4b04-957f-3025e3c3e82d", "40bc3ef3-229e-4cb6-9a9b-c725664944da", "d91d4c93-52de-4dde-a0dd-5f8792c2dfee", "746d29a9-2181-45cd-b99d-5d1dff269704", "804fad4d-bee0-4151-afde-7cc39f40646c", "4e8b9c88-04c0-4182-84e0-fa5320aa354b", "e79d79b7-3c2d-4215-8b52-2eaec224b89e"},
                    DisplayStartsAt = "2016-07-09T07:18:16.000000+09:00",
                    DisplayEndsAt = "2024-10-14T01:58:31.000000+09:00",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "MYtB6E",
                    UsageLimit = 4080,
                    MinAmount = 3890,
                    StorageId = "b813b7a2-b5dd-45c7-aec4-d910aae616a3",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon46()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 9885.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{},
                    DiscountUpperLimit = 868,
                    DisplayStartsAt = "2025-03-22T05:11:04.000000+09:00",
                    DisplayEndsAt = "2024-05-04T05:47:30.000000+09:00",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "h5V",
                    UsageLimit = 4692,
                    MinAmount = 9746,
                    StorageId = "3a47883b-ecd6-443c-b587-a7cd8b1fbdca",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon47()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "34632f7b-877a-4850-9a6c-07a40e8922c3",
                    "r68wDPzP1uu5pUlr0e255",
                    "2017-10-17T19:24:27.000000+09:00",
                    "2019-03-03T14:08:18.000000+09:00",
                    "7e222f82-d1fb-48b7-9c59-a7fdbe7ed696"
                ) {
                    DiscountPercentage = 6481.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"aec429d2-6108-4d92-bec2-a74df22f9c37", "b12af5a8-c81e-44c7-b86a-12b047c5089e"},
                    Description = "0YInJitv9WP6kwxoiXMMFgIG6MJKNbnVL",
                    DiscountUpperLimit = 6127,
                    DisplayStartsAt = "2024-08-23T19:41:41.000000+09:00",
                    DisplayEndsAt = "2023-05-08T14:11:49.000000+09:00",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "QI4ykecPi",
                    UsageLimit = 7773,
                    MinAmount = 7140,
                    StorageId = "85cd1eb8-6a7e-41b6-8b31-49c2c2d3cf60",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
