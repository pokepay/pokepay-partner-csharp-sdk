// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCoupon0()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 1154,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon1()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 791,
                    StorageId = "10b0db5f-3f80-499b-8278-74ef36c8ee2f",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon2()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 3477,
                    MinAmount = 6187,
                    StorageId = "a924154c-bdc7-4098-9aa8-7fd4048298c3",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon3()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 9196,
                    UsageLimit = 2493,
                    MinAmount = 7711,
                    StorageId = "e13970b9-9a29-454f-adf9-f59da688739c",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon4()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 7703,
                    Code = "t",
                    UsageLimit = 2404,
                    MinAmount = 5917,
                    StorageId = "12c589a8-769f-41c5-a200-b1e0ee610226",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon5()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 1141,
                    IsPublic = false,
                    Code = "IfrdZy1u3",
                    UsageLimit = 6353,
                    MinAmount = 9860,
                    StorageId = "8ba1ae83-dc64-4129-be78-8c3731ca57bf",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon6()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 9193,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "zvJIF",
                    UsageLimit = 6099,
                    MinAmount = 8078,
                    StorageId = "0889f479-06f1-40cb-af20-474c4e922b03",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon7()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 3053,
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "S9VivOG9",
                    UsageLimit = 1529,
                    MinAmount = 9415,
                    StorageId = "cf8e2cdd-6ba6-4d66-8bee-a4287bd3ec98",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon8()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 738,
                    DisplayEndsAt = "2021-11-23T09:08:34.000000+09:00",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "9qkIUOySeg",
                    UsageLimit = 5559,
                    MinAmount = 3584,
                    StorageId = "5abb6033-d8f0-4cf9-87ae-a7019fad30c7",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon9()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 2907,
                    DisplayStartsAt = "2022-08-08T20:28:29.000000+09:00",
                    DisplayEndsAt = "2020-09-05T16:57:01.000000+09:00",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "BntXU05iAW",
                    UsageLimit = 3328,
                    MinAmount = 2735,
                    StorageId = "6d2d6c89-6eec-4a3f-8107-63ba035b6bc9",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon10()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 2189,
                    DiscountUpperLimit = 9233,
                    DisplayStartsAt = "2022-06-22T14:22:14.000000+09:00",
                    DisplayEndsAt = "2023-11-14T20:33:23.000000+09:00",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "tYE3ysr",
                    UsageLimit = 1876,
                    MinAmount = 3481,
                    StorageId = "03c4a9ba-12a4-4e8b-9240-3fd64e91b6ee",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon11()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 55,
                    Description = "Ba8jDxSq68DvJZ7wDbKT96954z2j9Kt7QDoATp7vKpaZd1k9Vj",
                    DiscountUpperLimit = 5061,
                    DisplayStartsAt = "2023-10-26T14:07:28.000000+09:00",
                    DisplayEndsAt = "2021-06-20T10:40:11.000000+09:00",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "cI8FPszAl",
                    UsageLimit = 3382,
                    MinAmount = 1311,
                    StorageId = "c1bfd8c4-0ec2-4f3b-9063-ce1e43f5e2e0",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon12()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 3277,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"4a3bf2d8-101a-409e-8cbb-c5832ee7078b"},
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon13()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 1833,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"639fe3e7-1158-4374-84d3-6d3f495ae28d", "c21206b2-17a8-4679-a892-a8c3deab8c51", "19391fed-543a-4dd0-931f-d43205ca2225", "35403383-edc2-4ced-b6a3-649ab08c2378"},
                    StorageId = "0fe6ec1c-152b-4763-b55c-3a5707a1d6d5",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon14()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 4895,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"d36e7d81-62da-42a5-9c78-1d58471d6802", "c8980e39-5d61-4064-8429-a6229c0bf869", "977a2ffc-3941-44ac-8090-32ce01ad1024", "9c882bc2-3994-4d57-a2b9-082dfb1a66b1", "7c4ba2af-6fb0-4e9c-8fd9-0dc368c29db5", "9a089cea-fcc2-487f-9245-a9bb41541b2b", "f29d4f3a-54ba-456c-a7c1-b39c7d217958"},
                    MinAmount = 2466,
                    StorageId = "8adc0da3-3b4f-4767-8381-be8244e531b6",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon15()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 3253,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"d181e1ca-e68b-412c-8c75-a50d1cd590e9", "455e38bc-ad6c-404c-a86f-3d14aad98796", "cfa1bc46-9a5e-401c-8e3e-d86b9307dffa", "fffac728-f6c7-427b-9b05-58c7ec8f5f74", "c7f8a91c-5d94-499e-b841-63e4ab36de21", "27b736ba-5df2-4ded-a79e-412feeb7b558", "ed59123c-8fd5-43a9-a2c4-4b491018675e"},
                    UsageLimit = 7839,
                    MinAmount = 8125,
                    StorageId = "86a0f6e9-163b-4535-b5d2-58d5afbcb784",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon16()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 7136,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"b4cc2e44-7cd3-4560-a692-74ba5fb24878", "a44bf01b-c93d-4f8c-8846-88fb09681e52", "22ee5b24-7d9f-4f47-89f7-bf5d84898942", "39a4c75b-b3a1-4988-a36e-ff68c9cd5a32", "9ddf143a-68ad-41fa-b817-17d3acabe5fb", "ff2266d8-f349-44b4-b307-65a395f63a6b", "14e0123a-39ae-4062-956a-5f38088d4cc0", "42fb0584-cccb-410e-a4ab-9aceebdf606e"},
                    Code = "C",
                    UsageLimit = 5910,
                    MinAmount = 2311,
                    StorageId = "ba4be568-e064-4df5-ad3a-36c4cf6f1efd",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon17()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 7429,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"2550d22b-2895-4609-adad-5c10864fc8c2", "77c3d6c8-2dcb-4a75-8f5a-9f4ee0b5d303"},
                    IsPublic = true,
                    Code = "k",
                    UsageLimit = 5860,
                    MinAmount = 3744,
                    StorageId = "8c2917f7-1a0f-4867-b669-4c2647418148",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon18()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 1966,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"ea671ed5-8dd4-4c8b-ad69-8fc2b19f5901", "7033e6d1-d90e-49b3-98f9-e5f314718ae0", "a2458470-4d27-457d-a85e-1d06430171f9"},
                    IsHidden = true,
                    IsPublic = false,
                    Code = "wAQI4axo",
                    UsageLimit = 1806,
                    MinAmount = 5579,
                    StorageId = "0e4643a1-0d4f-454c-8d05-4d23c87ad1e3",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon19()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 3612,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"02b1a36c-19dc-4093-9e56-522b01609b28", "51b92ef8-df15-4d7e-a3e6-7df78601c12c", "e70fd99a-44a3-44e4-809a-334025acb4ba", "d57ea476-1763-46e3-ba0e-58ee00f00fef", "1baf1151-409a-49b8-8d7a-662a697bf6e9", "8420016d-4bbf-48c2-8e67-db412aa946f9", "29db15b4-0970-4884-b11f-93341841071b", "2c09074a-d3b7-4cff-ac0f-371e9390ce25", "30ed403b-9dd6-440f-8f3b-33375bc9e7d6", "4e833b8f-c95a-40e5-b1cf-b9e4aa190964"},
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "hm3X3QFvI2",
                    UsageLimit = 2937,
                    MinAmount = 7012,
                    StorageId = "2f7710ee-bff2-43a6-907d-a2c13eb46e70",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon20()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 2400,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"d4f77431-cbc7-493a-92ec-4e1cb61e2746", "e3cc8a25-6704-4abe-863d-61cf33d2cc56", "4be8da49-f73e-4598-af29-4d94251065a6", "55398886-03c9-4033-a0dc-b11016eb247b", "3da77e4f-f3a8-41ec-a19f-723364254017", "726a2d31-ea4d-4635-af7e-35d3e0d70882", "ecf82282-a0be-43e6-9664-6305d5fb9999", "07409f44-6300-43ba-9e68-0e597d608d02"},
                    DisplayEndsAt = "2021-10-12T13:13:14.000000+09:00",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "1",
                    UsageLimit = 6061,
                    MinAmount = 5392,
                    StorageId = "fa3ec8f3-912f-4ecb-b986-cc3394769a2e",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon21()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 5102,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"77fa507e-4f99-4bbe-8821-cd8fd3a3ab17", "c143d3a7-d510-4d0e-b6aa-9e4815d4f050", "b66173f9-45b8-4b6f-b8e0-81a176d1222e", "46991b7b-326d-4cc7-b4b2-cca0bd9ac2cd", "21f89a47-c13f-488d-a101-f33e8a2cd29f", "8bef561c-f795-4e2e-8f0b-d5f34fc8ef1d", "dddd4dc0-a5a3-415d-837c-521ea6673c63", "b8db9489-30b0-4e60-aca5-fd58475674aa", "55177680-1fe2-4738-ac6a-2785054f68b0", "6fcd8485-55c9-4220-a19d-0eb9c118e3af"},
                    DisplayStartsAt = "2020-06-26T05:47:14.000000+09:00",
                    DisplayEndsAt = "2020-04-06T22:59:51.000000+09:00",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "y3mw6ENB",
                    UsageLimit = 6628,
                    MinAmount = 9522,
                    StorageId = "a1660e21-9295-4e60-a785-9626c1a1462b",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon22()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 8265,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"03bad727-bb47-45b0-9167-7b0b237c0552", "b95e81f1-9200-4e8a-9403-97733eedd66b", "bb0a0c1c-ba1c-4787-9f29-63fdc6e4a4d9", "37c832e8-dd2f-4ba9-b6b6-4f619f0a3bf9", "baaabd92-82fd-4893-95cf-c60478fb292b", "c2ee8641-e0db-414e-b791-468ffb80fcf3", "fa9af98b-cc7c-45d6-b722-9a3be57d403d", "b5d683db-c39c-4fc4-a0d8-0e3dddad5f27", "d4ad2374-a837-4d86-bb4a-abed854248e1"},
                    DiscountUpperLimit = 8231,
                    DisplayStartsAt = "2021-09-21T10:12:56.000000+09:00",
                    DisplayEndsAt = "2020-09-06T03:05:12.000000+09:00",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "Ey",
                    UsageLimit = 8165,
                    MinAmount = 2885,
                    StorageId = "dc0d152d-5bca-4da9-9079-6091e6b2c440",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon23()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountAmount = 7481,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"9b8d3d83-fefa-4ac8-bf92-9234c8e9ef3f", "39f50efb-9736-4eb8-8535-0c5714bf638b", "d7fe3742-2631-4b10-a171-379d67e9a5f6", "4bb59b36-7fee-45c0-91f4-e349d73364d3", "7e2be069-4fe0-469c-9db4-9e10dcb4f783"},
                    Description = "YI7bCpoVabjsxDFgjcpgSMcMqVoBHxWO53BPwbgb8Be3AxY40gPybTKbGUyuov0iQeP9ZKGnv6CiMrFsP1tPCCPj3bFb35Ja74fIopDGjh1S9JxnawhyhE5VVwR3rnJaSv4hzuXmul7zf1CIOCzMF2GaP42dAOspv3daXEpjts1X9pkhIu",
                    DiscountUpperLimit = 5339,
                    DisplayStartsAt = "2021-10-10T07:36:24.000000+09:00",
                    DisplayEndsAt = "2023-05-04T15:12:43.000000+09:00",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "bmIGqIT",
                    UsageLimit = 4547,
                    MinAmount = 5650,
                    StorageId = "5afaffcb-68e3-423c-ac55-1cbda9212b11",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon24()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 3602.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon25()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 1128.0,
                    StorageId = "f51097b7-5463-4a63-9910-72ffdcf866c8",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon26()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 9072.0,
                    MinAmount = 7203,
                    StorageId = "c80ea455-7cf8-4087-81e4-6a4f343a34ac",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon27()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 5226.0,
                    UsageLimit = 7793,
                    MinAmount = 4601,
                    StorageId = "f183d84d-d056-4afd-b008-da306fbfd3c8",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon28()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 7353.0,
                    Code = "xwBYuLK",
                    UsageLimit = 6487,
                    MinAmount = 2631,
                    StorageId = "c422ca85-7f3d-437b-a48c-1168245b1464",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon29()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 5143.0,
                    IsPublic = true,
                    Code = "tC",
                    UsageLimit = 9790,
                    MinAmount = 5708,
                    StorageId = "dc8ccbcc-c4f5-47cc-9b9f-406e56775526",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon30()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 7399.0,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "oxWrNtS0X",
                    UsageLimit = 7449,
                    MinAmount = 1201,
                    StorageId = "90a80aca-56d0-4d08-8d47-e6d014647dcf",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon31()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 2164.0,
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "BFt8gQfNiJ",
                    UsageLimit = 9396,
                    MinAmount = 2687,
                    StorageId = "04382ebf-1701-42d1-bba8-2c82b9958e63",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon32()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 1271.0,
                    DisplayEndsAt = "2021-02-04T19:23:02.000000+09:00",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "rMRhDiKMp",
                    UsageLimit = 2257,
                    MinAmount = 3357,
                    StorageId = "68b05b08-3504-4b07-81bb-65161dbf9b3e",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon33()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 1292.0,
                    DisplayStartsAt = "2021-04-07T09:03:38.000000+09:00",
                    DisplayEndsAt = "2023-09-02T21:37:01.000000+09:00",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "IEYEzDMq0p",
                    UsageLimit = 3762,
                    MinAmount = 4271,
                    StorageId = "0303fa2e-dc14-4ede-ac44-d3305b5b0104",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon34()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 6871.0,
                    DiscountUpperLimit = 8661,
                    DisplayStartsAt = "2023-08-12T12:45:40.000000+09:00",
                    DisplayEndsAt = "2022-03-27T18:47:46.000000+09:00",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "wb6w4x7",
                    UsageLimit = 8726,
                    MinAmount = 5039,
                    StorageId = "01eb0862-456d-4974-b5e4-4e93c31db4d5",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon35()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 5696.0,
                    Description = "gqCYrPzxYeHRppVnuXImoNG3TLMxjW63jBj4JYgDsY6tzTlHgev2I4qQVT4mRTvbL2o9vPqmxveuRukkrBs6Z5IZDwDpsAbING4eRly39VX9rhqJtNJOkcjYJcxktod2F7tat0",
                    DiscountUpperLimit = 2648,
                    DisplayStartsAt = "2022-01-02T15:16:02.000000+09:00",
                    DisplayEndsAt = "2020-09-29T11:47:39.000000+09:00",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "Vz3F",
                    UsageLimit = 4546,
                    MinAmount = 6119,
                    StorageId = "756c66e6-d064-43fd-9a7a-1b354db3018a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon36()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 3270.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"d88683f6-4a47-4c81-b388-2081ff48dce5", "480eb1de-3ce3-47a5-8f08-7783ac0b03d9", "79d76118-7a58-48e1-b55a-3d910cd37903", "27ae6912-0dad-41d0-88f4-d39843c50b5e", "b5644700-4e40-4bc3-a4f8-676411ccaf0a", "69f4453a-a7c5-450a-b2d0-75dd0dc32937", "e15e3ec0-8490-455d-8d90-3a9c04975237", "90437a46-2dd5-47f0-89f2-01c777751307"},
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon37()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 7966.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"cb10f3c1-fce5-4152-b71c-3e951e44eda9", "611d6d53-4f6a-4253-b9e7-2fe23b508f90", "7f2dc1f1-e296-4848-b138-be6dc2f46074", "b64c25ee-35c7-4cb1-b018-5c738b0577a1", "e5dff9ef-4fa5-496d-9904-124e00fb9036"},
                    StorageId = "5b7eda67-0ab0-43f6-83d5-6181fa87c7dc",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon38()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 4559.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"7b346b77-3a9e-4c6f-93c8-5185df1e0283"},
                    MinAmount = 3119,
                    StorageId = "54ef4b62-a34a-43ba-850d-acd81425856a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon39()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 6268.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"aed895f7-6e79-44e1-9961-2bcb2bb44885"},
                    UsageLimit = 4234,
                    MinAmount = 7905,
                    StorageId = "7a1e2c32-7511-4185-9e7c-9dadf6e8ce1a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon40()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 1985.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"24b11480-ad7a-4d27-816b-ef92571f0626", "4b25fd9c-ba99-4aee-a395-1d09ead6fde8"},
                    Code = "lE9BQV",
                    UsageLimit = 3582,
                    MinAmount = 6788,
                    StorageId = "79c3b1f6-2e2a-45d6-9a4d-6a8242054edf",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon41()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 1086.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"cfcfa771-c9bb-4739-9c0c-fd3b984dd2e4", "922dc631-b3c9-49d4-8ad8-28d66a7cbc79", "382e7231-998a-4914-9639-66c6c662f5f4", "d6d2cfdb-c111-4b48-9ff4-348f2c2f93a5", "7ea4904d-a126-4f73-98c6-d1c072b2b30f", "38d1f340-c3a7-41e6-ba4a-a6bd934ca285", "99eb7cc7-351e-41d3-9302-b835ce1d5e17"},
                    IsPublic = false,
                    Code = "0lzJ",
                    UsageLimit = 2034,
                    MinAmount = 9646,
                    StorageId = "627a5ce4-39a8-43b3-8c15-35582f55fc99",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon42()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 9585.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"2cedcd81-bcb3-4135-9672-dc82ac18c6c2", "765190f1-3391-4524-846c-579bbeffebcd", "8303ac2e-2fd3-46b2-8444-b8456ad79ddb"},
                    IsHidden = true,
                    IsPublic = true,
                    Code = "PAcu",
                    UsageLimit = 3516,
                    MinAmount = 2426,
                    StorageId = "15b211ce-1375-4e28-bc10-d5665c756c8a",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon43()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 6669.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"5fa575df-63da-49c4-b1cc-d64243036c35"},
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "oUbJ7o",
                    UsageLimit = 3770,
                    MinAmount = 4596,
                    StorageId = "e1c5e31e-2540-41e9-b475-6ac5454d437c",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon44()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 7998.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"e55eef2e-441f-481f-a599-2e832111eb2a", "e60d9e37-d084-41f0-94b1-416aaa48326e", "8a5d51f2-0b64-42be-8dc0-9d97ac70dd9b", "d343f79b-f09f-476a-87cf-ac40425e4a29", "db7cae20-1413-4a4a-bd48-09587aa058c4", "c158a4bc-cd80-4887-9ba6-1c431afe55f9", "f4712d90-d9a3-4e73-8a02-5e56252f7f76", "ecea675a-5c94-4b1d-91ca-60296355f074", "9e54703b-02a0-4670-8539-4c521e976893"},
                    DisplayEndsAt = "2024-01-03T18:55:34.000000+09:00",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "7q",
                    UsageLimit = 1181,
                    MinAmount = 1458,
                    StorageId = "45c15fa0-44a0-4010-9401-c1b49fa924be",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon45()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 2575.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"78b14848-14e9-45a0-a470-7b3bed7a4519", "b6f74bb9-bd9f-4753-beb9-61b7a51ce73a", "8a73f984-615e-4a38-a9a0-56aa51973df0", "6ba28dbe-259f-4185-ae79-191ae0087e15", "346f18de-d49f-4b62-8137-e2b20654ede0", "400b6d90-3508-48ca-87ca-4e65125385e0", "ff2d9092-e228-44b5-90ee-4a6803cc51c2", "d1de1014-c1d3-4a56-8a73-43de4b665477", "18e2eedf-2e66-4e75-ba27-f83df85dc8d0", "5f0d348f-4b63-4561-b490-517f4c71137e"},
                    DisplayStartsAt = "2023-03-26T05:45:32.000000+09:00",
                    DisplayEndsAt = "2021-02-19T15:56:13.000000+09:00",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "THkXMMm",
                    UsageLimit = 5506,
                    MinAmount = 2302,
                    StorageId = "f3c3b9f9-e67f-46d8-843d-90b1e87dbcb7",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon46()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 8480.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"794c1d88-03c5-46d8-a102-51b4bb73aac4", "208209ef-a840-4c6f-9687-9a3c34070c8a", "fbaed5d6-b96c-493e-8fec-db2f0d7daefd", "c074f2f1-0f8e-48dd-bbb3-72a7767ac21c", "9b3b04a3-1ef7-44ce-8a78-2408ed52c447", "40cee35d-2fb3-4aa8-a677-8693d90122af", "2b6e4297-4a83-413c-87ca-ea6ed060a5d7", "bc164881-2f7c-4558-8101-8b745b26db3b"},
                    DiscountUpperLimit = 7581,
                    DisplayStartsAt = "2024-01-16T00:14:10.000000+09:00",
                    DisplayEndsAt = "2021-05-30T06:00:22.000000+09:00",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "A5LEgmY",
                    UsageLimit = 8524,
                    MinAmount = 6118,
                    StorageId = "43a6cc19-3da9-49b8-92ba-e347fa4179dd",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon47()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "149ce080-7278-4b7a-8de2-8dda3e42ce07",
                    "Cqz5IjGV9ilYBtFrChQkIqdEymdC8MOlZ4jbB5mXjZPKxRSD6ByUC5TQxlum8bZoVux6WqmmWyrz0qMfo4Cf4ezoUSmiu2Y7larHcAGtn29iA7vADWLZnhXDNcHkI6",
                    "2022-07-29T06:30:49.000000+09:00",
                    "2021-03-22T04:53:58.000000+09:00",
                    "aa46fb23-5293-40a1-9f3d-9b8b92a61620"
                ) {
                    DiscountPercentage = 6107.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"6009ed0c-38aa-463b-b9e6-2033cf633e5f", "b84a33ac-55bf-4b93-aa6d-d87c5c37da1b", "02cf92d1-5859-4c32-9d2b-92c97cfd4e4f", "de92a822-6f17-46d6-9e06-6d595efb712b", "9208eac3-5085-434d-a471-ff376668a198", "3b1a49b7-f95a-482c-ad7d-3828f3209a15"},
                    Description = "gEwRoz0pML4YilkYd9rPKR31wdq2D5OGy3yKqEZNTkPezoD2PhrsfX6aBo8WfvtIt9KdUjS7e4JgwxcS5legNsTbQ2JCpyrYggGUttEBedXiwTnVZsJSXbu10wHmSLjh6Ed4kT4sVqGwvcbfO6dDiquhRQZ8Nej4UG1cNFnfirJ4dnE1bt7LmJpex2XnAQqg3ukU5j01Yg3s",
                    DiscountUpperLimit = 6086,
                    DisplayStartsAt = "2022-05-24T05:30:31.000000+09:00",
                    DisplayEndsAt = "2023-05-06T19:08:27.000000+09:00",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "p",
                    UsageLimit = 2474,
                    MinAmount = 7575,
                    StorageId = "3a2815a1-fdd6-4d6c-bb5c-0c9de9fc5e40",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
