// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCoupon0()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 3434,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon1()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 1669,
                    NumRecipientsCap = 4256,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon2()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 6126,
                    StorageId = "cf7007df-01a7-49ec-a0a3-3995ad7090d2",
                    NumRecipientsCap = 290,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon3()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 9018,
                    MinAmount = 406,
                    StorageId = "7e6e99d3-ee3f-4ec7-918e-9debdf2c30fc",
                    NumRecipientsCap = 6733,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon4()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 9975,
                    UsageLimit = 1588,
                    MinAmount = 1397,
                    StorageId = "90b669cf-2b9c-45d0-9237-9beaed31011f",
                    NumRecipientsCap = 9818,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon5()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 2951,
                    Code = "Ukie5R",
                    UsageLimit = 5805,
                    MinAmount = 5986,
                    StorageId = "a9b2f7e4-44fd-4ae0-89ef-9a8593f6d10e",
                    NumRecipientsCap = 8869,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon6()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 8481,
                    IsPublic = false,
                    Code = "3nbAQN",
                    UsageLimit = 1471,
                    MinAmount = 7563,
                    StorageId = "a75424d2-4d61-42a2-b34a-6b6110d813f1",
                    NumRecipientsCap = 140,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon7()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 3516,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "aFh0mP",
                    UsageLimit = 7560,
                    MinAmount = 4764,
                    StorageId = "34c0f17f-7101-4289-a7c3-b90c916f7de9",
                    NumRecipientsCap = 3320,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon8()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 1839,
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "joV",
                    UsageLimit = 3571,
                    MinAmount = 6891,
                    StorageId = "7bc955d5-08c8-437b-8dc9-eeadf3ccba20",
                    NumRecipientsCap = 9244,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon9()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 2546,
                    DisplayEndsAt = "2021-05-14T17:40:10.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "85stT5X2f",
                    UsageLimit = 4324,
                    MinAmount = 9897,
                    StorageId = "2cdf9a85-dc54-4cf3-8109-0065d473b8e2",
                    NumRecipientsCap = 2721,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon10()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 8229,
                    DisplayStartsAt = "2022-01-31T18:48:31.000000Z",
                    DisplayEndsAt = "2020-12-24T06:25:22.000000Z",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "Vb",
                    UsageLimit = 8058,
                    MinAmount = 4048,
                    StorageId = "e4afddd5-62b8-415e-b287-950dbdaa03b1",
                    NumRecipientsCap = 7637,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon11()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 9774,
                    DiscountUpperLimit = 831,
                    DisplayStartsAt = "2021-03-02T14:23:03.000000Z",
                    DisplayEndsAt = "2022-11-10T14:54:42.000000Z",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "OhnrWk",
                    UsageLimit = 4670,
                    MinAmount = 8334,
                    StorageId = "14cdc708-6b0e-463e-9cd6-61e824377c13",
                    NumRecipientsCap = 2233,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon12()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 118,
                    Description = "XFKeuF0FhTncNlMmgEuaHAHntz60OEH7JgjiAw3cGaLL5KHpinnRK5y0OzJ9Hvf2cVYRMoN8ciCbZWnzcDnK4LA4gWzsFxrE",
                    DiscountUpperLimit = 2812,
                    DisplayStartsAt = "2022-06-03T06:44:39.000000Z",
                    DisplayEndsAt = "2021-05-01T16:11:51.000000Z",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "mI",
                    UsageLimit = 7455,
                    MinAmount = 6647,
                    StorageId = "cb552f2e-2982-4ef1-b805-5ab03d21a281",
                    NumRecipientsCap = 9986,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon13()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 8135,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"c1fb2290-3659-41cf-83e4-517eed868114", "82adea71-dcab-4670-bcdb-d09c303c7cb3", "9e264890-7024-4abe-9161-955b123d6bcd", "3fb704a1-8a3e-47ba-a729-9c0ccc4df204", "13d35e77-d5fb-4199-80b4-04aa768b19c0", "ba22db87-feaf-428c-b51f-7152bdd0ed66", "a182fe08-c61d-4007-b410-2e90577521ee", "10d3fc98-b26c-4743-9a37-f138dce61058"},
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon14()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 2125,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"2c6d7a7c-9a5a-4388-a80e-69b0ffb8a90f", "26901695-b622-473e-834b-c5c11743271e"},
                    NumRecipientsCap = 8226,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon15()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 6317,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"85da6f45-98ce-4838-90a1-ff3cd84e2b2f", "1544d3b3-4355-4a7e-8bad-4220100d55b6", "3d58214b-ebca-4434-9d1b-36ab7f97cf07", "83f91fe0-c7a4-4021-b824-e9328f36ae23", "abb0a2a2-4f71-47cc-975a-42d547596f31", "3c8d9a3d-a1ec-4cff-94e7-735f92ea034a", "cdc6107d-2808-4d42-afc5-de7442956979"},
                    StorageId = "b2e3079f-36ec-4e9c-9d41-1cb7d8e9ce4c",
                    NumRecipientsCap = 7133,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon16()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 4579,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"31053645-bb8f-45d9-be4e-69423ff49d7e", "f94dd988-9f84-4348-bf7b-1f87b46a7085", "240d8cb5-208a-494b-876b-fb1e45b1239d", "f5a36069-26d4-4d25-aee5-ab3a32f0f147", "06bf5a01-a5f2-4c58-816b-aa6416d92da2", "8d031dec-3c7c-457b-9106-35918f213c1c", "97f6525b-426d-4b7b-a2c4-71ff71b754f6"},
                    MinAmount = 6911,
                    StorageId = "1cc6fd3d-d118-4d50-a378-7faf45e705e2",
                    NumRecipientsCap = 4189,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon17()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 592,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"e926530c-4aca-4c12-b751-bced9b55c770"},
                    UsageLimit = 1660,
                    MinAmount = 2625,
                    StorageId = "63a444a3-5a25-4eb7-8de5-cb50797471f4",
                    NumRecipientsCap = 7828,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon18()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 4888,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"24f7411c-e821-4816-bb88-56d9e6730353"},
                    Code = "3L3WB",
                    UsageLimit = 4366,
                    MinAmount = 3603,
                    StorageId = "b89cfc8a-f0be-4f84-aabd-e3d58a7d8b59",
                    NumRecipientsCap = 2457,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon19()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 1819,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"71360ead-7e08-4f4c-a1d8-79fea69650e8", "7c83a4f5-3fa5-42b0-84fc-4b76e8d4f0cd", "958450cc-aef8-4c91-b6f5-bb44abe0c26a", "92640082-b184-409a-8afb-c4de07db38e6", "64b0affb-66ca-4af8-a5e5-cb04cce9ac2b", "812ebf3a-25f3-4f3f-984b-d69aee82ef6b", "2a126677-17e2-40c5-8dc8-8c7844068aeb", "b03c66ce-63fb-42e9-a779-3ee3be44dae3"},
                    IsPublic = true,
                    Code = "uXaxHAA",
                    UsageLimit = 1916,
                    MinAmount = 7052,
                    StorageId = "5e421e90-3c7a-457e-b4eb-be664514726c",
                    NumRecipientsCap = 5001,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon20()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 7440,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"c90d1113-7272-4362-87a7-12d820c6dc94", "3e107aa8-7935-4fb0-b761-41abe0949aba", "547e45a5-f2e9-4074-b864-e2d4357f2e63", "10ae76d9-5616-43ea-aa43-838febc88740", "f34e894a-3a95-41d6-a27c-2194510d09e1", "404f413e-acac-45f4-98d7-b0b3d2b7983d", "426ccff3-e088-47dd-b3ed-2da124707eac", "06fbc962-735b-4cd7-aa09-476a42035861", "a65828ef-8a7e-4ba6-a390-d7dcc42a12cb", "416eb1ca-97d3-4eb9-8a26-1a5dbd35da92"},
                    IsHidden = true,
                    IsPublic = false,
                    Code = "FlJcsltj",
                    UsageLimit = 2154,
                    MinAmount = 959,
                    StorageId = "5274ee9a-ceef-45e4-ae5e-3cbcacb1e521",
                    NumRecipientsCap = 8233,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon21()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 2500,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"b4377603-5945-4d2b-861e-dc0f3db694bb", "61184407-70d5-4506-93db-be022af4f978"},
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "v7DnSC5Rf",
                    UsageLimit = 885,
                    MinAmount = 48,
                    StorageId = "8627ea81-0c5d-4e1e-8330-c9f595082217",
                    NumRecipientsCap = 6830,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon22()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 1042,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"201b2190-3321-4a77-ad70-8e50e41778eb", "71c431d0-3c3e-43ea-87e2-197ca645e26c", "64a50745-7389-42db-9d8a-7833036bf94b", "208d1017-34f8-4552-9fdb-6af284bbc955", "575f13d4-da05-4fc6-a084-7c8d0803b4a9", "568f169a-781b-4540-ae2a-d90ff45ac1d3", "e97556f0-481e-4f49-9485-18400442b85e"},
                    DisplayEndsAt = "2020-03-10T15:30:52.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "wJUUxrUc5Y",
                    UsageLimit = 6202,
                    MinAmount = 8024,
                    StorageId = "ff1aff65-be6c-4e2b-9abe-e0dfb6f29432",
                    NumRecipientsCap = 578,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon23()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 9902,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"c6f7501e-8030-452a-8ce7-1facec1b7cbc"},
                    DisplayStartsAt = "2023-12-21T00:26:03.000000Z",
                    DisplayEndsAt = "2024-05-17T08:04:42.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "6FxY",
                    UsageLimit = 2912,
                    MinAmount = 3109,
                    StorageId = "d4174f8c-be57-4687-9abd-da773ee21f85",
                    NumRecipientsCap = 5163,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon24()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 2643,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"1e0f1683-0c60-4c20-9080-4ccd688b561b", "293f7f75-1843-484c-9373-7100f88b42fd", "914d8cff-22f7-42f8-8414-98d692d8a8b9", "0fb2ee9b-b9fc-4a64-b2e7-415229718b13"},
                    DiscountUpperLimit = 8907,
                    DisplayStartsAt = "2023-02-06T16:39:04.000000Z",
                    DisplayEndsAt = "2023-04-03T17:33:28.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "LSvZ2KQOR",
                    UsageLimit = 6904,
                    MinAmount = 205,
                    StorageId = "70328b16-c6fc-487b-88f2-cf19193eba6f",
                    NumRecipientsCap = 7739,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon25()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountAmount = 111,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"b4c8b6a5-d240-4022-bb4d-f6db16c5eb83"},
                    Description = "6W2y8KrZ8xMlNalvWasLjNh8s14cZJ7e4Q9GCUyL2v9u3mWzZwKqxzujrUlmkKRdRXeieY6AmMB38WCqGZQWNed5BL6m650n0RmhPNf1QdSFaslICN4xIeeSgcGsS3PA5BMU547lNJdN573CatnkU3QijXWL36Ne9BIyD0VsxUMLq2pynj2i9JS",
                    DiscountUpperLimit = 1455,
                    DisplayStartsAt = "2024-11-18T00:08:08.000000Z",
                    DisplayEndsAt = "2020-06-09T02:32:40.000000Z",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "dpHbhmzm",
                    UsageLimit = 6212,
                    MinAmount = 4029,
                    StorageId = "0c40c6be-8607-4df6-85f3-99400041be75",
                    NumRecipientsCap = 9112,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon26()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 100.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon27()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 3164.0,
                    NumRecipientsCap = 6866,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon28()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 8774.0,
                    StorageId = "c3304020-5846-4583-b162-4f90c82ca202",
                    NumRecipientsCap = 5245,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon29()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 4806.0,
                    MinAmount = 4263,
                    StorageId = "d5f312c6-1556-4553-945d-3c29906f7ffe",
                    NumRecipientsCap = 7929,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon30()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 7050.0,
                    UsageLimit = 5799,
                    MinAmount = 3969,
                    StorageId = "32f30968-25ad-4628-995e-2bb3640dd194",
                    NumRecipientsCap = 9028,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon31()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 5756.0,
                    Code = "G383Fy",
                    UsageLimit = 9830,
                    MinAmount = 998,
                    StorageId = "08ddde84-47a4-4921-bf30-ae47e8715c5e",
                    NumRecipientsCap = 429,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon32()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 599.0,
                    IsPublic = false,
                    Code = "JQM5UqG",
                    UsageLimit = 4532,
                    MinAmount = 7847,
                    StorageId = "5deec6d4-1994-4db5-9a17-9707b37b7ec0",
                    NumRecipientsCap = 7130,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon33()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 4649.0,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "XeD7lp3hQ7",
                    UsageLimit = 8962,
                    MinAmount = 5531,
                    StorageId = "aaa46969-d7d4-4d9a-95e4-dff4f0a14659",
                    NumRecipientsCap = 4140,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon34()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 5146.0,
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "ZtYN7NcCeD",
                    UsageLimit = 2558,
                    MinAmount = 9304,
                    StorageId = "66f44500-83c9-4f25-84b0-7c95be302a31",
                    NumRecipientsCap = 913,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon35()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 4541.0,
                    DisplayEndsAt = "2021-10-01T23:16:12.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "oT6dE59eFW",
                    UsageLimit = 8933,
                    MinAmount = 2640,
                    StorageId = "001e3cf8-2a48-4c90-9307-b20d0f1b414a",
                    NumRecipientsCap = 2492,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon36()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 1896.0,
                    DisplayStartsAt = "2023-11-16T11:45:12.000000Z",
                    DisplayEndsAt = "2021-11-30T09:09:33.000000Z",
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "R",
                    UsageLimit = 3069,
                    MinAmount = 2074,
                    StorageId = "88af51af-8162-4fbf-913a-5fa762805178",
                    NumRecipientsCap = 8574,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon37()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 1.0,
                    DiscountUpperLimit = 4202,
                    DisplayStartsAt = "2024-02-29T22:16:19.000000Z",
                    DisplayEndsAt = "2020-12-26T18:57:27.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "8El4HGgf",
                    UsageLimit = 2633,
                    MinAmount = 5723,
                    StorageId = "4554bd6e-0555-465c-b5da-3a16931f3f9c",
                    NumRecipientsCap = 2262,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon38()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 1754.0,
                    Description = "cdXJKlldoDuv9TA2XHRXocL0a2ENjq4YdkJGWgFmKTEIA1MAf2HgecIl74FyRST7ScfdaiXI0aphnQpmaEH46JpxMwBWB66twU",
                    DiscountUpperLimit = 4100,
                    DisplayStartsAt = "2023-04-08T08:52:40.000000Z",
                    DisplayEndsAt = "2022-07-21T12:11:38.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "qx",
                    UsageLimit = 5166,
                    MinAmount = 6597,
                    StorageId = "d2b820a5-d906-4d52-8584-53ea9a9de4fe",
                    NumRecipientsCap = 7612,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon39()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 6129.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"b71d8280-679e-4ca0-a7df-7da0b7ac8171", "5fb260ca-1c3b-4f92-abdb-d0c5febeff64", "ab2565e6-e382-486b-9ebf-2ed9faa51aa1", "99b05f8d-7cad-4720-a396-831a1eb855a7", "3f89c576-ba7c-45bc-9569-89a092e4d94d", "92631867-2286-4ba6-be42-f9708687f65a", "0a47aadc-41c1-45d9-82aa-1562dda1aae3", "38d4fc76-35d2-4a11-9b5a-4c7a3aabbd89", "17eabea4-4b61-4915-8933-dc8f3b417fb7", "87efc471-72eb-488c-b5bb-31a970bd77d1"},
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon40()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 2977.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"0a9de69c-65c7-4afa-a933-a47fd9d4dffe", "e3a73736-944e-475f-9ed1-7961e3dcab2a", "b00f9b98-be76-4503-9712-c75ac005791c", "b01599d8-311c-4f11-8dac-36a601f096d3", "eb288dc5-fabf-4bdd-b049-62f2e1652a4b", "0b8f9e64-5108-4fde-b0de-6cfa4e3abbb0"},
                    NumRecipientsCap = 7623,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon41()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 1068.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"d35e2114-6e74-445e-be91-fcf7d5333319", "4ab9bfcc-d5bc-4500-b773-4928876f7850", "b101e6b6-217c-4650-a128-116c471caf76", "db763418-7c06-420f-b44b-4097d23625e6"},
                    StorageId = "b3078853-95ae-4024-b719-cdbd51222e8a",
                    NumRecipientsCap = 9723,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon42()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 2027.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"df4620db-6a95-4328-a605-dbc03254d048", "4e22026f-3bfb-4f69-b0ef-122eb91b1d21", "cda21411-99e5-48c1-9428-0f9ae8313cb0"},
                    MinAmount = 6478,
                    StorageId = "5503cd2f-9f7d-4b0e-9e3b-d957339de445",
                    NumRecipientsCap = 6027,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon43()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 4307.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"5fccfba4-0530-4b25-af56-a9a8a9512f01", "64edd760-7206-4f0d-ae2c-16c2fe8ec60f", "fb5d8479-ceb6-48e3-89f2-2eda64316ecb", "dabee1ee-2df6-4a03-b9a2-fd746ed6f12c", "a973d6ce-1767-4d39-b31d-317c76286fef"},
                    UsageLimit = 1625,
                    MinAmount = 2596,
                    StorageId = "f4f1412d-a77e-427b-a04d-67e0c72078f2",
                    NumRecipientsCap = 8892,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon44()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 7936.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"850796e1-61c7-441a-8ea5-9ca8f3e8cfc6", "aa7398a0-95f1-42ae-9958-3733d0014d5d", "13f47af7-1f65-46dc-a067-73dfe92fb84c", "13bdfc2e-e053-474b-8e80-0947944970ba", "72e0639e-65fd-490f-92f0-ad0bd22802dc", "88188871-092c-410b-92d3-25a3feda7c45", "b6a67b75-3e1d-4083-bdf7-8ee00456ff90", "a26abf4c-b457-4bd4-9639-8aa15de4f5ba"},
                    Code = "7",
                    UsageLimit = 194,
                    MinAmount = 9144,
                    StorageId = "34c9209e-f9c0-409c-a6b8-73bd7fceae23",
                    NumRecipientsCap = 4869,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon45()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 1606.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"423cfde6-9cce-4315-9a01-44066b841e7a", "55290b1b-7c6e-4072-9263-10ccef63b57d", "f6945139-9da8-4a03-aebe-a8c1a32fdfd0", "cd3e5863-1913-4ba1-95a4-3dbfae7b3fc4", "3d72d4a4-3581-4c8e-a823-4594c402a646", "277e208f-f6d6-4bd8-9d3d-6ec92bf0ef6d"},
                    IsPublic = false,
                    Code = "JBKStcO3wB",
                    UsageLimit = 6526,
                    MinAmount = 220,
                    StorageId = "100d21b3-87b0-475c-b497-d04aa13a7299",
                    NumRecipientsCap = 238,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon46()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 7835.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"88900b68-9c26-4ee7-8ab0-14f2ce783b11", "3d5ade4e-2ce9-4f3e-904f-af063f3a60b7", "89ee3901-a041-4fad-ae26-d1a0e8dfe50a", "17715863-04df-4171-b3e2-8eb1999d5bbb", "3bc41758-c80e-4d2e-b8dc-3c2ede37751c", "93fc686f-5a1b-4d00-8e51-4dada6810e85"},
                    IsHidden = true,
                    IsPublic = true,
                    Code = "9wf9SU",
                    UsageLimit = 6808,
                    MinAmount = 2228,
                    StorageId = "ffc51dd7-456a-4c4c-8b31-f7fd6c88063d",
                    NumRecipientsCap = 6817,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon47()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 7100.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"2fe49c00-c654-4e3a-bf00-4a9ae9b507b0", "c79b2932-c51e-4747-8544-25469d961b27", "6606c6ec-1380-4da9-9e6f-cffa383ebb30", "053c9b3e-431c-477d-b951-ea4b7b886416", "a42ea035-1255-4a2f-8b25-7ea3b6011104", "e515b7c6-53f5-4927-85aa-e9940bd0f827", "51652ec3-a51d-43fd-b5be-1f086fc78f4a", "525375d8-4bd2-4422-9661-e0f913abb4c6", "08242ce6-0d36-4d6f-88f9-b3029dca9e3e"},
                    IsDisabled = false,
                    IsHidden = true,
                    IsPublic = true,
                    Code = "56A1wW",
                    UsageLimit = 1046,
                    MinAmount = 2298,
                    StorageId = "5ee5a94b-a716-42ba-94ae-5b54425afaf8",
                    NumRecipientsCap = 3344,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon48()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 6637.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"00a42a1a-6131-4994-a27f-ba2b4ce00d80"},
                    DisplayEndsAt = "2020-07-05T09:23:03.000000Z",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "HT3R75Hu8",
                    UsageLimit = 4006,
                    MinAmount = 9049,
                    StorageId = "3217704a-834a-40ed-b339-59e89499a0b1",
                    NumRecipientsCap = 1368,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon49()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 1806.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"722bb680-11f4-463e-b595-607fe4a5e4d3", "badc4f8d-ae73-4c89-9b1b-e8f3225b11ba", "6b9651e9-a541-4a6a-98cb-0ed7f190738d", "81c15685-a58a-4ff9-ba31-bd82eb65fc16", "3e53629b-23c3-482b-b60a-e9ef675ff836"},
                    DisplayStartsAt = "2025-05-19T00:04:15.000000Z",
                    DisplayEndsAt = "2022-02-23T22:44:51.000000Z",
                    IsDisabled = true,
                    IsHidden = true,
                    IsPublic = false,
                    Code = "DQNsufaS",
                    UsageLimit = 2429,
                    MinAmount = 2056,
                    StorageId = "b082592d-7299-4778-b219-2856bba992d6",
                    NumRecipientsCap = 8987,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon50()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 8385.0,
                    IsShopSpecified = false,
                    AvailableShopIds = new string[]{"17cd90d1-f3ff-4da3-b1e5-afbbd727b3ae", "ff980451-1c5f-4e55-8882-6501933c7602", "d5d48e8a-3fce-4ed1-acc3-ba06ad2aa7e9", "376763fe-5b03-4ede-b407-a40d7655cf35", "13476c79-321d-4ba0-b95d-1451b21ac3d4"},
                    DiscountUpperLimit = 2240,
                    DisplayStartsAt = "2023-10-16T06:43:20.000000Z",
                    DisplayEndsAt = "2020-08-17T08:21:00.000000Z",
                    IsDisabled = true,
                    IsHidden = false,
                    IsPublic = false,
                    Code = "WmjZW",
                    UsageLimit = 976,
                    MinAmount = 1260,
                    StorageId = "fa644d19-5da2-4757-9b73-3274489723ea",
                    NumRecipientsCap = 4716,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon51()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "29daf902-7069-407c-9a02-ff8232b982f9",
                    "kOey7zjJ6OyJP83x3uL",
                    "2021-07-15T21:58:58.000000Z",
                    "2022-07-27T15:59:16.000000Z",
                    "4ef3b5cf-a7d0-496a-ad04-d3489d53e6b6"
                ) {
                    DiscountPercentage = 3703.0,
                    IsShopSpecified = true,
                    AvailableShopIds = new string[]{"d4ad3797-dd7d-4236-9c6c-1e867c47ecec", "c11540a7-9335-4684-ba66-db6ae1c145fa", "df20e943-0b48-4a61-bf70-9784c9ceff52", "3eafc484-fd30-4f34-8041-cf5c1e48b5c4"},
                    Description = "EFmUehgiDu605XKZkJCbVsNuqqVdUDyaVdHFVHz0uIFKJoDWeoZQYdDyUkA8HMjkxTYcusA1RKieQ1ldipC3qoQ",
                    DiscountUpperLimit = 6488,
                    DisplayStartsAt = "2023-10-27T16:23:19.000000Z",
                    DisplayEndsAt = "2022-01-05T15:57:00.000000Z",
                    IsDisabled = false,
                    IsHidden = false,
                    IsPublic = true,
                    Code = "sqZ3Z",
                    UsageLimit = 9274,
                    MinAmount = 9775,
                    StorageId = "bbfdaf46-733e-41b3-a723-db1edc87a1b8",
                    NumRecipientsCap = 265,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
