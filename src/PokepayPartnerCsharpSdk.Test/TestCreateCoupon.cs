// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCoupon0()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 3348,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon1()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 8149,
                    Description = "JsFIpHruI0PDDJz8o9xrnjhSm6IXW8k8lhVW57sFAQToxBdPPhlnNC7qquDcX7DWMKAIk496Um1b5drR7U5t2VSntAoomXq97a0i6K8kMLixLknmNm5BOlp55r1NJqKKmMSMDNHXM49YiCxqrzszvn6bj7stH2cYp8Oduz9ydozdALWCzunNWLqkZNWq5sezt42ld40YejmxaSQIdAY6mzS5zlf",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon2()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 3711,
                    DiscountUpperLimit = 8867,
                    Description = "hW5O06mJVzNqGuR07MzaV2gLnYHRqeVnYKwSRaEjdVuASyzZcw6cVG9CKg7",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon3()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 6245,
                    DisplayStartsAt = "2018-03-19T09:16:08.000000+09:00",
                    DiscountUpperLimit = 1523,
                    Description = "T6pK6ZXBjTeHFbBKY6KXS8kr2nlrnzouGWLq7cztqVhXFgGyXUEsH2qqZvshhzuYxEGVd32mNAUk3Ucex1MVJvmI7mCPSy50wNRRYeFQeswzltU0sfsoB1emUvSd2OFryqxbAraxFNZAbmeInh4oQOayuQJED9AwhmPBC",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon4()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 2443,
                    DisplayEndsAt = "2016-10-20T01:25:14.000000+09:00",
                    DisplayStartsAt = "2016-04-14T09:37:39.000000+09:00",
                    DiscountUpperLimit = 5945,
                    Description = "vDHPTr61le7AlU9fLKxpvYU6BIygzRE97ExmQwf4CZa3rzC3uftigMt7QxcVwURcpZ2ihU7pMs9NRa5jWC6rb7pByQgkSNC1zcXyyLkDgk1xV6bbP2jacxd1JBRts4DI35vkWeHBvtSegzGKhXZWXIfM8fC4DPTvM9cYaNSye8Nl",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon5()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 7431,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-12-12T17:41:05.000000+09:00",
                    DisplayStartsAt = "2020-08-17T12:11:52.000000+09:00",
                    DiscountUpperLimit = 3871,
                    Description = "CwYgsyfpway76nMlJOaCDmI4KLZrjBzdc2KAHT2B8eM00ODx3MQEHnhXdEzt2V8TLvm1jCLGw1aYHnLofh2aoZikHi6M1MRBxI21Qztmny8BwH2PDtMT1N2YFeCk0tI5ForXsAhApFwC78O9AjJku4eRSD7TIeMldRKuwfG8YG1l98V0fxBhaB8yEcbu3QYsAALAFvZnHeJ2qUNHuetPwFaxfnvK",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon6()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 2953,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-06-21T17:10:31.000000+09:00",
                    DisplayStartsAt = "2021-05-07T18:11:38.000000+09:00",
                    DiscountUpperLimit = 2554,
                    Description = "mpxw5yU6bePTCMQWkHJN9hNO3M6oGtiUY4AaKX3eLQOK6kISFr6Om88U5taryFLcDg",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon7()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 7564,
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-03-22T23:59:44.000000+09:00",
                    DisplayStartsAt = "2019-02-14T15:39:04.000000+09:00",
                    DiscountUpperLimit = 9737,
                    Description = "EEYIhp18m7PHf6pZGPXIREKXPvcDjgS1RZ5Y7Oo1Jx3NzH1iEz0v25FotCIn5RrzGLtmrEnEi5vxRSCCFtLKEvRfKP3ePRPpAoMWyj2L0bf5bOkYk0R1XSZ6BidzgvMEnG5jZEDVSgQoHhLUfAFS8FP2AB6lUeVP6Csjx2etklo",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon8()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 5758,
                    Code = "c2",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2016-12-07T09:15:48.000000+09:00",
                    DisplayStartsAt = "2018-06-20T03:00:46.000000+09:00",
                    DiscountUpperLimit = 2610,
                    Description = "ADsIlVfN8fKF7tKDhIEuok91lySQUZlgUtVmmmRld3vxuOqkzITACPvdg4guSZmziPeDPJ4nJjNbsec0aT447BxF2QuzHXlOD5jkIUNXstwxjsPIcg6Nh2SQK7ZPpz4oMSew4ZZXMA1V0DNNCka4ER6n6kLIE6HEUdaJxnEtJf0xz7LQwNKmETthvZSToxVO1KuvRNnfDbko9UAaEx8tQ9MaTkNKCcG83flr",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon9()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 642,
                    UsageLimit = 8989,
                    Code = "uvJDa",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2017-10-23T12:47:44.000000+09:00",
                    DisplayStartsAt = "2021-12-19T07:16:52.000000+09:00",
                    DiscountUpperLimit = 1761,
                    Description = "wiEcz7F7sxZys0thr8AOU8TA4myC6Oja44l6CFZMDPCJkFOkkXPFfOCytq2kgkQwN3AGNyb43WonuG4KGZnLfzAvhfvvowNzYfSLcZ45sgJZm9CoGQko2XcKcJBLxTbVkHb9FJuoN1u0y7OVoRj2gBjAPmrH26QJWLliRdbvaPqhnoPfgUm",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon10()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 6228,
                    MinAmount = 9971,
                    UsageLimit = 8084,
                    Code = "cNiYFq0KFw",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2019-05-24T12:03:39.000000+09:00",
                    DisplayStartsAt = "2019-05-14T03:44:17.000000+09:00",
                    DiscountUpperLimit = 7584,
                    Description = "U1mCl0g4y1HM25GxueuNyg21oN6MnfFsGQz030i7olBaEcM618Zs8LEzJid0tCm0QKIB75qmDNnsacueGkHFEGymqcQBr5NHE0Krj5jA4vdcmNNRdmnBlhHcDWuJzgkfxAKpJKQlepFBQ0k9UbdzGdqZiHUpz7qfNkgtU8OKhSHYN2nNf7EPxgpJLYmOfxnFu10un8UeyFVZvJrmLZZVi",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon11()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 3637,
                    IsShopSpecified = false,
                    MinAmount = 9899,
                    UsageLimit = 7568,
                    Code = "xzzRRZ",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2017-10-11T20:07:22.000000+09:00",
                    DisplayStartsAt = "2017-04-25T11:25:44.000000+09:00",
                    DiscountUpperLimit = 1396,
                    Description = "g0JsrNURfe2kGBbnwoJnCULs3bDrH2QVFD6oQEvvJI6N23c04dmRdRQ1OPvHNY9PA0z9i7qSgUcLoqfZETXLdWG8TpzeaaZrVM2INEXSAU2iWo8DVtCr1qu7",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon12()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 4911,
                    AvailableShopIds = new string[]{"af2058d2-9a38-44f8-bf1a-b5c9c48fd418", "9296f81e-1714-48a1-89dd-fd312dba3fb9", "4c4c502f-b804-4f66-acab-4b3a916b4bb5", "c30341e2-9ded-4cf3-93ab-0f9cb6dc4cb7"},
                    IsShopSpecified = true,
                    MinAmount = 7652,
                    UsageLimit = 3054,
                    Code = "EuqzZVZ",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2016-02-10T20:01:02.000000+09:00",
                    DisplayStartsAt = "2016-02-02T11:44:46.000000+09:00",
                    DiscountUpperLimit = 3745,
                    Description = "pF6yrU9",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon13()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 9068,
                    StorageId = "1d63a750-a66c-4cee-934c-9bac04448057",
                    AvailableShopIds = new string[]{"fbf291c8-4c42-4664-bd4a-5a86e5e52790", "9cb3e5ef-6031-41b2-a908-782141e30cc2", "311539e9-19c2-450e-a8b5-c0957adf5393", "eea98948-ac31-4583-ba0b-badcaa9c3c8c", "20815749-da90-4d7b-8de0-fefdba018bde", "f25a7959-ab6e-4400-a155-1f3e9b83bd79", "418180cf-fb3d-4577-af24-ab6e23c8d536", "1cd77014-4a52-4dc3-89ae-fc6ba3bcffef"},
                    IsShopSpecified = true,
                    MinAmount = 4041,
                    UsageLimit = 2042,
                    Code = "ag",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-08-24T15:09:07.000000+09:00",
                    DisplayStartsAt = "2023-10-18T07:01:34.000000+09:00",
                    DiscountUpperLimit = 5941,
                    Description = "TqMig9RrsMO1cR0JephbU2VXUSxTkTWCNJ7jvWuHCR91B8Mt6uTNd6L3rQ5RHUDgqmp4j7OFOS2KusaktMaRfINhbYK001ofAfQFCIkl4OGjF9UVZalNtQWeYYKqiItathdLFx6Jb182MHmAztoreGMWZPCZaiC6BAiTet5qXDU0CQX2Mp4Y4jOj80TwM7UREmYYlQ9X5HcRhtEeJrcAYmXniSNqNJMAnntxCEcveiPJ63zwDnO3OxJqWA",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon14()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 501,
                    DiscountPercentage = 7925.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon15()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 6626,
                    DiscountPercentage = 476.0,
                    Description = "929Jq9NZDKTciVGVZn9UyKDYFFkk0TttvEXV1NidR7GmyPU2OdrNcIGZUgbzDqgFNjgSbjHwPucmeA97QOEcvvRhSE5scLGZThV2AW8bPWrNnwMI8jje4qZSvBzaiAm7d7ZGR4JoQT37xs0mOQ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon16()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 4914,
                    DiscountPercentage = 3885.0,
                    DiscountUpperLimit = 3108,
                    Description = "Llx6zljTaKBnu1rclPmFzyQZNd6apfCEwvSLfNXWJsfUPKPLOtGZqtffpzi4C7pOzDZZ85wNvyaKboD4asodFo7b7uzFLVJmIpRdikh3jEIqFJSvz5SFjpUqIPOLqttgh3jZeLH9kIyGWqA",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon17()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 7853,
                    DiscountPercentage = 9958.0,
                    DisplayStartsAt = "2018-08-29T18:17:36.000000+09:00",
                    DiscountUpperLimit = 6772,
                    Description = "6nErudqpX6z0Lk21ZqSAfNzoyvOImSbcPTX6zPTKempwT66sslacr8rL7jTydQk1f5gLwlNoliBBW1ourAHntSleL6LlvD60jCBen6obYgOJTlIrOAHDSJsFo7kqM0nGzAzf8ExcErZiY5955b3tfefcks0a7Db7RWTSi0YNfkgWbj",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon18()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 461,
                    DiscountPercentage = 7458.0,
                    DisplayEndsAt = "2017-01-24T01:17:24.000000+09:00",
                    DisplayStartsAt = "2023-10-02T01:42:17.000000+09:00",
                    DiscountUpperLimit = 6467,
                    Description = "gEZjKmAkTilnYKX5Xotq10eWFYwDpauwhXVBzLvnRTaOL0oEVoQUWexQUWvk04q09YwztpEOEcsXVaQJnXAdq4Q6xuA30Fh1fIXmMrcTLYbc0RmcyUku0LKVZSRoq56HX2IyCH3Irj86w",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon19()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 141,
                    DiscountPercentage = 2037.0,
                    IsDisabled = true,
                    DisplayEndsAt = "2019-01-16T08:28:32.000000+09:00",
                    DisplayStartsAt = "2022-01-16T23:46:56.000000+09:00",
                    DiscountUpperLimit = 1462,
                    Description = "eCgs6UAYzzDfgbnjwiAg12BmCEgpyCmHCQNwf16cBdfmVZ8HBRBKvug3fAq2PR4Cm47JrM8XgQgKxtKTMTlAG0u9LfiMzmIQ7m5buEMJPzhVmYQaxM9rTkOGPGSEF",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon20()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 8448,
                    DiscountPercentage = 3328.0,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2015-12-06T06:46:32.000000+09:00",
                    DisplayStartsAt = "2024-04-07T02:22:46.000000+09:00",
                    DiscountUpperLimit = 7362,
                    Description = "Che0texBPgN7NezQkDjD80Ww3gMG",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon21()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 5301,
                    DiscountPercentage = 1395.0,
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2016-04-30T17:02:45.000000+09:00",
                    DisplayStartsAt = "2025-02-17T15:10:48.000000+09:00",
                    DiscountUpperLimit = 133,
                    Description = "NNhp6ZsMuSLA4fwVVUos8Qs6lLzt0rWmdaZvAuiMleR1qQjJ1qTQ5WaLNzuvuKtRfNxRyxJoB6E4VzEnBlupsq6rQfma0vj51J7OYlu1FkS3CfeGxAy5lTGZpKB8GNyOys",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon22()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 7080,
                    DiscountPercentage = 3563.0,
                    Code = "mSVT",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-07-04T03:47:11.000000+09:00",
                    DisplayStartsAt = "2017-12-20T10:09:18.000000+09:00",
                    DiscountUpperLimit = 6141,
                    Description = "XhEKInLQPxpUvV6THzZ70GaEGZGp9hKoUiDbU5rO3LhvFQ8uHHNKJ9ZbGe8vS2xQNAVaBeiK3HMpU",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon23()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 6547,
                    DiscountPercentage = 4614.0,
                    UsageLimit = 7328,
                    Code = "pMNgrU",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2017-04-29T23:47:32.000000+09:00",
                    DisplayStartsAt = "2025-08-08T05:26:02.000000+09:00",
                    DiscountUpperLimit = 9059,
                    Description = "UGD3KwjahrIizd1wc7ImuJkEqdNCkAbLfEBAYPNBCfHFWcLlj3hF5VyRYwsXg651NHxFP3RC1TIry39NSzSK8U7n1il76EMwDtegK5XaIq5nikL",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon24()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 8528,
                    DiscountPercentage = 7284.0,
                    MinAmount = 7658,
                    UsageLimit = 7800,
                    Code = "o8rfJRxHkF",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2025-07-29T21:54:17.000000+09:00",
                    DisplayStartsAt = "2019-05-13T14:28:47.000000+09:00",
                    DiscountUpperLimit = 8000,
                    Description = "cRmVGZTRi0oCgmQTMbnJhsm83sL9zW2gZr7tDX4ti8EbGpb4G6VSFwNzfJlVSrXiSR7YsP9zZcVTWySGMGY2CM7HAifX8rIe",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon25()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 9018,
                    DiscountPercentage = 3711.0,
                    IsShopSpecified = true,
                    MinAmount = 7825,
                    UsageLimit = 3422,
                    Code = "u3VeLr",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-03-22T12:28:38.000000+09:00",
                    DisplayStartsAt = "2020-11-09T09:37:27.000000+09:00",
                    DiscountUpperLimit = 1380,
                    Description = "xVsagVuepAnhnQCEdOH6Q4Rfgo9LQKdHCp2CxccaoF3EebCIA3hNdpLW2iQYUjFvH2EvpVhyEHWWbdwaTWnCxW8ocC4iFtVSs5TYnCjY4ZtM4JjVZCeAgXQ8V5ELy4npQ3Nhjoko4roZ1wK0e8syGi1LbnQJXoHQ68Xe2lDNVXq2EZIx6hL3B8MxSjhO2mZ7sot0Rm2B5HNLoqpseVPnSLag98cZS8mzBkf2yiaUDddlcCbVfVMl3YIuJxLcZWo",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon26()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 8304,
                    DiscountPercentage = 1227.0,
                    AvailableShopIds = new string[]{"69d688ec-914c-4f88-91c9-54b88e591503", "2d157632-adad-4734-9db4-bff5b6647f2d", "9ef18327-7c89-42d3-8227-b2c12e878fdd", "e90e0671-ac3d-4ffa-89c7-1e250360fcf7", "004569d8-7d58-4684-82ba-06af3e73f7c6", "182f8518-4db9-4ba1-adfa-0cf668b3c33d", "df249d76-4145-45d6-92d3-c6e18fdcdced", "002171ff-d199-4e65-af84-98d546b0edff", "885aff5d-1408-468c-bc6c-85d2d3e1a3c1"},
                    IsShopSpecified = false,
                    MinAmount = 2572,
                    UsageLimit = 531,
                    Code = "azWjSDgnu9",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2016-08-03T05:56:08.000000+09:00",
                    DisplayStartsAt = "2018-05-04T02:54:53.000000+09:00",
                    DiscountUpperLimit = 5601,
                    Description = "pN8D2jBrsQzuzKUgzxyl67ZFCPoyRrK18ctDiv2sdR2vQ6ZIysY0dMzCgK3NAun4aLYG0AnViRgDwSrIxT1ExwcEhdrgWHdRcRVoxbo2OOLig8QFb7x80IJwBoeMZ3s1RKt8dZAJ6mXF9lwf1q1yDNJDI0jNE14Zjrg3KSBgLmfN8XWaRQLJ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon27()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountAmount = 923,
                    DiscountPercentage = 2495.0,
                    StorageId = "e9f77a1b-104f-4c15-bac3-453122702be2",
                    AvailableShopIds = new string[]{},
                    IsShopSpecified = true,
                    MinAmount = 7493,
                    UsageLimit = 7408,
                    Code = "MGXks",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2025-01-03T19:17:24.000000+09:00",
                    DisplayStartsAt = "2016-08-14T20:53:58.000000+09:00",
                    DiscountUpperLimit = 4034,
                    Description = "EfOJAH1hOSBPtbL7ieBan9jrnYtcuBDuYmuDQr9lvatSwWcJN6QAbB7s2ZQzqvuuXnmiLRPwLg",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon28()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountPercentage = 9065.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon29()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountPercentage = 9390.0,
                    Description = "o8zWWEC1S9WFk0Sxj2",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon30()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountPercentage = 5335.0,
                    DiscountUpperLimit = 141,
                    Description = "JeFDeaXXoPb1HrsvXNFiIYT9ImBYZdJ1ZNg8ameVZh0NXpnA2nx1Pa7gBiRBRpgLIJf1QMuhWI6AANEpU3Yr0QHmtW0pPoRHJqpzPYb3vMR4EiZYZZ68HiTKXv45axVbjnxHx4LS1fq25JFKGPZsGeKHBJ6HU9FY1AxcTvei2TSm",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon31()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountPercentage = 6100.0,
                    DisplayStartsAt = "2025-06-29T12:41:28.000000+09:00",
                    DiscountUpperLimit = 4081,
                    Description = "IAz7loJbbeev63SUaWpPKWdXFUSsEKNtj3QaJG3NyCQzs0aGrLsjw7898UByRBpyRXMkAkfFoVa185JYgNRatFwU8hc5Bo4f2odco67T2XW5EZlvNtJBLZZZjGUCQ2KQQPQaWbIN1CybTokex9ROzK87wd7uGVIj8ZMWgfyQDk7j90HZtx3KzAXhNqzM5plvUR8YSBVaQtkICtOasfju7Q4arGKYgOBau6OPYoU",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon32()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountPercentage = 306.0,
                    DisplayEndsAt = "2024-04-17T09:56:22.000000+09:00",
                    DisplayStartsAt = "2016-04-05T08:20:09.000000+09:00",
                    DiscountUpperLimit = 8120,
                    Description = "X3zZyKbaxqGNp0jWlbMvndILwlbPW7sYrBKMgsPaET7iRNwsJY5kKq8kB14rWGYHEVBiOQohmHbgmOkpE6uihT9vPGO7QyDm13rzSVLW0rcSmeDGza0hY2Z4xMx0ATpz1VVR2zNeNHsXfpf9FEe0fchY9a1LgLXF99Xc",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon33()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountPercentage = 8699.0,
                    IsDisabled = true,
                    DisplayEndsAt = "2025-04-02T08:04:48.000000+09:00",
                    DisplayStartsAt = "2017-06-24T09:59:49.000000+09:00",
                    DiscountUpperLimit = 2295,
                    Description = "c9NEYovRWKnEeNkerH3MkvEoEMKCIquDnTPouOrBpAIH9U",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon34()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountPercentage = 8868.0,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2019-02-28T15:05:16.000000+09:00",
                    DisplayStartsAt = "2019-06-07T08:15:04.000000+09:00",
                    DiscountUpperLimit = 5309,
                    Description = "1pG5ei2Rcmdxd05GLxGybbNtvC",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon35()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountPercentage = 2883.0,
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2019-06-11T10:17:26.000000+09:00",
                    DisplayStartsAt = "2019-01-18T21:53:20.000000+09:00",
                    DiscountUpperLimit = 1022,
                    Description = "2iYWQ4jVpgDMsB0i7j5BjqhXCj7iJUurYj7LFSRBi69Eo25w",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon36()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountPercentage = 1384.0,
                    Code = "NSXnhDgTn",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-09-10T21:36:43.000000+09:00",
                    DisplayStartsAt = "2020-12-27T09:23:54.000000+09:00",
                    DiscountUpperLimit = 2546,
                    Description = "ERBDcma2h4RonD1zdyoaNEf6x2LoD5hQjH9hDceRhs7lAAUgzgjySCTeFe7GeDtQw0QCdYsL6zm6RzttBGPfANUvTxcZNieoDSLJuBPIjaxaKwBeie4zHMywkTOsih7eAYM0XWdiDdvpgXUF",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon37()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountPercentage = 5584.0,
                    UsageLimit = 2122,
                    Code = "GLQ80P0z",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2017-04-14T20:36:40.000000+09:00",
                    DisplayStartsAt = "2025-05-16T10:20:39.000000+09:00",
                    DiscountUpperLimit = 4017,
                    Description = "GqNLOS4A29eaoKH5Zw8jlSMFA",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon38()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountPercentage = 2252.0,
                    MinAmount = 5194,
                    UsageLimit = 5757,
                    Code = "Z4KYK",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-05-15T00:04:25.000000+09:00",
                    DisplayStartsAt = "2020-04-07T04:05:55.000000+09:00",
                    DiscountUpperLimit = 1996,
                    Description = "B8S4KwNiDdoY4ShPviEXOyzvBGYYomOrVTZ4GEkJBWgW6Rq62pI5BmJKvxndcMijhibVmALFW6JHUAWsnfK5hFctWWixeTkwBECkELV3NSL5XB1At5InXNDePjl6IWuM08aHFKCEkoQVNUxSyboXsdzclKiQo743L",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon39()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountPercentage = 3900.0,
                    IsShopSpecified = false,
                    MinAmount = 1300,
                    UsageLimit = 6377,
                    Code = "RJuu73XE",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-01-12T21:07:19.000000+09:00",
                    DisplayStartsAt = "2024-04-27T02:23:24.000000+09:00",
                    DiscountUpperLimit = 9998,
                    Description = "3t9bIypvXFI4ycSMDtoB6BtzWkrMF4UGJPIKA1j9WctmJ0RPEEm7CezX",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon40()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountPercentage = 1693.0,
                    AvailableShopIds = new string[]{"258a2c80-39b8-41ae-aaf1-603f02edbeb3", "d70b7f98-147b-4649-9f97-3cd526e8c590", "e82a9406-b9dd-4b90-b969-4dd7e65ddb56"},
                    IsShopSpecified = false,
                    MinAmount = 4153,
                    UsageLimit = 9340,
                    Code = "59",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-05-23T03:51:29.000000+09:00",
                    DisplayStartsAt = "2019-05-28T12:09:27.000000+09:00",
                    DiscountUpperLimit = 8407,
                    Description = "V2ExHMqRwrtTNBLqZ6i27bV3ngdzuheez0rnHokyiO9oLa3nNC7YIMiJkgbLbOhRSv4p1AePnE31xmaKnYQzeiffhgOTB9leBGg4HRm0ediF9kKMZ91jbuDGt2JsxaAFtGP9rwhn2nFgu5zNBbpQqv0uDUSWgPqo4KjLLGXt9EUX6KVywpLNBRLuyY",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon41()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "073b77fb-5fa6-40aa-8bf4-069a55a517be",
                    "eueES9aDlZrpJUHzlffZyzvhCISbgR5F7bH15FSj5PhFUUyos",
                    "2025-01-18T05:13:08.000000+09:00",
                    "2022-06-30T12:50:32.000000+09:00",
                    "8e018bf8-3972-425f-9d0e-9bd0f18a61f5"
                ) {
                    DiscountPercentage = 4770.0,
                    StorageId = "99f6f39e-14a2-4ac7-873e-34314a380d01",
                    AvailableShopIds = new string[]{"39bffbe9-5f38-4cf7-8485-b9f625799ac9", "72ea3433-0d54-4ac3-a2e1-7e991e23def3", "cdd0cb76-aaad-4e47-a7c2-50de414e7c55", "85ce7126-fca5-433c-88ee-d2f5f7c3c144", "abdbcd4f-222b-4ab1-ba65-384f5d482127", "769ba4c9-19e8-4a7a-8cd9-cd4f26f51d82", "21295a98-e754-49cc-ab6c-6adffa5db732", "56903824-be2b-421a-9c1c-690a964735d1", "fb04f448-e3eb-42df-b543-83f5118d2b2b"},
                    IsShopSpecified = true,
                    MinAmount = 5861,
                    UsageLimit = 4484,
                    Code = "ns",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2016-06-23T21:50:35.000000+09:00",
                    DisplayStartsAt = "2018-03-05T09:15:27.000000+09:00",
                    DiscountUpperLimit = 5608,
                    Description = "CAoEYR8itblviRgKurHzNatzb1MutMh73EO6HaONgAFPM8NqzJUIJO47rSqz1Dkk74XCLeBEAl4IwbgFdV8Yrc5tfxIfVe",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
