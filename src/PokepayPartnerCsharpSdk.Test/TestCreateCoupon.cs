// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCoupon
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCoupon0()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 185,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon1()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 3841,
                    Description = "nZBUv4F8J7UzyDYEv7bctcmIqdmvTV8RBzp0gixsKZWoUeORL98QDv9TW3tonru5DxxR1kiR4daTST401zYU9O5bmxo5R8HDe",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon2()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 1825,
                    DiscountUpperLimit = 5449,
                    Description = "g38UDixRQOsOxJyiut30oRsSLi4FAWjvNFlMGhO7MjoFiHLtN9Yqy7R5Sel4rqjqD6mB2gz0FIdNSbIrXOBo1I3rdkLB5vuUQlHHWHdfJKJGJOe4o3A",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon3()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 6839,
                    DisplayStartsAt = "2020-06-06T05:44:57.000000+09:00",
                    DiscountUpperLimit = 2547,
                    Description = "7GZKKewMQbpvWdRIf0j2NcGpd9kTg7fbzWuGj28bjzoMkUfQZyG6ql9kvIc3ugQfVcwKEOAlMUYblAnOJUw5uYgLUj2LWIHcZ5Kh7Upt9fM2ThdFR4ZGm",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon4()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 7219,
                    DisplayEndsAt = "2021-07-08T22:50:12.000000+09:00",
                    DisplayStartsAt = "2024-08-11T22:21:21.000000+09:00",
                    DiscountUpperLimit = 5203,
                    Description = "dkRdIHlBo7iMGslQeLzTg9FCP6boJkANEWZ0xko5rtXdkjCZ6KXkiMx1kHTVbpRx79qoFTViWGk7rsKgu2ihoMxDsfU3TC1A8fV5nkzyaMo6HNFjN16Mt1NNT0LSnWyLCIiaSmxOiabyCFBUZkKwMvzRhZdC9PIbxRIokrSMcAe6DLpfhwjho9qAj035em2B0e1zQxL4LWrEkUrKUADYaUMS4V1xY",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon5()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 2563,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-12-06T00:04:18.000000+09:00",
                    DisplayStartsAt = "2018-02-12T04:05:18.000000+09:00",
                    DiscountUpperLimit = 3666,
                    Description = "liuqOBINm4Q77ByqizVQoe2X9mQJiEELVlycfdA0sn1Jp9ctBvXrxjspmUg2Jofbfd8lI7ca3oyQQIsUl3rCM2ZMpE4WDor4IADTHdTPsjhUsWbuhnbIUFlfvobOclFXKfvdQivs3hjtD1VYnThEQOLtlkRPIAeI3C1kLwoSJ0t0xwzgZ3SAsjpAuPQwO",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon6()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 1997,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2023-08-15T14:00:59.000000+09:00",
                    DisplayStartsAt = "2016-01-24T08:27:03.000000+09:00",
                    DiscountUpperLimit = 8886,
                    Description = "fl9ZUstqj7jJ1Xazd0M0QE8si7WktomTSIs3sss0bSZ1cR5rMDg0iBD2et6R89vRehYIZbMh6MfShA8D4Ev7O7TGT70LQ2epxhXvfJrqwC",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon7()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 9642,
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-02-09T04:32:37.000000+09:00",
                    DisplayStartsAt = "2024-06-26T08:50:23.000000+09:00",
                    DiscountUpperLimit = 3893,
                    Description = "XB9341AdQSvr2jD2CPBEg6qDXhSH8hafJy0sDTnMPtA7T3E2nC8JZcqIcqZB2nkhw5Vunnh29qWQZz14xB891rPV7FcdDeB61vcOZ1uNBAdr6lfzbfqKl",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon8()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 1646,
                    Code = "G40w",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2020-09-20T06:24:56.000000+09:00",
                    DisplayStartsAt = "2020-01-03T06:58:16.000000+09:00",
                    DiscountUpperLimit = 8964,
                    Description = "0mTv9imeNiY62Bc0n5yxxXvKDa0c2v5NvERR1ovUoSMxuwois43hKOtAoX",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon9()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 2696,
                    UsageLimit = 2471,
                    Code = "opuae7lO",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2018-11-01T11:36:48.000000+09:00",
                    DisplayStartsAt = "2024-02-12T01:17:57.000000+09:00",
                    DiscountUpperLimit = 2684,
                    Description = "6hTnrFSjbB1hiRjTNSU46DKPvyktKcWCyKm4tG2FzeWXxPN6RiMVhZmmGj0TMjPFLM0DLdwVX1nfPZtzGunVJbtCnsdFVcjFxpkr7nBijaa4uqZKlbpHQT4mZQDB6u1kMJt8otXLMwiqJK6MisPTXvJ9APWVf0nkI2cpiZrwht02dhTsSxNXBuhLAxPxLgPF7PH9jsPo3qRbXC06hH5q5N6rSqlhclxbbI1pwN",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon10()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 6687,
                    MinAmount = 4735,
                    UsageLimit = 3918,
                    Code = "1wbtHq7h4",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2024-12-22T00:05:10.000000+09:00",
                    DisplayStartsAt = "2022-05-13T06:27:38.000000+09:00",
                    DiscountUpperLimit = 8709,
                    Description = "LtirGJS2N5S6EEO5Bp0TaBrmndiCNxXXwjFaRAeTxfe0YQCHzm8OG8zcqkOxIGcWZjjM6j3edDcpZu9iiEwcokneeQ36NR2IjhyB4vKQ7cGlo7S",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon11()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 8515,
                    IsShopSpecified = true,
                    MinAmount = 1769,
                    UsageLimit = 1252,
                    Code = "wn9qvauQ",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-04-03T19:03:44.000000+09:00",
                    DisplayStartsAt = "2023-07-23T16:00:51.000000+09:00",
                    DiscountUpperLimit = 3048,
                    Description = "j5HLJcSNTCm30yK3y8WItCe9VYgMydEalG76qE4T1vOrKA4IwgS5AgijWRyxneekV8cIDT0hnm8h8evW68NKpdkq0PMSo6iR11TAHpgNTXOxFwqhkpZVaDhpFPp5bfKVt9DPYJAVzV6vyI",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon12()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 1674,
                    AvailableShopIds = new string[]{"49ecb082-7e10-40b6-9ea4-a8937fdb7c11", "4d74d5f9-fa77-4fe6-bd1d-7070ff0e550f", "b0e357a9-4979-4f4b-a927-1a239aec36ec", "32ea14bd-23ea-4328-b5bd-83609e6252fa", "5e6aa53e-dc67-47b8-b0e0-ab6edb7f06b5"},
                    IsShopSpecified = false,
                    MinAmount = 9476,
                    UsageLimit = 6123,
                    Code = "0DYbPLX",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2019-12-06T05:58:43.000000+09:00",
                    DisplayStartsAt = "2023-07-31T11:39:55.000000+09:00",
                    DiscountUpperLimit = 8037,
                    Description = "0A9IDYP4sAiFNwaac9r9GBqh0SVIl9M1spjv4mKXU1rVLf6U0K44BovHKqYzk7GBG1DZK",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon13()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 3762,
                    StorageId = "76bf0274-d087-4ec2-92ac-a4c6c89835e5",
                    AvailableShopIds = new string[]{},
                    IsShopSpecified = true,
                    MinAmount = 9381,
                    UsageLimit = 8214,
                    Code = "r",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2024-02-11T03:34:44.000000+09:00",
                    DisplayStartsAt = "2022-01-17T18:14:55.000000+09:00",
                    DiscountUpperLimit = 1202,
                    Description = "gGga7pF0nmLMfnIYTQdqHJZ8WnDHEVfpIBtEOMP2U7IkYygmkkDxd3MzpkzvPsPo2vcZvKaf470Dw5YI6SeAOBDBgRAgmjxZGGCqaBwJ9iXjXSEfbkdsvlfnd1NOUEc",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon14()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 8157,
                    DiscountPercentage = 6669.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon15()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 7253,
                    DiscountPercentage = 2240.0,
                    Description = "GTeYua5DveJsn8lhIUcgIkY0oNU4ZtZZObHmdr0N6vylnlZRhGDMxuj8A7eDOAWeoDpeF6vcSyg1N9plx7jjHK1E1PUQiuVzdT2YVVNgkhGiOaJk8HWWbXOMsyMVL1Y0FzVGq",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon16()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 3787,
                    DiscountPercentage = 9670.0,
                    DiscountUpperLimit = 5487,
                    Description = "3xJNKmuaDr4cMSAgHDAlLlP6Lo5yS1v7L6lCM4yrq4lI3mHyvfAo1Zkwkd2ADoyNq2PW9ePZH1V16DlcE5mr4I",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon17()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 6829,
                    DiscountPercentage = 7609.0,
                    DisplayStartsAt = "2024-03-02T01:06:25.000000+09:00",
                    DiscountUpperLimit = 6385,
                    Description = "CPq1klPYIi4fgZzpFf9vCRDU8J59OtcokEMMVhmKz2iBoGU1OxUmIl7jlWxrfEKMQ8FCs062PLb59yfzniw8Z7TrjWh0BQ",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon18()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 7325,
                    DiscountPercentage = 2020.0,
                    DisplayEndsAt = "2024-11-11T14:28:55.000000+09:00",
                    DisplayStartsAt = "2020-04-30T20:12:06.000000+09:00",
                    DiscountUpperLimit = 3170,
                    Description = "OC0AUfJnZnSogxeCWxbc4wl0P2Dqh3DSK2",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon19()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 1971,
                    DiscountPercentage = 6605.0,
                    IsDisabled = false,
                    DisplayEndsAt = "2018-08-02T13:41:28.000000+09:00",
                    DisplayStartsAt = "2023-08-11T23:01:27.000000+09:00",
                    DiscountUpperLimit = 9092,
                    Description = "6Cln0nexx5CEw583J2WEBiiOFuwneTfWH1pqqlIhFKkOnPRe3g3OqYMD6Y7flopJpL06wROQZ33dSb51CrQZVorM80jAnbL9pF2AijYf8ydTws4HIQ4AniWPzD9CM0oL6ak44VafBlkQEtaE8xbTpd0PiIwS54q66i2nXWkvfusE3magRZXBvYQN11diTIPMylP78XJI2fkoYuaeWPZ92K6Zt1zTkBm5QsUJIx79pUjuQL",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon20()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 6154,
                    DiscountPercentage = 4554.0,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-08-20T13:05:20.000000+09:00",
                    DisplayStartsAt = "2021-12-12T02:25:53.000000+09:00",
                    DiscountUpperLimit = 8087,
                    Description = "fIBEGWMOeqgVzvGmf46VZC1gROo7yDwwPoswLPrFl08abqydMndg7MmFsD2bCpZf9Kmzx2cSvcsgfp28NPWqo6XqlqrR9lgptmz4nyVSUDS2rGPI8RxpE3teE",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon21()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 9065,
                    DiscountPercentage = 6497.0,
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2018-07-11T03:11:42.000000+09:00",
                    DisplayStartsAt = "2023-04-03T18:32:54.000000+09:00",
                    DiscountUpperLimit = 8419,
                    Description = "L5boSBHerEtGhFgJdxHlskgg6LM7DHhWIQ2aljg7pW5tLDSL3EPYXvMXdIXxGA8eOtdDg4emZxxvv3UzyZmkPPeL3QSeHszKal8UJ7mvjTFU0wWAMu89mD0TpxWczQUyWaVgBaLWMWptjgf0FiZZDEEO2PZA9bioQMPG1E81jCARXbk7MR17C6RF6LyMxBAxNrASDj9VGr6rQWfEP7s2f7f5rT4gnJZ2Cz81XNoucyBbEpxF",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon22()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 5295,
                    DiscountPercentage = 7971.0,
                    Code = "PDggrznN",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2016-09-28T07:03:14.000000+09:00",
                    DisplayStartsAt = "2018-11-05T23:14:32.000000+09:00",
                    DiscountUpperLimit = 517,
                    Description = "9BBTTp6AGpMMO3btHYGiB4Qalu6chDV2Pcj2ctvmZzuG53qZWTYzGouuBX6LUUUBENz9R18rNQjTARxcKWcb1nyLLVIf7PJ4PKIYRAl1UCuQycWgFlQrGdRqVd3CIlE3dO8Hdi7PJayBT5IgAK5b9hyZhcZh8MuSlVRKgCSpIL13YYuGN17rfT9nOtCiuSxp7i1rcacR4EWmJRYE0vgLGn2OdxgxwF29eViuwKtjsRjzvb8XU",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon23()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 4353,
                    DiscountPercentage = 6638.0,
                    UsageLimit = 5093,
                    Code = "GNN0gcbjHE",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2021-05-31T17:39:43.000000+09:00",
                    DisplayStartsAt = "2022-05-13T20:16:35.000000+09:00",
                    DiscountUpperLimit = 5019,
                    Description = "VlHndMAdWY9HjNAOFWD0f28rlwLb9YSbpNpmMET9MPbipC8utokXPq016coqfiAUWXxFRzN5EfouqVIJLmWFeGJqYbyf9xqeV9Lg6T4ooRxK5KRr3h8egFMYUC",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon24()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 718,
                    DiscountPercentage = 1719.0,
                    MinAmount = 5652,
                    UsageLimit = 4154,
                    Code = "J0",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-06-20T23:49:32.000000+09:00",
                    DisplayStartsAt = "2020-02-19T16:42:41.000000+09:00",
                    DiscountUpperLimit = 1116,
                    Description = "WlqwtDL88aLfgCd3mseLQBXIUiYpTvNgfaK3PoowpKAx3kfA31wXd04SY1O8gGOF1kRrye61uzmBIXdnENFs3jBlwZrD72DB37CRt8PxiPIwClGZ1KOGgE2sj7Hu6WK5M7",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon25()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 2437,
                    DiscountPercentage = 5230.0,
                    IsShopSpecified = false,
                    MinAmount = 2466,
                    UsageLimit = 7536,
                    Code = "guc",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2016-04-30T21:17:48.000000+09:00",
                    DisplayStartsAt = "2022-08-23T17:02:50.000000+09:00",
                    DiscountUpperLimit = 7222,
                    Description = "0P8hn4WhIeMSn521mnmeh5QEBdCZJtrUa6Fgp7ym0hYqDUAWMYxWfGNC0wV3aBOX1Ig8hROFB3MljHGXrpVSkSdQBQzqXHWCk88yAdkNbUUlXp2sT5T809AbvtJaUy0K5oRI2Afv57nsS8pT7iwNl9CKN5yCsDMuuaWg6vjoZFJU5quwxFBXnJ5E",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon26()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 8544,
                    DiscountPercentage = 930.0,
                    AvailableShopIds = new string[]{"c9acc803-0a36-4197-87e3-fe4e6eec6b50"},
                    IsShopSpecified = true,
                    MinAmount = 8411,
                    UsageLimit = 15,
                    Code = "q",
                    IsPublic = true,
                    IsHidden = true,
                    IsDisabled = true,
                    DisplayEndsAt = "2018-02-08T11:44:36.000000+09:00",
                    DisplayStartsAt = "2017-03-20T06:18:32.000000+09:00",
                    DiscountUpperLimit = 1580,
                    Description = "m8acYbz4K3IA8JYUILwDYHWq9h3ayYxNgOJ9lz7HMs7r8Mwpfor2g0yfZY1uTlDfXz0uDeov2Ga",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon27()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountAmount = 8928,
                    DiscountPercentage = 7208.0,
                    StorageId = "8c865885-e43f-48a6-8c89-4a85f1476f8d",
                    AvailableShopIds = new string[]{"6503eb6a-c78b-485a-82a6-ad2898bd2b4d", "c0b9fa7e-4137-4217-87e6-c4825594f018", "4c109abe-2bf4-4245-aca4-14ec0dfba89f", "50f48069-3d4b-4a27-90fc-0f3afae494c0", "6113aad1-194c-4d3c-970c-3fbb3d50b785", "886e5bca-a4de-4941-af72-9bd0713be3f1", "88258c33-f59e-4e1a-b470-1faceb855a0f", "60ef3f9a-71e8-48a9-b105-c0e358d34f38", "adb2cbe7-694b-40a4-b7ba-c5615521aa64"},
                    IsShopSpecified = false,
                    MinAmount = 7918,
                    UsageLimit = 1758,
                    Code = "5eCqfZdk",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-02-07T15:21:57.000000+09:00",
                    DisplayStartsAt = "2022-06-01T22:12:46.000000+09:00",
                    DiscountUpperLimit = 1809,
                    Description = "OzbmWJa8YkV10V05hf8WtQGHpv3xPQzPNZMa3cTmTslTDHzq00PkzT3rjRscSaTDEUxwAJXNLOLDUjAEUO9KUSGzbSRmda66Hxc4wf0VsciZqVg9CY4JyxUqm9QYX9eOR0RPX1REGDLSjexe42N6h2JPSKXOz8JwoXWD3OcRqlTHYwOe",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon28()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountPercentage = 8064.0,
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon29()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountPercentage = 7703.0,
                    Description = "tfQFumGQVfUsw4hfYXr8Tws7k48pGfLa44NJMCeJ8jlsCf1ZGfe6gS6x1DqMOxCGU3f6AMPJnByO8IAY8ZIAKOHAMaB7ZxbhLpAG3vIRMVqbJVgHdPhv",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon30()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountPercentage = 1034.0,
                    DiscountUpperLimit = 7421,
                    Description = "KwzwzrbVYcpu84LTKQxDTzMnM7RDpI6DZQTPfIajSBmWzFbVfaL5LT2cPjctfArtA5QzauCKeqrCHLOb6",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon31()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountPercentage = 5761.0,
                    DisplayStartsAt = "2024-03-30T11:36:23.000000+09:00",
                    DiscountUpperLimit = 4097,
                    Description = "NzcpMx2l8O1vhN74ziDPGC2ST6zTd6xVdSlQkj4Z4gR5YjMfLJAECo2gNDDCrV3PxozvlpngWpA6xbZMfc0uwppINu3aeeMh7MwqqZDhOobPpK6TParuulg11gUrgWq51AuUounyHv57rDbvmuL7BqYd28Ylq4PTRllx603bU9utxlgE1L",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon32()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountPercentage = 8286.0,
                    DisplayEndsAt = "2016-09-20T23:57:42.000000+09:00",
                    DisplayStartsAt = "2016-01-01T14:09:44.000000+09:00",
                    DiscountUpperLimit = 6731,
                    Description = "aCgZVizYnvZve6TUWFWHy2b5Vs5gPuvHuA5HWIqhNUoMi9wNIaJyI2pADs2B4yB1GZTk4B1PKHR2EWhPZSvV8nScTvJ4VHpUajLmD9cCimPwC97LHWaSOnICBJimGKio",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon33()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountPercentage = 6384.0,
                    IsDisabled = true,
                    DisplayEndsAt = "2022-01-21T13:24:56.000000+09:00",
                    DisplayStartsAt = "2021-04-04T01:09:25.000000+09:00",
                    DiscountUpperLimit = 8662,
                    Description = "9",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon34()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountPercentage = 3270.0,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2020-10-14T00:31:57.000000+09:00",
                    DisplayStartsAt = "2021-05-26T16:09:35.000000+09:00",
                    DiscountUpperLimit = 6078,
                    Description = "iDgn9VJjED17kjNr295nMRl2EDxJjIsLyTAA5MEWhdNFDbX7fss0ltmaJnxslaUL7RrxqbBxY5tCbxb35FzAfmkd3pduwUBkrqrvJ3GVs6GsJ8XiLApVwNY6zjKIEdqTZCuDots6oOpUnX5paeprWtPSGZrL9UrmNU3vFgZ69vwXIbJ7yB2uIbdTxo63tcXPzmao0EWnRVCjlgZcfxXnQfXv",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon35()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountPercentage = 7526.0,
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-09-11T06:23:39.000000+09:00",
                    DisplayStartsAt = "2022-05-30T23:18:19.000000+09:00",
                    DiscountUpperLimit = 8346,
                    Description = "7BZN78kqzJ0Us2fGrJyLKsRHFPpRHSTTSFxnvRwj3Oa3urFP8R4bhOdaBwGLVVHwtN3AFb20DhVqIxWOmhxrSYnMI0dEOIqOFLqn2ZuLk5GF2FUuyDVUpZnC5UYez0zM0cPoxe0DGq4e7wXOOVc8GIqj26qcMQ423OrAYOyd21L95eAaG4JW0HS70OJOUKjKLeGCgLyc3XcFOYpAAHYYK9z73uxDP2ictixYS",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon36()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountPercentage = 6910.0,
                    Code = "0AnlJyQ4",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2022-06-12T10:40:46.000000+09:00",
                    DisplayStartsAt = "2016-06-27T18:55:07.000000+09:00",
                    DiscountUpperLimit = 98,
                    Description = "j8PRfNm4vkTJ8joyTSHmI2see5qGgNKlkv5vEcEoMjbT4VP8lZF0AhpuShoXCl",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon37()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountPercentage = 2954.0,
                    UsageLimit = 1017,
                    Code = "9fXYfw5L",
                    IsPublic = false,
                    IsHidden = false,
                    IsDisabled = true,
                    DisplayEndsAt = "2015-11-02T02:27:29.000000+09:00",
                    DisplayStartsAt = "2022-10-10T00:57:18.000000+09:00",
                    DiscountUpperLimit = 5019,
                    Description = "e5dxC9nFb6EnR37XI7b090WiBtRh0avWom7iSFIO4uZdtJGn6HWLBVq7JKL8IsIw17O7EyRwbRgUy7vFea5WeBAkgIciVnQYB9t75iPCouDaOPQZR4UpdKmspN8b2gkMcSPrmt0hjIJu43wB7scWlYirrj6XmXYoqVEvKvw3AdEs5hG",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon38()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountPercentage = 9761.0,
                    MinAmount = 1300,
                    UsageLimit = 8068,
                    Code = "LuaSp",
                    IsPublic = true,
                    IsHidden = false,
                    IsDisabled = false,
                    DisplayEndsAt = "2023-07-10T10:15:21.000000+09:00",
                    DisplayStartsAt = "2017-11-01T07:02:03.000000+09:00",
                    DiscountUpperLimit = 3707,
                    Description = "EiugglxJJBGt0dcPbtQc4uSkk26uSRwX6Rx7fOEoFSQi",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon39()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountPercentage = 1476.0,
                    IsShopSpecified = false,
                    MinAmount = 7152,
                    UsageLimit = 1472,
                    Code = "TgrywklVD",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2019-09-20T07:12:14.000000+09:00",
                    DisplayStartsAt = "2022-02-23T10:42:44.000000+09:00",
                    DiscountUpperLimit = 6293,
                    Description = "ELe2edQd6Mwu12UeT7ThuLLgJ9PT2zGkxOOzhTpPLnUQXea3eTBlP1za1n7IcWMlrV1ey0F13qC7iArhwm76E35ql4XfUae14Wbt93t26LiQAMBYx057AoBwLeryNecuIhUBXRQRCvkSHsmDbMU34aVyZLcCNEj4KngWmPwy7k0E27omWruIWs4TAGfq9ue",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon40()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountPercentage = 7636.0,
                    AvailableShopIds = new string[]{"0f4bbc04-095a-4611-9b77-cf1be6078f3c", "009526d9-5f07-4f62-bdcd-296eca8d6982", "03466410-3df4-4f2c-a37e-2af95c2ed749", "c53ab9d0-41fa-4b02-a271-0512121def95", "52c39341-9989-4089-9897-bfc7c04254a4", "39fa219d-46e1-41a8-8a3f-ac00f34cbe9f"},
                    IsShopSpecified = true,
                    MinAmount = 1115,
                    UsageLimit = 1967,
                    Code = "jc2",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2018-11-13T00:22:54.000000+09:00",
                    DisplayStartsAt = "2017-05-27T06:30:00.000000+09:00",
                    DiscountUpperLimit = 4335,
                    Description = "s8oM8ozozHv7pSUjn2vqwiu14DVHGOrsaIKsQ11QA0zf5QFhEcKjjKztGRK6K9KAPEUIedziHih60rhQZO78Ysa8FmX0ccAumcgyg4cqEaxSmm8kmOYz37PEcPNNiKvN5Ht8RLA9ghACTJRDSXhb0oNXnX7lDuTKN6ygQ5h7kN0paU2HC64wcGrUcdcRO2Sa3zE9qA6JlqvTos7SrI",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCoupon41()
        {
            try {
                Request.CreateCoupon request = new Request.CreateCoupon(
                    "3dbcfc40-e009-4adf-90c3-994330bfa022",
                    "60HT399N8hkxoSQFYDUU0HuG332kY",
                    "2016-03-10T03:53:08.000000+09:00",
                    "2020-06-14T10:35:53.000000+09:00",
                    "5ed66d9f-b625-459a-830f-ffb3b919d8dd"
                ) {
                    DiscountPercentage = 6721.0,
                    StorageId = "0e0b90bc-ad08-4cec-a48e-34dbcf43580d",
                    AvailableShopIds = new string[]{},
                    IsShopSpecified = true,
                    MinAmount = 7085,
                    UsageLimit = 2317,
                    Code = "aDahv",
                    IsPublic = false,
                    IsHidden = true,
                    IsDisabled = false,
                    DisplayEndsAt = "2019-10-28T18:37:20.000000+09:00",
                    DisplayStartsAt = "2023-07-18T01:58:41.000000+09:00",
                    DiscountUpperLimit = 3686,
                    Description = "3H7H22Xm9qyhmrKIzglEahNr",
                };
                Response.CouponDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
