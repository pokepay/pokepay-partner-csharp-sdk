// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCheck
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCheck0()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "34ee7eda-1645-4450-8e1c-b185b7bd9dce"
                );
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck1()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "34ee7eda-1645-4450-8e1c-b185b7bd9dce"
                ) {
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck2()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "34ee7eda-1645-4450-8e1c-b185b7bd9dce"
                ) {
                    BearPointAccount = "072a9190-0d8f-4ab7-ac48-b951167835d8",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck3()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "34ee7eda-1645-4450-8e1c-b185b7bd9dce"
                ) {
                    PointExpiresInDays = 4728,
                    BearPointAccount = "c5505879-ca81-41a8-bc86-756d9874f346",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck4()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "34ee7eda-1645-4450-8e1c-b185b7bd9dce"
                ) {
                    PointExpiresAt = "2023-08-01T12:05:06.000000+09:00",
                    PointExpiresInDays = 5475,
                    BearPointAccount = "841779d8-4559-489d-b618-282698f31e8b",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck5()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "34ee7eda-1645-4450-8e1c-b185b7bd9dce"
                ) {
                    ExpiresAt = "2021-10-31T19:31:29.000000+09:00",
                    PointExpiresAt = "2020-08-04T06:07:39.000000+09:00",
                    PointExpiresInDays = 8783,
                    BearPointAccount = "09566a84-dcaa-423b-b383-cc1c192f55dd",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck6()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "34ee7eda-1645-4450-8e1c-b185b7bd9dce"
                ) {
                    UsageLimit = 2913,
                    ExpiresAt = "2022-11-29T20:45:32.000000+09:00",
                    PointExpiresAt = "2023-09-24T17:56:04.000000+09:00",
                    PointExpiresInDays = 6355,
                    BearPointAccount = "0a2dd14f-5839-40a2-bd87-246a2c8f40bc",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck7()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "34ee7eda-1645-4450-8e1c-b185b7bd9dce"
                ) {
                    IsOnetime = false,
                    UsageLimit = 5332,
                    ExpiresAt = "2020-01-21T08:27:41.000000+09:00",
                    PointExpiresAt = "2023-05-11T01:55:44.000000+09:00",
                    PointExpiresInDays = 2743,
                    BearPointAccount = "d628d433-7664-40d2-847d-9ea2d22fc522",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck8()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "34ee7eda-1645-4450-8e1c-b185b7bd9dce"
                ) {
                    Description = "KNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6Bfk723xgVJhWc2FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPn",
                    IsOnetime = true,
                    UsageLimit = 8068,
                    ExpiresAt = "2022-05-07T09:36:44.000000+09:00",
                    PointExpiresAt = "2021-09-19T12:44:26.000000+09:00",
                    PointExpiresInDays = 4139,
                    BearPointAccount = "23e5c540-fdb0-45ea-bdf3-6bb585faebf2",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck9()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "34ee7eda-1645-4450-8e1c-b185b7bd9dce"
                ) {
                    PointAmount = 3699.0,
                    Description = "Z4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFu",
                    IsOnetime = true,
                    UsageLimit = 1701,
                    ExpiresAt = "2023-12-13T10:40:58.000000+09:00",
                    PointExpiresAt = "2024-02-20T01:10:12.000000+09:00",
                    PointExpiresInDays = 5294,
                    BearPointAccount = "692797f0-c0b1-4ca2-94be-9084883b2f86",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck10()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "34ee7eda-1645-4450-8e1c-b185b7bd9dce"
                ) {
                    MoneyAmount = 3293.0,
                    PointAmount = 1785.0,
                    Description = "Hobnm6HycWppeOG5c4bSqVBGp3Ank6BTTvgxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH",
                    IsOnetime = false,
                    UsageLimit = 6459,
                    ExpiresAt = "2020-04-27T16:47:41.000000+09:00",
                    PointExpiresAt = "2020-10-23T03:27:50.000000+09:00",
                    PointExpiresInDays = 2862,
                    BearPointAccount = "08afd9dd-0a6e-4a9f-b923-e11535092675",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
