// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCheck
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCheck0()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "d31bc780-2090-4525-9f17-eb2d1dba0a22"
                );
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck1()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "d31bc780-2090-4525-9f17-eb2d1dba0a22"
                ) {
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck2()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "d31bc780-2090-4525-9f17-eb2d1dba0a22"
                ) {
                    BearPointAccount = "445880b7-3d2d-4c13-a19a-fa5ef837d28f",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck3()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "d31bc780-2090-4525-9f17-eb2d1dba0a22"
                ) {
                    PointExpiresInDays = 6214,
                    BearPointAccount = "b0a551e8-e143-46fa-81f8-1c120599ad97",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck4()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "d31bc780-2090-4525-9f17-eb2d1dba0a22"
                ) {
                    PointExpiresAt = "2017-12-16T06:10:38.000000+09:00",
                    PointExpiresInDays = 8959,
                    BearPointAccount = "66bd54a8-df6b-4137-b78f-14c3ff1c699c",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck5()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "d31bc780-2090-4525-9f17-eb2d1dba0a22"
                ) {
                    ExpiresAt = "2017-04-04T20:45:29.000000+09:00",
                    PointExpiresAt = "2020-11-25T03:43:57.000000+09:00",
                    PointExpiresInDays = 580,
                    BearPointAccount = "96aaf487-0504-47bd-bb8e-2b1c8101b065",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck6()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "d31bc780-2090-4525-9f17-eb2d1dba0a22"
                ) {
                    UsageLimit = 187,
                    ExpiresAt = "2021-04-12T14:46:29.000000+09:00",
                    PointExpiresAt = "2018-03-23T19:43:52.000000+09:00",
                    PointExpiresInDays = 5209,
                    BearPointAccount = "50ae3f29-4800-4df0-aa1f-e224258e4a3a",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck7()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "d31bc780-2090-4525-9f17-eb2d1dba0a22"
                ) {
                    IsOnetime = false,
                    UsageLimit = 2675,
                    ExpiresAt = "2019-10-21T18:48:36.000000+09:00",
                    PointExpiresAt = "2024-01-20T06:28:47.000000+09:00",
                    PointExpiresInDays = 5787,
                    BearPointAccount = "e08c4ac2-bc7f-42a9-af27-307047e1df57",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck8()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "d31bc780-2090-4525-9f17-eb2d1dba0a22"
                ) {
                    Description = "jaHxnyVyg84CEboANf3GgmcFSBGd4pmiTxHNbrYens4u9GQt9vJieM7BH7dEycECMTyZxqTix6LAjnLqA4wrG6US18ntM4onQf2m9t3OCNqfKmZWQ75F6MN97GlhoC6I3zsGp9nPAR9RCvJrSoN9CZyfSrti2B3fSj7sOJpboteqBS8TUP",
                    IsOnetime = true,
                    UsageLimit = 6610,
                    ExpiresAt = "2018-10-22T22:49:23.000000+09:00",
                    PointExpiresAt = "2019-10-29T08:30:34.000000+09:00",
                    PointExpiresInDays = 4737,
                    BearPointAccount = "606db257-38fc-4ec2-a474-4b6a86614e5f",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck9()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "d31bc780-2090-4525-9f17-eb2d1dba0a22"
                ) {
                    PointAmount = 5136.0,
                    Description = "nwzBQQceYtSoMCdyPk93zgCtVuIFBqhcseNikPrDgCmHG8vikmFgrytVm463lqwzMNAaG9bsltmpBgYfNu8ATN3QeovsGABE6S29ugS2y1GaG8ZpC0XFOMwXbpPHJpJLIu2dZND3hmZ8SK3bABOEonXWu6UAKD2mn0mbl4JlqUOJWDDck",
                    IsOnetime = false,
                    UsageLimit = 5997,
                    ExpiresAt = "2024-09-18T12:25:41.000000+09:00",
                    PointExpiresAt = "2022-06-11T23:24:04.000000+09:00",
                    PointExpiresInDays = 8897,
                    BearPointAccount = "21c8baf1-31cf-4e7f-81ad-2db08c8d1a47",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck10()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "d31bc780-2090-4525-9f17-eb2d1dba0a22"
                ) {
                    MoneyAmount = 6373.0,
                    PointAmount = 5129.0,
                    Description = "UDiOMBg3a8ZDqZf55MpshKZcfl4dQPvtLE0cwqc8POqfxISdeGrtt0hjKiFldbTZYJN2VXCE7IKHdKXt",
                    IsOnetime = true,
                    UsageLimit = 7614,
                    ExpiresAt = "2017-05-16T23:21:37.000000+09:00",
                    PointExpiresAt = "2018-10-01T03:14:23.000000+09:00",
                    PointExpiresInDays = 7210,
                    BearPointAccount = "04f65920-a958-42cd-8b6c-2a41afeecd13",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
