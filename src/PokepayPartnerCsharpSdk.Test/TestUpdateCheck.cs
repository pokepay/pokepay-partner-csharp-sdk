// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCheck
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCheck0()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "c18215a7-1387-458c-ac3c-d463426af580"
                );
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck1()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "c18215a7-1387-458c-ac3c-d463426af580"
                ) {
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck2()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "c18215a7-1387-458c-ac3c-d463426af580"
                ) {
                    BearPointAccount = "5885fd4f-db4f-4e31-b732-dcc721d95a97",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck3()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "c18215a7-1387-458c-ac3c-d463426af580"
                ) {
                    PointExpiresInDays = 4841,
                    BearPointAccount = "c7e7a98b-f05b-431e-8d2e-858600e661d1",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck4()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "c18215a7-1387-458c-ac3c-d463426af580"
                ) {
                    PointExpiresAt = "2020-01-13T20:28:00.000000Z",
                    PointExpiresInDays = 9661,
                    BearPointAccount = "fc1ff8b1-2ca1-4210-a4d8-41ce94510c1a",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck5()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "c18215a7-1387-458c-ac3c-d463426af580"
                ) {
                    ExpiresAt = "2023-10-13T18:59:36.000000Z",
                    PointExpiresAt = "2024-06-25T23:18:12.000000Z",
                    PointExpiresInDays = 6773,
                    BearPointAccount = "24e5fb4d-2d13-400a-b76b-2819ab6dbd8d",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck6()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "c18215a7-1387-458c-ac3c-d463426af580"
                ) {
                    UsageLimit = 4419,
                    ExpiresAt = "2023-12-11T15:31:21.000000Z",
                    PointExpiresAt = "2022-02-21T23:27:47.000000Z",
                    PointExpiresInDays = 9272,
                    BearPointAccount = "1743f53f-6150-41ac-bfa8-20356838fc2d",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck7()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "c18215a7-1387-458c-ac3c-d463426af580"
                ) {
                    IsOnetime = true,
                    UsageLimit = 7085,
                    ExpiresAt = "2021-03-17T18:40:28.000000Z",
                    PointExpiresAt = "2024-06-16T11:20:37.000000Z",
                    PointExpiresInDays = 3606,
                    BearPointAccount = "3ef17a9c-9e94-47a6-916e-0438e1ed569f",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck8()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "c18215a7-1387-458c-ac3c-d463426af580"
                ) {
                    Description = "6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z4",
                    IsOnetime = false,
                    UsageLimit = 6801,
                    ExpiresAt = "2025-05-17T02:42:56.000000Z",
                    PointExpiresAt = "2024-02-23T20:16:03.000000Z",
                    PointExpiresInDays = 4913,
                    BearPointAccount = "c7f261c2-0a40-4adc-bbdb-9fb96ef959ed",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck9()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "c18215a7-1387-458c-ac3c-d463426af580"
                ) {
                    PointAmount = 4131.0,
                    Description = "s2NjGqIbT9Ow",
                    IsOnetime = false,
                    UsageLimit = 16,
                    ExpiresAt = "2021-06-05T22:18:12.000000Z",
                    PointExpiresAt = "2023-09-25T18:35:42.000000Z",
                    PointExpiresInDays = 8158,
                    BearPointAccount = "7b996ceb-e2e1-48d0-b02c-5cf7705995fd",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck10()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "c18215a7-1387-458c-ac3c-d463426af580"
                ) {
                    MoneyAmount = 521.0,
                    PointAmount = 8995.0,
                    Description = "yZpFNZ79bus52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAk",
                    IsOnetime = true,
                    UsageLimit = 6535,
                    ExpiresAt = "2021-05-30T05:25:18.000000Z",
                    PointExpiresAt = "2020-10-15T23:49:51.000000Z",
                    PointExpiresInDays = 6375,
                    BearPointAccount = "d4ba3201-9293-415e-b61d-db5c06dc5e31",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
