// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCheck
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCheck0()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "dc941336-d8ed-44d2-9466-1be5e3d1f501"
                );
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck1()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "dc941336-d8ed-44d2-9466-1be5e3d1f501"
                ) {
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck2()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "dc941336-d8ed-44d2-9466-1be5e3d1f501"
                ) {
                    BearPointAccount = "60696935-cf03-42a3-a0bd-b58f6c71002b",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck3()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "dc941336-d8ed-44d2-9466-1be5e3d1f501"
                ) {
                    PointExpiresInDays = 5,
                    BearPointAccount = "0562e780-0ead-462b-be1e-855fa4ea75dd",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck4()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "dc941336-d8ed-44d2-9466-1be5e3d1f501"
                ) {
                    PointExpiresAt = "2020-11-22T11:43:42.000000+09:00",
                    PointExpiresInDays = 9799,
                    BearPointAccount = "e9d5accc-329f-4e7c-b64a-5e49906ba9f0",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck5()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "dc941336-d8ed-44d2-9466-1be5e3d1f501"
                ) {
                    ExpiresAt = "2022-05-13T01:20:42.000000+09:00",
                    PointExpiresAt = "2023-10-21T23:41:34.000000+09:00",
                    PointExpiresInDays = 3071,
                    BearPointAccount = "0721938d-ef44-490b-a603-60d00574fbb7",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck6()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "dc941336-d8ed-44d2-9466-1be5e3d1f501"
                ) {
                    UsageLimit = 9523,
                    ExpiresAt = "2021-04-06T23:10:36.000000+09:00",
                    PointExpiresAt = "2022-02-21T20:08:50.000000+09:00",
                    PointExpiresInDays = 5152,
                    BearPointAccount = "eb21bb7f-be5d-4f2f-b1fb-43b9bd62e6da",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck7()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "dc941336-d8ed-44d2-9466-1be5e3d1f501"
                ) {
                    IsOnetime = false,
                    UsageLimit = 8181,
                    ExpiresAt = "2020-02-12T20:56:50.000000+09:00",
                    PointExpiresAt = "2021-07-09T18:32:29.000000+09:00",
                    PointExpiresInDays = 8677,
                    BearPointAccount = "ea4aa549-faf7-4286-89c1-926fd7a56253",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck8()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "dc941336-d8ed-44d2-9466-1be5e3d1f501"
                ) {
                    Description = "qNizwYZ0PribogQoQY3lHv3JNfmmSX0KMq5x9xkEN9zWtWrsKSiSAD74XBUn37SXP6m8lWNiRH4t1y0",
                    IsOnetime = true,
                    UsageLimit = 337,
                    ExpiresAt = "2020-12-14T17:04:12.000000+09:00",
                    PointExpiresAt = "2021-06-28T02:33:22.000000+09:00",
                    PointExpiresInDays = 5643,
                    BearPointAccount = "365c03f2-c2fa-4bbe-9d62-b676b5ffc58a",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck9()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "dc941336-d8ed-44d2-9466-1be5e3d1f501"
                ) {
                    PointAmount = 4618.0,
                    Description = "fHRXcHfP6yfPM4BZ1wipIrbi69Lk4ZGi26yn0PGkirgoinLQ8ehLQIcutUzgfva5CYbXWjDPxaWIGh5DZ2zgGEjkBEDc",
                    IsOnetime = false,
                    UsageLimit = 559,
                    ExpiresAt = "2020-06-19T17:35:22.000000+09:00",
                    PointExpiresAt = "2021-05-06T12:30:03.000000+09:00",
                    PointExpiresInDays = 6586,
                    BearPointAccount = "6354a59a-f711-432e-a539-e87a408a1466",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck10()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "dc941336-d8ed-44d2-9466-1be5e3d1f501"
                ) {
                    MoneyAmount = 1159.0,
                    PointAmount = 9190.0,
                    Description = "ZoIwG4lqaxQiT0tfbyhoKmTxBsNJSgmsyRdzlvDPw52bQ",
                    IsOnetime = true,
                    UsageLimit = 9670,
                    ExpiresAt = "2021-08-10T11:22:45.000000+09:00",
                    PointExpiresAt = "2021-04-18T17:12:11.000000+09:00",
                    PointExpiresInDays = 1633,
                    BearPointAccount = "1c011439-0be9-4428-b82e-1884cd954568",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
