// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCheck
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCheck0()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "3eb07d80-6eeb-4950-808a-86c537318415"
                );
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck1()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "3eb07d80-6eeb-4950-808a-86c537318415"
                ) {
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck2()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "3eb07d80-6eeb-4950-808a-86c537318415"
                ) {
                    BearPointAccount = "a23c33a8-1969-48df-85ca-b906e5710bb9",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck3()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "3eb07d80-6eeb-4950-808a-86c537318415"
                ) {
                    PointExpiresInDays = 4295,
                    BearPointAccount = "eb6b6d37-9497-4220-8696-2ef3afc82730",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck4()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "3eb07d80-6eeb-4950-808a-86c537318415"
                ) {
                    PointExpiresAt = "2018-01-01T07:31:27.000000+09:00",
                    PointExpiresInDays = 6021,
                    BearPointAccount = "dcabfcb2-3d44-4298-9bb0-0937d70b1e5a",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck5()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "3eb07d80-6eeb-4950-808a-86c537318415"
                ) {
                    ExpiresAt = "2024-07-04T13:55:14.000000+09:00",
                    PointExpiresAt = "2016-08-13T08:47:22.000000+09:00",
                    PointExpiresInDays = 2048,
                    BearPointAccount = "9d87f50d-c6ca-4c79-ba13-a3b6555a6a35",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck6()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "3eb07d80-6eeb-4950-808a-86c537318415"
                ) {
                    UsageLimit = 3496,
                    ExpiresAt = "2025-07-27T03:24:19.000000+09:00",
                    PointExpiresAt = "2025-01-11T00:21:10.000000+09:00",
                    PointExpiresInDays = 8069,
                    BearPointAccount = "f46a5cac-4faa-4055-aa40-fdb0b9ef55ea",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck7()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "3eb07d80-6eeb-4950-808a-86c537318415"
                ) {
                    IsOnetime = false,
                    UsageLimit = 3699,
                    ExpiresAt = "2016-09-14T07:20:31.000000+09:00",
                    PointExpiresAt = "2021-02-04T00:11:30.000000+09:00",
                    PointExpiresInDays = 3479,
                    BearPointAccount = "020671da-6f5c-4134-810e-7be3bb7c5257",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck8()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "3eb07d80-6eeb-4950-808a-86c537318415"
                ) {
                    Description = "R3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSqVBGp3Ank6BTTvgxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4",
                    IsOnetime = true,
                    UsageLimit = 9325,
                    ExpiresAt = "2016-12-15T14:45:46.000000+09:00",
                    PointExpiresAt = "2016-04-24T22:40:17.000000+09:00",
                    PointExpiresInDays = 8619,
                    BearPointAccount = "d720cd8a-debd-4b9b-a6a6-0852691f704e",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck9()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "3eb07d80-6eeb-4950-808a-86c537318415"
                ) {
                    PointAmount = 6849.0,
                    Description = "CH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr4C",
                    IsOnetime = true,
                    UsageLimit = 8254,
                    ExpiresAt = "2020-05-26T15:27:23.000000+09:00",
                    PointExpiresAt = "2017-12-30T02:59:21.000000+09:00",
                    PointExpiresInDays = 3236,
                    BearPointAccount = "bff26f3d-deb2-4444-b33c-f6c3d2a78b36",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck10()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "3eb07d80-6eeb-4950-808a-86c537318415"
                ) {
                    MoneyAmount = 5307.0,
                    PointAmount = 3663.0,
                    Description = "lQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNkDTFwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uw",
                    IsOnetime = false,
                    UsageLimit = 4046,
                    ExpiresAt = "2022-10-05T06:58:18.000000+09:00",
                    PointExpiresAt = "2021-09-24T06:10:22.000000+09:00",
                    PointExpiresInDays = 1562,
                    BearPointAccount = "5bb7b48d-24ac-495c-b14b-15c7051443f5",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
