// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCheck
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCheck0()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "7d79a965-78ad-4583-8e8a-7d887f966b29"
                );
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck1()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "7d79a965-78ad-4583-8e8a-7d887f966b29"
                ) {
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck2()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "7d79a965-78ad-4583-8e8a-7d887f966b29"
                ) {
                    BearPointAccount = "877b6ac5-dc4f-457a-9802-506ec699da52",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck3()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "7d79a965-78ad-4583-8e8a-7d887f966b29"
                ) {
                    PointExpiresInDays = 8804,
                    BearPointAccount = "783b74e2-59cc-40cf-b329-934d2f2b98e9",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck4()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "7d79a965-78ad-4583-8e8a-7d887f966b29"
                ) {
                    PointExpiresAt = "2021-05-12T14:03:42.000000Z",
                    PointExpiresInDays = 6709,
                    BearPointAccount = "dcab8474-6c03-4cad-a76a-bf096ff41614",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck5()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "7d79a965-78ad-4583-8e8a-7d887f966b29"
                ) {
                    ExpiresAt = "2022-07-26T06:58:09.000000Z",
                    PointExpiresAt = "2021-02-21T06:43:04.000000Z",
                    PointExpiresInDays = 9667,
                    BearPointAccount = "260816a3-b8c1-4552-9cae-d24f7d536370",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck6()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "7d79a965-78ad-4583-8e8a-7d887f966b29"
                ) {
                    UsageLimit = 2172,
                    ExpiresAt = "2022-12-08T17:40:49.000000Z",
                    PointExpiresAt = "2022-10-26T23:49:24.000000Z",
                    PointExpiresInDays = 2345,
                    BearPointAccount = "462b5b24-ccd2-465f-a5e3-3830ca957fea",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck7()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "7d79a965-78ad-4583-8e8a-7d887f966b29"
                ) {
                    IsOnetime = false,
                    UsageLimit = 1372,
                    ExpiresAt = "2021-09-09T13:14:33.000000Z",
                    PointExpiresAt = "2021-12-26T21:39:57.000000Z",
                    PointExpiresInDays = 3119,
                    BearPointAccount = "861533ef-cd50-464e-a8eb-a55d2caf6f01",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck8()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "7d79a965-78ad-4583-8e8a-7d887f966b29"
                ) {
                    Description = "FwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ",
                    IsOnetime = false,
                    UsageLimit = 9059,
                    ExpiresAt = "2021-10-07T02:28:08.000000Z",
                    PointExpiresAt = "2021-04-24T12:53:16.000000Z",
                    PointExpiresInDays = 3008,
                    BearPointAccount = "0e137a4b-5f86-48b9-9f04-9d3aaee341d6",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck9()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "7d79a965-78ad-4583-8e8a-7d887f966b29"
                ) {
                    PointAmount = 3447.0,
                    Description = "N6FqKGuMQEbIhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTtAdseC51",
                    IsOnetime = true,
                    UsageLimit = 1057,
                    ExpiresAt = "2020-12-19T17:53:33.000000Z",
                    PointExpiresAt = "2023-07-04T09:11:48.000000Z",
                    PointExpiresInDays = 3649,
                    BearPointAccount = "591280a7-f0a7-40d5-b028-aa35a4710bd6",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck10()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "7d79a965-78ad-4583-8e8a-7d887f966b29"
                ) {
                    MoneyAmount = 7176.0,
                    PointAmount = 3177.0,
                    Description = "AQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUyrfJOMPlYYA9d24g2qlkQeu",
                    IsOnetime = false,
                    UsageLimit = 3852,
                    ExpiresAt = "2021-06-20T12:42:25.000000Z",
                    PointExpiresAt = "2023-11-26T07:29:58.000000Z",
                    PointExpiresInDays = 720,
                    BearPointAccount = "a503d874-d430-4934-9da8-bd9696e081ca",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
