// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCheck
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCheck0()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "0db5caf8-a7fe-4987-baab-57d2837cc99b"
                );
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck1()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "0db5caf8-a7fe-4987-baab-57d2837cc99b"
                ) {
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck2()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "0db5caf8-a7fe-4987-baab-57d2837cc99b"
                ) {
                    BearPointAccount = "951ffc41-4ec2-45ed-bed2-803aa127b989",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck3()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "0db5caf8-a7fe-4987-baab-57d2837cc99b"
                ) {
                    PointExpiresInDays = 9659,
                    BearPointAccount = "888a8ed3-1739-4bde-8d51-006abb997ef8",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck4()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "0db5caf8-a7fe-4987-baab-57d2837cc99b"
                ) {
                    PointExpiresAt = "2020-03-24T13:25:31.000000+09:00",
                    PointExpiresInDays = 8643,
                    BearPointAccount = "a91b2670-3b25-48fe-ac86-6904a43eea5a",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck5()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "0db5caf8-a7fe-4987-baab-57d2837cc99b"
                ) {
                    ExpiresAt = "2021-01-01T06:27:23.000000+09:00",
                    PointExpiresAt = "2023-06-21T08:19:01.000000+09:00",
                    PointExpiresInDays = 1275,
                    BearPointAccount = "9602ab92-2722-4b1b-b852-d67b227808f0",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck6()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "0db5caf8-a7fe-4987-baab-57d2837cc99b"
                ) {
                    UsageLimit = 2561,
                    ExpiresAt = "2017-01-20T18:42:14.000000+09:00",
                    PointExpiresAt = "2016-12-04T08:41:38.000000+09:00",
                    PointExpiresInDays = 6390,
                    BearPointAccount = "a2fa3c99-c70a-49fe-b2e1-33a6e885c09f",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck7()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "0db5caf8-a7fe-4987-baab-57d2837cc99b"
                ) {
                    IsOnetime = false,
                    UsageLimit = 5787,
                    ExpiresAt = "2019-11-19T02:03:04.000000+09:00",
                    PointExpiresAt = "2022-11-25T12:27:20.000000+09:00",
                    PointExpiresInDays = 9470,
                    BearPointAccount = "b0264efd-cbed-496b-97bf-bcf56837a24e",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck8()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "0db5caf8-a7fe-4987-baab-57d2837cc99b"
                ) {
                    Description = "aLwUUyVVbHq8AhuwfVKk7iEMjcWL7yQs1nJU1PyewdGPGGLQkETfnOPRFPmw2DY5YYX5vItwXJknvX9ztDit7rqSMOF1Xi",
                    IsOnetime = true,
                    UsageLimit = 8531,
                    ExpiresAt = "2024-02-19T22:18:23.000000+09:00",
                    PointExpiresAt = "2021-12-23T14:57:20.000000+09:00",
                    PointExpiresInDays = 3407,
                    BearPointAccount = "4cdb3069-92f6-469e-9b78-7c12622fb70d",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck9()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "0db5caf8-a7fe-4987-baab-57d2837cc99b"
                ) {
                    PointAmount = 7515.0,
                    Description = "KHrpQVXimNDBgfumK7PX05fO2lhyaleThkb3qWNVbyAdEQQZ2y2SQFb80Wa8l6dKHoSXGb8oeVBRmkOhsaxxZ11J2",
                    IsOnetime = false,
                    UsageLimit = 837,
                    ExpiresAt = "2020-09-23T09:20:01.000000+09:00",
                    PointExpiresAt = "2024-10-08T06:44:02.000000+09:00",
                    PointExpiresInDays = 5304,
                    BearPointAccount = "c9a8918a-c182-43a6-b920-0993fd72d88f",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck10()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "0db5caf8-a7fe-4987-baab-57d2837cc99b"
                ) {
                    MoneyAmount = 1143.0,
                    PointAmount = 672.0,
                    Description = "W7l6btTcZqmDcnViM8U6XiZYec69U57HBUdqx801Fr",
                    IsOnetime = true,
                    UsageLimit = 3022,
                    ExpiresAt = "2018-10-09T12:27:15.000000+09:00",
                    PointExpiresAt = "2019-08-09T13:31:16.000000+09:00",
                    PointExpiresInDays = 2686,
                    BearPointAccount = "c82bd34e-909d-42e8-920a-929a9b8fc9cd",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
