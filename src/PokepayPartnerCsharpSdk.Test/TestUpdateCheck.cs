// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCheck
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCheck0()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "1eb7e23c-75fa-4a72-8b61-5f24670c0887"
                );
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck1()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "1eb7e23c-75fa-4a72-8b61-5f24670c0887"
                ) {
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck2()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "1eb7e23c-75fa-4a72-8b61-5f24670c0887"
                ) {
                    BearPointAccount = "6c581b40-d716-4cb6-bb2d-a53fb4dc66c4",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck3()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "1eb7e23c-75fa-4a72-8b61-5f24670c0887"
                ) {
                    PointExpiresInDays = 7451,
                    BearPointAccount = "792bdbf5-cf7b-4ba7-b29d-010ce39e2734",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck4()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "1eb7e23c-75fa-4a72-8b61-5f24670c0887"
                ) {
                    PointExpiresAt = "2019-10-20T16:52:25.000000+09:00",
                    PointExpiresInDays = 2498,
                    BearPointAccount = "d85ed61e-d41b-4fe2-9300-5387206512db",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck5()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "1eb7e23c-75fa-4a72-8b61-5f24670c0887"
                ) {
                    ExpiresAt = "2016-05-03T06:58:13.000000+09:00",
                    PointExpiresAt = "2022-04-18T14:59:34.000000+09:00",
                    PointExpiresInDays = 8893,
                    BearPointAccount = "b909a660-f070-46bb-b6b2-446df95e6ed2",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck6()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "1eb7e23c-75fa-4a72-8b61-5f24670c0887"
                ) {
                    UsageLimit = 7732,
                    ExpiresAt = "2017-12-30T17:50:33.000000+09:00",
                    PointExpiresAt = "2020-03-31T18:46:08.000000+09:00",
                    PointExpiresInDays = 3172,
                    BearPointAccount = "84b1be46-1796-48e2-8f92-feda0b98c960",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck7()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "1eb7e23c-75fa-4a72-8b61-5f24670c0887"
                ) {
                    IsOnetime = true,
                    UsageLimit = 7833,
                    ExpiresAt = "2018-05-08T02:01:57.000000+09:00",
                    PointExpiresAt = "2019-01-03T16:09:37.000000+09:00",
                    PointExpiresInDays = 6396,
                    BearPointAccount = "4cfd3ec0-22a0-46a3-99cc-787138351fbb",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck8()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "1eb7e23c-75fa-4a72-8b61-5f24670c0887"
                ) {
                    Description = "J",
                    IsOnetime = false,
                    UsageLimit = 1298,
                    ExpiresAt = "2022-03-01T10:57:19.000000+09:00",
                    PointExpiresAt = "2019-12-12T23:42:43.000000+09:00",
                    PointExpiresInDays = 1288,
                    BearPointAccount = "129bb347-e395-46ab-9fe6-a4c4fc12eb9f",
                    IsDisabled = false,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck9()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "1eb7e23c-75fa-4a72-8b61-5f24670c0887"
                ) {
                    PointAmount = 2921.0,
                    Description = "e5qHDsMdG7wbTKEpXzySqqc4sXPad6xuwUqi64YRTYtsOeEN9XbwlgwBy5OkIYkbdAf4PBqh2Y",
                    IsOnetime = true,
                    UsageLimit = 3336,
                    ExpiresAt = "2023-05-08T18:44:19.000000+09:00",
                    PointExpiresAt = "2019-03-27T11:00:52.000000+09:00",
                    PointExpiresInDays = 6,
                    BearPointAccount = "57940b40-7b35-4996-ba60-369098d386dc",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCheck10()
        {
            try {
                Request.UpdateCheck request = new Request.UpdateCheck(
                    "1eb7e23c-75fa-4a72-8b61-5f24670c0887"
                ) {
                    MoneyAmount = 3746.0,
                    PointAmount = 1859.0,
                    Description = "5Vn4l2htJKp8EeWwIbRZU73CECtq6YH4jkVjZI7iaSuegvmESb5ZkkQma0HXRKUqv4lzkwZFtSWx4aRECgS2Rzs2ylIq5ZtrGXVCQUhbREfojZVoiIjURbvF5cuoyvA3tbiunsY6SNRraYwc8QDfAEfV4F8XUQw7FOCvHUkEBp2LxsthHBe9EWUoT",
                    IsOnetime = false,
                    UsageLimit = 3941,
                    ExpiresAt = "2022-08-18T09:14:23.000000+09:00",
                    PointExpiresAt = "2025-04-13T11:25:29.000000+09:00",
                    PointExpiresInDays = 7438,
                    BearPointAccount = "1a1d5c13-02b2-42a7-8b0b-91058ae50315",
                    IsDisabled = true,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
