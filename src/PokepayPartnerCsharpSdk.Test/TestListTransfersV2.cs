// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransfersV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransfersV20()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2();
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV21()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    To = "2022-06-03T17:29:27.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV22()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    From = "2021-06-06T16:24:26.000000+09:00",
                    To = "2018-07-15T00:19:27.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV23()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    Description = "Wgnbky61uCW1IGQ2YP10u7ZPVZw9ewZxoxQQGmqTJPzl8LwqGA8UaTnq4fEYmxSqTK4Q12s0h9r5P9gF7ybzHxzC4puctyvm509L9Jko8G1j7aThBUi",
                    From = "2020-08-24T17:42:34.000000+09:00",
                    To = "2022-09-25T10:31:24.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV24()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransferTypes = new string[]{"topup", "transfer", "coupon", "payment", "campaign", "exchange"},
                    Description = "9lmNYhM1CXvVdWiW2QwXfpVUJcheKwdXGjBpF11SwBNlZFpECm5pjxncpSGYdc5AwjCti8OOmzmbjYIu9aQ1OeIVACk2ivU",
                    From = "2023-02-13T02:07:19.000000+09:00",
                    To = "2022-01-30T14:33:23.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV25()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PerPage = 397,
                    TransferTypes = new string[]{"exchange", "coupon", "payment", "cashback"},
                    Description = "0m43s3QHez0StkOoqHDc0nWv5CH",
                    From = "2024-10-26T11:17:54.000000+09:00",
                    To = "2015-10-28T09:04:47.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV26()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrevPageCursorId = "a88a2973-c368-4b5e-ba1b-a199410e99d3",
                    PerPage = 286,
                    TransferTypes = new string[]{},
                    Description = "cQbLVtf0NUHotEPKtPbmE1asWcYk2ABBcCvaglSYlFJt5HtYu1M",
                    From = "2024-07-22T07:15:30.000000+09:00",
                    To = "2025-06-10T23:00:40.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV27()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    NextPageCursorId = "a9483c80-48cc-4e19-85dd-982616424581",
                    PrevPageCursorId = "d6e6b15c-701d-41e2-9903-9124a4f02771",
                    PerPage = 124,
                    TransferTypes = new string[]{"exchange", "topup", "transfer", "expire", "coupon"},
                    Description = "e6eTm50qL",
                    From = "2019-08-26T02:19:05.000000+09:00",
                    To = "2025-05-22T23:41:45.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV28()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionTypes = new string[]{"transfer", "cashback", "exchange", "topup"},
                    NextPageCursorId = "4e9c4272-606d-4572-80cf-8209949d1cde",
                    PrevPageCursorId = "2af5ad95-c1d3-4bde-b169-a34b6347c226",
                    PerPage = 162,
                    TransferTypes = new string[]{"exchange", "payment", "campaign", "coupon", "cashback"},
                    Description = "nlrfGCzsTELnX0xZYIP6sra6OloZptubq5uhlx8f02Lh4FyA55dwXY9o7jHgqtH1U42SkttkSSruWJBxhKVhQqObEYZqxsm5Zl2IEs0QFYJ5MNsA8OMW0jWJXAhB067KYKzH616NUgGEhwMr3bAGpbBr0z5DUy4a4J3PKZpO5LrfnM0m9W7UFBvQAXFXlgJ66Gmr5X4S",
                    From = "2018-03-01T18:48:26.000000+09:00",
                    To = "2016-02-17T10:30:32.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV29()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    IsModified = true,
                    TransactionTypes = new string[]{"topup", "cashback"},
                    NextPageCursorId = "4d208c10-2fb1-466d-a975-66a4b5a10477",
                    PrevPageCursorId = "8c2f0564-f768-400e-a729-1f69146be4a6",
                    PerPage = 984,
                    TransferTypes = new string[]{"payment", "exchange", "transfer", "cashback", "expire", "coupon", "topup"},
                    Description = "Ll0hTkpg97kiRvpb3dRzseCkfsnW4GmzXoeiw6q6sRP5r4H00plUJsf",
                    From = "2017-08-20T09:38:54.000000+09:00",
                    To = "2016-05-09T15:33:59.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV210()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrivateMoneyId = "23dfe1fb-b240-4dc0-9ef5-6caa9c6d8a4f",
                    IsModified = false,
                    TransactionTypes = new string[]{"topup", "exchange"},
                    NextPageCursorId = "41246bcd-022f-46df-b2fa-5dc3ea3eb8c1",
                    PrevPageCursorId = "ad67db7f-2009-40ff-a4f4-366c7a0591d5",
                    PerPage = 678,
                    TransferTypes = new string[]{"expire"},
                    Description = "lxWjsohgTAzzeKR4hWFezaKfr3Md532MpDVY7fEsvcQCRlslY20DhyKBHT2f90oK2UHUf8q52gOAkXRvbNsCsuCokyib5lzH3GwxmiINKWpB6zWGeRmOhUeLTgRDg5KVTkWHa6apFIEXsjndC",
                    From = "2019-03-28T20:22:22.000000+09:00",
                    To = "2017-08-31T03:06:20.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV211()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionId = "c83061fa-32f6-47cd-8717-408766571aa6",
                    PrivateMoneyId = "a87ad6ec-5087-4114-8657-ddca8848dfea",
                    IsModified = true,
                    TransactionTypes = new string[]{"payment", "cashback"},
                    NextPageCursorId = "f29c27cf-948d-4f8e-8104-7a590be90c28",
                    PrevPageCursorId = "fa9d869d-4a13-42c0-9467-70447274b073",
                    PerPage = 983,
                    TransferTypes = new string[]{},
                    Description = "PtY6Gs6up4XEdVZQ86OLSU8pJKMx8XBZSVgUmaWkeNhqh4RqQdYoPq1bbFuZl8pvH8HtLuHy6VEI9N3vHpnK5H1D50cu4K4HA",
                    From = "2018-04-02T19:16:39.000000+09:00",
                    To = "2018-09-18T19:32:41.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV212()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerName = "2U02pDIpbFMW2atjvXaaAef1PZlSdwl756Yt2i4dxktdfPBTGAprkjGjtAxh1OzHPRrjUssLcX9sJnDBzv0bQoylHoOrwWwia4j7nefNP3helLvgHFcGnS26nPPG6fQZd6FMbxQgE56jGYWkCMyOCGK7wE4MErfmNX",
                    TransactionId = "406f421a-1d73-476f-9d78-d44c6e055b0f",
                    PrivateMoneyId = "2875239d-14d3-444f-b1b1-43dfa1bbcfee",
                    IsModified = true,
                    TransactionTypes = new string[]{"cashback", "topup", "payment", "exchange", "expire"},
                    NextPageCursorId = "d09a2ec1-2437-4571-bbc0-a6bde5e8d047",
                    PrevPageCursorId = "d336f480-645c-4866-9813-ffce9b7b953c",
                    PerPage = 610,
                    TransferTypes = new string[]{"campaign", "transfer", "topup", "payment", "exchange"},
                    Description = "ox9jCZ1poQeH9o6neC7xgjzoAfOvp6Y2GOpdT0W6dCn82ZDnQzOPcJFqmjwVho8yPH0x6gcPjYO6Jy8DVCyLjd6wDXupihUtCbQlcte0Dx",
                    From = "2020-08-22T15:53:50.000000+09:00",
                    To = "2021-05-10T21:31:27.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV213()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerId = "815e4b9a-9049-41ce-aa62-ca1eb0d5ca7d",
                    CustomerName = "7qjLgOzwscL3jLmZMEkfhWyVg",
                    TransactionId = "4775d851-c294-4f31-bf27-f9a6823b8696",
                    PrivateMoneyId = "9fc51756-a0f3-4d67-8002-b1495966ca7f",
                    IsModified = false,
                    TransactionTypes = new string[]{},
                    NextPageCursorId = "1096a000-e3e0-4af6-9a49-64e291e66857",
                    PrevPageCursorId = "201a8611-efa5-453a-b74d-51cba356b537",
                    PerPage = 471,
                    TransferTypes = new string[]{"cashback", "payment", "exchange", "expire", "coupon"},
                    Description = "kUzYXiRu5Dw",
                    From = "2023-06-19T13:18:35.000000+09:00",
                    To = "2021-07-03T09:19:56.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV214()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopName = "RoQM3mGhoaoPxcAtKt0aO83CIIqnTJBi15F7xZCRFmbpJsOFP0FByLYkwYFh4xNE4rRILR2v6wDJGwlqCHyrGObUfJi4yYFiPB8BI9qP6k9wA7pfgB30dmdN4EWtImhHFyMDRkZIfPyr81pGFBmXIaKdu147vLIUbOCK6J1NENsj13PJPjkqGeeDvcBf7Nb67luVMT9BIg3UXm5WOFwgjnOGfE7XAl9N3W6qJxc9u1KQGD6QLVSTVbMoAWXkAhz6",
                    CustomerId = "f08c4e4a-8b29-4b14-8c62-1e444fab5033",
                    CustomerName = "YiD6c5FQOiTfirhlk1",
                    TransactionId = "2b93ccb6-0f58-466c-975a-c9724b054a7e",
                    PrivateMoneyId = "46f95eb8-df57-4267-b591-99807664f56a",
                    IsModified = true,
                    TransactionTypes = new string[]{"expire", "payment", "exchange", "topup", "cashback", "transfer"},
                    NextPageCursorId = "2b0b1621-5003-4dea-8072-358bc3e37cee",
                    PrevPageCursorId = "de64bbf2-89dd-407b-9f2d-d5226ac22b25",
                    PerPage = 535,
                    TransferTypes = new string[]{"payment", "exchange", "coupon", "expire", "campaign", "cashback", "transfer"},
                    Description = "OjvvYDO54fiwdW8JVBIHFv1AcdiYIqm3y26VEJis0uSWY766tXpIDjm5PcwTGVB6U69mRLECUkaT6kz5F4VjFgWrHjEA4tqyiFKKWLn8si1",
                    From = "2020-03-15T11:53:12.000000+09:00",
                    To = "2024-06-22T04:44:22.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV215()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopId = "f6e656da-3ad9-46d9-83b4-411ad171d763",
                    ShopName = "SRvRpzrsrggVlZBqhYZR5d98E",
                    CustomerId = "3ec90a27-a438-4939-8b8c-f979936cc768",
                    CustomerName = "udSEoeeTdxasPrdMrgNsIZBwBBddyeYBXrdS3aoJxfTXDUFnTdqffrsLQTmoMIdcXWC6VLOAGEnOdh1yakntnIVrCaQIVLRO9rDpJN2qmuVyqmsPYRdIiSKAgBELwMxCJgaaTXOQTg65oiBjAFOUl7mXgoC4kM5wNGPfd3TNYnUMVq6QpHO67dJ6lRZLt2CUgGkbGh32McJmtmPj1fTaWR698lA99otvlkjelDpn60XktNh3FWc",
                    TransactionId = "d8c2aef4-4b08-48b0-8387-086f810308b7",
                    PrivateMoneyId = "b883c589-0f04-48dc-b4de-9894fcc0bb02",
                    IsModified = false,
                    TransactionTypes = new string[]{},
                    NextPageCursorId = "898397e5-2b9c-4646-afdf-bd8a562e95fd",
                    PrevPageCursorId = "fde5e707-b10a-4586-909e-9521bd40a59f",
                    PerPage = 250,
                    TransferTypes = new string[]{"exchange", "payment", "expire", "topup", "campaign", "coupon", "transfer", "cashback"},
                    Description = "55njGHQKLpVOVwSAGEnsRRJKbYwQIf0DStqnpAjh8Pik0qlLfV51W03Hsya2KTR1sudJwzLyFJTjQlH8QwJS07pG9iCD1N5ihq4YD7nOkRIMY2WV4fV1nNuYJ9ckXlcJ8ekVkPK38tE0587kyDLzqLmLEaZJMcOdSAPfRtSglKCKp3d0Dda",
                    From = "2024-09-24T05:49:42.000000+09:00",
                    To = "2020-07-19T07:44:35.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
