// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransfersV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransfersV20()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2();
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV21()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    To = "2025-07-16T00:20:24.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV22()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    From = "2019-12-21T15:32:58.000000+09:00",
                    To = "2023-08-08T04:44:48.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV23()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    Description = "FP0gRhZKJUhaB7g9sYuaOmX7HH9cO1kIhZELb2CJYNHyizS3uOG",
                    From = "2016-10-10T06:02:55.000000+09:00",
                    To = "2018-10-27T08:58:37.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV24()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransferTypes = new string[]{"cashback", "coupon", "campaign"},
                    Description = "nI6UGhTmot1Viqmd52S377Nj87l5YDwCDBdI0Uk7ErtU1e2BvGYMNjozRSgSqIuqZFyJkxgeCKUAssiL7jAVHwqHSYz1mPVCCwyTxt4LmhrkoK8j8wC8C1qFNHHX4NTYuBMMWgiG3cSGj02fKRSg8gOJ63zmKXe",
                    From = "2022-06-09T20:36:31.000000+09:00",
                    To = "2019-02-20T11:11:40.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV25()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PerPage = 219,
                    TransferTypes = new string[]{"topup", "campaign"},
                    Description = "ZgxDo",
                    From = "2019-01-11T00:05:28.000000+09:00",
                    To = "2018-06-20T09:52:45.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV26()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrevPageCursorId = "5b07261a-a3bd-41ed-ade7-ce6eaf1ce7c6",
                    PerPage = 853,
                    TransferTypes = new string[]{"topup", "transfer", "payment", "cashback"},
                    Description = "g1NdTy3951JQGYkaGr9FAP9lIpKACeZCKwzo56fFpMSmO2fgWhSdhyQ5L7lhXOnLdExFO3hhIoUjenyI5RGRTlVRZ1CWmI9W8UEK5",
                    From = "2020-06-15T00:44:07.000000+09:00",
                    To = "2021-02-06T07:37:12.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV27()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    NextPageCursorId = "c03d9bc0-9b9f-4169-b6df-1f33fbd92e80",
                    PrevPageCursorId = "f12412dd-2e37-4594-be6d-8ca5c9b1d4d9",
                    PerPage = 923,
                    TransferTypes = new string[]{"exchange", "payment", "expire", "cashback", "coupon", "transfer", "topup"},
                    Description = "inw3zkj0hPcF7TKhrky9DwE1Gf9Ufdw9HyQjo91BHW24cBtjJKStfX0mexw3fueHYnluYN2UYLm7AJy2p8GfOXB36cgpk6gHl1GYO3dRt4W4RCnbU9eSAIzXVNe2OBAXQOdjTg",
                    From = "2019-09-09T06:07:51.000000+09:00",
                    To = "2022-08-30T03:23:39.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV28()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionTypes = new string[]{},
                    NextPageCursorId = "078a0a0b-8f1a-4dbc-823b-a45005a0b285",
                    PrevPageCursorId = "4e45292a-e506-4956-81f9-4cf15dc6817f",
                    PerPage = 553,
                    TransferTypes = new string[]{"campaign", "topup"},
                    Description = "xTcdboXsriS8p8HzIchQIJl",
                    From = "2020-08-12T01:23:08.000000+09:00",
                    To = "2017-12-27T14:00:55.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV29()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    IsModified = true,
                    TransactionTypes = new string[]{"expire", "transfer", "exchange", "cashback", "topup"},
                    NextPageCursorId = "0afaf5cc-bef4-4389-aa41-032782d90156",
                    PrevPageCursorId = "ee04cd7c-f8f1-42ba-b115-c129c7cdacf0",
                    PerPage = 11,
                    TransferTypes = new string[]{"coupon", "campaign", "topup", "transfer", "exchange"},
                    Description = "S5MiC2bTrQdDn2pakC9ZCvs4l8hPNbtaV6740ocTWAIGdWvP2xURwk30z1eYabIi6uG52oqvkoFvkf7obaImFT8ApVCVQErucmbSbF6pCgAb3wJb1ukU6fLQdqNaNawC49Y8GSSrgb0RqD3LLRBzwMbIy8l9ExCafGsaLzjsXTsdxflTCRC61H1KhkglFx9B",
                    From = "2020-06-09T02:58:59.000000+09:00",
                    To = "2023-10-14T22:48:01.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV210()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrivateMoneyId = "8cf88438-9639-4826-a254-9b73352853f7",
                    IsModified = true,
                    TransactionTypes = new string[]{"topup"},
                    NextPageCursorId = "16c1ad47-0ddb-4995-9d58-f15f17aac426",
                    PrevPageCursorId = "b0aa9597-251b-4729-87c0-38d7969bf86c",
                    PerPage = 104,
                    TransferTypes = new string[]{"transfer", "campaign", "coupon", "payment", "cashback", "expire", "topup"},
                    Description = "ej03OD03Iv5HlgRiNuzditNFJRKYqep5tEHlJ5A1RM8lpV55CaINJPdAtIDsPzlt0bGn6Ea7lvHJbXI1utKnQNV5hRoGCiffO1dubvBp2ubMryjmHfQXEb",
                    From = "2023-01-14T13:53:47.000000+09:00",
                    To = "2021-03-07T20:23:20.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV211()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionId = "f3d63873-1c9c-407b-8d3c-3b75af028d2d",
                    PrivateMoneyId = "57ca958c-b3ba-4a77-8ef7-34f81108c608",
                    IsModified = true,
                    TransactionTypes = new string[]{"expire", "payment"},
                    NextPageCursorId = "da614223-3209-415e-a044-33742d63c260",
                    PrevPageCursorId = "698799d3-9d15-463c-86d9-bad59d9ca45d",
                    PerPage = 624,
                    TransferTypes = new string[]{"cashback", "expire", "campaign", "topup", "coupon", "exchange", "transfer"},
                    Description = "AwUVpDEuSFKGYghbPJJaZGoQhz5nbvPdYeSP0gNnnirFvzJ3b6XEKnVaQTKRDUMRHHaXbpYUFhrebFkxMFjKzU",
                    From = "2023-05-05T19:06:02.000000+09:00",
                    To = "2016-11-21T04:56:05.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV212()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerName = "7IFcKeHzHORaf0kASA8zmyZcHAzLysTqOh1Nable5P8DnHaHp6zqn4QCt56K8jzAYw3a2Rf3YPVhQIQVYdrJpOO1ZkHk0RFqBKquWfqBmhlB7fbmt2i6VCYXHn9CGbQlmxpKKNwwHXTYj9FolLU6MOWkf1Ug3iA4L13LaGtM8AhrxjQrrtTXQww0MPFKMZcNfbuwZFw7lcEdM53DHYMz",
                    TransactionId = "3c76f399-5d68-4a72-a1b2-c3839933c4c7",
                    PrivateMoneyId = "a4dcbb92-d405-4a1e-86e6-16b1d01f3527",
                    IsModified = true,
                    TransactionTypes = new string[]{"expire"},
                    NextPageCursorId = "338026e3-3c45-41a4-a7ee-47adb5901b12",
                    PrevPageCursorId = "26303531-1858-4e51-8ff5-039229409bad",
                    PerPage = 33,
                    TransferTypes = new string[]{"transfer"},
                    Description = "CH8A6zTJOWlvbLcApwBI99q",
                    From = "2019-08-22T14:16:37.000000+09:00",
                    To = "2024-01-09T22:01:18.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV213()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerId = "0c6a6412-58a1-42d1-8d1a-0981ce4e434c",
                    CustomerName = "OuEQfT9GHhS0KRydtlFRqy9ASVZnIH9OutK38i5Qp5QH0aVrv0EEzhw3t6mZXQe0dYCl7bcjvDdj25DPpm4rrvw5kg7hSIvmgSTRn7PkbaqTzHBQNsJjkYGBO4f7NVBkWfu1iOf089MbJ",
                    TransactionId = "2d7fd886-5b5d-411d-b27a-7c2f5ab3556c",
                    PrivateMoneyId = "74ea3ab7-9715-4354-9d1e-82f1b185e5e1",
                    IsModified = true,
                    TransactionTypes = new string[]{"cashback", "topup", "payment"},
                    NextPageCursorId = "d65edc4a-77a3-4f38-8fcd-ee59d59950af",
                    PrevPageCursorId = "b7120210-bb80-4bba-a583-5b439da4a751",
                    PerPage = 1000,
                    TransferTypes = new string[]{},
                    Description = "RXYo7NBbpQWQKt0VatbPF0UnF4BIq1ALjxzLBsTLR5iwaRhMfSHke9NfpR4LKM8ao79JhLIenJLxAR53SAiMDLBDgjY7mtKTb6JFgOJqQlIcoWS",
                    From = "2017-05-09T15:42:51.000000+09:00",
                    To = "2021-12-27T01:05:03.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV214()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopName = "rqg7HywQS3OJwDk7IaJktY3uBGY3UXWP3Y62UCKk8o6u5swLTI1N2fIZVIij6u3VHtVqMj9YvcWIdnOPw7zsdHaG6vnUTf7LwepjCPIlZQ4d7YtSseAIRwjgHMVhsafv2B9xu4yFW6UismxsbOanYfYQYyOQQPGEyroIa8Gw",
                    CustomerId = "82b8e39b-4a92-49e5-adfe-1af88a51cada",
                    CustomerName = "SqmgL0CUdD0ixv0M2MqB8UGz3opZMNqHZhF54ImkIGRCc3psJIO7PmfsLsM1jzL0l2KKnQD4GZsOxH",
                    TransactionId = "7ed063bd-6aad-4ad2-939d-f92ab1ea07ce",
                    PrivateMoneyId = "c02cb582-ad9d-42f6-82fd-8274798c4545",
                    IsModified = true,
                    TransactionTypes = new string[]{"cashback", "topup", "expire", "exchange", "transfer"},
                    NextPageCursorId = "e34252b3-69c2-4f7c-a9cd-8b5118625e76",
                    PrevPageCursorId = "3795ff47-ffd4-4d8e-869d-3a67264af210",
                    PerPage = 471,
                    TransferTypes = new string[]{"cashback", "topup"},
                    Description = "AN9KJRMiOPePDM7vBIsw9aEWqs2NPo6xnbkGqgEdpD8R72xeTYhm5jUmbWLFLHXPcIL31IYBdBjqsIUI7opIWQx8O3pxWG96Us2EIxMQmnvv",
                    From = "2020-05-15T02:43:06.000000+09:00",
                    To = "2017-03-31T19:28:32.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV215()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopId = "d4617d45-c87f-47d9-9738-6031cbfb935c",
                    ShopName = "fBev4nQzzprl176TLw4DDGI8M3MKTer",
                    CustomerId = "216179b7-ecbf-40f9-b300-67fccc1ea88c",
                    CustomerName = "6JiXdNh0Fp8AY5E96aRGnlzkduCpAui9IgvS1XheKbKW4CZhQgoCZpeiWcDubQl4",
                    TransactionId = "9dd6429f-0ee7-4c97-a8fc-53b65a2c01b4",
                    PrivateMoneyId = "7dfc49da-02c7-49bb-8811-38cdc0cebf58",
                    IsModified = false,
                    TransactionTypes = new string[]{"expire", "cashback", "payment"},
                    NextPageCursorId = "a90be16e-4afc-4da8-88be-ce04dc15b3e5",
                    PrevPageCursorId = "c5c3bc8a-a9e1-4c1b-b094-1b37c21c723e",
                    PerPage = 985,
                    TransferTypes = new string[]{"expire", "payment"},
                    Description = "VAWmq22OL3ym8QUMFrZtoc04D718GiAYj1hZ8qB71e4b5frRxszdxtzsCR0nEhD9ydmxPzrdwTpbvhAXBpbVOcnLj2YwWeIAis9WRUMXp59N2I26oWv8XmkyOysHiMnAVPXBZh8gKAjb3gB8Nd0v4JNcw5qIjwRnwUvO",
                    From = "2022-03-18T09:38:44.000000+09:00",
                    To = "2017-02-07T15:54:51.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
