// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransfersV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransfersV20()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2();
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV21()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    To = "2020-12-05T22:55:41.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV22()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    From = "2018-03-23T20:28:03.000000+09:00",
                    To = "2025-03-30T05:54:02.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV23()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    Description = "0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB2",
                    From = "2020-06-20T01:50:34.000000+09:00",
                    To = "2019-01-12T08:19:42.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV24()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransferTypes = new string[]{"exchange", "campaign", "cashback", "coupon", "topup", "expire"},
                    Description = "t4YgIyZaTsiHOmcCShoExxX",
                    From = "2024-02-09T02:54:04.000000+09:00",
                    To = "2022-10-21T15:26:12.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV25()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PerPage = 248,
                    TransferTypes = new string[]{"campaign", "topup", "expire", "payment"},
                    Description = "mtxroKVUk7sDu4lw8ZxL5ooBCUmbexH",
                    From = "2025-06-21T01:55:58.000000+09:00",
                    To = "2019-07-14T05:23:05.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV26()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrevPageCursorId = "bb943159-b4d0-457f-a41d-dea3a30e8052",
                    PerPage = 257,
                    TransferTypes = new string[]{"expire", "campaign", "coupon", "transfer", "cashback"},
                    Description = "ebPAHiatKRmL7K8IMJIBW1vB1RC8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLiOm0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc",
                    From = "2025-08-09T20:52:44.000000+09:00",
                    To = "2023-06-09T09:11:07.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV27()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    NextPageCursorId = "993c813a-a344-4a81-98d3-2cc37103ef75",
                    PrevPageCursorId = "a606702f-41dd-495d-bb3d-749c5de6f6f8",
                    PerPage = 369,
                    TransferTypes = new string[]{"topup", "exchange", "transfer", "payment", "campaign", "expire", "coupon", "cashback"},
                    Description = "wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz2lX0WFgkUTJYHHOr63hjnglJCcSZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkEwHBWOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL8T5msTmgqj81RXJ34GFY2SrpQfm",
                    From = "2016-03-31T11:27:56.000000+09:00",
                    To = "2017-02-15T14:39:31.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV28()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionTypes = new string[]{"topup", "payment", "expire", "transfer"},
                    NextPageCursorId = "8f0a1472-8820-41d3-9c50-bb9c9e705bd7",
                    PrevPageCursorId = "bb4edf12-fdab-4899-ac7e-41f2c7163d7c",
                    PerPage = 657,
                    TransferTypes = new string[]{"topup"},
                    Description = "fbLwdjVaS9JydpHqXjqW7D3uCGCdE3Z7gIcLSudPl4JIrQmLFWJxcGB9N",
                    From = "2020-12-24T08:37:40.000000+09:00",
                    To = "2016-12-25T05:39:31.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV29()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    IsModified = false,
                    TransactionTypes = new string[]{"topup", "payment", "expire", "transfer"},
                    NextPageCursorId = "4c221416-4fd9-481c-b943-e9554635ff6f",
                    PrevPageCursorId = "b8edec87-3e20-4fcf-ac07-e516a4c82287",
                    PerPage = 254,
                    TransferTypes = new string[]{"campaign"},
                    Description = "UNPTMagDSPeHLGCGYvgqbqCIdo",
                    From = "2022-08-18T19:17:44.000000+09:00",
                    To = "2020-10-28T16:41:17.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV210()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrivateMoneyId = "1f4a7d2e-f85c-4df9-a602-0c7f5ace8147",
                    IsModified = false,
                    TransactionTypes = new string[]{"topup"},
                    NextPageCursorId = "3a0a63f6-3025-4185-a2dc-d3102276b800",
                    PrevPageCursorId = "738892a7-4e60-4ccf-aa77-24c2be4025d2",
                    PerPage = 615,
                    TransferTypes = new string[]{"coupon", "exchange", "cashback", "payment"},
                    Description = "fJhTjDs9c8QNUGvnht1UycVdhwjqe7Rve16qe5BUa3mrtCxkktMbdZ0Ff5nebRZC0vDYNEWMfxXSVHRY4YZdsEswklf9tWgAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX",
                    From = "2021-12-15T14:42:00.000000+09:00",
                    To = "2018-08-01T12:00:19.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV211()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionId = "b2d5c07b-3cf3-4140-aa26-98131fa48c42",
                    PrivateMoneyId = "d321002b-aa47-4390-a9de-6cb2150af984",
                    IsModified = true,
                    TransactionTypes = new string[]{"cashback", "topup", "exchange", "payment", "transfer", "expire"},
                    NextPageCursorId = "68c91d0e-6512-4ccc-bff5-296a42c5e8e6",
                    PrevPageCursorId = "71200aef-5565-48bc-9ed8-1f2d468071ff",
                    PerPage = 687,
                    TransferTypes = new string[]{"transfer", "exchange", "topup", "coupon", "cashback", "payment", "expire", "campaign"},
                    Description = "21XE55hc29pv4sZBooZY5wA4Og2kd",
                    From = "2022-03-27T16:01:40.000000+09:00",
                    To = "2019-06-08T12:36:23.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV212()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerName = "VTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XLYceQxhubY3jVYhbh4RW4SjcPHu2gIp7HlCgxYlFZzBuHZ8tjsh68ScZg3aAMErPcV9o0TcGJkIJgRMahTjY4B83KCbssdnciBK2y",
                    TransactionId = "6093d98f-6ccb-48d5-82a4-97792239cbfd",
                    PrivateMoneyId = "87b097c2-9870-4a8c-be94-d4875faa30e1",
                    IsModified = true,
                    TransactionTypes = new string[]{"cashback", "exchange", "transfer"},
                    NextPageCursorId = "5014853a-b446-4ac8-ae4c-fe7beae7e7f9",
                    PrevPageCursorId = "4abb2ad0-6268-403d-af43-d7f1b47c852a",
                    PerPage = 192,
                    TransferTypes = new string[]{"expire", "coupon", "payment", "campaign", "transfer", "cashback", "exchange", "topup"},
                    Description = "DrThI9ndCARX9iZhUIwUrsQ8Uijo55dyiBxXbKWYhqIQcADAJhWFwASll2hGkEzja1NmQHCUATGGz590dtBhucZ4e0BzAWy80f2MmxJUnd92RrjDmsbpR1t9xme9U0GR2pRvNpULEoTr6H5p2Y5YBaOZdS1seolNILNbVpFGvZ3N4x3uv",
                    From = "2022-02-19T00:18:49.000000+09:00",
                    To = "2024-01-12T14:01:01.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV213()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerId = "30e391c0-3ee2-49f7-b180-9c1a39c9c1b2",
                    CustomerName = "Ii4C82SzJJG4lODNS2Ij7U5b72UTWbjXG",
                    TransactionId = "e7cdd866-0f7a-4925-83ed-b880754a5c5a",
                    PrivateMoneyId = "f00f597d-de32-4c3f-9c0b-191ebc78a176",
                    IsModified = false,
                    TransactionTypes = new string[]{"payment", "cashback"},
                    NextPageCursorId = "55c31543-87f2-429b-977f-707e2e8182f7",
                    PrevPageCursorId = "b0eff541-03b7-47c9-a2eb-e55c4be2b644",
                    PerPage = 622,
                    TransferTypes = new string[]{"expire", "coupon", "topup"},
                    Description = "8tX9JQSHyiFoseHq",
                    From = "2016-04-21T08:34:21.000000+09:00",
                    To = "2015-12-16T15:23:31.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV214()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopName = "K8GIOW0PGU45uzPdd0dJeNNvUC0bqs1hvmd5I8",
                    CustomerId = "6fcaad14-58e5-4b76-9f93-808f89990062",
                    CustomerName = "rAQGpnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4ji",
                    TransactionId = "4e791f5c-6ff4-441f-be3e-09af1d90728b",
                    PrivateMoneyId = "20f23c86-5307-4f93-832e-c827696c53a0",
                    IsModified = false,
                    TransactionTypes = new string[]{"transfer", "payment"},
                    NextPageCursorId = "705f4a3a-c1f5-47ea-bf0b-7a4b6fbc8468",
                    PrevPageCursorId = "5730a63b-110b-441a-a897-967710d4d39c",
                    PerPage = 836,
                    TransferTypes = new string[]{"cashback", "campaign", "coupon", "exchange", "payment"},
                    Description = "v4vlRBRxfHZeKBVf4jVtecQNubIdH",
                    From = "2016-12-05T14:11:16.000000+09:00",
                    To = "2023-07-21T11:04:05.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV215()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopId = "f4d7fcc9-e61e-4d42-908c-740cbfe4fb55",
                    ShopName = "rvpeN86f46tWgyM43AJZ0KTwWOYBSX4EzfsIiIDCSxoowqwobMRj4K8plKuk4zON6lsKCXAkk07Q9YuV27x2ZZwJNPJ0aXH1uRWCYsw6VRBfXAF7xeoT0y6lNlDnKEOyMV89HUL5OwvTmfkSpdcL",
                    CustomerId = "0838460e-a851-4da3-a22b-d37604ba247d",
                    CustomerName = "sJQRiuvWpRkphzn",
                    TransactionId = "fe132474-6d71-4e62-94f2-b132555a6e76",
                    PrivateMoneyId = "6c078882-c0c8-428f-9686-66c64ad77a31",
                    IsModified = true,
                    TransactionTypes = new string[]{"payment", "exchange", "expire", "topup", "transfer", "cashback"},
                    NextPageCursorId = "2dcbd922-4601-4eab-9b2a-98a3e8ef3b1d",
                    PrevPageCursorId = "dc783d0f-901d-4a30-99b7-2d2afefce164",
                    PerPage = 451,
                    TransferTypes = new string[]{"topup", "coupon"},
                    Description = "wkLtzBfAa7kaQm6vULSy1FKdTtu83N0tnRGbdpbMjO",
                    From = "2023-06-18T20:49:11.000000+09:00",
                    To = "2023-05-18T13:01:31.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
