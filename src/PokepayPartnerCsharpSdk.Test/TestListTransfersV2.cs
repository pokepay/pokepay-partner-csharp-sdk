// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransfersV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransfersV20()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2();
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV21()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    To = "2020-05-29T04:19:26.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV22()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    From = "2021-10-01T14:29:27.000000Z",
                    To = "2021-05-18T07:31:38.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV23()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    Description = "G6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yh",
                    From = "2022-12-27T01:27:04.000000Z",
                    To = "2023-07-28T15:04:59.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV24()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransferTypes = new string[]{"topup"},
                    Description = "NPhRgnqYnUlh4JbOrMj5jFwrAdcz57ZOWsDr0Djt9M12BOno1AcjM96oftC7mHhiSDgXKvVy5paxKD2XcOfyMo26iqol80j1t4n3lpnoezOx6Ov6eGwjQCqxdtQnDY4S9N4HhJ5rCsXRcUZY47cpIh03BvqB7CzL",
                    From = "2020-10-10T17:42:36.000000Z",
                    To = "2023-05-16T20:02:33.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV25()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PerPage = 585,
                    TransferTypes = new string[]{"coupon", "campaign", "topup"},
                    Description = "65UlKtMCe12MUV2dxrA2428zEWnFZLX87qtedPzV8NdiYCurcmVOPZzwMWHgQ0VESfspW9b9NBdczTSynCfTiWLEN2pEbq7ZeB8PVJkE9NzaeTptZ5kX9rLpagdWQnEnTlLyubwibc5uG9Y4cn6ApRZ5NX6gFb5nuODlmm9rpn022H3wQmNFzbLFmfFSz1uperYHhU",
                    From = "2020-08-25T21:13:02.000000Z",
                    To = "2021-03-18T22:30:25.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV26()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrevPageCursorId = "7d0920f6-720f-4105-8162-394c7c4d68ba",
                    PerPage = 545,
                    TransferTypes = new string[]{"topup"},
                    Description = "5XpRuu89q3NykiRPYO2oQiAYMcKkXBWEu4RSjxgCW3jFlgob7yobgqdqFleVhpCebdmmx3jJLFYo72YjP5pod5QaLCZTmFLxumOnvrupx16EXCUXyPfCabjEtMliIf7wKoPmNQWU6zl3h0ZGoCe5IIfEbaRlpdhTTQpQoSRT6b0IY83jSy",
                    From = "2020-10-12T14:22:33.000000Z",
                    To = "2022-01-22T16:08:59.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV27()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    NextPageCursorId = "54747b1a-7080-4539-8a90-8280fd0bd943",
                    PrevPageCursorId = "136b2406-c54c-449e-aaab-6471b72a5238",
                    PerPage = 378,
                    TransferTypes = new string[]{"coupon", "transfer", "topup", "payment", "campaign", "exchange", "cashback", "expire"},
                    Description = "oBnLVw5NxHP7CI9Yb5tOQ2qp6BlopujNmJIuVKWvjUjC0u3f2Lo9NqlV6uXM4yE9kd7lV6QKkz6REzoI7cZYW4c0GyNh6EpQVqX4KE4B5KRDxSSppVORQLy6PO73cH",
                    From = "2020-03-09T18:52:48.000000Z",
                    To = "2024-03-17T22:00:40.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV28()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionTypes = new string[]{"exchange"},
                    NextPageCursorId = "cc9cf376-5ab2-4abb-b764-29291e934448",
                    PrevPageCursorId = "44f02745-af2d-49b8-80f2-e5650fe93bdb",
                    PerPage = 617,
                    TransferTypes = new string[]{"exchange", "topup", "coupon", "cashback", "transfer", "expire"},
                    Description = "YS2",
                    From = "2024-02-23T19:18:06.000000Z",
                    To = "2023-10-31T04:25:41.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV29()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    IsModified = false,
                    TransactionTypes = new string[]{"transfer"},
                    NextPageCursorId = "3b526462-ce07-4276-a3d1-e2baddddfa76",
                    PrevPageCursorId = "f7341f83-54bb-4e2f-987c-84d9f0501e6b",
                    PerPage = 66,
                    TransferTypes = new string[]{"topup"},
                    Description = "CWNKDP1enxAKZBD2FhNoF",
                    From = "2021-04-25T16:39:23.000000Z",
                    To = "2024-05-08T13:19:24.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV210()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrivateMoneyId = "13370493-74da-4d2f-8ccb-15c9c7709f16",
                    IsModified = false,
                    TransactionTypes = new string[]{"transfer", "topup", "expire", "exchange"},
                    NextPageCursorId = "947dda8a-d99d-459d-bb85-4d9ea7f687d2",
                    PrevPageCursorId = "86103ec3-e3cb-4678-b8c4-c245d021922f",
                    PerPage = 915,
                    TransferTypes = new string[]{"coupon", "topup", "cashback"},
                    Description = "yz4Mc4BWxPS7UaVHpVi4pZYZOGKLSewvJuaN97ObUNQZ0A0Rwk2Z2omGatDjCcJfOMaGd4kHySUJYrKI48UyLazcdaqg9M9b56VUQzIG7Yr7fsBnFuG56tOVY8vi9Z9lrbTGfh4QbdPS2DfLew9jsvLcXjFRqAsdyU0EjzFGdoCEVoN09yrlyTlHcx",
                    From = "2022-02-15T13:49:31.000000Z",
                    To = "2023-06-20T09:27:12.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV211()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionId = "48edf62e-d67e-41b2-a800-d3646fd5f78d",
                    PrivateMoneyId = "938cec69-ae12-4e4a-afd7-a82fb8d10273",
                    IsModified = true,
                    TransactionTypes = new string[]{"transfer", "payment", "cashback", "expire", "exchange", "topup"},
                    NextPageCursorId = "2f21bc1f-3fa7-448a-a529-5aefbe145b41",
                    PrevPageCursorId = "b6e10ff1-45f6-4967-8667-1e30ca09a488",
                    PerPage = 50,
                    TransferTypes = new string[]{"expire", "transfer"},
                    Description = "RTNwobRsB1baR1aePdc9fGHLcwyelAg5Jr7zEeO7nUDqxXj74j643AIOVakyq8QHWKNric3MBQYWsKtvnxoQJLlo",
                    From = "2023-10-03T06:27:25.000000Z",
                    To = "2021-01-16T09:42:41.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV212()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerName = "4TQVFchkaVLnKXq1JcpZfZUH2UsKCxnRcuSoLNAly4QR5kzfucn7LZFZwh",
                    TransactionId = "ecc0df79-3935-4684-8806-5a2ae4711910",
                    PrivateMoneyId = "aef5cb52-fbc9-464a-8447-fb7f7ff8832f",
                    IsModified = false,
                    TransactionTypes = new string[]{"transfer", "cashback", "payment", "expire", "topup", "exchange"},
                    NextPageCursorId = "ff6e7971-b082-4855-b394-738cd2141f4c",
                    PrevPageCursorId = "717c1139-762b-448b-9b1b-4c6698c28df2",
                    PerPage = 901,
                    TransferTypes = new string[]{"topup", "exchange", "expire", "payment", "campaign"},
                    Description = "gz3O9wlyQ0TWfR4Gx21zM7WIQGDsPsJyAShBlCJPjtVj6RA58jW2j8noWbhryHKQAP2bBeZkmIh2UeN7Z047tEp9MnaMKkPTTOh4KlFXKgtixsqVTYrrSHZ1a0tz4EzkuhUCHWp85qyAYWUJWst1yI",
                    From = "2022-07-08T09:10:52.000000Z",
                    To = "2020-10-17T18:22:36.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV213()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerId = "f54cf9ab-062a-4148-a0cf-c1f46a81e630",
                    CustomerName = "XiM6Qkur8SbZd3wcuCesxkTgeUlIAlQvL5t780R8L5VrLxzRQlVu0ZdkmHWdPUiVDqeHPcQVtlOjSB31Mxq8SXpxSHJRZi52y7KvoeklIR5ig74Fkbtbb0SlK2KbT8BQ8WxGHxi6f0cuW1ZhxLtC",
                    TransactionId = "a804d396-c0bd-4bc8-83fb-80edddd57010",
                    PrivateMoneyId = "b47058a1-f720-4b83-b700-1b83dcc4cd16",
                    IsModified = false,
                    TransactionTypes = new string[]{"payment", "cashback", "exchange"},
                    NextPageCursorId = "7c7d68a8-376d-4437-8682-f62044e6a567",
                    PrevPageCursorId = "c86ea739-3b9b-4192-905c-f0b8ef7b1459",
                    PerPage = 1000,
                    TransferTypes = new string[]{"expire", "transfer", "coupon"},
                    Description = "GLQpNx8ciNrKweGJtnGqdSp90ci6D0iGddOVzLT6tirwJLurByrAGwszVwlQAuTXTWtKg2YB5YxVquVYsbDyysRisRQ9ectqoj4yKOsEPCrpQPvSjUDltH57ysDpO4lTbJ9dqwKn5NSHI",
                    From = "2023-11-27T07:31:22.000000Z",
                    To = "2021-02-11T01:41:00.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV214()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopName = "mbc5qbOnYCYxA4AjI47p6qtIsaCpt80GzH1FRWe6zLcwMHaeJGFXqwAY75stQD6SAh41fZii84vybd1Jsf0jR3rzbwtxyn2FAh1zUedGEpNztrZH4AytTHxVvHVgjPvTnTRbAGxJFBzSBdN9rH7Ml90EeuZgaP20pyyEjfyZnRCBHpzVqBZqNRFU",
                    CustomerId = "b5dcd9ef-b402-4012-98b9-1f028b885ec2",
                    CustomerName = "hqQxq9FR8VF2gH7EAnlFEgMm",
                    TransactionId = "7f98df29-acf9-48e9-b8ea-079a4bfcc7ed",
                    PrivateMoneyId = "5aaff583-e5be-4ac2-9605-55604b33fb24",
                    IsModified = false,
                    TransactionTypes = new string[]{"topup"},
                    NextPageCursorId = "2f5b5517-4fe1-483a-8c2c-a7766d007d72",
                    PrevPageCursorId = "631887cb-cc5c-496f-a140-1fd26ecbd8f9",
                    PerPage = 925,
                    TransferTypes = new string[]{"cashback", "exchange", "topup", "transfer", "payment", "campaign", "coupon"},
                    Description = "VT4AzeoZEOYuu1RyqlWw",
                    From = "2023-01-29T21:07:08.000000Z",
                    To = "2020-02-27T08:03:08.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV215()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopId = "2b649ca6-2385-42c3-9b1d-664eecd9a056",
                    ShopName = "zTDDCUN00F2Vhn3XqmCSMDzeEDKcNHBIUBy90lbfxByyLgJllatyS0exoVZwnX2Y3MjJVkSKFu78PD8Nsi0ghqRiHIikuwLQAi0Yor",
                    CustomerId = "cf3440c4-92c8-440f-9e9c-4593e20fa8a0",
                    CustomerName = "LBFs4pFpuxUcIrb43g0nK7tb3btHVGJJQejQb3sdWfi2Z2Wvmx0ZqLEwxwj8U4A4KZBQdvuQb5QYDYt7CyctlhtAXqf6uerXtmVp3iPqRhb6DnnO4ty38IkhtTfaQWLqhFbA6TsT4rGSzhCtzrrQIFeK35Z3EF7SWnLL5qkYPGTd",
                    TransactionId = "cd1d9809-2938-4389-b77e-12c91052581a",
                    PrivateMoneyId = "f80cd24c-87d7-4cb6-953d-cb6272f31cea",
                    IsModified = false,
                    TransactionTypes = new string[]{"expire", "payment", "cashback", "topup", "exchange", "transfer"},
                    NextPageCursorId = "f2b6befd-7cee-4b44-94fe-be92233983a3",
                    PrevPageCursorId = "09c8bc56-c05f-4b6f-9fb6-e6eb3beaef77",
                    PerPage = 776,
                    TransferTypes = new string[]{"coupon"},
                    Description = "E996vZBp0zzwPN5DIhcy9tg03Xeu2UN5sKl9fYJxmaO84WKiqpzyFwc0O5qDH6cAdyVZn4o55A5DSTN7FZ8Y8t8MIK7GdyM50XmxAy3ATlXa99m3Ela8zcR94JgHtiXrfi45gdORj3Jla3Pfb8OgNhhqnfBQjVsClPPd45bUBovESo5O7DwwlNZPFf6xG0Y",
                    From = "2024-04-25T05:22:52.000000Z",
                    To = "2023-04-25T22:13:54.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
