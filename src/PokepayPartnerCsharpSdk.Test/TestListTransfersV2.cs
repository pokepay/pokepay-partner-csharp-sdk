// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransfersV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransfersV20()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2();
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV21()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    To = "2020-05-25T13:07:36.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV22()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    From = "2020-08-20T09:25:35.000000+09:00",
                    To = "2021-11-11T23:48:59.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV23()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    Description = "Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cUJMuQ1t83oitBAmKCKeNp7Z6KeHafoOKYuUs7zf9dIsiva1vYlz4sIXfB3ep9eHnNy54z",
                    From = "2021-01-13T16:41:29.000000+09:00",
                    To = "2024-03-04T19:11:23.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV24()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransferTypes = new string[]{"expire", "exchange", "campaign"},
                    Description = "Y1WGlubcf8poH65gFI1eD4xOb3KkBBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9",
                    From = "2021-06-03T11:42:59.000000+09:00",
                    To = "2023-12-09T10:34:57.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV25()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PerPage = 830,
                    TransferTypes = new string[]{"expire", "transfer"},
                    Description = "T7eIQXHJd8SnpNPnO39WNWvjXlHUhCIHkbLQ7KL6y3Sdoxdn1tpYM1z",
                    From = "2020-06-26T14:29:17.000000+09:00",
                    To = "2022-06-25T21:03:49.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV26()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrevPageCursorId = "6cd09658-5492-47cd-8ba5-ba9480cb492e",
                    PerPage = 371,
                    TransferTypes = new string[]{"campaign", "cashback"},
                    Description = "bQCW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc",
                    From = "2020-01-31T02:17:35.000000+09:00",
                    To = "2022-05-01T21:46:29.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV27()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    NextPageCursorId = "2e577d6b-f2d2-4d26-8c70-078b62ffddbf",
                    PrevPageCursorId = "f11539b3-6a89-45ff-971e-93a7fa84a39d",
                    PerPage = 525,
                    TransferTypes = new string[]{"cashback"},
                    Description = "23XKfAMBShU6I6qbRRo",
                    From = "2020-07-02T18:27:35.000000+09:00",
                    To = "2022-09-02T19:49:04.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV28()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionTypes = new string[]{"transfer", "cashback", "expire"},
                    NextPageCursorId = "bfc1e1ae-1762-4e2d-bc49-dd469907fdf0",
                    PrevPageCursorId = "b072e0ac-63a5-491d-8460-2ccc415e2e5f",
                    PerPage = 161,
                    TransferTypes = new string[]{"payment", "transfer", "expire", "cashback", "topup"},
                    Description = "9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5v",
                    From = "2022-12-31T06:28:41.000000+09:00",
                    To = "2022-05-02T14:33:54.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV29()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    IsModified = false,
                    TransactionTypes = new string[]{"cashback", "exchange", "transfer", "expire", "topup"},
                    NextPageCursorId = "632475d6-87a9-4958-92b8-1129fc135fc0",
                    PrevPageCursorId = "be9f4428-3cc8-42d3-9f7f-e034eb37be4a",
                    PerPage = 798,
                    TransferTypes = new string[]{"coupon"},
                    Description = "BXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK",
                    From = "2023-06-03T13:40:03.000000+09:00",
                    To = "2020-07-30T14:16:30.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV210()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrivateMoneyId = "fb2542f3-b02c-486c-bb51-03a1f63e2e08",
                    IsModified = false,
                    TransactionTypes = new string[]{"transfer", "topup", "exchange", "cashback"},
                    NextPageCursorId = "115842e3-11e1-430b-801e-adf794c7ff31",
                    PrevPageCursorId = "cc929af0-d47a-4682-b976-cd894bc7c084",
                    PerPage = 985,
                    TransferTypes = new string[]{"exchange", "payment", "transfer", "campaign", "coupon", "topup", "cashback", "expire"},
                    Description = "D9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZXmsoGSwaJTi7OUK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2R",
                    From = "2022-08-17T12:19:08.000000+09:00",
                    To = "2021-11-04T10:28:49.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV211()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionId = "f3d53414-b9b1-4642-8d45-e672258d5f36",
                    PrivateMoneyId = "89cf97a2-7ee0-47a6-bdb2-5ba0b7f396e7",
                    IsModified = false,
                    TransactionTypes = new string[]{"cashback", "topup", "transfer", "expire", "payment", "exchange"},
                    NextPageCursorId = "d4585e6f-2679-40fe-a7e6-991639689ef0",
                    PrevPageCursorId = "a69cf241-e45c-4b20-81be-e7ce02f06c18",
                    PerPage = 955,
                    TransferTypes = new string[]{"coupon", "topup", "expire", "cashback", "exchange", "transfer", "campaign"},
                    Description = "9aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlL",
                    From = "2023-08-28T20:01:40.000000+09:00",
                    To = "2021-08-23T12:21:28.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV212()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerName = "NlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCSh",
                    TransactionId = "9599ed6f-f38f-40c5-b81c-107b104d7b23",
                    PrivateMoneyId = "276d3601-5af8-4a20-9844-9fbaa3f8468c",
                    IsModified = true,
                    TransactionTypes = new string[]{"expire"},
                    NextPageCursorId = "a266bd40-9d8a-454e-941e-c5ed9ad76cf4",
                    PrevPageCursorId = "3c24753d-b578-4372-a06f-62cbe1ec8109",
                    PerPage = 87,
                    TransferTypes = new string[]{"coupon", "campaign", "expire", "cashback", "transfer", "topup", "payment", "exchange"},
                    Description = "Du4lw8ZxL5ooBCUmbexHlOYPdRDRXfcFEKebPAHiatKRmL7K8IMJIBW1vB1RC8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULft",
                    From = "2024-01-12T07:15:23.000000+09:00",
                    To = "2020-02-05T16:57:10.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV213()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerId = "2d61edb3-954b-4e7f-8c94-6ee9b8a48e27",
                    CustomerName = "Om0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz",
                    TransactionId = "52f64232-8892-41ec-98b0-23a7038f90fd",
                    PrivateMoneyId = "7de0cad7-35ac-4ffd-8694-c3120c82b9e7",
                    IsModified = false,
                    TransactionTypes = new string[]{"expire", "topup"},
                    NextPageCursorId = "405ad648-ea88-468d-9f7c-40a88fe6f848",
                    PrevPageCursorId = "de508515-6614-47ad-8f3e-7e2a67ed0d9c",
                    PerPage = 279,
                    TransferTypes = new string[]{"cashback", "transfer", "topup"},
                    Description = "nglJCcSZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkEwHBWOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL8T5msTmgqj81RXJ34GFY2SrpQfm9Le0rSP",
                    From = "2022-11-18T14:54:20.000000+09:00",
                    To = "2023-06-04T07:27:19.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV214()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopName = "lrPa8fbLwdjVaS9Jydp",
                    CustomerId = "365c05c8-8127-4b71-9892-49eae16f7b3d",
                    CustomerName = "qW7D3uCGC",
                    TransactionId = "70c3f409-cd64-43a0-9ac5-ea24d274b711",
                    PrivateMoneyId = "8bbbee1c-a898-4233-a9a9-975aeea3b537",
                    IsModified = false,
                    TransactionTypes = new string[]{"payment", "cashback", "transfer", "expire", "topup"},
                    NextPageCursorId = "046a3fd3-a284-4a3f-b5a9-cf7f19813612",
                    PrevPageCursorId = "2c2ea664-75d0-436c-b44a-cf845e697a49",
                    PerPage = 829,
                    TransferTypes = new string[]{"exchange", "topup", "expire", "transfer", "cashback", "campaign", "payment"},
                    Description = "JxcGB9NLriuIsMTY",
                    From = "2020-04-10T18:21:16.000000+09:00",
                    To = "2023-10-12T09:50:49.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV215()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopId = "847ba643-e955-4f6f-8720-9fcf405b9eac",
                    ShopName = "Ea9YZaUN",
                    CustomerId = "8b441dd0-d204-4f00-944d-d2e1992bcf8b",
                    CustomerName = "gDSPeHLGCGYvgqbqCIdoPTyGfj",
                    TransactionId = "3e32e683-d6c1-40ec-8f89-63f6fdc03025",
                    PrivateMoneyId = "d7c87185-31e2-46dc-9000-92a7b4114e60",
                    IsModified = false,
                    TransactionTypes = new string[]{"transfer", "exchange"},
                    NextPageCursorId = "dc46aacc-9db3-476d-9d7b-efd41f87438f",
                    PrevPageCursorId = "f6f8bd66-27ca-4e68-94fb-d06a09c9e744",
                    PerPage = 884,
                    TransferTypes = new string[]{"cashback", "exchange", "transfer", "topup", "coupon", "payment", "campaign", "expire"},
                    Description = "UGvnht1UycVdhwjq",
                    From = "2022-09-09T16:00:30.000000+09:00",
                    To = "2020-12-15T07:42:56.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
