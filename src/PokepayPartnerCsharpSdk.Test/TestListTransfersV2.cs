// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransfersV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransfersV20()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2();
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV21()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    To = "2023-05-03T19:18:45.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV22()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    From = "2020-06-21T14:46:24.000000Z",
                    To = "2021-11-24T11:20:02.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV23()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    Description = "2Ii4C82SzJJG4lODNS2Ij7U5b72UTWbjXGfzCmZ2vkYmrCrWwA7IkDmk9acr8tX9JQSHyiFoseHqYyK8GIOW0PGU45uzPdd0dJeNNvUC0bqs1hvmd5I8evbrAQGpnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3zum",
                    From = "2021-06-17T22:57:58.000000Z",
                    To = "2020-05-02T02:10:38.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV24()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransferTypes = new string[]{"expire", "cashback", "campaign", "coupon", "exchange", "topup", "transfer", "payment"},
                    Description = "mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhwCFGwiyv4vlRBRxfHZeKBVf4jVtecQNubIdHetIBPUrvpeN86f46tWgyM43AJZ0KTwWOYBSX4EzfsIiIDCSxoowq",
                    From = "2020-06-14T10:18:31.000000Z",
                    To = "2022-08-27T21:00:31.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV25()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PerPage = 867,
                    TransferTypes = new string[]{"payment", "expire", "exchange"},
                    Description = "K8plKuk4zON6lsKCXAkk07Q9YuV27x2ZZwJNPJ0aXH1uRWCYsw6VRBfXAF7xeoT0y6lNlDnKEOyMV89HUL5OwvTmfkSpdcLQvsJQRiuvWpRkphzntqbTr2vHF1iF0Y7dBxe8hiTzwkLtzBfAa7kaQm6vULSy1FKdTtu83N0tnRGbdpbMjOs6N",
                    From = "2022-09-16T09:16:26.000000Z",
                    To = "2023-08-15T02:45:41.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV26()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrevPageCursorId = "3e379615-3622-40e1-a9ab-5ac4da3f4b3a",
                    PerPage = 157,
                    TransferTypes = new string[]{"coupon", "transfer"},
                    Description = "7BQ6AmswdAM3IJrwVbs9pMxfMCthiv1a2EEHFmQw4OmJsXraAGliEBPmHrH76ocsr7yZptwOIMGRxZLktLdV7uiWarFr5GP0wp4l70ZsGyPlyZYRURgUMf0P5ozHDn0iOeoWIRRMyR",
                    From = "2021-04-05T06:39:38.000000Z",
                    To = "2020-02-17T22:22:19.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV27()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    NextPageCursorId = "8cb21b81-e7aa-40a7-91eb-df802a5c5881",
                    PrevPageCursorId = "d8c043e8-4eb8-465e-a11b-8dda7a8dfa23",
                    PerPage = 299,
                    TransferTypes = new string[]{"exchange", "cashback"},
                    Description = "OPKR0rUW9UTcnGDBsZuPfABdiNvfS9Anufij6THnocikBJOkD3FvwnaI0WeOGlWmmegc1KGhe3TxnuKac7CS1DK4Gnrr3oBLGMXHrz9mqfRhRmUp8pN9pjtBKEK15Dd3XxCT0Zmu6u",
                    From = "2021-06-03T11:54:54.000000Z",
                    To = "2023-02-10T00:37:35.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV28()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionTypes = new string[]{"topup", "payment", "expire", "cashback", "transfer", "exchange"},
                    NextPageCursorId = "5bec4cee-6f81-4bde-a5dc-47dd217737ce",
                    PrevPageCursorId = "bb855f61-1a74-4e47-a8de-6dbfb8c6c606",
                    PerPage = 637,
                    TransferTypes = new string[]{"expire", "campaign", "payment", "topup", "exchange", "transfer", "coupon"},
                    Description = "SeZXyMS6WkNJ2GvSwQUcruYP4H5cCw5ExNqh41OXXFwVmaHYw6oEFbK8",
                    From = "2021-11-27T05:19:55.000000Z",
                    To = "2023-11-24T11:05:02.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV29()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    IsModified = true,
                    TransactionTypes = new string[]{"payment", "expire"},
                    NextPageCursorId = "3405f240-8da3-4c0a-aac9-83e9c7fb400a",
                    PrevPageCursorId = "ac2d57bd-0f35-4b3d-b1d9-31545b075671",
                    PerPage = 409,
                    TransferTypes = new string[]{"exchange", "cashback", "transfer"},
                    Description = "ftsBTkZDKCnQigIBcgyeH",
                    From = "2020-05-21T18:04:32.000000Z",
                    To = "2021-12-18T22:38:42.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV210()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrivateMoneyId = "c5f8a9aa-5e59-4142-a71f-ff58bbe5baa7",
                    IsModified = false,
                    TransactionTypes = new string[]{"topup", "exchange", "payment", "expire", "cashback"},
                    NextPageCursorId = "746118e1-b352-4716-8448-99896c751b33",
                    PrevPageCursorId = "cd354978-16e1-4b35-9d5d-d2da81e9c794",
                    PerPage = 473,
                    TransferTypes = new string[]{"campaign", "payment", "cashback", "expire", "transfer"},
                    Description = "kmDiQZVmfdCV9wGJUROgp1VTN",
                    From = "2022-09-01T17:25:32.000000Z",
                    To = "2023-05-17T17:53:40.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV211()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionId = "4d00454b-83dd-473e-b35e-378fe7e694e2",
                    PrivateMoneyId = "e4e51c6b-efb2-4ff7-b68c-d33dc6558cda",
                    IsModified = false,
                    TransactionTypes = new string[]{"cashback", "exchange", "payment", "topup", "transfer"},
                    NextPageCursorId = "18f7768c-ad87-4008-bc06-b1dedd718fa9",
                    PrevPageCursorId = "535854c3-8a80-4f5a-b775-f61caba12f7d",
                    PerPage = 293,
                    TransferTypes = new string[]{"campaign", "topup", "expire"},
                    Description = "vag9C19xRl1IlJpGXqlhd5uwOg53j3Qic0iyKLnZxaZi9iCa2kj9IDD4FLU53H4cTCafuN856J50SdiADG37eydGENMPuSUGCPNHip0Y3dBW",
                    From = "2022-04-03T13:05:47.000000Z",
                    To = "2024-04-05T13:30:11.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV212()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerName = "dXe1sIjLSVztCspdpKcDGU85LATApzQ2dQG1XtK0UfX1fzmKZw4jAX5TdVMZA3FsBWHTaR7q8iHovbTWoPNbCUX3WmvU0lnYW7MWulxJqejEoXiemEzy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2w",
                    TransactionId = "269b4e76-5740-4702-9e11-cdb3b42129b6",
                    PrivateMoneyId = "6f5b11d9-0a3a-4a2c-9c75-0945346f70b4",
                    IsModified = false,
                    TransactionTypes = new string[]{"transfer"},
                    NextPageCursorId = "3c8b65bf-35b0-472f-8969-cc83cf27bba4",
                    PrevPageCursorId = "fc4fad85-a10e-48d2-b4dc-9f34aaaa3814",
                    PerPage = 202,
                    TransferTypes = new string[]{"campaign", "expire", "topup", "payment", "transfer", "exchange", "coupon", "cashback"},
                    Description = "OrRKq3qxtTGifN6KrraD5uojwDmQdLNOKHIlDiaOh78QfhNbZ3YfGhlbqaOElvScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnAdDrY96Gn0OAQ9xSN0zfKx7ivixiVqjgvBNcsQLQxAtJmVTcXW",
                    From = "2023-05-07T02:16:20.000000Z",
                    To = "2023-10-08T23:00:15.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV213()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerId = "5113ba87-694b-49fd-957a-5381174e078a",
                    CustomerName = "kNd35gyuBKlwozbM8BIp6WWFtoNM3mKKWyblmmAHRSYCV0EDw10SY48ZoA8oj9alrEKYDjBWPKCwbirzvScUvjsqVkcSInvOjFPIL9qlVMwg0ANEHCj5eM805Swtsg2NkJBDvuxWoqdLq3QmHRbZpwbPRidVG7B6hajG",
                    TransactionId = "bd3e233c-75ca-4ef2-bb86-0229952c428f",
                    PrivateMoneyId = "175ea31e-fa9b-4fc3-80ca-f63e9e4dc526",
                    IsModified = true,
                    TransactionTypes = new string[]{"topup", "expire", "payment"},
                    NextPageCursorId = "4a83ca5b-c230-442d-8e9e-62d90c18e6d5",
                    PrevPageCursorId = "a1005a57-c2de-4a2b-96ad-55a354f344df",
                    PerPage = 441,
                    TransferTypes = new string[]{"expire", "exchange", "payment", "coupon", "topup", "transfer", "cashback"},
                    Description = "uJPCjlaztijN3vebjT869RjYRPCqvnZ1YzdrhGH7XKNoGDpqqjYUa42NN7jWbTA8sT9CjYdhYyR9ZtWhMAKSZHQ2Tjahc0hASAcEibjku1fdQetgL0O7DlAFrkXVihIdQWu7J4NYirXryPP6taqbm6hsnA9hELkacVB4dzDqQ",
                    From = "2024-02-18T10:47:40.000000Z",
                    To = "2023-12-04T20:12:21.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV214()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopName = "bTy",
                    CustomerId = "e0991056-3b14-4b90-89e7-2d09b188aed6",
                    CustomerName = "7fIz1xemnrDx9P7HPwLX5lwWZKuWWf4n5wNPq2rjN28QfQLnQ9Qr2gs4rAyEVt2ws7WkJzpgGUX4mtxob",
                    TransactionId = "71a7105a-a739-4725-9a43-da3f5bacfdf0",
                    PrivateMoneyId = "c0c4ac4e-81ca-4a47-9adc-a8a4fb07eb8c",
                    IsModified = false,
                    TransactionTypes = new string[]{"payment"},
                    NextPageCursorId = "a412eaab-aa22-4936-8c9e-6dfa9b256054",
                    PrevPageCursorId = "adaed457-6903-43be-895d-2ee2d3616293",
                    PerPage = 101,
                    TransferTypes = new string[]{"topup", "transfer"},
                    Description = "afdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGx",
                    From = "2022-11-25T05:47:02.000000Z",
                    To = "2024-03-14T01:51:23.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV215()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopId = "0485304a-f9ac-4400-8f2f-8d0eceedec3d",
                    ShopName = "NTeRlFM4Xw2YneFRtau24yc1kusN7qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFwrAdcz57ZOWsDr0Djt9M12BOno1AcjM96oftC7mHhiSDgXKvVy5paxKD2XcOfyMo26iqol80j1t4n3lpnoezOx6Ov6eGwjQCqxdtQnDY4S9N4HhJ5rCsXRcUZY47cpIh03BvqB7CzLjYHoO28zEE65UlKtMCe12",
                    CustomerId = "c668b0dc-584d-45de-a899-5a0cb7d2aaa1",
                    CustomerName = "V2dxrA2428zEWnFZLX87qtedPzV8NdiYCurcmVOPZzwMWHgQ0VESfspW9b9NBdczTSynCfTiWLEN2pEbq7ZeB8PVJkE9NzaeTptZ5kX9rLpagdWQnEnTlLyubwibc5uG9Y4cn6ApRZ5NX6gFb5nuODlmm9rpn022H3wQmNFzbLFmfFSz1uperYHhU5vbLxW8Yq15XpRuu89q3NykiRPYO2",
                    TransactionId = "88fb4def-3727-4351-8f5c-f1fb364f8b23",
                    PrivateMoneyId = "1c2353a2-3e69-407d-8159-c0cd26e472e3",
                    IsModified = false,
                    TransactionTypes = new string[]{"transfer", "expire", "payment"},
                    NextPageCursorId = "697af85b-f88e-4bd7-8917-667b37d78588",
                    PrevPageCursorId = "5de39281-fe45-489a-aef5-e2085672a299",
                    PerPage = 681,
                    TransferTypes = new string[]{"coupon"},
                    Description = "CW3jFlgob7yobgqdqF",
                    From = "2021-02-08T17:48:13.000000Z",
                    To = "2022-07-25T16:35:49.000000Z",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
