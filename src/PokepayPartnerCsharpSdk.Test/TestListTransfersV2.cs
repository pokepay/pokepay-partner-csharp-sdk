// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransfersV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransfersV20()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2();
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV21()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    To = "2023-01-21T02:43:15.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV22()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    From = "2020-11-24T10:50:40.000000+09:00",
                    To = "2021-03-25T13:53:02.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV23()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    Description = "ycftdWzW1GsmMsJ48Euq3OAFGkB5qtZRfHiBtv7fHpUujKbMrVn4rpyYSviFE1yoZ17haeC8THWXctspTvvUMjdm5mAOV005ED",
                    From = "2020-06-04T02:31:12.000000+09:00",
                    To = "2024-01-14T22:22:39.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV24()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransferTypes = new string[]{"campaign", "expire", "payment", "cashback", "topup", "coupon", "exchange", "transfer"},
                    Description = "w16wuVhBvG3x6SK94QjoP5MwIOQ9dZlKPLQpYHGx1mWjX8nYnIK8AMvJYv1eTOkJMyLJe8FI8rh0wIq0CWv4riPxux1nhzEa8qovfiywoPTpnEyn4wpZ8lQzz8ArtBBkhRs2o8oOc5m0vuVPPZkeAhXseZk58lFy7X2OBjCXpjQSjPPPMNusK6aF24z1",
                    From = "2020-07-06T04:31:35.000000+09:00",
                    To = "2022-03-23T02:32:02.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV25()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PerPage = 892,
                    TransferTypes = new string[]{"transfer"},
                    Description = "5tahMRBIJJjZhpQ3PXZkYN8pp4DHvpvYlQ1WRzZfpxT3v2xPzIbm7WFUtvGLXVbpWVe1yCxSnQ0uFf6cR0w3tRHhIqX1hdnMzZi5C8w4jIzwX8gdiF47b3EI8j629gXop4aLud2r4vaogsGASsoKohsGsuPd66k21AvtwuQAiFhH8JpriZX6KgRl619ZqslHZ4tLDRii",
                    From = "2022-10-20T12:19:52.000000+09:00",
                    To = "2022-06-01T01:54:59.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV26()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrevPageCursorId = "c34f0abe-b23b-4d52-8952-0ea54d22eb98",
                    PerPage = 871,
                    TransferTypes = new string[]{"payment"},
                    Description = "KKb1HKhjVHTB6lV3MHl4hojYt7R4wD4jZ4bBPag2O5pK",
                    From = "2021-10-04T23:55:51.000000+09:00",
                    To = "2022-08-04T10:27:39.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV27()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    NextPageCursorId = "05722184-5bd2-4b19-a20a-cad8c93e0d33",
                    PrevPageCursorId = "c25b4c87-1ff8-4c46-afdb-07965d9ac779",
                    PerPage = 772,
                    TransferTypes = new string[]{"transfer", "campaign", "payment", "coupon"},
                    Description = "whBygKASKswHXJn3oKf8tqRXyGm1q4WwNNr84DdMP0FwkPTicmlIzWpSrxYN3r6b4hbtPL0CsFTQWTCFGfjUBmNokbDA8DWk2bPTEunh5dxmEQ47g6O96RUYsdVCAYcfe4X0fXLhIv",
                    From = "2020-11-24T20:25:47.000000+09:00",
                    To = "2022-03-21T12:26:05.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV28()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionTypes = new string[]{"cashback"},
                    NextPageCursorId = "2da50215-1e20-48c9-8ead-73bf6de5c2fa",
                    PrevPageCursorId = "6d30a782-3492-4271-830a-c8f105184fbb",
                    PerPage = 717,
                    TransferTypes = new string[]{"transfer", "topup", "payment", "cashback"},
                    Description = "GjEFOM",
                    From = "2022-05-14T01:10:18.000000+09:00",
                    To = "2020-07-29T10:11:51.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV29()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    IsModified = false,
                    TransactionTypes = new string[]{"transfer", "topup", "payment"},
                    NextPageCursorId = "be7e9151-1c41-4aa8-8398-3399d2f20fc9",
                    PrevPageCursorId = "ac2a63ae-c05d-4ac1-b475-91a73c4455bc",
                    PerPage = 435,
                    TransferTypes = new string[]{"exchange", "topup", "cashback"},
                    Description = "NhPozquqy1WeKczlYaTyK10u2GWOqt2t2BvsMS8j4u6opTJpWUtEXljJq9Y7klfGithSUbwunEt68PT914paFvnu4UIfxlZh9u2SmDJ7DwHBdJomaHnuDgndxUTFUWO5Buhz",
                    From = "2023-04-18T00:05:44.000000+09:00",
                    To = "2023-04-23T21:25:18.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV210()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrivateMoneyId = "2ab1a9d7-e4d6-4272-b3c1-2b16ca6a994a",
                    IsModified = true,
                    TransactionTypes = new string[]{"expire", "payment", "transfer", "cashback"},
                    NextPageCursorId = "b66626d3-f131-41c2-aa15-ebb37fc4aba3",
                    PrevPageCursorId = "3378b7a0-c3b8-4c08-bc61-99f2f1aeb492",
                    PerPage = 96,
                    TransferTypes = new string[]{"exchange", "expire", "campaign", "transfer", "cashback"},
                    Description = "xz7hGR5pj8SUsRoHvMqgoNXZ2QPidvFYHWPGaOxxx44vJc9lQOeTEEUP2r5zerDgsDfJWPV7O5mCyARMvjy5SSmLAOEAcczhINZTeXpzIauTy542CjMxsTIAVAgxd",
                    From = "2021-10-12T19:19:09.000000+09:00",
                    To = "2020-04-19T07:35:41.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV211()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionId = "987bd77b-fa53-4cee-9f83-f95607fa34c9",
                    PrivateMoneyId = "841be0b1-9d3f-4bf0-8ba7-6cfa73eaca71",
                    IsModified = true,
                    TransactionTypes = new string[]{"topup", "cashback", "transfer", "expire", "payment", "exchange"},
                    NextPageCursorId = "53370029-b457-49f6-9e97-89c31a78b7ec",
                    PrevPageCursorId = "9d027b4f-906c-42af-9fde-611419963ae4",
                    PerPage = 166,
                    TransferTypes = new string[]{"exchange", "payment"},
                    Description = "OZYoTJ7iXHmSrE",
                    From = "2023-05-07T23:04:24.000000+09:00",
                    To = "2022-03-11T05:07:46.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV212()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerName = "VrgtBcbJ2WDX8BvL5u6OalCEeRLzyEtJM",
                    TransactionId = "f1faa057-42d3-45b3-96ba-e08228eb4793",
                    PrivateMoneyId = "d45b6f3c-397d-4c4d-8010-57624a7533ce",
                    IsModified = true,
                    TransactionTypes = new string[]{"cashback", "transfer", "topup"},
                    NextPageCursorId = "8f6d0fed-4c2e-4de7-ad17-1ce0a046049f",
                    PrevPageCursorId = "d0d67372-257e-4792-9c77-9cc13a185964",
                    PerPage = 638,
                    TransferTypes = new string[]{"transfer", "coupon", "campaign"},
                    Description = "rUPBmu2MB3SC0yg0Kfp9kAz",
                    From = "2021-08-15T19:38:39.000000+09:00",
                    To = "2021-06-17T00:17:39.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV213()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerId = "d969a4b9-3452-46c8-83e1-4a1f4340e629",
                    CustomerName = "kUNLmiMogZmW8RWo71z26kHY3D4jQmBpAKJ3X4CkdumZdeUi4iwI7Cpc9yyPn4PJWMMNKHiJTrfx8tj4VGXjPW4WNQXQp61NH16IDGdnu6pdY9LgR4uUMljGin",
                    TransactionId = "ed99c41e-b2a9-43f2-b1f5-f30b3efa9c3f",
                    PrivateMoneyId = "4fd4d6ca-25c2-49e3-bda1-55f28f81ebf4",
                    IsModified = false,
                    TransactionTypes = new string[]{"payment"},
                    NextPageCursorId = "89466257-0c68-4c57-8f90-7ef1efcf7327",
                    PrevPageCursorId = "f2ee4068-6dcf-4976-a5c2-271fa4045a7c",
                    PerPage = 284,
                    TransferTypes = new string[]{"expire", "coupon", "topup", "payment", "transfer"},
                    Description = "wqnUtOf97JMfinNcnjZVfrBsTe0m4dUFln7ZU9rDpHxNEyjj8g5Nsw9xaqTtgHNJCfnQpG81qWnrT7w5DsewKmW1sIHcCi05IEfG8VVZ54OM7naZakCmvnD8c6wdr1ekE8pjmz3jNIy5mPfD69pUCqJUKBWPPPYUQgGQipQUgkirAlNyNpewGirxEqnk",
                    From = "2020-09-17T11:12:59.000000+09:00",
                    To = "2023-07-31T03:15:43.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV214()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopName = "7TQ33Ax2WIxBlqd1Ga8B8mqu7lEofxIL95vLKM6mO2HFC7sJi7By9JwLT5iYylofYbF87jI6Fq4IkHxGkh0ROrtGG2ElAB8iRW9Te3oNYHZgeZkwP0zxBnRdfFK5BLR7NbRi97Ut1HcGw7MOLP5IfQ7R5eBKvg9MKjubQXXcajcSTbfBjxXxJ2AyjSpbgJllIkDExjuZO2P",
                    CustomerId = "902b57c9-3da5-455c-ab8e-5b5edf8c4b87",
                    CustomerName = "Qg5j6vsjv30U",
                    TransactionId = "09c950ba-5798-4540-850e-f7f46ea44cce",
                    PrivateMoneyId = "7841d409-1444-4973-b233-6a2728477be2",
                    IsModified = false,
                    TransactionTypes = new string[]{"transfer"},
                    NextPageCursorId = "193eb383-dae3-4c29-be5c-cd777e599539",
                    PrevPageCursorId = "1199dfdb-b731-4caa-8115-4cf7ba508202",
                    PerPage = 417,
                    TransferTypes = new string[]{"cashback", "transfer", "expire", "campaign"},
                    Description = "1yUQYwSksKLbtvGEaezUrNce4EP",
                    From = "2023-12-07T05:05:24.000000+09:00",
                    To = "2021-10-19T13:04:59.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV215()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopId = "6c3c5866-2fbd-4df5-a74f-16dda6d1d748",
                    ShopName = "D6smwcT8Tz6pzCAEFJwQodSpPfXfPVHoUCMrGzEtveW3BTANXlkhB0rMdBt5OMlRoJxZypzf8Ru6qKSBZG4CJ4W5AdMeZXtAYUaSiuHAGMcNHbUVFKFHrE6cJGolBRmrCLVGVqwXsuwgigj8ncWsyl2aZMz3xtftLWbk8EK49tv3w6JiVeb616gB",
                    CustomerId = "31d6f07c-84c0-477b-819f-d4200ae0442f",
                    CustomerName = "73bKa44pDoHHcfmJk5RZgGTZwg8WiizwasVia0MFsBzWqAKIDF6lERratLKjXXxvm3iPmconyjOonfYovGEkrHNl0G5UOfcJ0VsxiJniibkBmAJxFjaWZUKUq5yIGhRMokBqctbK3d7nmlw1qGMDESMuVtMBVFpTNDsrFcbozvMC23ojdBde5gXJlM3M9WCLXzP5MGG7Hx18ebJakVGOVm2Y2GCU53W9ANHvNGCVsnR3c",
                    TransactionId = "22617a32-071b-43e3-bba1-8def5bf4e55d",
                    PrivateMoneyId = "66991f99-df3f-41e1-b636-87d70ff34c71",
                    IsModified = true,
                    TransactionTypes = new string[]{"transfer", "topup", "expire", "payment", "exchange"},
                    NextPageCursorId = "cf0cad9e-6fcb-4545-88be-e052faac63c7",
                    PrevPageCursorId = "b4823eb0-7720-4bc6-88db-30cc6bf51a0f",
                    PerPage = 240,
                    TransferTypes = new string[]{"coupon", "campaign", "payment"},
                    Description = "2V6NXh8JNbimnwEWJea171ttQbJzYeZQKto16KoZsFsc29ZfyJfIzHpu5VeGNr6Jy9LTfetp6cwJOwNVYuBeZszxQtQVCrmFQw2zayJXafqAvt6ljiWS9p1TrTU5HMSbTh1zPIrn4t4EiEHQHPU2wx2j7xSFlnKhqWfoYvT3ECN2IzxaDnhTwlVy8wLawh7hA5oBWup",
                    From = "2020-04-24T19:11:56.000000+09:00",
                    To = "2022-06-16T01:54:07.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
