// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransfersV2
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransfersV20()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2();
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV21()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    To = "2021-03-28T22:16:50.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV22()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    From = "2022-10-27T02:06:39.000000+09:00",
                    To = "2024-02-01T22:04:49.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV23()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    Description = "pULEoTr6H5p2Y5YBaOZdS1seolNILNbVpFGvZ3N4x3uvaLnbw12Ii4C82SzJJG4lODNS2Ij7U5b72UT",
                    From = "2024-04-07T00:56:55.000000+09:00",
                    To = "2020-01-22T13:39:45.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV24()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransferTypes = new string[]{"cashback", "transfer", "exchange", "coupon", "payment", "expire"},
                    Description = "mZ2vkYmrCrWwA7IkDmk9acr8tX9JQSHyiFoseHqYyK8GIOW0PGU45uzPdd0dJeNNvUC0",
                    From = "2021-06-25T08:31:30.000000+09:00",
                    To = "2022-05-10T23:17:05.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV25()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PerPage = 10,
                    TransferTypes = new string[]{"topup", "coupon", "transfer", "exchange", "cashback", "campaign", "payment"},
                    Description = "md5I8evbrAQGpnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhw",
                    From = "2020-06-10T10:23:24.000000+09:00",
                    To = "2020-02-27T12:23:59.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV26()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrevPageCursorId = "945ca1f7-55e9-4f79-bb85-da191976c705",
                    PerPage = 797,
                    TransferTypes = new string[]{"cashback", "campaign", "topup"},
                    Description = "RBRxfHZeKBVf4jVtecQNubIdHetI",
                    From = "2023-11-03T10:10:38.000000+09:00",
                    To = "2020-11-09T06:14:26.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV27()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    NextPageCursorId = "4b714bd0-b38c-440c-9593-703fc8007572",
                    PrevPageCursorId = "719a092d-0ef6-4cf0-a50a-22ceae10f8fd",
                    PerPage = 569,
                    TransferTypes = new string[]{"cashback", "transfer", "topup", "expire", "campaign"},
                    Description = "gyM43AJZ0KTwWOYBSX4EzfsIiIDCSxoowqwobMRj4K8plKuk4zON6lsKCXAkk07Q9YuV27x2ZZwJNPJ0aXH1uRWC",
                    From = "2020-12-20T16:54:05.000000+09:00",
                    To = "2022-11-10T17:29:27.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV28()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionTypes = new string[]{"expire", "exchange", "cashback"},
                    NextPageCursorId = "48f6f858-9a18-4860-8146-fbb73e1a5e78",
                    PrevPageCursorId = "28058465-86ae-48ef-a0d4-aca810e6a992",
                    PerPage = 817,
                    TransferTypes = new string[]{"payment", "cashback", "topup", "expire"},
                    Description = "KEOyMV89HUL5OwvTmfkSpdcLQvsJQRiuvWpRkphzntqbTr2vHF1iF0Y7dBxe8",
                    From = "2023-03-16T16:33:44.000000+09:00",
                    To = "2022-12-04T08:35:53.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV29()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    IsModified = true,
                    TransactionTypes = new string[]{"transfer", "exchange", "payment"},
                    NextPageCursorId = "688b6dbf-ab42-453b-a6c1-99e1260a219a",
                    PrevPageCursorId = "83e60a37-835b-40a5-ab8a-a3a9fbb5c661",
                    PerPage = 804,
                    TransferTypes = new string[]{"topup", "exchange", "expire"},
                    Description = "vULSy1FKdTtu83N0tnRGbdpbMjOs6NsjUaiDroY6Q3IK7BQ6AmswdAM3IJrwVbs9pMxfMCthiv1a2EEHFmQw4OmJsXraAGliEBPmHrH76ocsr7yZptwOIMGRxZLktLdV7u",
                    From = "2022-02-26T07:53:59.000000+09:00",
                    To = "2020-08-14T03:48:49.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV210()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    PrivateMoneyId = "2d5427e9-a2a0-4357-a1af-a8f2ce508046",
                    IsModified = true,
                    TransactionTypes = new string[]{"exchange"},
                    NextPageCursorId = "6fcb410c-dc83-45b4-8fec-9db7171410b0",
                    PrevPageCursorId = "3966e75a-48bf-4d73-8708-e0f988dbed50",
                    PerPage = 6,
                    TransferTypes = new string[]{"coupon", "expire", "campaign", "payment", "transfer"},
                    Description = "ZYRURgUMf0P",
                    From = "2020-10-25T02:59:22.000000+09:00",
                    To = "2021-12-19T15:36:33.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV211()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    TransactionId = "4bcc7daf-a435-429b-8aef-907a12de16c8",
                    PrivateMoneyId = "ed7f5c44-1c6e-4ba2-8ab0-db90f1aa10e9",
                    IsModified = true,
                    TransactionTypes = new string[]{"cashback", "topup", "payment", "expire", "exchange", "transfer"},
                    NextPageCursorId = "87e72bef-f6d7-4fc9-92d2-8d4d0f8e7884",
                    PrevPageCursorId = "9859849b-0e1b-438a-b9d2-cfaa3919a430",
                    PerPage = 367,
                    TransferTypes = new string[]{"coupon"},
                    Description = "h8Zz7eaFGoiOPKR0rUW9UTcnGDBsZuPfABdiNvfS9Anufij6THnocikBJOkD3FvwnaI0WeOGlWmmegc1KGhe3TxnuKac7CS1DK4Gnrr3oBLGMXHrz9mqfRhRmUp8pN9pjt",
                    From = "2023-11-08T18:30:00.000000+09:00",
                    To = "2022-09-19T08:45:54.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV212()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerName = "EK15Dd3XxCT0Zmu6u7tOxquneNatGolCf6SjeF7SeZXyMS6WkNJ2GvSwQUcruYP4H5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0tecRrYBgXoYNaRDH3xa5ZXl3L94kmDiQZVmfdCV9wGJUROgp1VTNstKsbk2wvZcZmJC",
                    TransactionId = "ac848a80-6f5a-4377-b51c-2f7d54772124",
                    PrivateMoneyId = "5850f865-a85c-4de5-8a34-a477e25b1303",
                    IsModified = true,
                    TransactionTypes = new string[]{"payment", "exchange"},
                    NextPageCursorId = "dfaed88e-f467-4539-80c3-a1ad92211b93",
                    PrevPageCursorId = "be8e6bb1-2939-45f8-92ec-3c3163b6a7c9",
                    PerPage = 109,
                    TransferTypes = new string[]{"exchange", "expire", "cashback", "transfer", "payment", "campaign", "coupon"},
                    Description = "hd5uwOg53j3Qic0iyKLnZxaZi9iCa2kj9IDD4FLU53H4cTCafuN856J50SdiADG37eydGENMPuSUGCPNHip0Y3dBWcNdXe1sIjLSVztCspdpKcDGU85LATApzQ2dQG1XtK0UfX1fzmKZw4jAX5TdVMZA3FsBWHTaR7q8iHovbTWoPNb",
                    From = "2021-12-25T16:56:56.000000+09:00",
                    To = "2024-04-05T09:30:04.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV213()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    CustomerId = "d685d86d-ca8f-4c76-bd55-e630f70142ec",
                    CustomerName = "YW7MWulxJqejEoXiemEzy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2",
                    TransactionId = "cf7aa022-a8f7-4e76-8002-0f5e7cade511",
                    PrivateMoneyId = "0aadcdb3-29b6-41d9-ba2c-f51c8fd34b75",
                    IsModified = false,
                    TransactionTypes = new string[]{"cashback", "transfer", "topup", "exchange"},
                    NextPageCursorId = "34944b80-f7a0-4a8f-a0bf-35b098a0d72f",
                    PrevPageCursorId = "45e001c9-5f69-4c83-a485-a10e3f35d8d2",
                    PerPage = 949,
                    TransferTypes = new string[]{"coupon", "campaign", "cashback", "topup", "payment"},
                    Description = "KLiOrRKq3qxtTGifN6KrraD5uojwDmQdLNOKHIlDiaOh78QfhNbZ3YfGhlbqaOElvScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnAdDrY96Gn0OAQ9xSN0zfKx7ivixiVqjgvBNcsQLQxAtJmVTcXWtKUzkNd35gyuBK",
                    From = "2022-08-18T23:28:07.000000+09:00",
                    To = "2021-06-06T03:46:35.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV214()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopName = "wozbM8BIp6WWFtoNM3mKKWyblmmAHRSYCV0EDw10SY48ZoA8oj9alrEKYDjBWPKCwbirzvScUvjsqVkcSInvOjFPIL9qlVMwg0ANEHCj5eM80",
                    CustomerId = "dd6baf35-ff53-4a77-b473-045c86bb4e67",
                    CustomerName = "2NkJBDvuxWoqdLq3QmHRbZpwbPRidVG7B6hajGJrCJBxTKH0YUW8iwJJuJPCjlaztijN3vebjT869RjYRPCqvnZ1Yzdr",
                    TransactionId = "3a116368-839b-4e5f-871e-cfa95bb93e48",
                    PrivateMoneyId = "0c0210b7-3a0f-48a9-98cb-77031463f77e",
                    IsModified = true,
                    TransactionTypes = new string[]{"cashback", "expire"},
                    NextPageCursorId = "cce36518-b3ea-40d9-ba55-7ce1b1bd3b34",
                    PrevPageCursorId = "202928b2-ccce-4592-a03b-05ceaf8e9598",
                    PerPage = 824,
                    TransferTypes = new string[]{"expire", "transfer", "exchange"},
                    Description = "A8sT9CjYdhYyR9ZtWhMAKSZHQ2Tjahc0hASAcEibjku1fdQetgL0O7DlAFrkXVihIdQWu7J4NYirXryPP6taqbm6hsnA9hELkacVB4dzDqQ1LbTyVIgVP7fIz1xemnrDx9P7HPwLX5lwW",
                    From = "2022-07-27T18:07:25.000000+09:00",
                    To = "2023-11-18T23:19:50.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransfersV215()
        {
            try {
                Request.ListTransfersV2 request = new Request.ListTransfersV2() {
                    ShopId = "a82d0d5a-b54b-4a75-9757-3a664f0d00b4",
                    ShopName = "n5wNPq2rjN28QfQLnQ9Qr2gs4rAyEVt2ws7Wk",
                    CustomerId = "2ac6695b-fe8d-4029-8a7a-dc99e0f319a5",
                    CustomerName = "gGUX4mtxobZ9ZCpNJGZG6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T70lQwB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFwrAdcz57ZOWsDr0Djt9M12BOno1Acj",
                    TransactionId = "0efd3522-b7bb-4585-8d39-04b64b56493b",
                    PrivateMoneyId = "e1d4c1ef-0889-40e6-b40f-220803757943",
                    IsModified = false,
                    TransactionTypes = new string[]{"expire"},
                    NextPageCursorId = "67acf5d3-46c4-4e8e-a72f-d31bd1363058",
                    PrevPageCursorId = "ac669f4b-4876-4fa3-9679-2a356287daf0",
                    PerPage = 610,
                    TransferTypes = new string[]{"topup"},
                    Description = "cOfyMo26iqol80j1t4n3lpnoezOx6Ov6eGwjQCqxdtQnDY4S9N4HhJ5rCsXRcU",
                    From = "2022-09-09T13:07:13.000000+09:00",
                    To = "2022-07-09T22:34:02.000000+09:00",
                };
                Response.PaginatedTransfersV2 response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
