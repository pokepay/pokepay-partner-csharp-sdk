// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCampaign
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCampaign0()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                );
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign1()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign2()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    DestPrivateMoneyId = "1aeb5522-4329-467b-a7d7-76569ec2d08b",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign3()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    MaxTotalPointAmount = 9036,
                    DestPrivateMoneyId = "89bdaf69-ddc2-4cde-82a9-2ac01eb30cbd",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign4()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    MaxPointAmount = 9436,
                    MaxTotalPointAmount = 2431,
                    DestPrivateMoneyId = "4d37b316-33cd-4e58-9ea9-36c1c77f9bc2",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign5()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 2372,
                    MaxTotalPointAmount = 2595,
                    DestPrivateMoneyId = "cdb48e7a-aa6e-4aac-ab6f-f0e0443c7eec",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign6()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    MinimumNumberForCombinationPurchase = 2189,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 7003,
                    MaxTotalPointAmount = 8337,
                    DestPrivateMoneyId = "544562bc-4fc6-41a5-b058-043c2ba88cd6",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign7()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    ApplicableShopIds = new string[]{"ab23b23b-7923-4fad-bc68-1844f6f538f3", "bf7c2375-dd6d-48e3-8333-5538a8d17b08", "bd7fbc17-60b3-41ad-894c-af24bc8c8643", "9877e9d9-5b20-4edd-89aa-ce80753d160a", "c4db647c-1906-44f6-b761-886530614ab0"},
                    MinimumNumberForCombinationPurchase = 8031,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 5573,
                    MaxTotalPointAmount = 6357,
                    DestPrivateMoneyId = "ad5e6bda-ca21-41d6-994d-4739a93a9527",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign8()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"d7be396e-cf3f-43b0-9fce-2ac869f82404", "43cd88fd-c8d7-4091-9a62-4bb8c4c88b89", "d859bf26-4c3b-4b09-9ad3-3e20726f58b9", "71841ff4-a117-46ea-a363-2ffab1b90c5a", "667938b4-be47-4677-9d1c-8de27f107830", "ebca62d0-a068-451e-9659-810fa1bc4ff1"},
                    MinimumNumberForCombinationPurchase = 1393,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 3358,
                    MaxTotalPointAmount = 9489,
                    DestPrivateMoneyId = "58bd33c2-4d4a-42db-806e-f5a6438bf1c7",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign9()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    ApplicableDaysOfWeek = new int[]{4, 0, 2, 4, 2, 3, 3},
                    ApplicableTimeRanges = new object[]{},
                    ApplicableShopIds = new string[]{"35cc04a2-ccea-4c16-b43d-c8e56122a16a", "a036e67b-6a4f-40a5-941f-6d08e7259468", "f96140fe-038a-4879-a035-5c0abacc06d4", "24932d84-e7c5-46e3-904d-3f5cb76ddd3c"},
                    MinimumNumberForCombinationPurchase = 7613,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 8710,
                    MaxTotalPointAmount = 4672,
                    DestPrivateMoneyId = "cf73a8ef-08f7-410a-9d23-e5bf1e93dde0",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign10()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{4, 2, 0, 3, 6, 4},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"b06d8cdc-54b4-4bed-9248-b320dcf58d8a", "44f16b97-6024-45d4-a18a-8486c0c4423a", "f8ea204f-6e42-427b-bc02-9c4d6f58b8cd", "953c8c6f-18ff-426c-b6e2-3344ceeeb77d", "69725970-5681-4f33-bd3c-218869948f87", "1e97a5be-4e36-4fda-9392-4e9ff273cc39", "8ccc589c-bc56-4d65-b1c0-bef1363158db", "ac52506f-702e-45b3-a2f6-546dab2b5258", "600a5375-8689-43fd-bf63-822fbc6b149d"},
                    MinimumNumberForCombinationPurchase = 2500,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 7301,
                    MaxTotalPointAmount = 264,
                    DestPrivateMoneyId = "57740f61-0d46-4eda-a960-f85180869a0d",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign11()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"07785a0c-723a-4eea-b3cd-2bf25b689819", "01909838-de15-467f-be1b-0180c882726f"},
                    MinimumNumberForCombinationPurchase = 7820,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 4775,
                    MaxTotalPointAmount = 1418,
                    DestPrivateMoneyId = "e492fb10-96a3-4a48-abde-ad42da816757",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign12()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{0, 2, 2},
                    ApplicableTimeRanges = new object[]{},
                    ApplicableShopIds = new string[]{"ece6287e-7e11-49ae-967f-d3516b3c4901", "75b1a610-3196-4bbe-9fde-bfa62139f287", "12290d4b-ac0d-4a3a-9a43-06848da50c33", "01a984c2-95ba-4b53-8d53-73237ff12833", "79352b3c-d52b-4ce8-b367-062caae2f970", "a8b2cc14-963b-4f08-9d19-f24ab09b8403"},
                    MinimumNumberForCombinationPurchase = 1872,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 9794,
                    MaxTotalPointAmount = 4325,
                    DestPrivateMoneyId = "fa7375b6-c295-428c-affc-1b86539a7de3",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign13()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    IsExclusive = true,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{4, 1, 5, 5, 2},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"86920ea3-411a-45a9-977d-a1cb73657058", "6c4b67df-6b63-4924-8e50-4b053e4fc502", "0244397e-0575-4bbd-b087-9faa9874eee9", "048c791a-7809-407f-a42c-a87b7ccca0b7", "41874cb7-2503-4172-a78c-8513dde0682a", "b1ad4835-8dae-4291-8db6-556f38adb48f", "dbeb7aa0-2f29-4c58-834e-21130ebed363", "938ce183-ef25-4333-a4f7-3c6c988e52b2", "7e2d12c6-0dcb-477e-a5d4-fa5c2e1d0998"},
                    MinimumNumberForCombinationPurchase = 6619,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 817,
                    MaxTotalPointAmount = 6859,
                    DestPrivateMoneyId = "248bc83d-9c4d-4219-a20e-ab01705c8e12",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign14()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    PointExpiresInDays = 1565,
                    IsExclusive = true,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{5, 2, 5, 3, 5, 2},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"840b0bca-3cce-408a-a1b6-7da5571436e3", "3b163c0d-6bae-45e4-a2a4-4adbf4d1be26", "417450f6-bf67-43b5-b0d1-92484935099b", "a89c0aec-0a6e-4544-ad79-4b073e4413ae", "6f5ae3e4-4052-4bee-9e36-df3831e0d44b", "97fb80a3-bbe2-49ef-9585-189586b7d113"},
                    MinimumNumberForCombinationPurchase = 4010,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 4727,
                    MaxTotalPointAmount = 1153,
                    DestPrivateMoneyId = "277950a8-dddb-4abe-8bc4-712abda3af73",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign15()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    PointExpiresAt = "2023-07-07T07:11:29.000000+09:00",
                    PointExpiresInDays = 4080,
                    IsExclusive = true,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{0, 4, 2, 2, 5, 1, 5, 3},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"8fe165f2-e4d2-4c1b-b5b9-3710d9bdf15c", "117c44c5-fdba-4d95-9c18-6aa06383e969", "6fc8f62d-f7df-4fd6-858a-51f6e313396c", "a4270cf7-1006-4ac1-82ec-bcc0b803c98b", "59adb6ea-f743-4755-8c1c-4805d491107e", "852a46e6-c78e-4b3d-89e5-1b8932720158", "d5f97d9d-3158-49ab-8ba2-0186b6c35011", "79c849b8-a28a-4b48-8c61-97411920ff41"},
                    MinimumNumberForCombinationPurchase = 9105,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 3128,
                    MaxTotalPointAmount = 8784,
                    DestPrivateMoneyId = "5fbcfb7b-5837-432e-aa5f-039d65f93904",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign16()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    Status = "disabled",
                    PointExpiresAt = "2021-08-06T21:31:47.000000+09:00",
                    PointExpiresInDays = 7005,
                    IsExclusive = true,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{1, 0, 1},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"0f5fc823-658b-4033-9cce-a0ae3591c606", "6df40827-e634-4f48-abfb-5834df3d886d", "3e14ea40-fa44-4d18-a40c-61ca833e2a3b", "74da6095-09dd-435b-a900-a1240476fa4b", "b00b0e71-26f3-4f29-ade0-3148bd004009"},
                    MinimumNumberForCombinationPurchase = 1987,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 6865,
                    MaxTotalPointAmount = 7598,
                    DestPrivateMoneyId = "04e0857d-b81a-41ca-b0ec-50f1b9b9631f",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign17()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    Description = "hMYaIBcQj7mL59HnlNHLuA0aOdVgj6K",
                    Status = "disabled",
                    PointExpiresAt = "2017-02-08T23:29:05.000000+09:00",
                    PointExpiresInDays = 3467,
                    IsExclusive = true,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{1, 6, 0, 6, 6, 2, 6, 6, 3},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{},
                    MinimumNumberForCombinationPurchase = 4627,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 7456,
                    MaxTotalPointAmount = 7885,
                    DestPrivateMoneyId = "32eb9e4a-4387-4e9e-9490-60d437d20825",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign18()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "R9buGPpBiWlh4drGbWvDfmVaNvPs9iu3XzENeNNhWBP",
                    "fbac926a-9d18-4ab9-90b6-4022fdb5ef72",
                    "2018-04-10T23:46:16.000000+09:00",
                    "2024-01-30T09:03:28.000000+09:00",
                    9473,
                    "payment"
                ) {
                    BearPointShopId = "3dcd2631-0d2b-45e2-b60e-47bbf3d44907",
                    Description = "igwFwXc9Xw81AcLgJ7HUPLZ2JY3PzdziozZN0eUlnWAmEdaqY8pJTyG58WWoVkTIofZ63ZHIa2ZaoOg0V0uaqelttkE7ehROL4XrOdkUWUyHCGGZhBjhjuTKoJ3qmoFsOI4faRjWQ8gKOhK9uTt59dHqyzQZgDiWvj8etzcFhDXwcbaPJF",
                    Status = "enabled",
                    PointExpiresAt = "2018-01-19T04:03:59.000000+09:00",
                    PointExpiresInDays = 8575,
                    IsExclusive = true,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{3, 4, 5, 5, 3, 2, 1},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"0a03e40a-8cca-48a8-a4fd-2eacb3e84dd2", "3ee446f1-b20b-4552-ae50-c71f4765811b", "d3026694-2a47-4c40-876d-37f8dd71c583", "3e685ce3-d0f6-479e-8ecc-2f89d0f9cfae", "a41f9969-e35c-4df2-b510-580ae9846f1f", "0eec0711-c0e8-4da6-af9a-6c6eb5aa9ba1"},
                    MinimumNumberForCombinationPurchase = 7070,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 6494,
                    MaxTotalPointAmount = 478,
                    DestPrivateMoneyId = "e4dae641-5e32-4815-88a1-d6238d59fe65",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
