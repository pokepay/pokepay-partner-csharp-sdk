// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCampaign
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCampaign0()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                );
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign1()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    BudgetCapsAmount = 417391773,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign2()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 1058382380,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign3()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    DestPrivateMoneyId = "6fb99657-5581-42ed-a69c-b2059f4d1c40",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 1004494496,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign4()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    MaxTotalPointAmount = 3883,
                    DestPrivateMoneyId = "60d6d2bf-d0e2-4f13-8154-a830571d2c20",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 1925568641,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign5()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    MaxPointAmount = 6206,
                    MaxTotalPointAmount = 3422,
                    DestPrivateMoneyId = "f2f50c36-94b6-4235-ab72-6e9c59ab94e7",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 54119804,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign6()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 6040,
                    MaxTotalPointAmount = 7772,
                    DestPrivateMoneyId = "85a19e95-3605-4464-b784-d6e58f3de2fc",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 1805137598,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign7()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    MinimumNumberForCombinationPurchase = 3504,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 3146,
                    MaxTotalPointAmount = 6282,
                    DestPrivateMoneyId = "2e5644c9-ba6b-47ec-8e10-31a1774f8ceb",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 144191962,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign8()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    MinimumNumberOfAmount = 5288,
                    MinimumNumberForCombinationPurchase = 3029,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 1834,
                    MaxTotalPointAmount = 3235,
                    DestPrivateMoneyId = "dbbc8024-67ca-4309-9ee5-6bb96b8ec292",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 1899582053,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign9()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    MinimumNumberOfProducts = 6086,
                    MinimumNumberOfAmount = 2384,
                    MinimumNumberForCombinationPurchase = 3784,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 9599,
                    MaxTotalPointAmount = 7501,
                    DestPrivateMoneyId = "744139ce-d391-4db8-937c-8add2959692e",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 1221568410,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign10()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    ApplicableShopIds = new string[]{"45b9027a-76aa-41a8-b1cb-72a13591d246", "6be1b482-0e22-4c3f-aff2-fedbc756fcc9", "b130be09-e551-4567-9df7-0cf8c21a7113", "483cfe23-8bb8-4c6f-af5d-c491d484d7fc", "84b0bcf3-2a4a-49cc-8bb5-66523bad8971", "476345b6-b0a8-4dbe-b72a-a5a970984756", "f98199ac-dc18-4cd8-8d05-54f0fc39bb18", "e091ffda-7647-4128-8d53-a692375fa126"},
                    MinimumNumberOfProducts = 1915,
                    MinimumNumberOfAmount = 5879,
                    MinimumNumberForCombinationPurchase = 2640,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 1920,
                    MaxTotalPointAmount = 6236,
                    DestPrivateMoneyId = "d8763ca4-c710-4fc8-99d2-d16a2f93d07a",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 153171498,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign11()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"ea713bda-738c-40de-99f7-363059939505", "2efa0c7c-5b35-4bd4-91f9-4c30bdeb5740", "12f7131f-52fe-4707-82ee-0ee579a3baee"},
                    MinimumNumberOfProducts = 7204,
                    MinimumNumberOfAmount = 3963,
                    MinimumNumberForCombinationPurchase = 6345,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 7370,
                    MaxTotalPointAmount = 9431,
                    DestPrivateMoneyId = "49d982f7-b824-4a0d-a88e-420b3abcc14d",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 1946180367,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign12()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    ApplicableDaysOfWeek = new int[]{2, 1, 0, 2, 0},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"d6761e94-d49f-4c4d-8447-aa1a670891e5", "35160376-2ca7-4913-b7d6-abcdb1fcc59f", "e4b67365-19c0-44da-9ddf-20fb5a70f7ab", "fa24790a-e58f-41f4-b8c5-6aa832991f71", "8505b09b-665f-48af-bec9-ac9be07e1e76", "b544a53e-6589-438e-8992-4679695a3ff8", "3d03327c-08f6-4f01-beec-126a3a30c4b5"},
                    MinimumNumberOfProducts = 588,
                    MinimumNumberOfAmount = 5101,
                    MinimumNumberForCombinationPurchase = 4594,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 9261,
                    MaxTotalPointAmount = 2829,
                    DestPrivateMoneyId = "456e9024-b718-4a03-8119-2a29124f29fe",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 1381412536,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign13()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    BlacklistedProductRules = new object[]{new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}},
                    ApplicableDaysOfWeek = new int[]{2, 0, 6, 4, 1, 2},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"c6f3a0f6-f429-4f9f-a418-db9112d75953", "b61a414e-0d1c-4c5b-b6e5-68d7cbf8d87a", "d3823bd7-6ec9-4f2e-b5cc-fa93b702e380", "5e5da697-b88d-4bb6-b3f4-12affbbbc515"},
                    MinimumNumberOfProducts = 7453,
                    MinimumNumberOfAmount = 9728,
                    MinimumNumberForCombinationPurchase = 4798,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 6656,
                    MaxTotalPointAmount = 5183,
                    DestPrivateMoneyId = "0e60ee16-fcd1-4076-9b90-36da693cf0f6",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 1610856251,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign14()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    BlacklistedProductRules = new object[]{new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}},
                    ApplicableDaysOfWeek = new int[]{2, 3, 2, 2, 4, 4, 6},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"64f2cc08-8333-4a89-836d-b8d63bb12dfe", "a6aa3ced-09d0-491a-9d8c-62faa5b58b2c", "abae25b2-99e2-4aa4-a3c8-5027a86f5dad", "96487232-9e13-4f9d-9778-88d647f387c2", "95e54048-f27c-46d4-a280-eee9f7ec771e", "a6b60bcf-7ac8-4ba7-a212-0c598724bc8d", "db72bc14-c35c-4262-ba5f-92a9307f775e", "ce7a0bd7-d720-4e06-b745-c59db2791b2b"},
                    MinimumNumberOfProducts = 6831,
                    MinimumNumberOfAmount = 2984,
                    MinimumNumberForCombinationPurchase = 3000,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 5550,
                    MaxTotalPointAmount = 8541,
                    DestPrivateMoneyId = "544ea624-91c8-4c2e-a3e3-5f7cda8dcba1",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 1577347978,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign15()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    BlacklistedProductRules = new object[]{new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}},
                    ApplicableDaysOfWeek = new int[]{4, 2, 2, 2, 5},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"3639882d-efc4-45b6-b271-462ee37dbe40", "5b3f107f-85f7-4147-a644-f2fdf7623a88"},
                    MinimumNumberOfProducts = 5843,
                    MinimumNumberOfAmount = 6629,
                    MinimumNumberForCombinationPurchase = 7280,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 7403,
                    MaxTotalPointAmount = 6984,
                    DestPrivateMoneyId = "556f5a6a-947b-46e9-a748-cc70dd98a114",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 1890993440,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign16()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    BlacklistedProductRules = new object[]{new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}},
                    ApplicableDaysOfWeek = new int[]{6, 5, 5, 6, 5, 0, 2, 3, 1, 2},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"a9b7dc7b-428e-4172-a4da-774a9f60a60c", "04c27f54-0198-4027-b905-8caec4e395fc", "4f8ed9ab-3898-4cff-8d6e-8cd15fa90a67", "3f213047-cdfe-4487-8ae6-e923d2bcab80", "ec16ad84-46c5-40ec-aaeb-c2d330e97c63", "c52755f4-63b5-45ab-80b6-06f42170d342", "83f789b3-5d40-40d1-b69b-1e408c4860d9", "0f7262ea-1f11-4ef9-b86d-86fbacd71f55", "6ce4fe92-b0aa-4900-a7c4-5679cd343c95", "0b0218d8-5e2e-488e-913a-62a382675314"},
                    MinimumNumberOfProducts = 776,
                    MinimumNumberOfAmount = 3471,
                    MinimumNumberForCombinationPurchase = 5547,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 4052,
                    MaxTotalPointAmount = 7599,
                    DestPrivateMoneyId = "58e2a968-d818-4119-b0bd-f847b75cabcd",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 207436356,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign17()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    IsExclusive = false,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    BlacklistedProductRules = new object[]{new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}},
                    ApplicableDaysOfWeek = new int[]{0, 0},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"0d0bdf99-d1a0-444b-8ba9-cf6a74f519ad", "182fbc22-3f14-4ac2-a5c8-f1fc1ab9e96e", "18f5582c-fdc1-4fed-a46c-35cbc071107f", "d0954991-2a69-435c-8bd5-551db204f66a"},
                    MinimumNumberOfProducts = 1978,
                    MinimumNumberOfAmount = 9074,
                    MinimumNumberForCombinationPurchase = 1386,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 7959,
                    MaxTotalPointAmount = 1027,
                    DestPrivateMoneyId = "8c795622-1f61-4fa0-ae0c-3cc9a72d4014",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 1360991403,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign18()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    PointExpiresInDays = 6783,
                    IsExclusive = true,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    BlacklistedProductRules = new object[]{new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}},
                    ApplicableDaysOfWeek = new int[]{1, 1, 1, 0, 1, 2, 5},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"e070e7a1-d6ec-4c82-877e-c9be1f87a129", "5ed1a0da-413b-45c4-8f04-fb87ed830ace", "62d84855-88df-4025-ac41-f8bdfdbd092d", "7d72c5a6-7f4a-4620-a65e-74ec7f37f832", "74a3d7c8-5ecd-40f4-9ba0-7a1fbbd1756f", "0bc4ceb7-b079-4261-8c93-96013d6d5a57", "e5916930-6047-4aeb-b486-ccb1a0da3970", "ddcfbe8f-e68f-41cf-930c-2bc2ad809da4", "168c7a5a-3c81-48fb-971e-43fb064270ba", "e03a6f81-ce08-41ef-bef3-d0f8a547b963"},
                    MinimumNumberOfProducts = 3926,
                    MinimumNumberOfAmount = 7036,
                    MinimumNumberForCombinationPurchase = 4414,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 4393,
                    MaxTotalPointAmount = 6844,
                    DestPrivateMoneyId = "4f324bc6-b89b-4722-8d4b-bd2799ef0b4e",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 1550113594,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign19()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    PointExpiresAt = "2022-08-20T18:53:28.000000+09:00",
                    PointExpiresInDays = 1345,
                    IsExclusive = false,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    BlacklistedProductRules = new object[]{new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}},
                    ApplicableDaysOfWeek = new int[]{4, 1, 3, 4, 6, 6},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"4ee7bb08-6e33-463f-899c-8dd754220f70", "9017fb7f-eb79-4ef3-a75e-1b079be76b1c", "e039eaa0-8232-4598-a230-9e24edb863a1", "51aaea3e-037d-4b3e-a81a-24e618357c09", "6515dc87-604e-4c28-8d68-a0d061fbb49c", "272ccf68-613d-4225-864b-62b859754bed", "5ca956d5-5cf7-4b71-9ebb-88aab9884ddc"},
                    MinimumNumberOfProducts = 1333,
                    MinimumNumberOfAmount = 3624,
                    MinimumNumberForCombinationPurchase = 8679,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 1470,
                    MaxTotalPointAmount = 249,
                    DestPrivateMoneyId = "7cc47c9f-e956-4a9c-8f56-8071561174c9",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 68624488,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign20()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    Status = "disabled",
                    PointExpiresAt = "2022-08-26T01:05:43.000000+09:00",
                    PointExpiresInDays = 9697,
                    IsExclusive = false,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    BlacklistedProductRules = new object[]{new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}},
                    ApplicableDaysOfWeek = new int[]{4},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"971b64ae-21f6-480b-b2cb-f4f2b465b119", "f097fbf5-84a9-47fb-a9fc-e828636c1820"},
                    MinimumNumberOfProducts = 6695,
                    MinimumNumberOfAmount = 3281,
                    MinimumNumberForCombinationPurchase = 4168,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 9323,
                    MaxTotalPointAmount = 5459,
                    DestPrivateMoneyId = "7e324278-cc24-46bb-91cb-bc2bdc1e50fc",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 235309152,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign21()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    Description = "z0hnHtPEmOFzye10sMn1hLqgZ4Scflk2JdjznjOojFztUyYyUwwyS9B5htgNIDpUpzKyj3BEvYp1TbuySIy9vMfjs9RSVIuRLJamUgod9vJRMh5laf7AaoLGt4pe6BC2Sel2QniqdOC9my1YOO8CjR0YFmv40UM5wZgue67e0YlrO8E3L7gW6pVOxZ4",
                    Status = "enabled",
                    PointExpiresAt = "2021-02-21T05:15:22.000000+09:00",
                    PointExpiresInDays = 4819,
                    IsExclusive = true,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    BlacklistedProductRules = new object[]{new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}},
                    ApplicableDaysOfWeek = new int[]{0, 1, 3, 5, 2},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"dd964268-069b-4493-a05b-a2ff994b4bbc", "6558fce4-2b7f-412d-8448-c0a748431876", "ad9bf2e5-e0ea-4d96-903b-c72268fab310", "3518521b-4923-41cc-bee6-b6a828e39c37", "ffcd84c8-658a-4cd5-8e55-89ae941cc00f", "d77436a8-0268-4105-8d28-d892355f4421", "ed25f9cd-42f0-4e2b-8a8a-6d45b67311ba", "4066916e-fc96-4b2e-88e3-4bfabd04ebf9", "6cedb52d-d14f-4e3e-9b68-d1e048abd04d", "f8abed0a-3f57-46c1-be01-fe509138f1af"},
                    MinimumNumberOfProducts = 4553,
                    MinimumNumberOfAmount = 8196,
                    MinimumNumberForCombinationPurchase = 1530,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 3829,
                    MaxTotalPointAmount = 1556,
                    DestPrivateMoneyId = "282cd564-5283-4eea-9bd5-8154c4e702b8",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 106402887,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign22()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "gMn5wd60p6qorRSF",
                    "3f4a09b9-b84e-4ada-81d4-088033e04bed",
                    "2022-09-04T05:43:04.000000+09:00",
                    "2022-11-11T10:54:41.000000+09:00",
                    4248,
                    "external-transaction"
                ) {
                    BearPointShopId = "cb9e9419-e66b-4345-bd36-a857c22f39d8",
                    Description = "Dem2rgSzz35aQ4D94kR9S0XTdmHcC0cGFAfEKgLlOIWqFFofKhzWzCAqp2ZanhrL16oNA3cZ4NnyIEjaN6dYZY4p9bZgs",
                    Status = "enabled",
                    PointExpiresAt = "2020-10-17T14:30:23.000000+09:00",
                    PointExpiresInDays = 8871,
                    IsExclusive = false,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    BlacklistedProductRules = new object[]{new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}, new Dictionary<string, object>(){{"product_code","4912345678904"}, {"classification_code","c123"}}},
                    ApplicableDaysOfWeek = new int[]{5},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"7095fe58-4c69-4e50-90fe-f3e9819bbbd7"},
                    MinimumNumberOfProducts = 5402,
                    MinimumNumberOfAmount = 5280,
                    MinimumNumberForCombinationPurchase = 8344,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 4641,
                    MaxTotalPointAmount = 1418,
                    DestPrivateMoneyId = "7e6f42df-2dd5-4ce0-addd-d4b4a4cf7386",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                    BudgetCapsAmount = 1373060935,
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
