// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCampaign
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCampaign0()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                );
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign1()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign2()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    DestPrivateMoneyId = "4af67ac3-5557-49c7-86d1-86c2276c45cb",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign3()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    MaxTotalPointAmount = 2847,
                    DestPrivateMoneyId = "95b11f03-c9f1-4688-b596-b639c6b53678",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign4()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    MaxPointAmount = 3249,
                    MaxTotalPointAmount = 1215,
                    DestPrivateMoneyId = "d93deec9-81b7-4d6e-a2a8-4f0f26360f4c",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign5()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 5972,
                    MaxTotalPointAmount = 3090,
                    DestPrivateMoneyId = "ed770267-7ad4-47bf-9575-9d3ff88d4e94",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign6()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    MinimumNumberForCombinationPurchase = 4835,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 8971,
                    MaxTotalPointAmount = 520,
                    DestPrivateMoneyId = "6bcacf29-e8bf-4b7e-bdc9-5ad8d0289ad0",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign7()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    ApplicableShopIds = new string[]{"4405a7bb-3de1-4d2a-85e7-d6b246d227f8", "52f93e4e-3608-42cc-bdb4-edfd815bce6f", "9b21fd50-c8d2-4edf-ac15-00ca4e5dfcb3", "38be720d-8684-4404-815e-5382cabed17a", "d1b96557-ad41-4d22-bc34-ab4ec10fb3ae", "d9c311db-9c1c-46db-807f-6cca7de29037", "760bac9f-bddc-404d-af88-648dca800f99", "7edbfe21-6a03-47e8-a7b7-3b3827dca3d4", "12dac49c-c802-41f3-a518-59253f5ab87a"},
                    MinimumNumberForCombinationPurchase = 9833,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 2039,
                    MaxTotalPointAmount = 9001,
                    DestPrivateMoneyId = "8aba9269-0ac4-41a5-84fd-3d66dda2b946",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign8()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"da60f314-aa22-4268-96f3-0310eca61156", "60444631-bfa5-4f5e-a6cf-e7e43927dfe6", "c8761d5a-ebdf-488d-b015-05130d5986d5", "78eb1d6a-8297-4bfb-b1b6-16bc3a08a7b5", "580a5a68-dc14-4b2e-88f9-770e8a4268a0", "0b28a4e5-85d3-430e-8307-b2a9584bad11", "1efd0091-b30a-4854-983b-21bf30a1a3b4", "8d71896c-f3ad-4dcd-b64a-e24a395ba003", "63a97990-b3fc-4c7f-918e-6548315bfb71", "38db6a74-f9d4-4aea-bdc4-7d059737c8a7"},
                    MinimumNumberForCombinationPurchase = 85,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 6854,
                    MaxTotalPointAmount = 3624,
                    DestPrivateMoneyId = "22630d67-0bd0-4b6e-a821-8df673975abb",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign9()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    ApplicableDaysOfWeek = new int[]{3, 4, 1, 3, 4, 3, 5, 3},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"c8006f48-f77a-4bab-9b16-b267f0335117", "ca86d836-850e-4d0d-a221-756ec2a1af98", "c7dc9a8e-c7ce-4e6f-a350-1226b25b35ff", "66100ea3-9da5-4518-9f11-1a6181e9199f", "51052635-a8c3-44ce-8d3b-883cc82b39df", "2292ba33-ca77-40ce-9f89-0eaae3f22641", "573ad305-5206-4269-aa43-8f84fa9a428c", "fabd416f-2861-4026-86dd-16cce1c642b8", "dd39b63e-1bf8-4544-828e-fa47a82b4d35"},
                    MinimumNumberForCombinationPurchase = 9144,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 9865,
                    MaxTotalPointAmount = 366,
                    DestPrivateMoneyId = "53dd8879-7ba6-4875-be5c-5ef2bf1ec429",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign10()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{1, 4, 6, 2, 4, 4, 4, 0},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"1b1b9a8d-334f-44bd-8184-6470c4201db2", "77af6b07-b383-4d37-b1e6-aea93c88b0b4", "8159c7bc-ee99-45ec-a59d-edbd4981ee5e", "958750cd-6ab2-4614-8cbc-f789ec8f5be3", "49667980-3a03-4e5b-9c14-91403010c311", "bdc132b0-3326-4fba-ba26-8e6f93225de0", "af3af576-833e-4f49-9299-b7cf2dd71aa5"},
                    MinimumNumberForCombinationPurchase = 8346,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 5045,
                    MaxTotalPointAmount = 3618,
                    DestPrivateMoneyId = "f64dd9fe-c83f-4667-aa08-6ed6f625018a",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign11()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{},
                    ApplicableDaysOfWeek = new int[]{1, 3, 1, 1},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"3a203330-69f6-4d16-8438-cc99fb200db6", "54c8629a-688f-442e-9355-b43e51db201d"},
                    MinimumNumberForCombinationPurchase = 6646,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 5510,
                    MaxTotalPointAmount = 2264,
                    DestPrivateMoneyId = "90040be8-af7e-4204-8bf9-93fdbba17ef3",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign12()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{3, 4, 1, 2, 0},
                    ApplicableTimeRanges = new object[]{},
                    ApplicableShopIds = new string[]{},
                    MinimumNumberForCombinationPurchase = 2555,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 6479,
                    MaxTotalPointAmount = 9301,
                    DestPrivateMoneyId = "958ff765-2831-4c6e-bca6-d9d92297848e",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign13()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    IsExclusive = false,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{2, 0, 0, 1, 3, 6},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"b86a8b9c-a76d-43b9-846d-95b3d5deea50", "a3eb4af8-1f52-4963-bccf-69734077ea38", "a1fd4512-5f9d-4c49-b50b-d8a2127ad480", "97d7ab41-1389-4494-857f-e2a218014b47", "89969a75-09e0-4420-9ad3-c4565b067a63", "faea39ef-a118-494f-a05f-100eceaa895e"},
                    MinimumNumberForCombinationPurchase = 7382,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 5794,
                    MaxTotalPointAmount = 7240,
                    DestPrivateMoneyId = "927e6e77-ac45-409e-9103-5034396f5903",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign14()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    PointExpiresInDays = 2153,
                    IsExclusive = true,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"559d85ed-175a-4901-8a6c-36626d734471", "2fcc5420-5b20-4e0c-8f20-3e53218e7921", "3ab673ec-2d49-476a-b0e8-71fb1d6038a3", "dd0ffdfa-847a-4711-b172-cfe9cd680ed5", "d98495f7-d02f-480d-8e75-ec04b104e1f0", "f2a0e1c9-c0f0-4681-97e3-ac8facfc9322", "5b981f7f-a223-489d-93a8-f7222c720e2e"},
                    MinimumNumberForCombinationPurchase = 3098,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 8875,
                    MaxTotalPointAmount = 8582,
                    DestPrivateMoneyId = "71b0ee5b-f4ad-45e5-b57a-2e94da30aff6",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign15()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    PointExpiresAt = "2022-02-04T15:08:22.000000+09:00",
                    PointExpiresInDays = 7394,
                    IsExclusive = true,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{3, 0, 1, 0, 2, 1, 3, 0},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"fe59490d-bc11-49cb-aef0-82f076e2cea2", "7eb77e91-9872-49cf-9e7f-c1ec490edab6", "7db53d26-da19-446d-ac8d-9754deb7ae89", "311f77c7-169e-4eb1-846b-e0af367bcf1b", "6b18c06d-c7c1-4273-8813-f43bc7257114", "e6d05c90-a4f0-46d5-a304-fbc55dba8423", "8ba93334-8938-4cbc-bf72-7b6435fcee1d", "0d8f7e77-4b25-4e23-aaf1-3d2d7e3d976d", "730850fb-143d-4802-9d23-3fa8ff77d882", "510c516e-11ac-4b39-b4db-f1d0336c4723"},
                    MinimumNumberForCombinationPurchase = 525,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 7196,
                    MaxTotalPointAmount = 5626,
                    DestPrivateMoneyId = "9a4d880c-845f-4012-9112-f4d1c42e8d45",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign16()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    Status = "disabled",
                    PointExpiresAt = "2020-02-09T11:44:03.000000+09:00",
                    PointExpiresInDays = 2774,
                    IsExclusive = false,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{0, 6, 1, 3, 4, 5, 2},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{},
                    MinimumNumberForCombinationPurchase = 3472,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 1038,
                    MaxTotalPointAmount = 4114,
                    DestPrivateMoneyId = "23a57744-88fc-4c52-bdaf-941d0483f90f",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign17()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    Description = "iQkXlILb4pNVwckQm4FGKpgmJcDtH6noGgouzJTkliHhdvCckZ69wPd84bYIK6jk1bHRRYyfGzgvRKkN5tvqOmhqWn9Ml9ViOkG2Fu6kDEUycVdEFnJ3UkS3ZQ52QNvacaP",
                    Status = "enabled",
                    PointExpiresAt = "2020-03-23T14:38:56.000000+09:00",
                    PointExpiresInDays = 3132,
                    IsExclusive = false,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{},
                    ApplicableDaysOfWeek = new int[]{2},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"64ea69ce-78f4-43af-9342-da610cb4923e", "c31e3ade-f4c0-47dd-80b9-d6fe48a13b20"},
                    MinimumNumberForCombinationPurchase = 1567,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 2877,
                    MaxTotalPointAmount = 2574,
                    DestPrivateMoneyId = "18b3600d-98ed-4ca6-8811-f45e8cc143ce",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign18()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "xklH0YPsfBxcPZmkdQ8ZhGTOi8jQmHk6bc9vjbWHPc4Ra3Hp0qty3wq8XGQIzAgAFYpQMRSorJ2wicjUpFfSXIolj5PuSuOdc4xgc3lxbprUpujJLf3ZwcWj",
                    "7a5370b7-d31f-4ab9-8501-f91450be2f4b",
                    "2017-12-10T10:36:33.000000+09:00",
                    "2023-05-12T17:16:45.000000+09:00",
                    9756,
                    "payment"
                ) {
                    BearPointShopId = "5c8f821c-f848-467a-89ce-d463b6afdfa9",
                    Description = "NgeTeDBThPwyxZGLoJT704VB8vWZMr4X6w6RgLzHvqYsKQswyAqAvXEYELOXuDszofvAcb7Tbv6aThflKVHvElaDP3dd0vONvb9I4mt68rqEllcSbDNbr45FxOaVgJGycuO89ULld0R3ohfYPUqz4NcSLsn5UrOKM6bNYqOl71JUlSSiabjR6X8n3Jf",
                    Status = "enabled",
                    PointExpiresAt = "2018-03-05T00:33:46.000000+09:00",
                    PointExpiresInDays = 7812,
                    IsExclusive = false,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"2c327268-e2ea-41c5-bcc4-9b62dd033bcd", "ba29b0a3-8907-43f1-87d4-4a2df287e1a1", "2c1a9300-87ef-480b-bc18-a24b435e8362", "0456d4b6-d57a-46e4-9fca-8f2f17da8815", "dcf2e628-4344-4f7a-afd1-e64eeb1642b0", "7350a55e-f14e-46ab-b4e7-3af10252bf42", "3648068b-83e3-4d21-9995-b3bfea1fc240", "594928e4-38d9-454a-9125-bb040769b92d"},
                    MinimumNumberForCombinationPurchase = 9768,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 2958,
                    MaxTotalPointAmount = 8989,
                    DestPrivateMoneyId = "40330e20-81b2-48ed-afbd-b1574df32192",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
