// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCampaign
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCampaign0()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                );
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign1()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign2()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    DestPrivateMoneyId = "c1f66421-79ad-43c5-a928-f69d887bc0e7",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign3()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    MaxTotalPointAmount = 930,
                    DestPrivateMoneyId = "76cd587f-6448-439f-b9d4-06b55d7c4ba1",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign4()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    MaxPointAmount = 3637,
                    MaxTotalPointAmount = 3437,
                    DestPrivateMoneyId = "a4408f8c-e7de-42b9-85d8-aa575b7e1e54",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign5()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 9667,
                    MaxTotalPointAmount = 6761,
                    DestPrivateMoneyId = "0827f94e-d9c2-43af-b471-0830247399db",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign6()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    MinimumNumberForCombinationPurchase = 4809,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 3203,
                    MaxTotalPointAmount = 6253,
                    DestPrivateMoneyId = "82bbd2ff-75fd-47e0-bc72-8ddf5ae4c319",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign7()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    ApplicableShopIds = new string[]{"f1407a56-4701-41a5-922f-29557a78e4c4", "77ed3863-7652-4bea-90d7-bfe884fc905c", "4885ac95-d93d-4623-a3a4-df1e9881e913", "d1bd7457-9481-472e-8535-c686f5788411", "7ac185a1-07c5-4060-a41a-c33043430cc4"},
                    MinimumNumberForCombinationPurchase = 8817,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 3038,
                    MaxTotalPointAmount = 1808,
                    DestPrivateMoneyId = "e61c43fc-9193-4b1c-b5e5-768cd11a3aee",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign8()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"4da977d9-9a6c-452e-b0b4-55925e90d957", "78d5ff5e-91f5-4b87-80d5-1bdc48c2bccc", "0483a84c-f4ab-45d1-bc94-ba5c5c1dda9b", "f4f999c2-cc0e-4f1c-bb22-2401f97f237c", "7ce0cf89-11b3-4568-9e7a-63030e062ea2", "01921f5a-5bdb-4215-87a5-143f0d31dc7c", "e1a1d8b3-08b5-465e-adb7-bb0bc13a6150", "b281d850-0d7e-437e-ae57-5b6c55bd16cd", "e436ce51-15ec-48aa-bb15-4c4fdf26354f"},
                    MinimumNumberForCombinationPurchase = 6327,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 9526,
                    MaxTotalPointAmount = 3271,
                    DestPrivateMoneyId = "5a08b597-6972-4707-89b1-040b4e4a200d",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign9()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    ApplicableDaysOfWeek = new int[]{2, 2},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"2f5a4f3e-909d-4f69-97d0-1c7636bc3ab5", "f1fc8993-bd09-4fe4-a496-bdc1d26ce0a0", "0300c1e2-4da8-4455-a042-a2d7402a3d14", "47e986f4-00e1-431b-b6b8-ccf6ac94eb1b", "46448009-5a21-4228-8c86-85b74f133308", "4da9e0dd-7e9f-4db9-994b-364ef87b1267", "f31eec73-7f1a-40ef-ac91-4b8aeb072c98", "41c65f8d-cb1c-4864-920e-3d12b8fa00d7", "9825ff54-ed31-46eb-9036-51347fc0d292"},
                    MinimumNumberForCombinationPurchase = 9828,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 6180,
                    MaxTotalPointAmount = 8937,
                    DestPrivateMoneyId = "0711a45a-311d-4ecc-abc5-8dfa9c9a300e",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign10()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{4, 1, 0, 1, 5, 0, 0, 6, 1, 3},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"3f3e9fcf-d998-4ae5-9349-2f4c929f7e20", "4375a10e-ede9-48ba-a34b-e50da104c724", "88c6543d-8e4a-4c75-9192-062e49bb6e67", "ce4b1d50-c1cd-4968-819b-96a3e5b4f3eb", "748c3362-684e-471f-8a57-df14e11f2da7"},
                    MinimumNumberForCombinationPurchase = 9259,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 5813,
                    MaxTotalPointAmount = 6785,
                    DestPrivateMoneyId = "213c7f3f-6134-4178-b5ec-365ba7aa9714",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign11()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    AmountBasedPointRules = new object[]{},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{1},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{},
                    MinimumNumberForCombinationPurchase = 5499,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 3174,
                    MaxTotalPointAmount = 8045,
                    DestPrivateMoneyId = "51799888-5578-4b7f-b68e-bb7d45c517da",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign12()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    Subject = "all",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{3, 2, 6, 4},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"56c9c581-5adb-4c3a-bf2d-163d12e7e0ee", "5be50599-4593-429d-a967-e50e68929962", "7c770734-48d9-4062-b3f4-1a365e4771eb"},
                    MinimumNumberForCombinationPurchase = 6254,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 6266,
                    MaxTotalPointAmount = 7824,
                    DestPrivateMoneyId = "f1284868-287c-4ba8-bc0e-a60f82327103",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign13()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    IsExclusive = true,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{1, 1},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"754162fe-6f2d-4631-8abb-bfec97ecff16", "6392be60-18bc-4ebe-a167-9e7a28ae01f1", "cfbb8649-6582-4fe8-b54d-f3ccd1bd0f93", "75111e70-32d5-4370-8165-8ef59241e390", "c43ac952-2f98-4aee-8a21-5b18d8797df1", "23841157-b1ff-4f16-9ddc-d9bd36633260"},
                    MinimumNumberForCombinationPurchase = 8537,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 9020,
                    MaxTotalPointAmount = 3210,
                    DestPrivateMoneyId = "22c6b99b-4995-4f50-8dc1-c7b3e664b42c",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign14()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    PointExpiresInDays = 4497,
                    IsExclusive = true,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{},
                    MinimumNumberForCombinationPurchase = 8445,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 4605,
                    MaxTotalPointAmount = 517,
                    DestPrivateMoneyId = "6b3661c8-0960-41b1-ab15-1d305711bcc7",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign15()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    PointExpiresAt = "2016-05-29T14:14:39.000000+09:00",
                    PointExpiresInDays = 352,
                    IsExclusive = true,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{5, 6, 6, 6, 6},
                    ApplicableTimeRanges = new object[]{},
                    ApplicableShopIds = new string[]{"84de45c8-0426-453e-a5de-56a822cd5bbe", "6f1465fc-de31-48e6-b01d-4ed128593b59", "30ff643a-52dc-4c5f-85eb-a667fc717aca"},
                    MinimumNumberForCombinationPurchase = 2660,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 6944,
                    MaxTotalPointAmount = 4230,
                    DestPrivateMoneyId = "9d6bd800-1893-495d-ae40-9eca2ef5db0f",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign16()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    Status = "enabled",
                    PointExpiresAt = "2023-01-14T15:48:11.000000+09:00",
                    PointExpiresInDays = 8769,
                    IsExclusive = true,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{3, 2, 2, 3, 6, 0},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"ee306427-5d7a-48ff-937b-d4e6e3056ceb", "ff0ddd32-dac8-45c5-a207-07d82a812e78", "a7092e61-8c7b-4c79-bff8-4e3dde8dd63d", "78f66afa-a5cd-42b2-8963-fbe7ee832903", "718012e8-0064-465f-86e3-e33226b3a100", "cc00c3cc-9f1b-4aea-a061-a2fc210a113c", "c3f11412-060c-48ea-8ab2-747debcb92c7"},
                    MinimumNumberForCombinationPurchase = 5422,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 9536,
                    MaxTotalPointAmount = 6615,
                    DestPrivateMoneyId = "d131a915-2939-44d5-b344-449adb4679be",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign17()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    Description = "l2m8nhmhWmlD5AgJ4dO8VEt3hyN01xWKpyfSJX1OiNUbqHXuSEWeM8VLmM8qznKIn9uBoqN3XKkwmXFnLL0vhZmz7rucmF8n8VnjFoEs5f64mvX",
                    Status = "disabled",
                    PointExpiresAt = "2018-03-22T08:56:43.000000+09:00",
                    PointExpiresInDays = 7729,
                    IsExclusive = false,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{3, 1, 4, 2, 2, 5, 0, 6},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"8cb080da-548e-4c76-a3e6-c3809afd7643", "8b6e1321-0b25-4c7b-a426-d9147857b345", "b535425b-73d3-4db8-a148-aaff7631f5ff", "b1db3748-a54a-45ad-a0a3-d9dc5fc9d41d", "27d1a508-36be-4d66-bc35-a4a4e8fd0eb0", "cb827cd4-b095-4d82-9fc3-4a92305a37b5", "f7ac5b79-cc5c-4a90-b248-4e091bdf16a2", "697d4e13-12ce-4181-9ef2-e2966d1aa8d0"},
                    MinimumNumberForCombinationPurchase = 8510,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 5044,
                    MaxTotalPointAmount = 8245,
                    DestPrivateMoneyId = "def31f8b-9268-48a8-843b-f0b1a787f1f5",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCampaign18()
        {
            try {
                Request.CreateCampaign request = new Request.CreateCampaign(
                    "3cZ4NnyIEjaN6dYZY4p9bZgscBV3pXiPPiW2qUm4FbQucsmz0GYwY85K8kF9CcO2FC",
                    "aca9f200-0f2e-41a1-91da-bf372c21a0f7",
                    "2020-04-15T14:36:10.000000+09:00",
                    "2019-06-12T20:48:45.000000+09:00",
                    4085,
                    "payment"
                ) {
                    BearPointShopId = "333d1d78-992f-4b49-a25f-1f758078aba0",
                    Description = "PgKcAH4LqtvnYdJrsgVxWy0PirB5ccKSjPsnaJy0xSUaUZ3KYipGveNp11WiSr08uCzB0JSt7hZNL6cvcqBnhGnyRs1ZbgEX46DL0",
                    Status = "disabled",
                    PointExpiresAt = "2016-03-08T05:33:55.000000+09:00",
                    PointExpiresInDays = 4186,
                    IsExclusive = false,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{4, 4, 6, 2, 3, 2},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"93b89fc2-683b-4f4a-9d9b-5b33038e1d9c", "26eedf7f-cd10-44b2-bd79-2cbae059e600", "3415b397-57a7-4f14-a3a2-f26566eda148"},
                    MinimumNumberForCombinationPurchase = 2991,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 5649,
                    MaxTotalPointAmount = 1680,
                    DestPrivateMoneyId = "4059f80e-db4a-4c03-81d3-9c198da61d35",
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
