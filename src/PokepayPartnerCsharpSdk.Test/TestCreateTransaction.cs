// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransaction0()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "9e97eeff-5fec-4b17-ae66-be15e72619ce",
                    "1074fcae-d78a-4ed6-9457-7615bf98ffc6",
                    "7ef1721c-45d4-4c04-bc7b-a9eb4f8b5568"
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction1()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "9e97eeff-5fec-4b17-ae66-be15e72619ce",
                    "1074fcae-d78a-4ed6-9457-7615bf98ffc6",
                    "7ef1721c-45d4-4c04-bc7b-a9eb4f8b5568"
                ) {
                    Description = "YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrgh98RslDBuoJSIFUrT",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction2()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "9e97eeff-5fec-4b17-ae66-be15e72619ce",
                    "1074fcae-d78a-4ed6-9457-7615bf98ffc6",
                    "7ef1721c-45d4-4c04-bc7b-a9eb4f8b5568"
                ) {
                    PointExpiresAt = "2023-03-05T12:06:42.000000Z",
                    Description = "1u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxw",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction3()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "9e97eeff-5fec-4b17-ae66-be15e72619ce",
                    "1074fcae-d78a-4ed6-9457-7615bf98ffc6",
                    "7ef1721c-45d4-4c04-bc7b-a9eb4f8b5568"
                ) {
                    PointAmount = 2057,
                    PointExpiresAt = "2024-06-04T22:20:16.000000Z",
                    Description = "3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXH",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction4()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "9e97eeff-5fec-4b17-ae66-be15e72619ce",
                    "1074fcae-d78a-4ed6-9457-7615bf98ffc6",
                    "7ef1721c-45d4-4c04-bc7b-a9eb4f8b5568"
                ) {
                    MoneyAmount = 4269,
                    PointAmount = 1828,
                    PointExpiresAt = "2025-10-16T13:03:02.000000Z",
                    Description = "5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86D9XZfo8j2fPJCGzVYdohDRxce",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
