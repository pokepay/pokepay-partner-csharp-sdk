// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransaction0()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "7c060d92-ea09-40f8-9126-4b667e847f87",
                    "28293aba-96e0-469c-8ff1-264e6c4457a5",
                    "a2162487-9e95-413b-8b89-ddc73ed91754"
                );
                Response.Transaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction1()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "7c060d92-ea09-40f8-9126-4b667e847f87",
                    "28293aba-96e0-469c-8ff1-264e6c4457a5",
                    "a2162487-9e95-413b-8b89-ddc73ed91754"
                ) {
                    Description = "hBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiT",
                };
                Response.Transaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction2()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "7c060d92-ea09-40f8-9126-4b667e847f87",
                    "28293aba-96e0-469c-8ff1-264e6c4457a5",
                    "a2162487-9e95-413b-8b89-ddc73ed91754"
                ) {
                    PointExpiresAt = "2020-04-14T13:08:25.000000+09:00",
                    Description = "RlgPRLO6iu4xB9p9hHVjuFskSUixLpvflY8M",
                };
                Response.Transaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction3()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "7c060d92-ea09-40f8-9126-4b667e847f87",
                    "28293aba-96e0-469c-8ff1-264e6c4457a5",
                    "a2162487-9e95-413b-8b89-ddc73ed91754"
                ) {
                    PointAmount = 3034,
                    PointExpiresAt = "2017-03-31T18:15:26.000000+09:00",
                    Description = "vlfPZ9XRs2DjUex8FZcru468uiy2IBQsK",
                };
                Response.Transaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction4()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "7c060d92-ea09-40f8-9126-4b667e847f87",
                    "28293aba-96e0-469c-8ff1-264e6c4457a5",
                    "a2162487-9e95-413b-8b89-ddc73ed91754"
                ) {
                    MoneyAmount = 7650,
                    PointAmount = 894,
                    PointExpiresAt = "2021-08-05T17:01:01.000000+09:00",
                    Description = "UonyUv3nTPZ701h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzw",
                };
                Response.Transaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
