// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransaction0()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "8ccf8413-a6db-4056-8c26-76f0e1a0568a",
                    "5984830b-8532-4cd6-ad67-3e1d9ac795a0",
                    "147b9c7e-3233-47e5-a8f0-f0a7e67cbf8d"
                );
                Response.Transaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction1()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "8ccf8413-a6db-4056-8c26-76f0e1a0568a",
                    "5984830b-8532-4cd6-ad67-3e1d9ac795a0",
                    "147b9c7e-3233-47e5-a8f0-f0a7e67cbf8d"
                ) {
                    Description = "OU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1UyPaGHVkyMSdmemZcovbEUc9TiM3DTSa7pJlo8JS6mIVfCl8",
                };
                Response.Transaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction2()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "8ccf8413-a6db-4056-8c26-76f0e1a0568a",
                    "5984830b-8532-4cd6-ad67-3e1d9ac795a0",
                    "147b9c7e-3233-47e5-a8f0-f0a7e67cbf8d"
                ) {
                    PointExpiresAt = "2025-04-06T01:27:47.000000+09:00",
                    Description = "6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuP",
                };
                Response.Transaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction3()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "8ccf8413-a6db-4056-8c26-76f0e1a0568a",
                    "5984830b-8532-4cd6-ad67-3e1d9ac795a0",
                    "147b9c7e-3233-47e5-a8f0-f0a7e67cbf8d"
                ) {
                    PointAmount = 391,
                    PointExpiresAt = "2016-10-10T04:01:55.000000+09:00",
                    Description = "xLQqoj9SXP9EgD",
                };
                Response.Transaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction4()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "8ccf8413-a6db-4056-8c26-76f0e1a0568a",
                    "5984830b-8532-4cd6-ad67-3e1d9ac795a0",
                    "147b9c7e-3233-47e5-a8f0-f0a7e67cbf8d"
                ) {
                    MoneyAmount = 4265,
                    PointAmount = 3786,
                    PointExpiresAt = "2020-04-05T05:43:41.000000+09:00",
                    Description = "agTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3PolsdbrxUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSV",
                };
                Response.Transaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
