// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransaction0()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "6fe0fdb3-6638-4faf-8c95-29d89bbfa220",
                    "08eb55d3-3533-4370-bab0-e1f5405f1cfa",
                    "d1a16174-ee1d-4db0-aee0-c7c3d7637784"
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction1()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "6fe0fdb3-6638-4faf-8c95-29d89bbfa220",
                    "08eb55d3-3533-4370-bab0-e1f5405f1cfa",
                    "d1a16174-ee1d-4db0-aee0-c7c3d7637784"
                ) {
                    Description = "CblPXfInfCj0R0XnxJXjNE81PmHvXlMCWavLgG52Bn05wFteywb1r7kwa57UfY7TtwxIDM6AreYDLpwMgcVhc71obVyLmCwhvch3U",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction2()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "6fe0fdb3-6638-4faf-8c95-29d89bbfa220",
                    "08eb55d3-3533-4370-bab0-e1f5405f1cfa",
                    "d1a16174-ee1d-4db0-aee0-c7c3d7637784"
                ) {
                    PointExpiresAt = "2021-03-29T09:06:02.000000+09:00",
                    Description = "D4XzGcCZ2",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction3()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "6fe0fdb3-6638-4faf-8c95-29d89bbfa220",
                    "08eb55d3-3533-4370-bab0-e1f5405f1cfa",
                    "d1a16174-ee1d-4db0-aee0-c7c3d7637784"
                ) {
                    PointAmount = 3289,
                    PointExpiresAt = "2022-08-18T08:19:48.000000+09:00",
                    Description = "qkMOTBGQTlzRYXoOTKHJgicY1puoSchjJavVxedDlgH5YR67vrz5JGUqdwbXkZul4ao78il866NPfUsYZA3xlFep4TTyFADbjTc857ylEqer93QCKckmJQ8lY9Yx1xFHULTFUhWs9u8kPD52TCoVRMVRhGgoQCAfjmi2agONKJ6VhZc7YhEc14",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction4()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "6fe0fdb3-6638-4faf-8c95-29d89bbfa220",
                    "08eb55d3-3533-4370-bab0-e1f5405f1cfa",
                    "d1a16174-ee1d-4db0-aee0-c7c3d7637784"
                ) {
                    MoneyAmount = 2002,
                    PointAmount = 5130,
                    PointExpiresAt = "2021-02-04T02:38:55.000000+09:00",
                    Description = "OvMgFLj8fVtmwDipgvkQkbNliNsSpuu1ZooeueAyoUrWNfFmoMvKqcJKRTZUbdm25EwP8cC2JTei9gNrgnbhdYiGliBMkMgG86rcDjCUU6hWQpMu2YsbwKwfLTalwmTCGE136H6LbmtfRdgtNQe",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
