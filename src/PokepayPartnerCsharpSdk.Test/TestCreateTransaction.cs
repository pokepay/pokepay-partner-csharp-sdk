// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransaction0()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "04799551-57d2-44c1-99d0-935f0ba457f9",
                    "89296511-b3fe-4c6d-a552-178285397c97",
                    "a8ee8466-512e-41a8-8681-5d4ff1a02148"
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction1()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "04799551-57d2-44c1-99d0-935f0ba457f9",
                    "89296511-b3fe-4c6d-a552-178285397c97",
                    "a8ee8466-512e-41a8-8681-5d4ff1a02148"
                ) {
                    Description = "sPVjb9UC",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction2()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "04799551-57d2-44c1-99d0-935f0ba457f9",
                    "89296511-b3fe-4c6d-a552-178285397c97",
                    "a8ee8466-512e-41a8-8681-5d4ff1a02148"
                ) {
                    PointExpiresAt = "2020-09-01T03:43:30.000000+09:00",
                    Description = "PcYx5YXiYOW0oa5SUOR88F7Ubd6EIlmfbIWBjq1h3aM3MFSn6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3ge",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction3()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "04799551-57d2-44c1-99d0-935f0ba457f9",
                    "89296511-b3fe-4c6d-a552-178285397c97",
                    "a8ee8466-512e-41a8-8681-5d4ff1a02148"
                ) {
                    PointAmount = 3554,
                    PointExpiresAt = "2021-12-19T11:45:32.000000+09:00",
                    Description = "vAwjzG8UYapgA4DXNtjsg9PgQ",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction4()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "04799551-57d2-44c1-99d0-935f0ba457f9",
                    "89296511-b3fe-4c6d-a552-178285397c97",
                    "a8ee8466-512e-41a8-8681-5d4ff1a02148"
                ) {
                    MoneyAmount = 2716,
                    PointAmount = 8016,
                    PointExpiresAt = "2020-04-07T19:42:20.000000+09:00",
                    Description = "n4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLV",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
