// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransaction0()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "958689fa-f1f8-4e2e-83f2-43766ca06db6",
                    "8befe189-0d0e-4c6c-8635-854ab5100131",
                    "63b102d1-0734-4e85-a505-72d585d913d0"
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction1()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "958689fa-f1f8-4e2e-83f2-43766ca06db6",
                    "8befe189-0d0e-4c6c-8635-854ab5100131",
                    "63b102d1-0734-4e85-a505-72d585d913d0"
                ) {
                    Description = "erVMNNTefXEMIFouHmdMBVROejfXThet70vpYW8E8Nu88PpMmOLglv04yuCesBFMo5xWeqxKkNHgfQZmhYF8JpJb1QQm2Wbh7cZio9VyoMI8AvMS89nNvCQvlUTc1ZogOkLgF1ND1O",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction2()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "958689fa-f1f8-4e2e-83f2-43766ca06db6",
                    "8befe189-0d0e-4c6c-8635-854ab5100131",
                    "63b102d1-0734-4e85-a505-72d585d913d0"
                ) {
                    PointExpiresAt = "2024-04-29T12:47:15.000000+09:00",
                    Description = "jIlJxu8sDuyuhBK3AAb2TEV4SUkPgWnGyIDqOeaKUYRitrBu3US",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction3()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "958689fa-f1f8-4e2e-83f2-43766ca06db6",
                    "8befe189-0d0e-4c6c-8635-854ab5100131",
                    "63b102d1-0734-4e85-a505-72d585d913d0"
                ) {
                    PointAmount = 3533,
                    PointExpiresAt = "2022-10-01T17:45:36.000000+09:00",
                    Description = "C8B1VTGrGM5dG6JmQbgdLBA5qdsqAztHIhphGWX2WlFk6HpghOiY6ih5BidS2xsi8OOcn8FXd1jydD8MlCgHSn8gtM91RFRuTYJ222hvIzSGRf03HzUF2AyZmspigAD6GlJrTdqAyOCe2diySEUz",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction4()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "958689fa-f1f8-4e2e-83f2-43766ca06db6",
                    "8befe189-0d0e-4c6c-8635-854ab5100131",
                    "63b102d1-0734-4e85-a505-72d585d913d0"
                ) {
                    MoneyAmount = 425,
                    PointAmount = 4888,
                    PointExpiresAt = "2016-04-23T18:59:18.000000+09:00",
                    Description = "zdZ0L3FEG21qvmEPiHcJp8RhT8xH2U6hYaEKjULgyBWuDfy9qlOTeyi33a7PlMB7BW8jBvThO75K952XpO0YF3iSXkKtehbwkIOE3XZSFIav4gjcmQP4qTLMEasvsBAGCp2KMGwoBoPrVLWEkMzXVdXGmLbJsPa8rz4m8x5fvwECIAeLzMUFS0qR",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
