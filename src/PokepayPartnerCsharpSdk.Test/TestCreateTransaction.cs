// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransaction0()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "3d478e43-b38c-4559-b9c8-88596a03828e",
                    "3f472a9d-e07d-498f-b0a7-149a95f4c399",
                    "9c857966-1d17-42e1-8acd-9aa120952c0f"
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction1()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "3d478e43-b38c-4559-b9c8-88596a03828e",
                    "3f472a9d-e07d-498f-b0a7-149a95f4c399",
                    "9c857966-1d17-42e1-8acd-9aa120952c0f"
                ) {
                    Description = "c",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction2()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "3d478e43-b38c-4559-b9c8-88596a03828e",
                    "3f472a9d-e07d-498f-b0a7-149a95f4c399",
                    "9c857966-1d17-42e1-8acd-9aa120952c0f"
                ) {
                    PointExpiresAt = "2016-05-29T14:03:34.000000+09:00",
                    Description = "sZ3tfn14pqdpY2gOVzxC2AMFcqtkzhdfPKiy9SERDVnpaYhOvVB8b8Y5rPTIoQafvlfkuyBchbjOVFfaAmwoPiUeFs2qGGZk77FXigkPx1NC7bcdhHDyq2BmegmNcooOzsV0UAnFDq2j42",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction3()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "3d478e43-b38c-4559-b9c8-88596a03828e",
                    "3f472a9d-e07d-498f-b0a7-149a95f4c399",
                    "9c857966-1d17-42e1-8acd-9aa120952c0f"
                ) {
                    PointAmount = 281,
                    PointExpiresAt = "2023-05-25T06:55:28.000000+09:00",
                    Description = "KSjWX0mczdG92I3EQWa6MviKhzgN1WE1E9QE8I1WOtKGTOoDsggK2zVvIrNmjPyMt7JZTknlcSLOAfgHki7iEUUEZsYB8I8w6YX9AjYRSoiU1BYQYTGkBMdZ9gxwOl",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction4()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "3d478e43-b38c-4559-b9c8-88596a03828e",
                    "3f472a9d-e07d-498f-b0a7-149a95f4c399",
                    "9c857966-1d17-42e1-8acd-9aa120952c0f"
                ) {
                    MoneyAmount = 5124,
                    PointAmount = 9503,
                    PointExpiresAt = "2023-03-19T19:18:51.000000+09:00",
                    Description = "DOeBSRiyqeameMaY0bgN8gTUkelv3hkGmk4iWQZAVafOlabiOcEnloh2DXft8ZR3ZIT5H8aSOl3MDXnG9yHqEA",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
