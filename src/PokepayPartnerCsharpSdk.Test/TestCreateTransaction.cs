// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTransaction0()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "049c0525-ff3c-4d36-aa54-ff8268e7b0b2",
                    "de8c2ba2-c9b4-4d33-9c3d-27533f3f8456",
                    "68421357-2356-4085-b243-aafcfb559290"
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction1()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "049c0525-ff3c-4d36-aa54-ff8268e7b0b2",
                    "de8c2ba2-c9b4-4d33-9c3d-27533f3f8456",
                    "68421357-2356-4085-b243-aafcfb559290"
                ) {
                    Description = "QIBiHYmKY25i4MRsYkebC1mGC1HEyM4IgdZtQLunXqinzlD3kjjjMDzJT3zpPxyXpoadfmJcqUyv1OiOSeMWUW0c9QLb7OsFH9MHsHyTdDV6PeBgERATAf97QHmH34bZxOZ7dgoxVzpvRY43UFXn5gi9hc69BFIoQFe10zpKe2S2i6KducC3jSQiuP1S6p9Uhh28z",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction2()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "049c0525-ff3c-4d36-aa54-ff8268e7b0b2",
                    "de8c2ba2-c9b4-4d33-9c3d-27533f3f8456",
                    "68421357-2356-4085-b243-aafcfb559290"
                ) {
                    PointExpiresAt = "2019-08-02T00:10:59.000000+09:00",
                    Description = "ZzJyhPYKBesq3NBJ8qJU9nyNR5lpyt5BmG0fNYiwoOOqxUiDDQ0j9lRzM7ziJ72UBgMR6J",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction3()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "049c0525-ff3c-4d36-aa54-ff8268e7b0b2",
                    "de8c2ba2-c9b4-4d33-9c3d-27533f3f8456",
                    "68421357-2356-4085-b243-aafcfb559290"
                ) {
                    PointAmount = 8488,
                    PointExpiresAt = "2023-09-27T18:17:17.000000+09:00",
                    Description = "PBXADBomVencyFAnbnAPWIWQ1pZIoHgIINZ6j",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTransaction4()
        {
            try {
                Request.CreateTransaction request = new Request.CreateTransaction(
                    "049c0525-ff3c-4d36-aa54-ff8268e7b0b2",
                    "de8c2ba2-c9b4-4d33-9c3d-27533f3f8456",
                    "68421357-2356-4085-b243-aafcfb559290"
                ) {
                    MoneyAmount = 3838,
                    PointAmount = 7539,
                    PointExpiresAt = "2020-05-24T17:19:35.000000+09:00",
                    Description = "0bHYk2hvIgD20o8uH",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
