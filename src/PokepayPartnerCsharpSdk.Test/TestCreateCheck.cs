// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCheck
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCheck0()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 2307.0,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck1()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 3709.0,
                    Description = "eQWnqCuOArG33l7qb3v1gqjx5Jc8zQJWsgKnVtexTE46",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck2()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 2409.0,
                    IsOnetime = false,
                    Description = "IP7mfAvOKSSiFS92zjZzvSj6OhelGPLFtiWMDbRt2N1YrwK0iyweLiRsKZdFFVAaURz3rUoC8J8IuMFil69AHfeE3db08d5cRU320Tga9q3Z0gvlMnVnKV3ZUqcmjqVa4wENv2C91WIJHPlGxkfOuHquqdTSKY4bsimcjNDeFLLMWBN8Gu1eV",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck3()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 1457.0,
                    UsageLimit = 4898,
                    IsOnetime = true,
                    Description = "v3DbmmfNzKmM6mRgFADHsquvTDdbgHj1l5Bka2sMh4KczQL477Zk0qGc80nbIWtVVVXfUuvfcMt4HohIX17ZubIQWBzSeZUtaP0YVjii3a9BIaCOmYSkSu9fCRkJYEfFVj3ntieX6Xl6G1UqBu",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck4()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 6820.0,
                    ExpiresAt = "2021-10-15T20:42:00.000000+09:00",
                    UsageLimit = 7262,
                    IsOnetime = true,
                    Description = "so1rhCg1pVNZfcIF9Hdh3OFUqbb9439jEkWFwMKawnyBCzA5KRrhjdLqzxGxs2ak7UDs3A56Zgq",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck5()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 6261.0,
                    PointExpiresAt = "2020-12-10T11:09:18.000000+09:00",
                    ExpiresAt = "2024-01-29T09:00:23.000000+09:00",
                    UsageLimit = 5362,
                    IsOnetime = true,
                    Description = "JLhwcLjPO8XdzYgT41fn3W0GhTUGPHEFMOLdBK2dGvLLSsIe4oRkN2v7Y66ICdqY1hdjjXDRotESMf0pVxVywaqwUREv1xlspVZMM9q4c2KEnfJDKr",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck6()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 6787.0,
                    PointExpiresInDays = 9952,
                    PointExpiresAt = "2016-09-13T22:06:40.000000+09:00",
                    ExpiresAt = "2025-06-10T14:06:29.000000+09:00",
                    UsageLimit = 1744,
                    IsOnetime = false,
                    Description = "TqIxxlCSwqR2Xk7L4UYQ609mxVUzutYd9IK5RjGMBf5iWss7hvNypqqNuQ9YKcdimu8yCqTzCQp6mXzDwCbX9KQ",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck7()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 5672.0,
                    BearPointAccount = "38578251-9f58-45d1-b59f-af8939d4ca9a",
                    PointExpiresInDays = 9513,
                    PointExpiresAt = "2025-03-20T08:46:18.000000+09:00",
                    ExpiresAt = "2022-07-12T20:23:42.000000+09:00",
                    UsageLimit = 2160,
                    IsOnetime = true,
                    Description = "WBfJPxVizx5ZKZjKXkae7iXp2TGpe39qbtM1Q74wzodfMAIyn",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck8()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 7961.0,
                    PointAmount = 8403.0,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck9()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 9708.0,
                    PointAmount = 6688.0,
                    Description = "hSolurEOgH1NAUBT1H",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck10()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 9173.0,
                    PointAmount = 1598.0,
                    IsOnetime = false,
                    Description = "2pBFYgUX8zrgvZIGXJFIcAqoH8QUO5EjQIqoXpsSatn5B0yrN4mq0sYLbHBGe4R1Yyr1GxNfOeRLXAXncIWaFGWGHhzxLhkUeyy1T3DOfaPEAaAT1crxZFOlwZV2lEXStJzEjzwYI5IgHiPxLro7D6EH2aoTltrAu1Bu46V",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck11()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 5471.0,
                    PointAmount = 9353.0,
                    UsageLimit = 8721,
                    IsOnetime = false,
                    Description = "WozqiNUro466b0ilk8DZcpxIwZ97jQQ2qAeVA1TZUNoVje7EcIe674oni5pO6ABSG2JmpB9vX733d9mK1lHBLbRgj5yBheHDQ4jiiM0rk3krR2NTktVpDu9rB0tpVv99uk7Y",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck12()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 2537.0,
                    PointAmount = 837.0,
                    ExpiresAt = "2023-09-21T08:08:50.000000+09:00",
                    UsageLimit = 1249,
                    IsOnetime = false,
                    Description = "uIuxsa1ErDR6omKhIg7ug3HPhQxT9hoWkSSYvywgHtIHCdDjzUIt8bQPPEcvYOjAQJc4GiLyk4NCcF64JZml805DlsZdrTn",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck13()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 1877.0,
                    PointAmount = 8196.0,
                    PointExpiresAt = "2016-01-04T04:18:03.000000+09:00",
                    ExpiresAt = "2024-08-20T17:51:04.000000+09:00",
                    UsageLimit = 1970,
                    IsOnetime = false,
                    Description = "KgsN09hIDTJVYsUIevs7fLDMr3jLSIYrUFooG2gZU1BHEQDWhFKjT3iK3IPoZ9edcUItq9i8Xjvqqjd2Lu7ayBcuqyfgBkL4szvd8gzF5U",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck14()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 5045.0,
                    PointAmount = 9279.0,
                    PointExpiresInDays = 9077,
                    PointExpiresAt = "2017-08-18T23:52:58.000000+09:00",
                    ExpiresAt = "2022-04-04T03:48:50.000000+09:00",
                    UsageLimit = 452,
                    IsOnetime = true,
                    Description = "sqYgIaqtXkgUzRwdoiO8H8J3hbzti3s6zwjyuPSm1dkAYKQTe3gSj5rV6JA7xyV32wO19xh7NLfLcIM0WdRK6R0E62tWsMS96jjI5EZcnkPDRPrZKb1SAxCpojJvXF10USwrpx8O35gWmsnc1xByI6CzF5IYyoFlmXmPytDz8F",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck15()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    MoneyAmount = 5780.0,
                    PointAmount = 2371.0,
                    BearPointAccount = "67f49daf-5569-4737-815a-9008026d5875",
                    PointExpiresInDays = 731,
                    PointExpiresAt = "2024-04-15T04:00:50.000000+09:00",
                    ExpiresAt = "2020-09-25T06:45:23.000000+09:00",
                    UsageLimit = 2177,
                    IsOnetime = false,
                    Description = "AAO00lsb2gOCupRFwQnwCU1ECWYAVqyiQpUp",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck16()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    PointAmount = 3737.0,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck17()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    PointAmount = 6163.0,
                    Description = "JoN0n6xYMemmrYpSq98LtayCT38T2KWFg35rtZQ26uWWXiqm6iS7cDTm6djK9Gt6FRN5PiET5xNpW9n3UWNne2YRbLCc2a6Oew9mm303rwcD3KsJWJ6yIUbte0ulneobk8zmQ0iirLsxuwW4FtaBAFY3ThtFgqUT5E",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck18()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    PointAmount = 9825.0,
                    IsOnetime = true,
                    Description = "v9ZCVffLyoyNXMpeG52Gw7sOhPX7rGvlmTFQ4X0Ruci671ecuDYbZFGMji5rEWQSh1IcFOucgdOKFORTAr5qkypCTcuiortbaPCv9hKEcJ88B8q90fDWwR8ShgeuvfKm7pLqMMlkaC0amaBNTU",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck19()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    PointAmount = 8526.0,
                    UsageLimit = 3045,
                    IsOnetime = true,
                    Description = "q55sGkKersPDiYLlkeGSlaK3nDg3tzxT7Cw9I8VlSWz4njNwywa",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck20()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    PointAmount = 744.0,
                    ExpiresAt = "2018-07-26T23:30:03.000000+09:00",
                    UsageLimit = 1739,
                    IsOnetime = false,
                    Description = "geSt6NofAG85RAB79CNvMlUDTzcD0IlYswfSiwKrcR1N43J30h7RmFQvRKVmwcWlC9PydEanXedSP2prnXYidI5azj8F5Kiit1T2y1kF2SREONx4rXBga8EDD0eEqGvocUcJBDOLKE9bUiGCHGg6w4mQs",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck21()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    PointAmount = 2659.0,
                    PointExpiresAt = "2018-09-18T05:28:24.000000+09:00",
                    ExpiresAt = "2017-10-23T06:36:11.000000+09:00",
                    UsageLimit = 1701,
                    IsOnetime = true,
                    Description = "Q7t6gCh2wdTjFRW4r2leIZghrP0jk5FtU9cv1NAKjHuZFothwhxzgE",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck22()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    PointAmount = 7318.0,
                    PointExpiresInDays = 7501,
                    PointExpiresAt = "2024-01-11T02:18:03.000000+09:00",
                    ExpiresAt = "2017-11-20T20:39:10.000000+09:00",
                    UsageLimit = 487,
                    IsOnetime = true,
                    Description = "edSPl3hLgbhBKtDbNv3k5QWUkLLoMv6zLDTKV9oXxivOk9PQEhlXNxlC7IFGtRYtjYVyHvFqyXkXM3YGshr0Ykkcv4kcHZVDUvhkvNxO30W9B9aMmLJSUQFGRAWfUMeeUjJUgJGdxIP8TMar3pvkDxkdfAjjM6D4AHM36MqAeVnNkQprtag",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck23()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "6e6e1651-cbda-43bb-8d9b-bda7701d0aa8"
                ) {
                    PointAmount = 7683.0,
                    BearPointAccount = "0bf25af5-7aac-4213-9b2d-b52146842c06",
                    PointExpiresInDays = 8271,
                    PointExpiresAt = "2022-09-17T10:11:26.000000+09:00",
                    ExpiresAt = "2019-07-14T06:56:46.000000+09:00",
                    UsageLimit = 5968,
                    IsOnetime = true,
                    Description = "eWMPNJ7VqNAZOG5IodcIhXxCjIekiIuC7B0oDMhGqUbQ7RlvEzV56MAQu9owfRSeEv",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
