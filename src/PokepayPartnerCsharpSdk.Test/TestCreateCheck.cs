// DO NOT EDIT: File is generated by code generator.
#nullable enable
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCheck
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCheck0()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 5442,
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck1()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 4924,
                    Description = "BCDG7j4DoWkpZIbqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7QMsIbzCAj1GsSvfXjxUW5PMdDuBsMe04PTf8v",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck2()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 7165,
                    IsOnetime = false,
                    Description = "QwwHu7ykbtkzGPhzROeLpMaUZfjz7mGpF3omDB92rueqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ95sfTG55oAI4V",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck3()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 9795,
                    UsageLimit = 6471,
                    IsOnetime = false,
                    Description = "4sTwcYeFwcP7ZmLygXYRtjxN2aIco6xNkWo0aYr1y1KHCmQGL0IM3EaCDd87kJG01a7GOWj7LV4v5yotPxhlRj2vkjikjfOo5Zy9zD8cfycxdjXF6cmwiKvevzAx7rHin0MHYFpvhqZUg2yG4",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck4()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 6414,
                    ExpiresAt = "2019-05-03T14:12:01.000000+09:00",
                    UsageLimit = 7164,
                    IsOnetime = true,
                    Description = "L4evFZLjpsodOQD43fZ5T5bk20dIuBp2e25agSXyEGickpeze",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck5()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 4023,
                    PointExpiresAt = "2018-03-11T02:38:10.000000+09:00",
                    ExpiresAt = "2022-07-08T12:11:45.000000+09:00",
                    UsageLimit = 872,
                    IsOnetime = false,
                    Description = "ltNB5ed",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck6()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 1652,
                    PointExpiresInDays = 5298,
                    PointExpiresAt = "2020-07-06T08:37:37.000000+09:00",
                    ExpiresAt = "2024-02-16T01:46:48.000000+09:00",
                    UsageLimit = 3355,
                    IsOnetime = true,
                    Description = "n6abEccTMUOFUG9Fme9wlEEj2gZC8ckmFOzWRdKb11QTIHM0x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFyzfyt6Bg95FB1a7IFTBkW9tPubyeqITUoc54HWI6lY",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck7()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 8215,
                    BearPointAccount = "526fadb3-fa90-457f-8e5c-0678195e33c1",
                    PointExpiresInDays = 5555,
                    PointExpiresAt = "2018-09-23T16:27:36.000000+09:00",
                    ExpiresAt = "2018-03-05T11:35:21.000000+09:00",
                    UsageLimit = 1183,
                    IsOnetime = false,
                    Description = "6LVyn2dOGJj5BoyL1MgjctfisLuYo4aorOwFrhmbs26EDkzDLnAr7NHvMDZLOk3Kn6N9IKA2DQ0UDl0RkGXqQRpkGArTGUPugetKJLdESdgB4DMlPh",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck8()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 4341,
                    PointAmount = 8453,
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck9()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 1819,
                    PointAmount = 12,
                    Description = "gx6J23S5a4KJH2dJnXOeAy8xYgmSSWd6nFdHza9f0TF30iljDxgSpyfoekUtYXnQ6dyRqDXbojqilSXXfgL13rI1kMYSkzLYWcqyBEPqq6jXoMPoI5dYhtAEAC8MN1MIRbysguh0xXqdkQK8VGfHRzulBqoPAVuBC2EUluqb81O3ZagKE8LcCa8bz2nHShe5Eo",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck10()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 342,
                    PointAmount = 5638,
                    IsOnetime = false,
                    Description = "dmx1iMacSt3whWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyAxdhT65YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAX",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck11()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 4463,
                    PointAmount = 8092,
                    UsageLimit = 7440,
                    IsOnetime = false,
                    Description = "UpOUbFxl1xg8SX1voG8Gydqo4fQ7D47J36mgyKf2pLnur36TYPgxI",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck12()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 5024,
                    PointAmount = 7269,
                    ExpiresAt = "2016-07-06T05:37:37.000000+09:00",
                    UsageLimit = 3031,
                    IsOnetime = true,
                    Description = "JKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLerHweV6yDqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQiRCyV",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck13()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 1083,
                    PointAmount = 7854,
                    PointExpiresAt = "2022-11-09T12:14:18.000000+09:00",
                    ExpiresAt = "2016-07-31T12:05:06.000000+09:00",
                    UsageLimit = 7214,
                    IsOnetime = false,
                    Description = "czNdwQ9LziqjK5MdQ1lZMyA",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck14()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 1234,
                    PointAmount = 8064,
                    PointExpiresInDays = 6979,
                    PointExpiresAt = "2024-08-10T09:35:05.000000+09:00",
                    ExpiresAt = "2018-04-18T08:05:42.000000+09:00",
                    UsageLimit = 5344,
                    IsOnetime = true,
                    Description = "SqVUKE1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enFyHh",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck15()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    MoneyAmount = 4553,
                    PointAmount = 5773,
                    BearPointAccount = "aa1efee2-12fb-4a74-a545-2a0562a1f98f",
                    PointExpiresInDays = 5520,
                    PointExpiresAt = "2018-06-14T19:13:27.000000+09:00",
                    ExpiresAt = "2018-12-04T15:17:40.000000+09:00",
                    UsageLimit = 8710,
                    IsOnetime = true,
                    Description = "OMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzykU4qQWwEl9RBh7JkqQ2DDr8e6Qf8fK7SBxethCuCr4dBSWzD3agMTAvZtCmtviHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYh",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck16()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    PointAmount = 3558,
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck17()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    PointAmount = 7124,
                    Description = "v94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsGYTRQVbbD",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck18()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    PointAmount = 7755,
                    IsOnetime = true,
                    Description = "fr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7if4YoZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRd",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck19()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    PointAmount = 7999,
                    UsageLimit = 6753,
                    IsOnetime = false,
                    Description = "T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioDpfXuzoNbRp",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck20()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    PointAmount = 9565,
                    ExpiresAt = "2017-02-13T22:49:55.000000+09:00",
                    UsageLimit = 4769,
                    IsOnetime = false,
                    Description = "j9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fm",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck21()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    PointAmount = 7691,
                    PointExpiresAt = "2016-03-06T09:52:08.000000+09:00",
                    ExpiresAt = "2021-09-17T16:54:03.000000+09:00",
                    UsageLimit = 1206,
                    IsOnetime = true,
                    Description = "SXXM3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck22()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    PointAmount = 2225,
                    PointExpiresInDays = 2621,
                    PointExpiresAt = "2019-10-29T04:38:08.000000+09:00",
                    ExpiresAt = "2023-05-17T07:39:03.000000+09:00",
                    UsageLimit = 6629,
                    IsOnetime = true,
                    Description = "NJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck23()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5"
                ) {
                    PointAmount = 4479,
                    BearPointAccount = "13049eeb-a24c-4638-bceb-db1ea417ee75",
                    PointExpiresInDays = 7753,
                    PointExpiresAt = "2018-05-08T07:35:43.000000+09:00",
                    ExpiresAt = "2023-11-14T12:55:05.000000+09:00",
                    UsageLimit = 608,
                    IsOnetime = false,
                    Description = "oA9Wjz3x",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
