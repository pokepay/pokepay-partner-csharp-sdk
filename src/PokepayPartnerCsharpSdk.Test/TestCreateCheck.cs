// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCheck
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCheck0()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 3986.0,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck1()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 4069.0,
                    Description = "bGzdrtQpvwcepLw1KkBJtbwYeBsF7ItOy4FjpautqzjJPl9QnSjt4hZQNwSftnVmRImqRzbC0jVU7NKCdoSfZCPku5qQcWtVbGUYtF6Th7k3TI9rMvpkLC76qjYnhjX2",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck2()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 5106.0,
                    IsOnetime = true,
                    Description = "KKG5mIsY2VEmgliqZdlqPXhEK6SzR3nLXvsYjdw7JhYvIjbW5aukZEmb9ncmV6PsLctTTl3YAc1dCq9Ui9gaAAKw3Qei9FeNvsRxbjF9viCyWu8BqMD8FNf2q2nsfwEeA6Cs5hSroOGYJ15NaurqmJ5GtxutvA0s8TubVwCLVo",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck3()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 4898.0,
                    UsageLimit = 7958,
                    IsOnetime = true,
                    Description = "NS1UdPBk0Ovh8Un68FvChtMTGNdLK3mtXZB0j4kpZJsreyw6B2u",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck4()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 2520.0,
                    ExpiresAt = "2023-08-16T11:00:53.000000+09:00",
                    UsageLimit = 3862,
                    IsOnetime = false,
                    Description = "6AcFRvYEgmqnUynfdd5FuIVY0PJqIY47cRumDa6YZsmN1SMcBXF8cirQrp08lJMhclGTo4SEFikXE2rea5w3L5VriqAvezLBc34dUDhwLuLcHvUoolNVE",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck5()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 566.0,
                    PointExpiresAt = "2021-04-10T16:21:57.000000+09:00",
                    ExpiresAt = "2023-04-15T19:24:56.000000+09:00",
                    UsageLimit = 6118,
                    IsOnetime = false,
                    Description = "iSIAHCkq6kI0CQuOyO2ueE2VBk1nrosDVuExXvE5A3osRVDHfW3H85pxPEQpgFuL20lqOlXaAsFoMjNsstG30VeLCG8RdaU55D98gLoanT21NBeUzOWgZlqFUk2uWiT9RAwdf2El83qj76JhUwFKA5EfYC",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck6()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 3125.0,
                    PointExpiresInDays = 1756,
                    PointExpiresAt = "2021-08-29T15:56:05.000000+09:00",
                    ExpiresAt = "2022-07-18T03:56:40.000000+09:00",
                    UsageLimit = 4516,
                    IsOnetime = false,
                    Description = "MTSnpZzRX9guSp7WoPpNrM8LRiMDosbizgbc7xRICOeHBPKyGPcvFmF9pplGQ0",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck7()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 4340.0,
                    BearPointAccount = "d68aef82-8dde-4219-8aba-06e002d754eb",
                    PointExpiresInDays = 3692,
                    PointExpiresAt = "2020-10-07T03:27:57.000000+09:00",
                    ExpiresAt = "2023-08-07T20:34:54.000000+09:00",
                    UsageLimit = 4264,
                    IsOnetime = false,
                    Description = "tRMgDE0k49pZdQHCx4wrR",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck8()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 2124.0,
                    PointAmount = 5942.0,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck9()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 4013.0,
                    PointAmount = 8253.0,
                    Description = "oxdbntmYZUkDvfyOTycosp9hN43bDiVELOchhFX0AQqF9wp3Bx5I4KD4OODJBABp1SkqZidpflaRg3gPJKAeBTj0kTyMSoVQRxo7U85psOds",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck10()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 3323.0,
                    PointAmount = 2556.0,
                    IsOnetime = true,
                    Description = "mAPEfMrw8B1tkP8dYjAvAAbqnyZ6PXh5Y4Neoaft2OJYmsVZ7kTHO5o6bTmabtCr2VVpMrCAYXqkQYzuQNEmzJriymujtP2lVKUJJcSFnBg0U5mGoqHcPxB6HSEdSobQc1uwgzYU3hPyKsYeMaKx",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck11()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 1045.0,
                    PointAmount = 4523.0,
                    UsageLimit = 7877,
                    IsOnetime = false,
                    Description = "vR0W4u4PW3VDnGx7gY4E4RjFR42kHIP5TnuscqJe9kDCs6Qq4rF0Z7rLqUS8xhAjkzZfHOnvJIeIkTPcoVuLKZHFQItuOm0a1567kjbmL",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck12()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 3138.0,
                    PointAmount = 6606.0,
                    ExpiresAt = "2023-06-03T13:10:12.000000+09:00",
                    UsageLimit = 6549,
                    IsOnetime = true,
                    Description = "PBWVsoCITiYIzu",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck13()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 7783.0,
                    PointAmount = 9630.0,
                    PointExpiresAt = "2021-10-12T04:53:33.000000+09:00",
                    ExpiresAt = "2023-04-28T07:02:36.000000+09:00",
                    UsageLimit = 8083,
                    IsOnetime = true,
                    Description = "w7yKThpkLNAiEy7IICIcfExi9pSU3gN475Qstz3fnm79P2MhZ95cGVvjV7JlCKIaSyG7AUfZy6RSTxotiWarOq084ScTFofHWXs1U857UAaUETdH4rw7NcEYMsydxwjLRCmcOBo3dcsIshIByaN2wGEFDVNS3HV2CYjFRDoP666Ds5lvAadsZ3CduwAuli",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck14()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 7812.0,
                    PointAmount = 1309.0,
                    PointExpiresInDays = 8419,
                    PointExpiresAt = "2023-03-07T13:21:51.000000+09:00",
                    ExpiresAt = "2023-12-24T19:49:44.000000+09:00",
                    UsageLimit = 8509,
                    IsOnetime = false,
                    Description = "sYMSh1XF15sRqSjhNLl5vdS6bBU9DAcW49eKhvXSDeKtNZFfG9g9ktHXbzbNgAeoPYtEHK9FQ05qODRAtSR6p9ARtC81M4AlDt1rYubM3cDlapcu30uYqm4KeJG9jd1xrLwoXVoBmdqdAIRfTPQfHfmV2uSeSgqBhx9pgNJOLUhW8ortjx3GHpo",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck15()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    MoneyAmount = 7147.0,
                    PointAmount = 2000.0,
                    BearPointAccount = "6f017723-2b8d-4cc5-a220-3280cb85d2dd",
                    PointExpiresInDays = 3486,
                    PointExpiresAt = "2021-10-24T23:39:13.000000+09:00",
                    ExpiresAt = "2020-06-24T13:11:31.000000+09:00",
                    UsageLimit = 2486,
                    IsOnetime = false,
                    Description = "1pRhEJZrKbYpOLnfbxKFIMs3Hns3L07ESeE6dgV4WITFdhdStRJEKwNihiCdi1Z4R",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck16()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    PointAmount = 6015.0,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck17()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    PointAmount = 5860.0,
                    Description = "z9124a5tGxPENuHwF3dbPRgWJVCoPQCKvPn3g3AFfY4mUZjPZNEtrDOx8VbnT6tPooWcqfr1FxDDIJAuMDHAESfwHTAsrqQU",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck18()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    PointAmount = 2309.0,
                    IsOnetime = false,
                    Description = "pNNaPqMTj3u7xr6o55RaaUwzsKV7dGTqS8aQkAS9XlUJrJJOL8ZaUPD6KfaTj81XKVl5ktsZF3vzsoRYAQSgsdBBR3nS7noY33DToLnvE1T7eDWyQIDyjDaOD2AgVEvT",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck19()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    PointAmount = 2297.0,
                    UsageLimit = 8258,
                    IsOnetime = false,
                    Description = "eezDtT0FihwKVT3VIsKTDCFFNa3EG7EPeBSQfFa7TewgW5CfqQHHQLSq8J24eiPzHCV6lUI0t5I0628sWUnAVFkG10bG11lEgEfmwMkp27JHeCoX8kzuoiGIytkdVkJsUKODB",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck20()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    PointAmount = 6985.0,
                    ExpiresAt = "2021-06-07T21:51:09.000000+09:00",
                    UsageLimit = 6422,
                    IsOnetime = true,
                    Description = "6sPHmh73P7tpgZnNmZaVHjzSf0biIBhBiyvOGPWJ3XEgnUnPs2dPsvQ1UH",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck21()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    PointAmount = 1240.0,
                    PointExpiresAt = "2022-06-30T16:20:10.000000+09:00",
                    ExpiresAt = "2023-08-23T08:06:49.000000+09:00",
                    UsageLimit = 8592,
                    IsOnetime = false,
                    Description = "Mg71YwucfBoYT8FDUOmXUjOJRJm",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck22()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    PointAmount = 8198.0,
                    PointExpiresInDays = 8191,
                    PointExpiresAt = "2022-02-25T05:06:45.000000+09:00",
                    ExpiresAt = "2023-08-22T10:23:19.000000+09:00",
                    UsageLimit = 2052,
                    IsOnetime = false,
                    Description = "j4tQQldbxesefUN5a8K5MZk",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck23()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "e326deab-0220-4a70-a948-08b1fe00bb95"
                ) {
                    PointAmount = 5860.0,
                    BearPointAccount = "bce6f382-250c-4e08-b521-0b914ce5590a",
                    PointExpiresInDays = 981,
                    PointExpiresAt = "2022-01-30T21:21:34.000000+09:00",
                    ExpiresAt = "2023-08-08T03:49:15.000000+09:00",
                    UsageLimit = 2965,
                    IsOnetime = false,
                    Description = "DRP46ejWhe120j03VX0zzCu1IHZvy7Dzu9SI1Sm2YRczvm2Ei30f1RVMQ8dNJz1Yc8KL",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
