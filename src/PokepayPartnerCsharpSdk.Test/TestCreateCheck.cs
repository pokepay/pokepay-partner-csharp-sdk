// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCheck
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCheck0()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 4581.0,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck1()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 9493.0,
                    Description = "sSHy55WYfHfvN0Q",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck2()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 2117.0,
                    IsOnetime = true,
                    Description = "OUmuQoNyAxdhT65YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu4UpOUbFxl1xg8SX1voG8Gydqo4fQ7D47J36mgyKf2pLnur36TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4m",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck3()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 2508.0,
                    UsageLimit = 357,
                    IsOnetime = false,
                    Description = "HweV",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck4()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 2950.0,
                    ExpiresAt = "2022-05-29T04:13:45.000000+09:00",
                    UsageLimit = 149,
                    IsOnetime = true,
                    Description = "DqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrv",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck5()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 9976.0,
                    PointExpiresAt = "2021-08-25T00:55:07.000000+09:00",
                    ExpiresAt = "2020-09-05T09:35:52.000000+09:00",
                    UsageLimit = 1437,
                    IsOnetime = false,
                    Description = "VYBDQiRCyVTR3czNdwQ9LziqjK5MdQ1lZMyARXVB9A32ESqVUKE1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enFyHhIbteE",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck6()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 5519.0,
                    PointExpiresInDays = 8734,
                    PointExpiresAt = "2024-02-28T16:30:39.000000+09:00",
                    ExpiresAt = "2022-03-29T23:28:49.000000+09:00",
                    UsageLimit = 6388,
                    IsOnetime = false,
                    Description = "OMttUhD",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck7()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 4912.0,
                    BearPointAccount = "48aa4112-5e4f-4969-b712-f5813d3aa3a2",
                    PointExpiresInDays = 454,
                    PointExpiresAt = "2023-12-25T10:44:06.000000+09:00",
                    ExpiresAt = "2024-01-24T01:46:23.000000+09:00",
                    UsageLimit = 9718,
                    IsOnetime = true,
                    Description = "7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzyk",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck8()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 9876.0,
                    PointAmount = 3252.0,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck9()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 6257.0,
                    PointAmount = 2818.0,
                    Description = "QWwEl9RBh7JkqQ2DDr8e6Qf8fK7SBxethCuCr4dBSWzD3agMTAvZtCmtviHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYhJfTJv94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT689",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck10()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 1833.0,
                    PointAmount = 6408.0,
                    IsOnetime = true,
                    Description = "BIT98Ea3vOiHnJbC3RzxMsGYTRQVbbD",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck11()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 7755.0,
                    PointAmount = 9414.0,
                    UsageLimit = 3574,
                    IsOnetime = true,
                    Description = "fr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7if4YoZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck12()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 7556.0,
                    PointAmount = 7166.0,
                    ExpiresAt = "2023-09-11T23:49:55.000000+09:00",
                    UsageLimit = 4178,
                    IsOnetime = true,
                    Description = "Y0a6T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioDpfXuzoNbRpuKefj",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck13()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 5381.0,
                    PointAmount = 3001.0,
                    PointExpiresAt = "2024-02-14T04:50:02.000000+09:00",
                    ExpiresAt = "2020-03-21T14:19:26.000000+09:00",
                    UsageLimit = 5343,
                    IsOnetime = true,
                    Description = "2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5SetJL",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck14()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 6569.0,
                    PointAmount = 6976.0,
                    PointExpiresInDays = 758,
                    PointExpiresAt = "2020-07-08T22:02:05.000000+09:00",
                    ExpiresAt = "2023-06-04T01:10:59.000000+09:00",
                    UsageLimit = 6943,
                    IsOnetime = true,
                    Description = "B6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck15()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    MoneyAmount = 8761.0,
                    PointAmount = 5250.0,
                    BearPointAccount = "36788d7e-438b-49d4-9cd9-322c5b3c0ab9",
                    PointExpiresInDays = 1987,
                    PointExpiresAt = "2023-11-06T02:29:36.000000+09:00",
                    ExpiresAt = "2021-04-29T11:26:40.000000+09:00",
                    UsageLimit = 3210,
                    IsOnetime = true,
                    Description = "5",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck16()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    PointAmount = 4732.0,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck17()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    PointAmount = 5287.0,
                    Description = "JiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZ",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck18()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    PointAmount = 5989.0,
                    IsOnetime = false,
                    Description = "dVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHb",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck19()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    PointAmount = 8199.0,
                    UsageLimit = 7334,
                    IsOnetime = false,
                    Description = "k2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JP",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck20()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    PointAmount = 6001.0,
                    ExpiresAt = "2021-08-25T22:19:54.000000+09:00",
                    UsageLimit = 4397,
                    IsOnetime = false,
                    Description = "pbbuSj1PURjYRasH9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk7",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck21()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    PointAmount = 2993.0,
                    PointExpiresAt = "2020-09-17T01:44:30.000000+09:00",
                    ExpiresAt = "2021-04-27T01:14:19.000000+09:00",
                    UsageLimit = 9193,
                    IsOnetime = true,
                    Description = "HcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJM",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck22()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    PointAmount = 6236.0,
                    PointExpiresInDays = 1021,
                    PointExpiresAt = "2021-12-04T04:39:01.000000+09:00",
                    ExpiresAt = "2022-05-28T06:47:48.000000+09:00",
                    UsageLimit = 1137,
                    IsOnetime = true,
                    Description = "2rRxx8SeYgA5RTAZIE0d3whSKLF",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck23()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "3062fee1-c575-4aaa-b8c4-41b4f9c7f129"
                ) {
                    PointAmount = 3590.0,
                    BearPointAccount = "9a21587b-1da3-4a00-9758-62c3604d51e7",
                    PointExpiresInDays = 9554,
                    PointExpiresAt = "2022-09-09T13:21:19.000000+09:00",
                    ExpiresAt = "2020-12-13T05:39:41.000000+09:00",
                    UsageLimit = 4068,
                    IsOnetime = false,
                    Description = "sQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN5uVHKI7mM3plg",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
