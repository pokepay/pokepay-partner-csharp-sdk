// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCheck
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCheck0()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 6362.0,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck1()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 2074.0,
                    Description = "iZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7if4YoZJ6xmZ8N4p4uCNZaugRp11iMc",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck2()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 9458.0,
                    IsOnetime = true,
                    Description = "ILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRdkY0a6T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioDpfXuzoNbRpuKefj9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5S",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck3()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 2842.0,
                    UsageLimit = 3756,
                    IsOnetime = true,
                    Description = "LuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onht",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck4()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 9766.0,
                    ExpiresAt = "2021-02-11T00:16:43.000000Z",
                    UsageLimit = 9631,
                    IsOnetime = true,
                    Description = "be1I3",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck5()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 8447.0,
                    PointExpiresAt = "2020-07-27T13:08:54.000000Z",
                    ExpiresAt = "2022-05-22T14:59:31.000000Z",
                    UsageLimit = 9276,
                    IsOnetime = false,
                    Description = "MpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI2",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck6()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 3805.0,
                    PointExpiresInDays = 4223,
                    PointExpiresAt = "2025-09-19T19:40:34.000000Z",
                    ExpiresAt = "2020-03-05T03:01:41.000000Z",
                    UsageLimit = 6572,
                    IsOnetime = false,
                    Description = "RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9W",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck7()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 9916.0,
                    BearPointAccount = "fd9b0a5e-72a3-4cfa-a033-dff8b0be0f57",
                    PointExpiresInDays = 3783,
                    PointExpiresAt = "2023-11-13T05:24:27.000000Z",
                    ExpiresAt = "2020-12-27T13:13:04.000000Z",
                    UsageLimit = 6580,
                    IsOnetime = true,
                    Description = "JVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPSksHUu",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck8()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 2203.0,
                    PointAmount = 1446.0,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck9()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 3328.0,
                    PointAmount = 5357.0,
                    Description = "0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVq",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck10()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 3882.0,
                    PointAmount = 2310.0,
                    IsOnetime = false,
                    Description = "MzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck11()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 2148.0,
                    PointAmount = 6835.0,
                    UsageLimit = 2807,
                    IsOnetime = false,
                    Description = "KLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck12()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 3957.0,
                    PointAmount = 1941.0,
                    ExpiresAt = "2024-07-04T08:24:40.000000Z",
                    UsageLimit = 9982,
                    IsOnetime = false,
                    Description = "7mM3plgJR5fwzKIFQcpGZZVlRU03Fa2F6PUopGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck13()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 5277.0,
                    PointAmount = 224.0,
                    PointExpiresAt = "2023-08-20T11:51:08.000000Z",
                    ExpiresAt = "2020-01-30T00:27:45.000000Z",
                    UsageLimit = 2056,
                    IsOnetime = true,
                    Description = "Btfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJgg",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck14()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 3277.0,
                    PointAmount = 4269.0,
                    PointExpiresInDays = 4648,
                    PointExpiresAt = "2020-12-17T02:03:53.000000Z",
                    ExpiresAt = "2021-09-05T15:19:53.000000Z",
                    UsageLimit = 577,
                    IsOnetime = false,
                    Description = "5wXB3CTdPu3I6Gb57N6Bfk",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck15()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    MoneyAmount = 5139.0,
                    PointAmount = 4791.0,
                    BearPointAccount = "6c6c2032-058f-46e0-b3bc-d378e18424e7",
                    PointExpiresInDays = 7588,
                    PointExpiresAt = "2021-06-03T01:58:34.000000Z",
                    ExpiresAt = "2021-01-07T02:21:33.000000Z",
                    UsageLimit = 6371,
                    IsOnetime = true,
                    Description = "FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPE",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck16()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    PointAmount = 1045.0,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck17()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    PointAmount = 1982.0,
                    Description = "iJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSqVBGp3Ank6BTTvgxHzzgdLIxgPMd",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck18()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    PointAmount = 3545.0,
                    IsOnetime = false,
                    Description = "CUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKw",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck19()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    PointAmount = 1067.0,
                    UsageLimit = 8569,
                    IsOnetime = true,
                    Description = "QYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5m",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck20()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    PointAmount = 6593.0,
                    ExpiresAt = "2020-02-09T01:26:51.000000Z",
                    UsageLimit = 7567,
                    IsOnetime = true,
                    Description = "AIeN7EOzXnRCcbLOsMiN4tj",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck21()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    PointAmount = 5652.0,
                    PointExpiresAt = "2025-01-28T10:26:55.000000Z",
                    ExpiresAt = "2021-02-21T06:43:04.000000Z",
                    UsageLimit = 9666,
                    IsOnetime = false,
                    Description = "ROpiRc0j39oPNkDTFwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOT",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck22()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    PointAmount = 3090.0,
                    PointExpiresInDays = 7553,
                    PointExpiresAt = "2025-01-14T06:57:03.000000Z",
                    ExpiresAt = "2025-04-08T01:21:35.000000Z",
                    UsageLimit = 7782,
                    IsOnetime = true,
                    Description = "7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck23()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "06e05278-9019-4a61-a186-a806b61e7b92"
                ) {
                    PointAmount = 5353.0,
                    BearPointAccount = "a1936755-6008-40ff-9b79-4a82207cd425",
                    PointExpiresInDays = 3991,
                    PointExpiresAt = "2024-08-30T16:21:06.000000Z",
                    ExpiresAt = "2021-12-16T22:15:37.000000Z",
                    UsageLimit = 6374,
                    IsOnetime = true,
                    Description = "PlYYA9d24g2qlkQeuW1v6Ot04JjRtKJ3Y50yRgOZb7LyYKRM",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
