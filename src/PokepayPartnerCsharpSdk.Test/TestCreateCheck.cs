// DO NOT EDIT: File is generated by code generator.
#nullable enable
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCheck
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCheck0()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 2329,
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck1()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 8025,
                    Description = "XnQ6dyRqDXbojqilSXXfgL13rI1kMYSkzLYWcqyBEPqq6jXoMPoI5dYhtAEAC",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck2()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 7608,
                    IsOnetime = false,
                    Description = "N1MIRbysguh0xXqdkQK8VGfHRzulBqoP",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck3()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 4673,
                    UsageLimit = 1704,
                    IsOnetime = false,
                    Description = "VuBC2EUluqb81O3ZagKE8LcCa8bz2nHShe5EoHVudmx1iMacSt3whWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyAxdhT65YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck4()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 7732,
                    ExpiresAt = "2016-11-17T11:17:07.000000+09:00",
                    UsageLimit = 939,
                    IsOnetime = true,
                    Description = "UbFxl1xg8SX1voG8Gydqo4fQ7D47J36mgyKf2pLnur36TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck5()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 6461,
                    PointExpiresAt = "2025-06-26T20:58:31.000000+09:00",
                    ExpiresAt = "2021-06-21T16:14:06.000000+09:00",
                    UsageLimit = 4498,
                    IsOnetime = false,
                    Description = "nvKX9mW4mLerHweV6yDqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQiRCyVTR3czNdwQ9LziqjK5",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck6()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 6733,
                    PointExpiresInDays = 9394,
                    PointExpiresAt = "2017-05-13T16:19:58.000000+09:00",
                    ExpiresAt = "2017-06-13T23:16:26.000000+09:00",
                    UsageLimit = 4603,
                    IsOnetime = false,
                    Description = "XVB9A32E",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck7()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 2033,
                    BearPointAccount = "061f278c-8d27-46c0-8ed6-e0556c2b044b",
                    PointExpiresInDays = 705,
                    PointExpiresAt = "2016-07-30T19:49:34.000000+09:00",
                    ExpiresAt = "2017-08-12T22:28:08.000000+09:00",
                    UsageLimit = 9362,
                    IsOnetime = false,
                    Description = "9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enFyHhIbteE1tQOMttUhD0Oi",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck8()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 2807,
                    PointAmount = 786,
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck9()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 9122,
                    PointAmount = 453,
                    Description = "L7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzykU4qQWwEl9RBh7JkqQ2DDr8e6Qf8fK7SBxethCuCr4dB",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck10()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 7635,
                    PointAmount = 5668,
                    IsOnetime = false,
                    Description = "zD3agMTAvZtCmtviHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYhJfTJv94bnDyHKg7jf7TRBDusrb62imeaN035",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck11()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 5209,
                    PointAmount = 1896,
                    UsageLimit = 7813,
                    IsOnetime = false,
                    Description = "YVT6897JBIT98Ea3vOiHnJbC3RzxMsGYTRQVbb",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck12()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 7755,
                    PointAmount = 9414,
                    ExpiresAt = "2021-10-24T06:50:10.000000+09:00",
                    UsageLimit = 2662,
                    IsOnetime = true,
                    Description = "wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVto",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck13()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 3062,
                    PointAmount = 3219,
                    PointExpiresAt = "2019-10-26T13:31:43.000000+09:00",
                    ExpiresAt = "2024-02-04T14:42:54.000000+09:00",
                    UsageLimit = 1543,
                    IsOnetime = false,
                    Description = "ZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRdkY0a6T9IRy95uKnYj6aDVb3qDkr",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck14()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 2007,
                    PointAmount = 5825,
                    PointExpiresInDays = 5380,
                    PointExpiresAt = "2018-12-03T16:15:39.000000+09:00",
                    ExpiresAt = "2022-01-09T16:38:53.000000+09:00",
                    UsageLimit = 2484,
                    IsOnetime = true,
                    Description = "9wkdOXwioDpfXuz",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck15()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    MoneyAmount = 2959,
                    PointAmount = 5743,
                    BearPointAccount = "e2b7dea2-f6aa-4c85-bb2d-64a212c9bfce",
                    PointExpiresInDays = 611,
                    PointExpiresAt = "2023-01-23T16:12:10.000000+09:00",
                    ExpiresAt = "2017-08-21T16:10:15.000000+09:00",
                    UsageLimit = 2160,
                    IsOnetime = false,
                    Description = "uKefj9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOW",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck16()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    PointAmount = 5361,
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck17()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    PointAmount = 4778,
                    Description = "qVGNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABx",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck18()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    PointAmount = 6866,
                    IsOnetime = true,
                    Description = "hjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9T",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck19()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    PointAmount = 2745,
                    UsageLimit = 1986,
                    IsOnetime = true,
                    Description = "5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47X",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck20()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    PointAmount = 4346,
                    ExpiresAt = "2018-06-18T00:21:29.000000+09:00",
                    UsageLimit = 1113,
                    IsOnetime = false,
                    Description = "aQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPSksHUuefNAm0yTlB8Y7jnh",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck21()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    PointAmount = 4677,
                    PointExpiresAt = "2021-08-13T06:31:26.000000+09:00",
                    ExpiresAt = "2019-06-27T20:45:12.000000+09:00",
                    UsageLimit = 4198,
                    IsOnetime = true,
                    Description = "ZpB32LWZF",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck22()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    PointAmount = 7373,
                    PointExpiresInDays = 1601,
                    PointExpiresAt = "2024-08-17T12:30:25.000000+09:00",
                    ExpiresAt = "2019-08-10T12:36:57.000000+09:00",
                    UsageLimit = 394,
                    IsOnetime = true,
                    Description = "77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRas",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck23()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "f62f8d25-0ae6-426f-a57b-5e6b2d39ab22"
                ) {
                    PointAmount = 9416,
                    BearPointAccount = "033f25b9-3bc1-4f7c-928d-970582ea2460",
                    PointExpiresInDays = 3490,
                    PointExpiresAt = "2021-12-27T09:25:10.000000+09:00",
                    ExpiresAt = "2023-10-10T07:52:39.000000+09:00",
                    UsageLimit = 678,
                    IsOnetime = true,
                    Description = "K9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5R",
                };
                Response.Check response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
