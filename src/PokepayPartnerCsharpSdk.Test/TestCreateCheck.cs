// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateCheck
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateCheck0()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 5640.0,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck1()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 9517.0,
                    Description = "UYUBi6lr3dmrA1TzLspePLtEUScC8l0YUvFXCUU0xpMwaws5F",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck2()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 1753.0,
                    IsOnetime = true,
                    Description = "xVIu03yRsnB2locmdC25l11LJOUFzokJVd8OkaH3pU0UTPkjH2EeDBk3SWAPEZQAvW9WBqhBsrsdQo5TGlUVEpfdZcZJP7Ea9bKCEuCZ8sxLvuEzvUjczH",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck3()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 8456.0,
                    UsageLimit = 8701,
                    IsOnetime = true,
                    Description = "QJ2OEy7zncPwNBhQSRj705CVd4KAEoApqec4dEMKO5v8HWsixFIF8iFDKY3dOtpIK1j0atj5IE8O",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck4()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 5182.0,
                    ExpiresAt = "2021-01-14T04:45:53.000000+09:00",
                    UsageLimit = 7313,
                    IsOnetime = false,
                    Description = "HxzmskBv5sCGJVI5vigrnBOvsvNbTMAapoK9cesWNuBTobNIUTM2MqFf1wXtcs0hGfv7Mj342OhHjs52XI9OKxIYAe1odvgMkIbgg9tQV2t",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck5()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 3544.0,
                    PointExpiresAt = "2019-09-07T15:53:16.000000+09:00",
                    ExpiresAt = "2023-04-20T18:57:51.000000+09:00",
                    UsageLimit = 9646,
                    IsOnetime = true,
                    Description = "VlEtOvgXAi1JoyvlinmF8qXh1StBlo1wt46Br3tmDW6hhlQ60VUv8f",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck6()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 4431.0,
                    PointExpiresInDays = 2048,
                    PointExpiresAt = "2016-11-07T23:12:30.000000+09:00",
                    ExpiresAt = "2020-11-25T21:27:32.000000+09:00",
                    UsageLimit = 7977,
                    IsOnetime = true,
                    Description = "GQHunE5twUvAcxT1hjIB3fppTw7PI6djkQm8QO1knSl3QgsavXpLvUzXwfBc2NAmqBiiUjxGuutIttifWQdg1mtC4VYuGN7COPHcRjPzJyNNlPvzxgNBAx3CrIdIQ4A6upZuluJRm2nGpQyVF10EF",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck7()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 4415.0,
                    BearPointAccount = "3c60b228-0650-4b88-a14e-47ba854c621e",
                    PointExpiresInDays = 7455,
                    PointExpiresAt = "2021-11-11T03:21:14.000000+09:00",
                    ExpiresAt = "2023-02-11T16:41:42.000000+09:00",
                    UsageLimit = 9656,
                    IsOnetime = false,
                    Description = "kW5JwYZcZzH1gITdb28FZg7gMnxQ2MHWrNb5qe328jC4vfdJt7XH76ii0OoMhVnBLAlTkyqNi8sNYNRnVWdmiRLPWqx",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck8()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 8223.0,
                    PointAmount = 1210.0,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck9()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 658.0,
                    PointAmount = 5164.0,
                    Description = "i76q3Xqh3CexYSVibXxbbzsCQz5KixOodECaA8Oq4KynIOe8R2FkDtMhJttf2meOkJIWj4adz9OiO5HzbUqYATbbhamDlnzUnNKs1rCisMnF2ITi",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck10()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 137.0,
                    PointAmount = 8731.0,
                    IsOnetime = false,
                    Description = "ytgaMmkMR5DPlgYGqB38R3Fi3q6x7ch1eeWNBHLMDgMPVb0ElUYqtAN2vFQAwq3kVratbkAc3T1tnkfh78yCq5HLPnSxi2xTaSRuyZQKLXahFziawrgqpGWV4mT2bwFvgumoovta5CPZnyutwU0OUc4TcFmHBZ",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck11()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 2883.0,
                    PointAmount = 7671.0,
                    UsageLimit = 6255,
                    IsOnetime = false,
                    Description = "4UzPJGsucd5817cOB9BCXXh8HcD6KqiJKOOIvU9bhtMhXVXZI7bu3PG",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck12()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 4010.0,
                    PointAmount = 261.0,
                    ExpiresAt = "2021-12-22T18:52:29.000000+09:00",
                    UsageLimit = 1520,
                    IsOnetime = false,
                    Description = "ypel4RFOzJDoEt7agscX4CKGNezrN71vo7ycOKAeDHmtDv88nxED2ZPy0DL4y6ggI3VViaG9Es",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck13()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 6200.0,
                    PointAmount = 9228.0,
                    PointExpiresAt = "2016-07-24T13:09:15.000000+09:00",
                    ExpiresAt = "2025-03-23T16:06:08.000000+09:00",
                    UsageLimit = 1889,
                    IsOnetime = false,
                    Description = "I9Am3a5W8K7bI6Bi2YEzRwGMcnoMIx2DGcYTgqWcyKj7AaZOfsYSyeeckdWD6AmukIbvyJRzO0",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck14()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 1690.0,
                    PointAmount = 2564.0,
                    PointExpiresInDays = 4897,
                    PointExpiresAt = "2017-08-26T21:03:44.000000+09:00",
                    ExpiresAt = "2024-04-09T21:42:16.000000+09:00",
                    UsageLimit = 4196,
                    IsOnetime = false,
                    Description = "AUnDPFy25pg6mah3Jx6bgFIjvigMMkYiLBm8rpoIt6Iv7v16qxF260s9fWTYox0Xu5MaSsTVvY4cyVcLT106tPf2kAtZz42KDRVVesV0c85dgyIZG4aZRHUyRZiMdH5mU3O163Nh60M8ppBJi20Y5yVfE",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck15()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    MoneyAmount = 9099.0,
                    PointAmount = 6710.0,
                    BearPointAccount = "4d79b384-bd12-4082-8833-28ac512111cb",
                    PointExpiresInDays = 4663,
                    PointExpiresAt = "2025-03-23T11:45:29.000000+09:00",
                    ExpiresAt = "2023-11-05T10:19:43.000000+09:00",
                    UsageLimit = 4001,
                    IsOnetime = false,
                    Description = "kG8vYvRfG5MnPuIzbHr4gkfeh6cHeX6PAFuyXNglAkwoyCOAweoC2fncgVkCZ1stpwb4tSEFO1JIa7j6TvQr6aPJRHeXj5",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck16()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    PointAmount = 8433.0,
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck17()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    PointAmount = 301.0,
                    Description = "ktm2vbYBpds0uSSAEXibKzF",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck18()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    PointAmount = 5405.0,
                    IsOnetime = true,
                    Description = "FCZyuC1UYpeBxFM4tqw0gTmTpM7c6lX4UfEcHw33zP4p7uW1D8rJAOSbWPnXj6Kl5ibG7FmpG5suyIs4SkiwSBcI33hIpidoWzcl31wAilp32nkb19ZfoZ7SAWZ1C6GowiVWIxhdghTQQNVMHefZqfalSnxM11BziNMKcsVl2m",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck19()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    PointAmount = 7878.0,
                    UsageLimit = 1833,
                    IsOnetime = false,
                    Description = "5NajeHEMI0oMEgFGs1B8oXZ",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck20()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    PointAmount = 265.0,
                    ExpiresAt = "2022-11-04T19:06:49.000000+09:00",
                    UsageLimit = 7203,
                    IsOnetime = true,
                    Description = "1H7wl9H5LcTLaTAgpuHYYtEhbnlhGsc",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck21()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    PointAmount = 3156.0,
                    PointExpiresAt = "2019-04-19T11:26:13.000000+09:00",
                    ExpiresAt = "2019-07-26T18:16:02.000000+09:00",
                    UsageLimit = 9267,
                    IsOnetime = true,
                    Description = "YgDcd2mBuNAKWzTbZmmCDeeKjy92mRSUCJ8TL3U5GCp6wRP4azgRVIkK522G0i3oMsagisnkBRHEV7REbvnxiBDjrUN5VSy0cKFQTf3CDnIahg5ny7jWM5pWQ3J1x",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck22()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    PointAmount = 3835.0,
                    PointExpiresInDays = 2844,
                    PointExpiresAt = "2017-04-04T16:45:46.000000+09:00",
                    ExpiresAt = "2024-09-25T12:17:24.000000+09:00",
                    UsageLimit = 1660,
                    IsOnetime = false,
                    Description = "IHf053Y8LZRZ0G9QPh5u4wll7mtpC0rZLeRIBodkZssFG0inGnmdHYMtHUysN13R2wDYLtdlZFgM15qaoHJMPSSYCqYqN7o1rK5so5wVwa55IeIs9UA1tEHTkOWMy3bMUyCncE1u5XtyXCWOB8xAoLXveVgAUEral3IUspquv7cXnFSWZmKj6uRQrFrzl",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateCheck23()
        {
            try {
                Request.CreateCheck request = new Request.CreateCheck(
                    "5e52c096-caec-40dd-8283-39eb8a7cdaca"
                ) {
                    PointAmount = 6112.0,
                    BearPointAccount = "5d966e8c-2363-4d5d-9182-dc23320fbe93",
                    PointExpiresInDays = 3980,
                    PointExpiresAt = "2024-02-22T10:43:09.000000+09:00",
                    ExpiresAt = "2024-09-16T18:02:06.000000+09:00",
                    UsageLimit = 4790,
                    IsOnetime = true,
                    Description = "ildIo74n4rbT97rGuXeCvmwPgSxx8upgZvTwe1Izw0bYoGxpp1mMyiMmmexSjfmPuNkDcyI3Qb4eYmD3WwAhvEEZZJCy4jkb1Jeo954aSVXOAIShc1l4yvRdb0XwSQGLg1VgqEJrYkCVRU",
                };
                Response.Check response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
