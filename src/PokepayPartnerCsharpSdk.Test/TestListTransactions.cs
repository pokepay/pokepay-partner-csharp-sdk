// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransactions
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransactions0()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions();
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions1()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Description = "ahWwt0KCw4FDQO05qLTqGD",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions2()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Types = new string[]{"expire", "exchange_inflow"},
                    Description = "DuaFv",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions3()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    IsModified = true,
                    Types = new string[]{"exchange_inflow", "cashback", "topup", "exchange_outflow", "expire", "payment"},
                    Description = "ga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBY",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions4()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    PrivateMoneyId = "d2aa515b-dc44-4043-b5c6-0cc3630f294d",
                    IsModified = true,
                    Types = new string[]{"exchange_outflow"},
                    Description = "d28MFakoJp4st",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions5()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    OrganizationCode = "k1SSX-r2arC-tY-3",
                    PrivateMoneyId = "76d0ef9b-5818-4b57-8f7e-ba9b5516c97c",
                    IsModified = true,
                    Types = new string[]{"topup", "exchange_inflow", "payment"},
                    Description = "ebROkI568yn3vAdg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi32RsgmtpDzruBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXs",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions6()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    TransactionId = "1h0a",
                    OrganizationCode = "D",
                    PrivateMoneyId = "88182531-8dfe-41cf-b69d-2efb1b12cc32",
                    IsModified = false,
                    Types = new string[]{"payment", "exchange_outflow"},
                    Description = "J63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdzHS5KI84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions7()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    TerminalId = "4147edb9-f506-4826-aad4-9182ac9b20d9",
                    TransactionId = "b",
                    OrganizationCode = "X32",
                    PrivateMoneyId = "09d71d62-9a11-4203-8fcb-52f286231e5b",
                    IsModified = false,
                    Types = new string[]{"expire", "payment", "cashback", "exchange_inflow"},
                    Description = "Lf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaV",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions8()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    CustomerName = "6Sg4zOt2LPb0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL",
                    TerminalId = "15bae0b9-72f3-4766-b7d2-ffae34f7dca1",
                    TransactionId = "iO",
                    OrganizationCode = "5W7ARlu-yf-08--6-v5D",
                    PrivateMoneyId = "bd1c44e0-6e42-4b95-88eb-adfb7c49e831",
                    IsModified = false,
                    Types = new string[]{"exchange_inflow"},
                    Description = "SZIPf7lUxpBEwOCUnBV1wl8i3xQfq",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions9()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    CustomerId = "dfd1264e-57a5-4487-953b-a60b4aab6e89",
                    CustomerName = "TjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9hHVjuFskSUixLpvflY8MFYZJvlfPZ9XRs2DjUex8FZcru468uiy2IBQsKNbECUonyUv3nTPZ701h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3",
                    TerminalId = "145087e5-0da8-4ff0-a78d-98f2f82496ad",
                    TransactionId = "7ktZcH",
                    OrganizationCode = "k5-2satkD-E5--0r--5-8W5",
                    PrivateMoneyId = "9dde7e48-e2e4-4774-b86d-04f6e077e6f3",
                    IsModified = false,
                    Types = new string[]{"cashback"},
                    Description = "thVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1UyPaGHVkyMSdmemZcovbEUc9TiM3DTSa7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIB",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions10()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    ShopId = "1b1ec565-60d5-4d53-8d09-ce781984e089",
                    CustomerId = "fa817a00-aacc-4651-9c71-65ef5334a25f",
                    CustomerName = "j9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3PolsdbrxUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebY",
                    TerminalId = "7f35485f-53c3-4f41-bf9d-9e33b1d415f1",
                    TransactionId = "bp",
                    OrganizationCode = "",
                    PrivateMoneyId = "b89dc1d1-c5fa-4b0c-9cdb-20d01edd7a9d",
                    IsModified = true,
                    Types = new string[]{"exchange_inflow", "exchange_outflow", "payment", "expire", "cashback"},
                    Description = "mp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfM",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions11()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    PerPage = 7255,
                    ShopId = "622545d9-7ece-4e1c-b885-06f419e2330f",
                    CustomerId = "911535a5-6b11-4b95-a146-801b8ef4fe9c",
                    CustomerName = "RiCKaN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLS",
                    TerminalId = "1f31031b-166d-4a80-b83e-4a0020899196",
                    TransactionId = "r0FU3D",
                    OrganizationCode = "-C5J-i9-wg-z-3--f-iW73r",
                    PrivateMoneyId = "e098b3a2-1601-42b9-98fb-49bc1fd32461",
                    IsModified = true,
                    Types = new string[]{"expire", "topup"},
                    Description = "2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ59qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbz",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions12()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Page = 4769,
                    PerPage = 9794,
                    ShopId = "f53e5e49-5153-460c-a3e6-17f19e144bb8",
                    CustomerId = "3d11ccca-5e88-417e-82a4-24e279f64777",
                    CustomerName = "UjFhr3NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4AzukqXii06wz9NdLna",
                    TerminalId = "33780446-cb24-49f0-88ab-f6b047374ee4",
                    TransactionId = "NnYZXWwwP",
                    OrganizationCode = "pyXl2G1--ks2--np-w-Ox",
                    PrivateMoneyId = "4c43fce4-8257-4731-8c1c-fbdeb0a81da5",
                    IsModified = false,
                    Types = new string[]{"expire", "exchange_inflow", "exchange_outflow"},
                    Description = "cqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPym",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions13()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    To = "2021-02-07T20:13:25.000000Z",
                    Page = 6019,
                    PerPage = 1127,
                    ShopId = "b413512e-f1a8-4fc6-814f-2148b5a95707",
                    CustomerId = "cca091fc-e9f3-46bd-9056-0c05eefe509e",
                    CustomerName = "jb9UCbPcYx5YXiYOW0oa5SUOR88F7Ubd6EIlmfbIWBjq1h3aM3MFSn6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgT",
                    TerminalId = "054b4b28-02f8-4a08-b25e-3e1af3bbafed",
                    TransactionId = "P2c2b7Aqdq",
                    OrganizationCode = "--V1CT0---qC-V9Ps---Y3-u-72-t-",
                    PrivateMoneyId = "29da4791-3cd2-4dbc-90aa-3189247f4a7f",
                    IsModified = false,
                    Types = new string[]{"cashback", "payment", "exchange_inflow", "expire", "exchange_outflow", "topup"},
                    Description = "JVaYua2W",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions14()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    From = "2022-07-14T08:19:16.000000Z",
                    To = "2022-05-29T01:38:14.000000Z",
                    Page = 4354,
                    PerPage = 8145,
                    ShopId = "31451448-a277-4324-b1d5-b19cd78b5654",
                    CustomerId = "38b97fea-258d-4466-b13a-a8a76663e69e",
                    CustomerName = "quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi",
                    TerminalId = "ccdd12b0-cee5-4d55-ba95-4e343f986ef8",
                    TransactionId = "H5OLhVoB1",
                    OrganizationCode = "u5Jec2Sq9",
                    PrivateMoneyId = "e5765496-b9f4-4a3c-b6ae-7ccf355db2df",
                    IsModified = false,
                    Types = new string[]{"expire", "topup"},
                    Description = "eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuK",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
