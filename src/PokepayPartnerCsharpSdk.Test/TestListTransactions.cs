// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransactions
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransactions0()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions();
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions1()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Description = "7R8recMHv",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions2()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Types = new string[]{"cashback", "exchange_inflow", "exchange_outflow", "payment", "topup"},
                    Description = "kZeKPrw9gZqYDLkzcvrJIRozdVP7teVzTHGLrPQZbjyBujqAXqGrikyu5fkNtyUAeKCWTzgxfYPZck3HDCpjldQuIssrmWzZKWjQTl",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions3()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    IsModified = true,
                    Types = new string[]{"expire", "exchange_inflow", "exchange_outflow", "payment", "cashback", "topup"},
                    Description = "D4gCUbOmfBO",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions4()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    PrivateMoneyId = "0a9debcf-63e7-4cd0-bb74-1426fbb4bddd",
                    IsModified = true,
                    Types = new string[]{"exchange_outflow"},
                    Description = "Gbp5oJVObLslk8ldUFyhXm36A9q9o3bRAlw9ItqJFgWAyNuOBRMvgsGxLCh4ipw2iAbLe5Q72ChTscexuFSZazjmeP9Nv5HP1kNCNMZayRGIm0x1qAhEtRMq6NpCPw",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions5()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    OrganizationCode = "aqzX1-m3v78vQS2E6-6T-jh",
                    PrivateMoneyId = "d4cdd440-6f5e-46f5-9c3d-1a4e81eb659d",
                    IsModified = false,
                    Types = new string[]{"topup", "exchange_outflow", "payment"},
                    Description = "7SHoI50h4WyWXJE7J6W8AKVX88JwjkQ4iiQAdg8BmdLOo",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions6()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    TransactionId = "3kGwgWAjm9",
                    OrganizationCode = "OpT-s7o4pyZJ--",
                    PrivateMoneyId = "62dd2575-9d58-44f6-950a-bdbfd996e43c",
                    IsModified = false,
                    Types = new string[]{"topup"},
                    Description = "8miGyAQCe59uiWwFsai6NhzKbQIGSvGm9YOVu8q1aNR5nRoFwuRWj3pbX71eKFKZc1dfQ8ubOWFUZMOG25yTvFmlga6Iv19tPHCBkfzNS95UO1Wpm4u6TKoBAjm2SMfXfoSBfIsOrOkFD910CPsLspWd4GhfIrYMM36WLUmseSQOfE6qiYkuNnfljNtvBiwqmV59NR4",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions7()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    TerminalId = "d0dc031e-b670-46f2-a999-069edf410720",
                    TransactionId = "l2Rhq",
                    OrganizationCode = "l4z-s-mVD-zK0td-0YiH0GT5h",
                    PrivateMoneyId = "aa6ba358-b3e2-4e3f-9e81-ce4b51d9b86d",
                    IsModified = true,
                    Types = new string[]{"exchange_outflow", "payment", "topup"},
                    Description = "mqJPj",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions8()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    CustomerName = "bhp5mRvdTWRRjS7FsICPu",
                    TerminalId = "7c76ef37-726c-4a9c-b778-1c6df6e5a429",
                    TransactionId = "KeJaNRf",
                    OrganizationCode = "49-U586JC",
                    PrivateMoneyId = "26060057-7d8c-494c-80a9-34073a827754",
                    IsModified = true,
                    Types = new string[]{"exchange_inflow", "payment", "cashback"},
                    Description = "ZXgzkX33v9RLB9oAV07w6vVwdAdpRTHPf7pZbzluSKVYnvCdJe2cQmrlwmcNkGPDrgW7AFxMBGDSqoWtZXUbrK4gphHFUjnGAXYY",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions9()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    CustomerId = "fbcc7aa6-27ef-4dd6-ac19-5d0009a8deae",
                    CustomerName = "SpIGPlLiuzotS0Chd3giZYzVU59bk7uTuQuXgR62vvpylXvUuXG",
                    TerminalId = "df2f648b-71f5-4fbc-8f70-627e3662061c",
                    TransactionId = "v",
                    OrganizationCode = "Ua",
                    PrivateMoneyId = "2c8b5d72-7a78-4791-97a2-7bd92b7ab9f6",
                    IsModified = true,
                    Types = new string[]{"expire"},
                    Description = "JpiTkdN5I26z1C3cxjdOasIK9QaguZWAhc13em0ST6RT3PyaUjSC9Cb4hc8SV0iHjE17T5YTfJ9LsgGmj5df6wUkQetKyJ5OjxLQhraf4SiL660hb9SyVU9dHp",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions10()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    ShopId = "10ae64ea-fc16-4dff-8458-34e88034d158",
                    CustomerId = "5dfbe29e-6204-48de-a7fa-79a724e928f0",
                    CustomerName = "3CbMinQNT7OBZhQGBcZZwx5luqSbRTWd0EkpYiwa9HLBJHgxFPMELX8Jdm",
                    TerminalId = "0a6a8c96-6fd8-4875-b537-b02bb66fe50e",
                    TransactionId = "S5F4PdkVF",
                    OrganizationCode = "3-dAR---t-6l7",
                    PrivateMoneyId = "0b91dc8a-acff-434e-97fc-3a234160ad36",
                    IsModified = false,
                    Types = new string[]{"payment", "topup", "exchange_inflow"},
                    Description = "JKiNLdo3K9KjiJBjZgy8Jsjqhf7ZCsD9Swkr4SaIMiTluf38Qfe7EFVvW358kVWcFniRSDVyKL5IeuFGpYckeQpllCMI7XGTJP6pW3TG2z3XruEkPWwMmJFiCSbVkxQEJ1mk4JmAOyjlz3WGovePdpGPev4RMeBWjnuAFmMtF35stfjaduohQGIy7gKnzPiGyPYiQV",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions11()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    PerPage = 8897,
                    ShopId = "e8e68c86-0152-4a0c-b421-4585c44e9919",
                    CustomerId = "940fdba7-3d59-48b1-9aba-a620f95a922e",
                    CustomerName = "Ck9LJWsNr0rOLVsPYhKeGcHCtbA53esCFWdjbhNgzEUMT7lGN3TviMdlp2",
                    TerminalId = "ac16aa88-bc0c-4946-ba27-eee5b3a46dc7",
                    TransactionId = "91MogrJ5gI",
                    OrganizationCode = "D1-ME-6E-O9YD-jUA-MW-7C-9-1-",
                    PrivateMoneyId = "3f7966c2-350b-42a6-9be3-52bbd4b4d72d",
                    IsModified = true,
                    Types = new string[]{"exchange_inflow", "expire"},
                    Description = "g1rj1tX4vTj6nWkFiRNASwNZmMid5eZ5N95SWM1LpRJRd9F0DRG3HlrhaEVLfXh2tx9iQgg5Pn7CnpoKpWGqYrGxdtPFLm024afkhT0m1UeALHESJEfwsqjoAbMB2GnBaWHCrJVaG7TjL4POvgwqfExzj65OaMm7fBjXk1xFDUu",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions12()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Page = 3368,
                    PerPage = 5050,
                    ShopId = "ec2c7796-8c16-4ffb-97fb-f01816935ec4",
                    CustomerId = "be99f002-6b6f-4ca9-902e-0f99bbcfbc4c",
                    CustomerName = "fMSZYmeCt70S5nk9njTOMPpPScNBCjSSxRYs6VT2uqHMSYz5vTNMQFf5QfVeyEoiyGBhQKWbkNtmpTCOCmYOAlw2ATMv5VCx6NTxiGdaIyhRJTum8xiWACvtJNWIhi8FAy8PASs4bjPmOQ7udfXOqvZOt63YDR1Y7iOwtuFGo3V4H3GHqU2PVbvduxelXlNZshtOBbpK2ztXIzRTJJU3M2u2tJginwCZ7B1uqN",
                    TerminalId = "7c408e70-8a4d-4ad0-a3ae-8d226a3a2de7",
                    TransactionId = "Xtil6K",
                    OrganizationCode = "--G4c685y7-3cN--YWwqo8a",
                    PrivateMoneyId = "bf82bd14-bf01-45d8-a440-f9c1d01bbf11",
                    IsModified = true,
                    Types = new string[]{"exchange_inflow", "topup", "cashback", "expire", "payment"},
                    Description = "BTYGxjVpXgSkd48a",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions13()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    To = "2022-09-16T23:49:59.000000+09:00",
                    Page = 4012,
                    PerPage = 2280,
                    ShopId = "47b257b2-10de-40a8-9911-34f38e4050db",
                    CustomerId = "34b4b059-f248-4fba-b54a-5d5ecf14d48b",
                    CustomerName = "OtokVUzuSOU8zIg2qqZw4D3xmmEFKBlFuJ5ebeLKRBdPtjKLEtRWCEDWWd2ucIkeiW7exKBLvqZRdKfXRiyBytWRERylsIg6KmKF2ecbWP77XNId8KvX0ptRl4My2KlvjthtYVexOvXax28mTRRO57aRq8seA",
                    TerminalId = "3da0c5a3-7ce3-40f4-95ac-72f1c32a22dd",
                    TransactionId = "l52gYc",
                    OrganizationCode = "23Jq08--g-R1S82-xq-z0",
                    PrivateMoneyId = "21a676ff-a5d2-4dfb-9995-5b69bcf4ef6f",
                    IsModified = true,
                    Types = new string[]{"cashback", "payment", "exchange_outflow"},
                    Description = "zmdrVx05bSaVz26p8FCXRiJkvi8NWbSXg9xsDizfAGsFopq7TlGxvpyq1yCnCeGpvT5obWX8FIkMHKAH8ouay24kPz7lKETnadQWRjWpvDf9ZHdCF2cnM2D9QuT0mKSILy04seXzwHiC7e6R2GK1ELyDiqu4NH69Y0YJiZhXDSwkjLVztTHMUDOmx8MItWn0j64Ib",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions14()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    From = "2020-06-09T06:27:00.000000+09:00",
                    To = "2022-03-14T09:02:40.000000+09:00",
                    Page = 462,
                    PerPage = 4749,
                    ShopId = "777d84f3-febb-456b-95c5-de17a52a1768",
                    CustomerId = "b7028182-dcde-4635-bba6-1d0b96ae1398",
                    CustomerName = "bkLAj4YEetEkkgylfAaeOYuPdP9MFYwTJoJ8ZFBnB5nufkhDggpm4dCjf0506xvdENOFMP67rHiJUjpUlhH4wt1EmRStIDT0dCrsHq05p5rIKsSJqLH82YHVTfHU0UNyS2O4e0RRfyAmy9FkoaDgh2GbEmF7sJq181XbvuxGWyzZ8D5qa1HmN6f6Ji3TbIovCtsZYOdpURiQOGJnMQK12mXyRXZpuuYOAFDSGd9844h02rJpoe0JOK",
                    TerminalId = "4197358a-01ee-4c25-8e42-8e1b6eda08ed",
                    TransactionId = "buwcCwar",
                    OrganizationCode = "--y-4---",
                    PrivateMoneyId = "efe8f45b-7370-4c1b-964c-9614a83b3b80",
                    IsModified = true,
                    Types = new string[]{"topup", "payment", "exchange_inflow", "exchange_outflow", "cashback", "expire"},
                    Description = "HQbDtlu0kmAce123W5tFfdfb64mEZLSKJxZUeAVDuidAMjAoMqrTmbIOfOHylZu8P2bBbyrZBCnSDvOERVcRpHR0CRq0bilPhamg6GF0RC3rms0rdutK4lM3byc4Tg3Mi3t8boMjS6Wu0pVmJoDCtiQDK2iA",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
