// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransactions
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransactions0()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions();
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions1()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Description = "KwyiQYSSoPK3N5ZGr",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions2()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Types = new string[]{"expire"},
                    Description = "ptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr4Char2DsC6IOlQ3ZC",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions3()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    IsModified = false,
                    Types = new string[]{"topup", "expire", "payment", "exchange_outflow", "exchange_inflow", "cashback"},
                    Description = "MT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNkDTFwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c8",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions4()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    PrivateMoneyId = "827833bc-adb1-4bbf-8b86-f8b954a6b99f",
                    IsModified = true,
                    Types = new string[]{"exchange_outflow", "expire"},
                    Description = "6FqKGuMQEbIhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaD",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions5()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    OrganizationCode = "-A061KZ-VlI-0i-18e--60ot",
                    PrivateMoneyId = "81f34672-e1b0-4559-902e-bce54af6e23b",
                    IsModified = true,
                    Types = new string[]{"exchange_outflow", "topup", "payment", "cashback"},
                    Description = "k4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUy",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions6()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    TransactionId = "rfJ",
                    OrganizationCode = "i124eJ23IQZ2-G-4-2-LzD--2Q1m7-m",
                    PrivateMoneyId = "72cd2d3c-d463-4580-8f4f-0e319771b1f7",
                    IsModified = true,
                    Types = new string[]{"exchange_inflow", "payment"},
                    Description = "P1XNaA4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions7()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    TerminalId = "32e8c434-e7bf-4b19-9522-4306a2b9c7e6",
                    TransactionId = "a8eD",
                    OrganizationCode = "z",
                    PrivateMoneyId = "6ef959ed-7d66-4023-8bac-6673d1c6ea12",
                    IsModified = true,
                    Types = new string[]{"exchange_outflow", "payment", "cashback", "expire", "topup", "exchange_inflow"},
                    Description = "qIbT9OwqnkaPpwID0eLyZpFNZ79bus52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCu",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions8()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    CustomerName = "CMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi32RsgmtpDzruBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43B",
                    TerminalId = "5c46065d-d3a9-4195-a73c-4ad4d4f41d2f",
                    TransactionId = "iVtdGDmgs4",
                    OrganizationCode = "8-sG---7KiosX3L-FY--",
                    PrivateMoneyId = "c32ad231-9f8e-443a-a830-60e1b89f3de3",
                    IsModified = false,
                    Types = new string[]{"payment", "cashback", "expire", "exchange_inflow", "exchange_outflow"},
                    Description = "mABE9DWtANH45sfx8Sg9q1O62IQSAJ63xgs",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions9()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    CustomerId = "b1986202-c78c-4226-a424-9e95792a0aeb",
                    CustomerName = "w6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdzHS5KI84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRIdac4Bt",
                    TerminalId = "0570b904-7960-41c2-8a8d-7277775085a2",
                    TransactionId = "2bbO",
                    OrganizationCode = "v4Nj4-1bvpA",
                    PrivateMoneyId = "97a3c33f-3aec-4a6a-9e1f-ba828f9813b1",
                    IsModified = true,
                    Types = new string[]{"topup"},
                    Description = "6vAaVd6Sg4zOt2",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions10()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    ShopId = "07af234c-7118-47d0-9662-cca964d19f8c",
                    CustomerId = "6a148ab0-436e-414c-8276-63c3dba78ce6",
                    CustomerName = "5QWsdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9hHVjuFskSUixLpvfl",
                    TerminalId = "bfac9759-613e-4097-b8cd-b4c6fafb2cd9",
                    TransactionId = "vlfPZ9XR",
                    OrganizationCode = "s8O1--2",
                    PrivateMoneyId = "4585037e-a5c5-4ea4-839c-7f89ad6e7555",
                    IsModified = false,
                    Types = new string[]{"cashback", "expire", "exchange_outflow", "payment"},
                    Description = "Uv3nTPZ701h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04Ifsk",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions11()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    PerPage = 6395,
                    ShopId = "807cd5e2-fb00-479c-92df-2a6814206e32",
                    CustomerId = "f52d39cb-6a2d-48aa-9358-6123c140ac44",
                    CustomerName = "Jqy1UyPaGHVkyMSdmemZcovbEUc9TiM3DTSa7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3PolsdbrxUTbpTkQ",
                    TerminalId = "7c3f9b72-c2b9-4c3f-ab43-dcc184c0e434",
                    TransactionId = "58OFUi",
                    OrganizationCode = "--5",
                    PrivateMoneyId = "a8cc409c-eaf3-4427-b089-e260a004110c",
                    IsModified = true,
                    Types = new string[]{"cashback", "payment", "topup", "expire", "exchange_outflow"},
                    Description = "IOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebYCA3qabphyjXP3xuhhy9uGRsNNOdzmZ5nbP",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions12()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Page = 466,
                    PerPage = 1531,
                    ShopId = "d29d9b0c-58dc-45db-909d-2ed262638e2b",
                    CustomerId = "d0e575e9-f9a4-43f2-984c-9e8665f8af6d",
                    CustomerName = "7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDV",
                    TerminalId = "1021641b-a8ea-4934-b1be-98444a9991a7",
                    TransactionId = "wlIsjYdDs",
                    OrganizationCode = "4T02U-7P7-Gx",
                    PrivateMoneyId = "a4abcf5d-773d-463a-895b-66ae8dab2bb2",
                    IsModified = false,
                    Types = new string[]{"topup", "cashback", "exchange_outflow", "expire", "payment"},
                    Description = "DGgtc1eHQx1a38fcy9G2ru7C",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions13()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    To = "2021-09-01T10:00:41.000000+09:00",
                    Page = 1142,
                    PerPage = 744,
                    ShopId = "6d606a10-179f-4eda-94c2-4bdd4584e055",
                    CustomerId = "82ab4d4b-13e3-4b36-b414-d47bbe503641",
                    CustomerName = "KJDFHDE0sPhVLSmxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ59qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIScfq8Jb",
                    TerminalId = "79f64777-f273-46a2-97a9-78d5e6e1826a",
                    TransactionId = "F",
                    OrganizationCode = "p1N-1AlVm-9-m5w55X0-w-37pr15y46",
                    PrivateMoneyId = "613086c7-b741-4bb8-ba03-0a8076b11c42",
                    IsModified = true,
                    Types = new string[]{"payment", "cashback", "topup"},
                    Description = "TqfIDfhF08aWAgYKgM",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions14()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    From = "2020-06-25T00:37:16.000000+09:00",
                    To = "2022-04-14T10:41:22.000000+09:00",
                    Page = 8168,
                    PerPage = 6061,
                    ShopId = "e6a21b5c-4be5-4b69-aaf5-8d1903dc1b7b",
                    CustomerId = "4a972ce9-7fb0-4e27-b89d-13073153c786",
                    CustomerName = "AzukqXii06wz9NdLnaFp0d8NnYZXWwwPUfmYGEVrOM4dkj0diMGxw",
                    TerminalId = "0b095700-289a-466b-bec2-60cdbd241c46",
                    TransactionId = "NKh",
                    OrganizationCode = "27w20o-Mj0h-Pwgc9HmV",
                    PrivateMoneyId = "9c8fd951-f541-482c-8bc5-97d3e1fe81a8",
                    IsModified = true,
                    Types = new string[]{"cashback", "expire", "topup", "exchange_outflow", "payment"},
                    Description = "RvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
