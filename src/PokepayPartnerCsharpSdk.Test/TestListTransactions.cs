// DO NOT EDIT: File is generated by code generator.
#nullable enable
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransactions
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransactions0()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions();
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions1()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Description = "F4fJVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9",
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions2()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Types = new string[]{"exchange_inflow", "topup", "exchange_outflow", "payment"},
                    Description = "kjfoAuPSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClY",
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions3()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    IsModified = false,
                    Types = new string[]{"topup"},
                    Description = "jLV6mNckmXW",
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions4()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    PrivateMoneyId = "a40cfb3f-af62-467d-b6e3-c1af51828844",
                    IsModified = false,
                    Types = new string[]{"exchange_outflow", "payment", "exchange_inflow", "topup"},
                    Description = "EvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3",
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions5()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    OrganizationCode = "ig--4-fcSL",
                    PrivateMoneyId = "aa92f50d-93f6-40a2-9803-fed3e036e42f",
                    IsModified = false,
                    Types = new string[]{"payment"},
                    Description = "KMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSH",
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions6()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    TransactionId = "0fb67407-43e3-4511-8399-d1974a85b8da",
                    OrganizationCode = "F--Z-5I-1mh8EC-B8-ZcAV-",
                    PrivateMoneyId = "efd2a76f-9ab7-4890-9a8c-efcd17be6265",
                    IsModified = false,
                    Types = new string[]{"topup", "exchange_outflow", "payment"},
                    Description = "Rh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2Hwa",
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions7()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    TerminalId = "8e458efe-91de-4e56-8fd6-ded7b78bb2c7",
                    TransactionId = "2f6339e3-904f-4df6-92e7-a2fe07d2701f",
                    OrganizationCode = "qh2M--2-9BgDQ-L41a5t16640PHY",
                    PrivateMoneyId = "e4fae6f0-0800-49c7-8372-bc4f3be9d20a",
                    IsModified = false,
                    Types = new string[]{},
                    Description = "VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXw",
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions8()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    CustomerName = "mFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6Bfk723xgVJhWc2FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s",
                    TerminalId = "afc82730-867d-4fb9-b384-fcb2f9f13d44",
                    TransactionId = "50349298-229b-4cb0-b75a-2dca7e16a0fd",
                    OrganizationCode = "H64O--QS--G-q--P-6",
                    PrivateMoneyId = "a259373f-52a9-4586-ac65-5cab84228a3c",
                    IsModified = false,
                    Types = new string[]{},
                    Description = "Zr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSq",
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions9()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    CustomerId = "6d04b015-9c56-403e-82c7-808b9a0345fd",
                    CustomerName = "p3Ank6BTTvgxHzzgdLIxgPMdYrCUs",
                    TerminalId = "90023026-69bc-407c-948d-9e11135456aa",
                    TransactionId = "3c5fe1e7-910a-46e0-b704-41ed5d3c1c46",
                    OrganizationCode = "67",
                    PrivateMoneyId = "694d2edc-4dab-4d19-803b-cc69c379a756",
                    IsModified = false,
                    Types = new string[]{"payment", "exchange_outflow", "topup", "exchange_inflow"},
                    Description = "qahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQ",
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions10()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    ShopId = "5dae2af2-ebf6-445b-bad7-fa3b475d913f",
                    CustomerId = "6e68a055-afa0-4f82-886e-1001fd307d6b",
                    CustomerName = "7KWAioiFIGH7shpxz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5",
                    TerminalId = "fcb66ced-3d2c-49c1-9b8f-2546816ea216",
                    TransactionId = "dd584a5e-f8dc-4441-bd3d-39c963bad19c",
                    OrganizationCode = "3So-gBis-Dk--zO-olBuG-7XhI92-qH1",
                    PrivateMoneyId = "6033af2a-2850-4426-a6d7-1d4450a2086e",
                    IsModified = false,
                    Types = new string[]{"exchange_inflow", "topup", "exchange_outflow"},
                    Description = "peMsqUtDBV",
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions11()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    PerPage = 2023,
                    ShopId = "97f940b5-bbca-4005-8ed7-c1d0858659c2",
                    CustomerId = "3a0776c0-7bfb-4a70-bad3-1800628e550a",
                    CustomerName = "tetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIP",
                    TerminalId = "51efd7e2-6f9d-4bac-a9cd-bf5d5db4905e",
                    TransactionId = "29a3eaa3-231c-451f-a8d9-faec39ca81ad",
                    OrganizationCode = "nI-s85b-BLd-6dCV-0Brcq",
                    PrivateMoneyId = "64ce4fd5-e801-44cf-9412-9d80b97a29bf",
                    IsModified = false,
                    Types = new string[]{"payment", "exchange_inflow", "exchange_outflow"},
                    Description = "7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQ",
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions12()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Page = 5497,
                    PerPage = 9594,
                    ShopId = "d03d8be0-1757-4c89-a30f-613e284a8ce7",
                    CustomerId = "1316862f-53a1-469d-8092-487bd5226a40",
                    CustomerName = "vBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUyrfJOMPlYYA9d24g2qlkQeuW1v6Ot04J",
                    TerminalId = "6dff4f01-af6a-47d2-be74-c8e0d4ef07dd",
                    TransactionId = "3d08c424-18a1-42a9-9ecb-b85d1e6e884a",
                    OrganizationCode = "-mdp-X7--l-6Y0rQy1",
                    PrivateMoneyId = "dcc480ac-5d41-4298-b474-fb4dd4432d13",
                    IsModified = true,
                    Types = new string[]{"exchange_inflow", "exchange_outflow", "topup", "payment"},
                    Description = "CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZpFNZ79bus52pNLLPoSL84S",
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions13()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    To = "2015-12-17T05:32:38.000000+09:00",
                    Page = 7262,
                    PerPage = 5704,
                    ShopId = "e82469f7-3983-4b97-8190-f22ad3a9db2e",
                    CustomerId = "96c233c3-1fc5-4268-96db-2f9cd23b3e6f",
                    CustomerName = "VmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdI",
                    TerminalId = "dd96efe5-4be1-4cac-9dfb-e509011991c0",
                    TransactionId = "d1842a47-085c-4c74-a49d-097989f0e19d",
                    OrganizationCode = "l-UB-y5Wn--5I--9u393gS--s3",
                    PrivateMoneyId = "fe6213e7-e07d-4a7e-adfe-2cf43ac6f070",
                    IsModified = true,
                    Types = new string[]{"payment", "topup"},
                    Description = "uBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0ac",
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions14()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    From = "2017-06-11T03:38:01.000000+09:00",
                    To = "2015-11-22T15:59:25.000000+09:00",
                    Page = 1622,
                    PerPage = 1059,
                    ShopId = "dd17bced-76aa-4cc1-82a8-c1450ce3e6b9",
                    CustomerId = "59b79ec4-2f57-4974-814e-a4206a752548",
                    CustomerName = "5sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdzHS5KI84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRIdac4BtBwC2bbOKrqEvt",
                    TerminalId = "c0716dc8-7e53-4bed-a5df-c42ab08daccc",
                    TransactionId = "9bac8fe6-e33d-40db-b67e-67e70c3ab2ad",
                    OrganizationCode = "10-7--Wn--w1A-43n-n7u38w9q",
                    PrivateMoneyId = "ace6436e-314c-4242-b6c3-8ce6c180cdf5",
                    IsModified = false,
                    Types = new string[]{"exchange_inflow"},
                    Description = "WsdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3",
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
