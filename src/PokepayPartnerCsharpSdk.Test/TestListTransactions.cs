// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransactions
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransactions0()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions();
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions1()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Description = "ZkEZHL6X7yTYi4IQldH8YVYfYTVzqthYVqcdJqZpsWClLie8XtWLywqRF3zuIz0PYKVFr7IEUtetulKM7ZSPEjYSpUepPA5",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions2()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Types = new string[]{},
                    Description = "Vd3bq7yqDJr4vC47NH1s9ATWfHxipD2V4IiKSQ3gCEFUwYe4581ka50TDJbBJyhYmpkCeVCfc9LIImeNeX4djmJxENCYUW1jeiYtdbpRmwnDRqM0MIEM1l1YZevVaN8uQlEY8xEWXP1ntU6j4UNjNm3RjXWF3",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions3()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    IsModified = false,
                    Types = new string[]{"expire", "exchange_outflow", "exchange_inflow"},
                    Description = "uWrjyUrrTQnTmkxDy9xOV3k96NHDCGY8idp7OzVY5QmbsHHDtGNKyXA9xzKVTlopBDPFsqLGUBct3mOm6ghMhCkjN5E",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions4()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    PrivateMoneyId = "bc10d1f5-2abe-4c4c-8921-12bec15491af",
                    IsModified = true,
                    Types = new string[]{"topup"},
                    Description = "Q",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions5()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    OrganizationCode = "O-q-nn4-2-3M-j1UG",
                    PrivateMoneyId = "38a73d5b-0858-43c8-80c3-d6bdd4dc67f4",
                    IsModified = true,
                    Types = new string[]{"expire", "cashback", "topup", "exchange_outflow", "payment"},
                    Description = "6dfY73EJszJnJmOfRNJmE03o1RGbOWWMlfBsMp4b4tk2ypFgqUTfZZG42WcFG709Q",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions6()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    TransactionId = "aQV8O",
                    OrganizationCode = "4-8GKR023---rFuhW9-5-faG8-",
                    PrivateMoneyId = "f0bd3f1d-c7e2-4f5a-b066-9323af332cd5",
                    IsModified = false,
                    Types = new string[]{"payment", "exchange_inflow"},
                    Description = "2E8PaTwhL0PoqexnoU3cuwPpOeZb6cbv35hskmylxuqQUjB3EdCk3b",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions7()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    TerminalId = "d9af493d-bce9-46c8-9574-586f34efeced",
                    TransactionId = "C",
                    OrganizationCode = "P1-40c8z3y5A-KT80tJ8E2",
                    PrivateMoneyId = "1c6e593d-8087-486e-a8dd-c472ddeefbe9",
                    IsModified = true,
                    Types = new string[]{"cashback", "exchange_inflow", "topup", "exchange_outflow", "expire"},
                    Description = "jRV0rqNmTaP3JvAOpGHfYh9Pj",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions8()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    CustomerName = "EQsOl9V30KaNUBYxbOQFm3nmKB7WcVYXplm0TBm9OmcX8G1EEN3K674DaLcjOthh0Eaf9Wfn8oLPruVzxhn1btA5JfS4GHjOdTb1VCqnDzFGDuW8R6YQBRL4P9Vy4mWYvpYTxkGSfVcQ8TmH85EaRWNCpZBqkC7vG2G1CP",
                    TerminalId = "a212eabd-c12b-4f7e-a53a-35b62a86dea0",
                    TransactionId = "nCJXdPX",
                    OrganizationCode = "-DPCS-Z4B-PC-5-UN8w",
                    PrivateMoneyId = "24a5487b-a62b-4921-b261-666170938783",
                    IsModified = false,
                    Types = new string[]{"cashback"},
                    Description = "IjI7qmEdg8Zu7xozJ03tKoqXhbdkHRWvlCHbA6UXHHNPTxl20KuFZHJqVvmIH18Mg5mKbxLvTVaMTW75BSJGVQhx",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions9()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    CustomerId = "f5531932-22b2-40e0-83ed-2fa4d7a58784",
                    CustomerName = "tQuFDmF70gBR0Izk9ATcevIEPcIYP68q0C3u9ElTYSSSia",
                    TerminalId = "8f893e60-62cd-4025-9a49-ba46a8f1ed6d",
                    TransactionId = "LsSqSL3yn",
                    OrganizationCode = "eJR-C--R-",
                    PrivateMoneyId = "d51d3297-6b6d-4218-9524-89079aaaf5ba",
                    IsModified = true,
                    Types = new string[]{"exchange_outflow"},
                    Description = "EJW5knWOAOiAaoK35cQbr7jpdjCsDMdaO08nIwUWpDWiCZGnpL43DRa7Kqj2FZ7pyNS8ApHHKkrhLhrxjfdcKY9H6NjVOmbThi8JrzvaHyjKu7qWAtGoBWV",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions10()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    ShopId = "62b8fa2a-86ad-4725-93b4-c1dde1ceb6cf",
                    CustomerId = "438f88cc-19ca-4d2d-8bf2-6927c4e16116",
                    CustomerName = "W7jd28o88RSqiBRPJMAU0j7nZUqFZFtN2yUaAdBiypM3yfJ8660j3daONHtLrONBb4FuXgxuJRpFauoZ2ZdfdvNT6hVAMnffyr3xPa3R",
                    TerminalId = "aa024483-a833-45fa-8415-4c7b6a91c34c",
                    TransactionId = "u2QcMp",
                    OrganizationCode = "F58-4JvlNsC-Q83L---I42--csD70",
                    PrivateMoneyId = "726adfe8-fd1c-4ce1-924a-6cf6633ac97d",
                    IsModified = false,
                    Types = new string[]{"topup", "expire", "exchange_inflow", "payment", "exchange_outflow"},
                    Description = "7hjCnNmynvVTiE8EaOvt2D1OLAdlTYkNl0HcWJzNrrOCqIK0jmHeu7YPTNsaym5w3J4aO8c9EvyEYh9Q5U4KNyLXTIFLUbalSUxHdQFtk2hAwmajfPLeOJUWf4QqUHaHdtnKXPPyfQMQ4AH8E2TPLpOeCZ81xp3vZcfXlHlKfk2HcIqqY",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions11()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    PerPage = 421,
                    ShopId = "430202c7-5bb3-4399-9ab2-6263b57e52a1",
                    CustomerId = "ebbf9a32-0ae9-432a-bb0a-0bcfbe02b2e1",
                    CustomerName = "aIUmnvcGF9w51RQ4TrSrnezZ6R3RzBlRhMaqKciBTUmrHWQMcTxbHhnXMI59DIqwNGwekw3j6O4H8ArpdMMUkr1jQXzePmBk2q4zrWqsHAw7Uo5fTXPGpDdNvatpuoKarDPhbdzVIVrm5gTTqS57pJq5AbFRy8NxbBYs9G8p9JZ9wSNPNIKdPbdHMvyy4wQwQ7AS93OCgXZn5Q93aE56yCntBKdRcGfWRfBg1zyUsrPWOd5h6Cf8HzP",
                    TerminalId = "32ed4db8-d384-4bae-9d49-eb82f260d3b2",
                    TransactionId = "CWgpHu",
                    OrganizationCode = "il-q8UDezB7-qhu1Fq03F--u-vL-W",
                    PrivateMoneyId = "1811bea5-abb7-4fe5-925d-bb079cb5f499",
                    IsModified = false,
                    Types = new string[]{"payment", "cashback", "expire", "exchange_inflow", "topup"},
                    Description = "ZrrSChN68rRgWmEsN1BpPYawrOTkO4e7etkFL2TyHzHqhJkVDX1CQG7ICJfkTHSpAfqXYK",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions12()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Page = 4261,
                    PerPage = 2650,
                    ShopId = "4ef4ce01-39ea-46d9-9157-224121e1d047",
                    CustomerId = "4c0b4090-b29c-4c3d-9589-ecaac2df0a0e",
                    CustomerName = "3lDAc1g44CUyp3ZCkyul1F7u73krbRhUtbVll2a4idndztrDf2lwO1erUv6OGsJMedAZLiFRV3IlNtDoeMJo9Y0sQ092mOnzUsb4BK1tZqI8LkPZydnWDxi8EwNxUYg5S15gGH2G74XFxaKvE9toSyoqN5nciMSsEvWqWHGFNjxC6PRRIV17GWgaYcPmFSjCPWELzi886AV",
                    TerminalId = "48625dae-ddaa-44f8-ba51-03f59222a134",
                    TransactionId = "nvxZd1hi",
                    OrganizationCode = "z-im0VI--knAn-D-F8",
                    PrivateMoneyId = "556c702f-7c3e-4386-a764-627b2b28c3ca",
                    IsModified = true,
                    Types = new string[]{"payment", "cashback", "expire", "exchange_inflow", "topup"},
                    Description = "SA9KiIruH22K160ZHB6RHxhKM7QX1fJDNVGwRNMKwqNgfNgbviuCan989OVkPfuDdy9c3lpMlTQ7o7W2891N7VlgaSjmhzi",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions13()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    To = "2018-04-27T18:23:14.000000+09:00",
                    Page = 360,
                    PerPage = 868,
                    ShopId = "69b08974-fd7e-4828-8d10-aa039c347d1c",
                    CustomerId = "f65edad2-a528-4638-9544-7c93164c363a",
                    CustomerName = "xdA8OZqz471da3iEzsze5OYUMXhOercin5cbogmmeepFPo5qa5Y5B",
                    TerminalId = "64f6018a-dba9-4507-8bf4-5092220af569",
                    TransactionId = "80PpvRVU6b",
                    OrganizationCode = "G1EKO1--D5-Ln14N0-6lR--Jj-",
                    PrivateMoneyId = "ccb23bd5-0209-4ffb-ba35-832b0384e591",
                    IsModified = true,
                    Types = new string[]{"payment", "expire", "cashback"},
                    Description = "TLEXBaJQCnrK0SrGj1x2VQMDNsa40Ziyheg3QifodGuc3PQhJPabjc9f5F6lPwQCP7QggVxwk1aktGGhGr39uD3GoKly9tBB5RO0tBzfF8ng7RcRhV4Ltjkyo0xLvjYYfBgJRgyBNAvExwRDtDtscRvcv",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions14()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    From = "2018-07-22T04:27:02.000000+09:00",
                    To = "2017-05-19T04:11:33.000000+09:00",
                    Page = 1645,
                    PerPage = 7238,
                    ShopId = "9514dab3-7fd2-4451-9d91-de3d0eed532e",
                    CustomerId = "957b34a7-7f89-4713-be19-da60dbe05609",
                    CustomerName = "9nJYRVMB3ggTzaKOLrwjCATiU0FGP60cjQ0JhMSsQXqJlwo8PBikTzl8sz8JYlZs9X1wCHUrsSa1O7WBqCwgrftBYMpy1WF3AGlQJI8c5GZQxig4JCz1IVSwOxoSMnzgYYcYZCT6xFb0ZiZyDkjs1PmlEjZxkYA0oL0DnGt0RPhz0LwMo8DhJNN5EZm8v8mdbTwzC6z31GnlOd2kgj7J2NwaYlq698zkCXlVzUTx9lm4wqu",
                    TerminalId = "794f40f9-4848-49d7-a20e-ba57f2653add",
                    TransactionId = "fJND",
                    OrganizationCode = "---k--Z-K----7p5r-dFOf",
                    PrivateMoneyId = "3806c5d3-bdaa-466a-9b38-0a0510dc8b5e",
                    IsModified = true,
                    Types = new string[]{},
                    Description = "Wzdx8AmWa2b4kIFr6aW4a7KKNo1lodAsNZVqUmJDy92H1Q4zLhgpQsUE5aqj3e21U4BOgRhckTgyvEhJjlwdAdpxbloz5xyaSXncYjsODjBBk5wvnSnqkOdkxAgJCTVcc",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
