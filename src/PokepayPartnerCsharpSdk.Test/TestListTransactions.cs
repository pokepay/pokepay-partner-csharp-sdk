// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListTransactions
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListTransactions0()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions();
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions1()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Description = "Jxndz72Q0N4noXvNO5DLRkdl5ghg5TD97Oj5gtU0ZoKwvyW7bRzCb3FOCLA5azjSynnHnQXUOmdNmfzw4ZMHUBCPSjgEAgGt2K3ZJlkq7nnYzpUmTbK3yRk2QBI3yo7b62L4MrrIWEQTncjkVMxRb3Dqestn4yM18ndND9RZjCxqACmPmDqAPId3nyo7KY1",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions2()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Types = new string[]{"expire", "exchange_inflow", "topup"},
                    Description = "laSYJBDD2rKCouP2k20clJim74MOrt5yi1S19sLzb5QoiWEAU3BEB6ans0zDMVENoSw0UuhZXzRAw2oUVfQIrewNHOYRIdPa5OVKP1BGm4WL6r",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions3()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    IsModified = false,
                    Types = new string[]{"cashback"},
                    Description = "NVM6n0SjzyxaahBKbrNNH0thcyZv5NGJDdU3MWdJ6CjIEO8zcyl6tYxGuUgSVwrrF6gOo5RURhzvOQZCwGMWoTuk62affTl9Z9yYh0I0MQFP",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions4()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    PrivateMoneyId = "2a1f2ddb-d41d-4ed8-82e6-7cbd804cd5a9",
                    IsModified = false,
                    Types = new string[]{},
                    Description = "uwbUX0YlpAD42BK6Ht9RY3Tq3huhrzkkqQNXj3Jw6RwiHsTAVPdxiOiTZWIPNju50G8rIkStz0jUMdjRY1kuWh",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions5()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    OrganizationCode = "9iX-64C1dS2v--6w",
                    PrivateMoneyId = "5c89678e-bb65-4419-ab41-370a02ba71c2",
                    IsModified = true,
                    Types = new string[]{"cashback", "payment"},
                    Description = "CqVtkpC2PyVDZ7kku9NtuTSLdtAZVosghXzzMHhOT9mtooRf",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions6()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    TransactionId = "e",
                    OrganizationCode = "6MJRtW6w",
                    PrivateMoneyId = "eeba5271-14b8-4519-96de-624c9d6c889c",
                    IsModified = false,
                    Types = new string[]{"cashback", "topup"},
                    Description = "pg5ZnHrckw",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions7()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    TerminalId = "74e85f2b-cec9-4ca2-84a3-8dd8a2291ed1",
                    TransactionId = "hAUvC",
                    OrganizationCode = "Spd--Cfy-TgK8IQtI-5E-0-1YS",
                    PrivateMoneyId = "96323d13-c580-40e7-8e75-05d11a9ae88a",
                    IsModified = true,
                    Types = new string[]{"payment"},
                    Description = "RBzixvSHuUr8m81A8rAh3CxIoE3SCjsI0w4VmRhsACzJzHYW9v2RBBjxaQhdC2qYq8LSo5dHABaMBDmBfdF21zdlKICUoDZid7IiDJKRz3zFqqTNU6S7uKF4OogP0CmAgc7KvEgF",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions8()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    CustomerName = "FHcVbA6rejlOX19m5e36QfGAY7yzoVke7vRAJOLWkpQM6MOXhXTLmjc42GiQq1PqJ660FxWml7j1VtgYdHv504h6aDONqdZoDJ6vSbw8tI1yigOVS3ulKW9tnoj4IqEQTrKz0EaAIXuTev975zD9pFqo0tzitEWMGHrwMHzsqoWx2C4MRxrrNuRoWcg68C5Mn2cw4jPEVc92InhAW2BW5Jljke9yfmhZgwy9ZNVztnMx0ez1l7T",
                    TerminalId = "e0dcaf0c-9210-4e68-8ae5-e37c28fc8cf1",
                    TransactionId = "btS",
                    OrganizationCode = "-xzY2I---f-pp0A--shB-KTj-",
                    PrivateMoneyId = "c11510a7-175d-4891-86f4-1e4e8baa8a85",
                    IsModified = true,
                    Types = new string[]{"cashback", "topup", "exchange_outflow", "exchange_inflow", "expire", "payment"},
                    Description = "StHWxF",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions9()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    CustomerId = "8601ec1b-e3a4-4fca-81d3-3b27e7766bca",
                    CustomerName = "VAd7aM6lwtKe7nSHefVq60tUvbQ8SbBXu5oMyqpQIRFDZxApe4IJyrJ3d7vXqIQwd8dM99b0XIMuG4lDkamnpcOMHFNgqvWkgFpt69AaXmZaeHsljfkWCXgi8wUKZrKDMaBH722ktY2M78FqRtYEpG09EDfgXJnzURy0xMNQAvQtNrwf77KY6AsX",
                    TerminalId = "5d4ba63d-9ef8-41aa-aac9-1ef738c71184",
                    TransactionId = "0n",
                    OrganizationCode = "-G6-S-RR-56q0a9qnq---Z3y-",
                    PrivateMoneyId = "90d5c855-9b01-4dbd-a186-14c45f23f073",
                    IsModified = false,
                    Types = new string[]{"payment", "topup"},
                    Description = "4ZUyLqJ92WOo8PBFn264aPpv3HSJ",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions10()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    ShopId = "f2c43e43-bdf2-4a4e-802b-a3c1a518d7c9",
                    CustomerId = "a304c351-ab94-401f-a139-8b45c23af141",
                    CustomerName = "xUmXiyLO8lt6UquQ2pQ7Z2HcerLD5H8iQ3iLE",
                    TerminalId = "49655b8d-96cd-46e8-8dd6-6d5e157a7a4e",
                    TransactionId = "hXgmIVrD",
                    OrganizationCode = "--2N--LfFnmWs3-L-l--",
                    PrivateMoneyId = "a0f72713-c9e7-4931-958b-985a367ba160",
                    IsModified = false,
                    Types = new string[]{"cashback", "expire", "topup", "exchange_inflow", "exchange_outflow", "payment"},
                    Description = "7T5RSrDufZvfZKfu4HOGT93OWDxe0Nw0qNsNWBjivzN76N8oVTIb71eKFHEImKE7Ak6mMjI2aL3QnSeZRqSTm2LkCePkZDyG1sefyg4wplIDNrtk9J6DBfj34QTJnbAVRE2",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions11()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    PerPage = 8670,
                    ShopId = "8e2b8185-577f-4284-a762-af3c71c02f2b",
                    CustomerId = "5f991b41-ae24-47ea-9476-328dd6649057",
                    CustomerName = "Kjm87X2gBdJrOekTkvukLGyZgZJXdorueF00sSQsbNgWjqXGS55h2BngP9lOuBIoNwS97xckdrevW9NJBVlJue6cKYSowNYwcV2dQbrYhwUYnaJzgf4RGSScEC2n07a81q3",
                    TerminalId = "f1ce1e1f-cc57-4012-acd6-169e17bd51f1",
                    TransactionId = "WTiGFX",
                    OrganizationCode = "9CIBY5Y-",
                    PrivateMoneyId = "2935eac2-6ab1-4337-8da1-b3db599a7c41",
                    IsModified = true,
                    Types = new string[]{"expire", "cashback", "payment", "exchange_inflow", "topup", "exchange_outflow"},
                    Description = "emHl584sN4mQdVOlO7p3oI56lSu9hy8Kxyu9lhkb3Xy2bGuJhoCg0CSgmEFm845EjkNmCeHmhc6o4rjScTPxffd6cT6dS5pEJvkBOfJ4cg",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions12()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    Page = 6675,
                    PerPage = 6673,
                    ShopId = "2a93a363-8a73-4e74-b2b3-ac48f39920ec",
                    CustomerId = "ddbda345-e5bb-4a31-81bf-0b553679ffd6",
                    CustomerName = "hxcdtItOmftDgyBm0zaCyweWjCILvaOGAIexGZPLM38lcZG1XPNcZhAbiKjplfb88b7Xw",
                    TerminalId = "6b7befe9-929e-4223-ba50-33f56548b0be",
                    TransactionId = "bS66UvjVwm",
                    OrganizationCode = "K-a0hb-122p-j-x--",
                    PrivateMoneyId = "c4ea1e53-1d2f-4c06-a107-115b564e2908",
                    IsModified = true,
                    Types = new string[]{"exchange_inflow", "cashback", "exchange_outflow", "expire", "payment", "topup"},
                    Description = "P0bQqhejCrIPyVPcTCmX95GnIFNB0Y6rXAvtYO3ZTqQm9Gdwx3nNaRQna1mMdj4q7jrfsnAkJuzP6",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions13()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    To = "2020-10-10T05:01:03.000000+09:00",
                    Page = 4489,
                    PerPage = 2706,
                    ShopId = "081ba056-0e8c-412a-aa3b-5dd13e4da8bf",
                    CustomerId = "1537c21a-b273-47ed-a1d5-62a85ba8a390",
                    CustomerName = "7zl7Kzx71DyAYHtPohcEgvNSXEszRzQuv3CEcRDhW8kOybpJVNd6Zq5u6LhTb4nfR1Pg2Z0WIPkXNUw8adoqeUzcgp2QpJLVqTb6JI66AGJFtMarZvdXa4STcppNrFOICMTswZyqZS0ncTyZp61cUFNMmZc1OQGD7o77EwaLksiq4Q27cIJLVLHMGlKxkHnYFOG0akayoH3azTTAFtviVJ6w4sTFjYolTCM",
                    TerminalId = "b2cbc77b-79c9-46b3-b775-7f0a01349c0e",
                    TransactionId = "6ax",
                    OrganizationCode = "aUhyYU3S1--nnuHZ3tX-uzs-A7g-j06-",
                    PrivateMoneyId = "c62dfe6f-53af-4268-b2de-42f5de878b73",
                    IsModified = true,
                    Types = new string[]{"payment", "cashback", "exchange_inflow", "expire", "topup"},
                    Description = "kGE4Ye4XhWBj3QM8OInc1mXpP6ru7Nm0NcznMGNHInVCiOgbb5nPlyUbVf0m7O9AQcnn3PvpaY90Zohkl6suTsU6C5fTclsee8M2yCMA56zYj891SdJ3FQPYEmKUwWlUgxkOh3FjfEYjjq9C8rJzbQtulHNxFIj6Up5GYSaDoRf3mK4EUpnw2W7fd",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListTransactions14()
        {
            try {
                Request.ListTransactions request = new Request.ListTransactions() {
                    From = "2016-05-07T02:14:22.000000+09:00",
                    To = "2023-01-05T18:38:47.000000+09:00",
                    Page = 2320,
                    PerPage = 6301,
                    ShopId = "98564414-3ade-495d-b799-1c19daf9a404",
                    CustomerId = "3aeabf82-7747-4f05-9a62-9996d826bc6c",
                    CustomerName = "bL38AOzfA1BgPiTmIOHkGQQvAdDVVLTzI5eNqvZhfVDp25Db4E9pxg2le1FbbDOrDSCUf4ZkkFwhcJjsKA6v3LFHRZ1YGG43AuGPcgJmTXnMfe551lEr3lGQzDSBBBrAQ1IcqNXpiuOhusjWetEv8blvJtO",
                    TerminalId = "c504b647-b2ae-49c5-ab99-de034d442831",
                    TransactionId = "3",
                    OrganizationCode = "U-1CH3uKuKW68",
                    PrivateMoneyId = "2d7b69a7-ad2e-4093-b7b6-a2f5cd41a396",
                    IsModified = true,
                    Types = new string[]{"exchange_inflow", "exchange_outflow"},
                    Description = "MW9Bq",
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
