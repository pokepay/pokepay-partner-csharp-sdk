// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListCustomerTransactions
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListCustomerTransactions0()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "8e056bb7-3407-4123-8107-505fe22bca1a"
                );
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions1()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "8e056bb7-3407-4123-8107-505fe22bca1a"
                ) {
                    PerPage = 619,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions2()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "8e056bb7-3407-4123-8107-505fe22bca1a"
                ) {
                    Page = 8259,
                    PerPage = 6253,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions3()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "8e056bb7-3407-4123-8107-505fe22bca1a"
                ) {
                    To = "2017-07-24T20:50:11.000000+09:00",
                    Page = 4872,
                    PerPage = 1625,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions4()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "8e056bb7-3407-4123-8107-505fe22bca1a"
                ) {
                    From = "2023-04-07T19:20:38.000000+09:00",
                    To = "2016-09-23T23:59:48.000000+09:00",
                    Page = 5751,
                    PerPage = 4104,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions5()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "8e056bb7-3407-4123-8107-505fe22bca1a"
                ) {
                    IsModified = false,
                    From = "2018-01-15T22:14:01.000000+09:00",
                    To = "2023-06-08T06:20:30.000000+09:00",
                    Page = 3593,
                    PerPage = 2176,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions6()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "8e056bb7-3407-4123-8107-505fe22bca1a"
                ) {
                    Type = "payment",
                    IsModified = false,
                    From = "2017-01-17T02:29:30.000000+09:00",
                    To = "2021-03-14T23:47:20.000000+09:00",
                    Page = 2298,
                    PerPage = 7357,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions7()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "8e056bb7-3407-4123-8107-505fe22bca1a"
                ) {
                    ReceiverCustomerId = "0bc6a174-eaec-4526-bd45-db02d36e7ce6",
                    Type = "transfer",
                    IsModified = false,
                    From = "2020-10-05T17:03:49.000000+09:00",
                    To = "2023-03-15T13:36:12.000000+09:00",
                    Page = 3784,
                    PerPage = 5469,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions8()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "8e056bb7-3407-4123-8107-505fe22bca1a"
                ) {
                    SenderCustomerId = "a03e9309-c369-46c9-a612-0fe5726a67ce",
                    ReceiverCustomerId = "79f13c5b-496a-4ee0-86be-9623019305f9",
                    Type = "transfer",
                    IsModified = false,
                    From = "2021-01-10T06:06:19.000000+09:00",
                    To = "2023-06-26T12:58:01.000000+09:00",
                    Page = 2222,
                    PerPage = 4629,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
