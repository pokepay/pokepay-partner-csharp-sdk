// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListCustomerTransactions
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListCustomerTransactions0()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "a804d396-c0bd-4bc8-83fb-80edddd57010"
                );
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions1()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "a804d396-c0bd-4bc8-83fb-80edddd57010"
                ) {
                    PerPage = 6306,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions2()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "a804d396-c0bd-4bc8-83fb-80edddd57010"
                ) {
                    Page = 568,
                    PerPage = 7044,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions3()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "a804d396-c0bd-4bc8-83fb-80edddd57010"
                ) {
                    To = "2017-03-04T12:47:41.000000+09:00",
                    Page = 6492,
                    PerPage = 4773,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions4()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "a804d396-c0bd-4bc8-83fb-80edddd57010"
                ) {
                    From = "2023-07-12T05:20:36.000000+09:00",
                    To = "2022-11-02T06:39:42.000000+09:00",
                    Page = 9959,
                    PerPage = 9931,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions5()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "a804d396-c0bd-4bc8-83fb-80edddd57010"
                ) {
                    IsModified = true,
                    From = "2018-03-07T19:23:07.000000+09:00",
                    To = "2018-02-02T02:34:09.000000+09:00",
                    Page = 403,
                    PerPage = 9309,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions6()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "a804d396-c0bd-4bc8-83fb-80edddd57010"
                ) {
                    Type = "topup",
                    IsModified = false,
                    From = "2024-02-03T09:38:39.000000+09:00",
                    To = "2025-07-21T11:03:54.000000+09:00",
                    Page = 9365,
                    PerPage = 9128,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions7()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "a804d396-c0bd-4bc8-83fb-80edddd57010"
                ) {
                    ReceiverCustomerId = "8d502c53-31cb-4f93-8ba8-a1fcf5d66752",
                    Type = "cashback",
                    IsModified = false,
                    From = "2020-12-12T00:34:00.000000+09:00",
                    To = "2021-02-25T20:52:44.000000+09:00",
                    Page = 3341,
                    PerPage = 3336,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions8()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "a804d396-c0bd-4bc8-83fb-80edddd57010"
                ) {
                    SenderCustomerId = "19fc2c78-ddc0-46b8-8963-2b6986fd9ae0",
                    ReceiverCustomerId = "841e4321-a7ce-4d72-8bf7-2b654d5e9d15",
                    Type = "exchange",
                    IsModified = true,
                    From = "2020-03-20T03:48:42.000000+09:00",
                    To = "2019-05-25T02:41:42.000000+09:00",
                    Page = 784,
                    PerPage = 941,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
