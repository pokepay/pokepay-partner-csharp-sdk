// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListCustomerTransactions
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListCustomerTransactions0()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "b4615a78-056c-4f65-911a-40efce3d4819"
                );
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions1()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "b4615a78-056c-4f65-911a-40efce3d4819"
                ) {
                    PerPage = 7983,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions2()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "b4615a78-056c-4f65-911a-40efce3d4819"
                ) {
                    Page = 8594,
                    PerPage = 8708,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions3()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "b4615a78-056c-4f65-911a-40efce3d4819"
                ) {
                    To = "2022-12-05T01:41:12.000000+09:00",
                    Page = 6163,
                    PerPage = 3678,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions4()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "b4615a78-056c-4f65-911a-40efce3d4819"
                ) {
                    From = "2020-05-15T00:30:46.000000+09:00",
                    To = "2022-02-05T18:21:10.000000+09:00",
                    Page = 2169,
                    PerPage = 2639,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions5()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "b4615a78-056c-4f65-911a-40efce3d4819"
                ) {
                    IsModified = true,
                    From = "2022-07-28T15:43:02.000000+09:00",
                    To = "2024-03-12T12:19:08.000000+09:00",
                    Page = 969,
                    PerPage = 7259,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions6()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "b4615a78-056c-4f65-911a-40efce3d4819"
                ) {
                    Type = "exchange",
                    IsModified = false,
                    From = "2022-01-23T09:43:17.000000+09:00",
                    To = "2021-11-23T13:02:33.000000+09:00",
                    Page = 5418,
                    PerPage = 3260,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions7()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "b4615a78-056c-4f65-911a-40efce3d4819"
                ) {
                    ReceiverCustomerId = "b2c95c4c-96ff-4238-b66c-ed794dd261d4",
                    Type = "expire",
                    IsModified = true,
                    From = "2020-04-07T20:45:17.000000+09:00",
                    To = "2021-08-08T03:59:32.000000+09:00",
                    Page = 7512,
                    PerPage = 6169,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions8()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "b4615a78-056c-4f65-911a-40efce3d4819"
                ) {
                    SenderCustomerId = "4abdf29a-af69-4c3b-8e5f-67b7c4256e2a",
                    ReceiverCustomerId = "d876c1af-f54c-4a8e-aa11-14c86131e96a",
                    Type = "cashback",
                    IsModified = false,
                    From = "2023-07-23T07:36:47.000000+09:00",
                    To = "2019-02-09T18:47:33.000000+09:00",
                    Page = 8939,
                    PerPage = 8361,
                };
                Response.PaginatedTransaction response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
