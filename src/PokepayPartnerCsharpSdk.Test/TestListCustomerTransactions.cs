// DO NOT EDIT: File is generated by code generator.
#nullable enable
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListCustomerTransactions
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListCustomerTransactions0()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "4ccce7aa-20a7-4f51-ab80-5881d8c043e8"
                );
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions1()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "4ccce7aa-20a7-4f51-ab80-5881d8c043e8"
                ) {
                    PerPage = 3769,
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions2()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "4ccce7aa-20a7-4f51-ab80-5881d8c043e8"
                ) {
                    Page = 5727,
                    PerPage = 546,
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions3()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "4ccce7aa-20a7-4f51-ab80-5881d8c043e8"
                ) {
                    To = "2022-03-28T00:00:35.000000+09:00",
                    Page = 5419,
                    PerPage = 1275,
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions4()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "4ccce7aa-20a7-4f51-ab80-5881d8c043e8"
                ) {
                    From = "2022-10-10T10:15:09.000000+09:00",
                    To = "2017-11-18T23:55:30.000000+09:00",
                    Page = 3942,
                    PerPage = 4322,
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions5()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "4ccce7aa-20a7-4f51-ab80-5881d8c043e8"
                ) {
                    IsModified = true,
                    From = "2019-03-09T19:38:07.000000+09:00",
                    To = "2024-10-26T06:14:47.000000+09:00",
                    Page = 6676,
                    PerPage = 2346,
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions6()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "4ccce7aa-20a7-4f51-ab80-5881d8c043e8"
                ) {
                    Type = "0rU",
                    IsModified = true,
                    From = "2024-05-30T20:29:53.000000+09:00",
                    To = "2017-09-30T20:15:42.000000+09:00",
                    Page = 1622,
                    PerPage = 5756,
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions7()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "4ccce7aa-20a7-4f51-ab80-5881d8c043e8"
                ) {
                    ReceiverCustomerId = "d783a8bb-7d3a-4ffe-a0d4-81e00c4ae0e3",
                    Type = "nGDBsZu",
                    IsModified = true,
                    From = "2018-02-21T16:33:11.000000+09:00",
                    To = "2022-12-23T09:50:02.000000+09:00",
                    Page = 3648,
                    PerPage = 8655,
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListCustomerTransactions8()
        {
            try {
                Request.ListCustomerTransactions request = new Request.ListCustomerTransactions(
                    "4ccce7aa-20a7-4f51-ab80-5881d8c043e8"
                ) {
                    SenderCustomerId = "ed0e598d-4ef6-4f00-a9e6-459dd79243d3",
                    ReceiverCustomerId = "ee2103b9-4341-47bc-aef5-d5e6d749657b",
                    Type = "ij",
                    IsModified = false,
                    From = "2021-07-08T16:22:22.000000+09:00",
                    To = "2024-12-16T19:43:12.000000+09:00",
                    Page = 6877,
                    PerPage = 1042,
                };
                Response.PaginatedTransaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
