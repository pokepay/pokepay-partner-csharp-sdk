// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTopupTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTopupTransaction0()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "8e3a5553-8579-4c24-9eef-d74c712447dd",
                    "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                    "ef85eede-82cb-4468-9582-2ccddf764208"
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction1()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "8e3a5553-8579-4c24-9eef-d74c712447dd",
                    "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                    "ef85eede-82cb-4468-9582-2ccddf764208"
                ) {
                    RequestId = "6924d76e-d35e-4341-9347-ad42f73d2590",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction2()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "8e3a5553-8579-4c24-9eef-d74c712447dd",
                    "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                    "ef85eede-82cb-4468-9582-2ccddf764208"
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "78112281-97f2-444c-8284-68336975e905",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction3()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "8e3a5553-8579-4c24-9eef-d74c712447dd",
                    "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                    "ef85eede-82cb-4468-9582-2ccddf764208"
                ) {
                    Description = "eptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV81h6fR4XX",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "a152d341-467e-4752-be06-08e5e80c9901",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction4()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "8e3a5553-8579-4c24-9eef-d74c712447dd",
                    "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                    "ef85eede-82cb-4468-9582-2ccddf764208"
                ) {
                    PointExpiresAt = "2018-08-02T19:22:22.000000+09:00",
                    Description = "SL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqzVsahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISprQ3cmpI6bh8YrVsWGSghD",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "996f202b-5d28-4094-835f-0b771d340d31",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction5()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "8e3a5553-8579-4c24-9eef-d74c712447dd",
                    "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                    "ef85eede-82cb-4468-9582-2ccddf764208"
                ) {
                    PointAmount = 6692,
                    PointExpiresAt = "2016-08-28T09:38:09.000000+09:00",
                    Description = "nnaTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79bzapcrIrLur4lrAgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHG",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "2ab7fa7f-a3c4-41c9-ad1c-f49b83998eea",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction6()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "8e3a5553-8579-4c24-9eef-d74c712447dd",
                    "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                    "ef85eede-82cb-4468-9582-2ccddf764208"
                ) {
                    MoneyAmount = 4889,
                    PointAmount = 1707,
                    PointExpiresAt = "2019-03-26T12:09:25.000000+09:00",
                    Description = "34z4jE8W9hhkpYWEzZLn5uyvbNkf",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "b2e2a821-102f-457d-932c-10baa2a7246b",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction7()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "8e3a5553-8579-4c24-9eef-d74c712447dd",
                    "d55893f1-9c88-4394-85d1-1bab6d1e9afe",
                    "ef85eede-82cb-4468-9582-2ccddf764208"
                ) {
                    BearPointShopId = "48447b71-0d64-4da2-877c-2ea2ffa8a760",
                    MoneyAmount = 975,
                    PointAmount = 5906,
                    PointExpiresAt = "2018-01-17T05:41:58.000000+09:00",
                    Description = "2tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcry",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "047edf6a-2b34-402f-9647-397dde9f75ab",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
