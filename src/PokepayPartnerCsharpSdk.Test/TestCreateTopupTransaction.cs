// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTopupTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTopupTransaction0()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "af9ad491-5857-41de-b8bf-710af6494580",
                    "2e55de75-44cd-411d-9ed7-71d22b5accaf",
                    "e2d17713-797a-4369-94d8-1c0154af3204"
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction1()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "af9ad491-5857-41de-b8bf-710af6494580",
                    "2e55de75-44cd-411d-9ed7-71d22b5accaf",
                    "e2d17713-797a-4369-94d8-1c0154af3204"
                ) {
                    RequestId = "3cec35cd-e688-42a7-a22b-1ef5c9d11a82",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction2()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "af9ad491-5857-41de-b8bf-710af6494580",
                    "2e55de75-44cd-411d-9ed7-71d22b5accaf",
                    "e2d17713-797a-4369-94d8-1c0154af3204"
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "e06b45ed-b807-4346-aa3e-1d26809eb9e5",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction3()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "af9ad491-5857-41de-b8bf-710af6494580",
                    "2e55de75-44cd-411d-9ed7-71d22b5accaf",
                    "e2d17713-797a-4369-94d8-1c0154af3204"
                ) {
                    Description = "EHdh8PePoMZwnAEmuUL6pb761IWS7zT3jmF3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbGph7rDrumGN6tQ3vZwFKRF7w7plcl",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "f06f6195-0963-493d-971e-d84222ac203f",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction4()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "af9ad491-5857-41de-b8bf-710af6494580",
                    "2e55de75-44cd-411d-9ed7-71d22b5accaf",
                    "e2d17713-797a-4369-94d8-1c0154af3204"
                ) {
                    PointExpiresAt = "2024-07-09T01:54:50.000000+09:00",
                    Description = "R",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "1c9d1677-dd51-4486-8515-9b302d3aab91",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction5()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "af9ad491-5857-41de-b8bf-710af6494580",
                    "2e55de75-44cd-411d-9ed7-71d22b5accaf",
                    "e2d17713-797a-4369-94d8-1c0154af3204"
                ) {
                    PointAmount = 2472,
                    PointExpiresAt = "2022-04-10T08:43:33.000000+09:00",
                    Description = "BzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CHRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEV",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "b882c67e-c748-4610-ba95-4e131acb65d2",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction6()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "af9ad491-5857-41de-b8bf-710af6494580",
                    "2e55de75-44cd-411d-9ed7-71d22b5accaf",
                    "e2d17713-797a-4369-94d8-1c0154af3204"
                ) {
                    MoneyAmount = 4994,
                    PointAmount = 4394,
                    PointExpiresAt = "2018-02-18T22:10:04.000000+09:00",
                    Description = "hiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62f8FNzaDel7ro4JT6XY3Y33ek4ahxmsrZJPb5B1K9ZLJjl",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "4d17ea25-8551-4cfa-b2e3-d0c7df034e34",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction7()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "af9ad491-5857-41de-b8bf-710af6494580",
                    "2e55de75-44cd-411d-9ed7-71d22b5accaf",
                    "e2d17713-797a-4369-94d8-1c0154af3204"
                ) {
                    BearPointShopId = "2be56ae3-7e46-4100-9f78-cb8d34d5d439",
                    MoneyAmount = 5945,
                    PointAmount = 2484,
                    PointExpiresAt = "2022-01-15T01:40:37.000000+09:00",
                    Description = "BL",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "53f477bf-d1e4-4397-8adf-cd96709e5b2b",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
