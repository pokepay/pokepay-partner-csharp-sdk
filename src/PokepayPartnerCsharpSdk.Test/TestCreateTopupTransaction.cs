// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTopupTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTopupTransaction0()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "40be3508-3676-430f-ae0f-46fdce2fff8c",
                    "4c63d76d-8476-40c9-8c8b-f307ad7f556a",
                    "f7917703-6b0b-4c56-8b15-3a29318bcfe5"
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction1()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "40be3508-3676-430f-ae0f-46fdce2fff8c",
                    "4c63d76d-8476-40c9-8c8b-f307ad7f556a",
                    "f7917703-6b0b-4c56-8b15-3a29318bcfe5"
                ) {
                    RequestId = "1cb02637-82bb-455b-8e61-6a4d73c45c37",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction2()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "40be3508-3676-430f-ae0f-46fdce2fff8c",
                    "4c63d76d-8476-40c9-8c8b-f307ad7f556a",
                    "f7917703-6b0b-4c56-8b15-3a29318bcfe5"
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "2ca637d1-838e-4322-a9de-be19692702e9",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction3()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "40be3508-3676-430f-ae0f-46fdce2fff8c",
                    "4c63d76d-8476-40c9-8c8b-f307ad7f556a",
                    "f7917703-6b0b-4c56-8b15-3a29318bcfe5"
                ) {
                    Description = "N4LuTtB8ZF5mN9clYyKl8cUsYw8CW8rHVcmWZsjKlFT0f7did2pSfVDNNjekhaUaqNZOry7pQcwkQvvHfTZTUiaSBniTvgiFcfFWfXoobW27D2zSsjxSJQCC2TKE3m70u0i2E7e3WCog3HknLhb4mGHjaX24jJAlJFQ82MhyQQoip",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "dc7d9a67-4ac6-433b-8e16-9ad36a2fe20d",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction4()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "40be3508-3676-430f-ae0f-46fdce2fff8c",
                    "4c63d76d-8476-40c9-8c8b-f307ad7f556a",
                    "f7917703-6b0b-4c56-8b15-3a29318bcfe5"
                ) {
                    PointExpiresAt = "2024-11-12T07:47:52.000000+09:00",
                    Description = "jeobdQD1VXjUggH7qMtHhSfZdXUyjb1NxKa8yAWf3eI4rn2GK",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "59299bf8-7296-4dc0-943d-a8b83d21394d",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction5()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "40be3508-3676-430f-ae0f-46fdce2fff8c",
                    "4c63d76d-8476-40c9-8c8b-f307ad7f556a",
                    "f7917703-6b0b-4c56-8b15-3a29318bcfe5"
                ) {
                    PointAmount = 3174,
                    PointExpiresAt = "2017-11-09T17:01:49.000000+09:00",
                    Description = "veV88627AlMJYf8MI0c9iCp3raZonaiDazAfoVN5ZcNoMxEFE11voG9m7gWIlidcsFhnnSlOP",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "6d7803d1-0080-4fd3-bd21-7c4babed4ad6",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction6()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "40be3508-3676-430f-ae0f-46fdce2fff8c",
                    "4c63d76d-8476-40c9-8c8b-f307ad7f556a",
                    "f7917703-6b0b-4c56-8b15-3a29318bcfe5"
                ) {
                    MoneyAmount = 3159,
                    PointAmount = 682,
                    PointExpiresAt = "2016-09-02T05:46:56.000000+09:00",
                    Description = "GqQVfPuvUPiEFV6mDyiAjmPC8FhIFplNkUQpOFZAAuAkdYYYV",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "f08e36aa-83aa-4e14-8638-ff7118968e3a",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction7()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "40be3508-3676-430f-ae0f-46fdce2fff8c",
                    "4c63d76d-8476-40c9-8c8b-f307ad7f556a",
                    "f7917703-6b0b-4c56-8b15-3a29318bcfe5"
                ) {
                    BearPointShopId = "a03025b0-0e20-44b2-8872-cd609535477b",
                    MoneyAmount = 1852,
                    PointAmount = 4,
                    PointExpiresAt = "2016-11-20T10:17:53.000000+09:00",
                    Description = "7ePIgPu4dPH7I",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "eb28d93c-596d-427e-9efe-8ad32f6c2428",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
