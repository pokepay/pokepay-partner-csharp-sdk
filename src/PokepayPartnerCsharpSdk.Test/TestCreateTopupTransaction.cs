// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTopupTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTopupTransaction0()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "bc15ed4f-ea02-40ed-8c57-ff2b5a6fde79",
                    "58ede2bd-f8af-4ab7-9877-9d41583d367f",
                    "097edc00-6956-41cd-9110-e5cbeb4bbf0d"
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction1()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "bc15ed4f-ea02-40ed-8c57-ff2b5a6fde79",
                    "58ede2bd-f8af-4ab7-9877-9d41583d367f",
                    "097edc00-6956-41cd-9110-e5cbeb4bbf0d"
                ) {
                    RequestId = "0b50d70e-3734-4d6a-bf75-4ee106427b62",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction2()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "bc15ed4f-ea02-40ed-8c57-ff2b5a6fde79",
                    "58ede2bd-f8af-4ab7-9877-9d41583d367f",
                    "097edc00-6956-41cd-9110-e5cbeb4bbf0d"
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "31bf6a4c-74dd-4bb9-936d-b409edee4866",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction3()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "bc15ed4f-ea02-40ed-8c57-ff2b5a6fde79",
                    "58ede2bd-f8af-4ab7-9877-9d41583d367f",
                    "097edc00-6956-41cd-9110-e5cbeb4bbf0d"
                ) {
                    Description = "e94qSnIa0psKSnzBn",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "d94dbd9b-6e5f-4c22-8c6b-e789fc85eaea",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction4()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "bc15ed4f-ea02-40ed-8c57-ff2b5a6fde79",
                    "58ede2bd-f8af-4ab7-9877-9d41583d367f",
                    "097edc00-6956-41cd-9110-e5cbeb4bbf0d"
                ) {
                    PointExpiresAt = "2023-08-10T18:28:45.000000+09:00",
                    Description = "GxU6rVevVboaFKZKK8A47GtPxGDRgI3WyB19Wy6BsKtFj06zN4euhJVcuO14",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "e60e3da0-4dac-4c16-8328-73688e977a93",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction5()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "bc15ed4f-ea02-40ed-8c57-ff2b5a6fde79",
                    "58ede2bd-f8af-4ab7-9877-9d41583d367f",
                    "097edc00-6956-41cd-9110-e5cbeb4bbf0d"
                ) {
                    PointAmount = 9226,
                    PointExpiresAt = "2017-09-18T10:56:48.000000+09:00",
                    Description = "6vV94I",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "ad06289f-8ccb-4361-935d-189b1b7738df",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction6()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "bc15ed4f-ea02-40ed-8c57-ff2b5a6fde79",
                    "58ede2bd-f8af-4ab7-9877-9d41583d367f",
                    "097edc00-6956-41cd-9110-e5cbeb4bbf0d"
                ) {
                    MoneyAmount = 4380,
                    PointAmount = 2979,
                    PointExpiresAt = "2020-12-09T22:00:43.000000+09:00",
                    Description = "ibRQosdBQ9Od12y5EKMLL3cUoSQcbCSo0Q8HvB5GGOZFgWabi1KJwgYNmBQIP0ToAQMGxkUXhIveZucyhYJZxTXYPMxJCJGIYvfbduT15NEl6igyG0ml8IvPIwQdu1Xumm9V4z5tG1swz8USAOX3jbTWRu4PVd54sME1P",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "22f10bdb-27b9-4996-bd4d-371aad8143ae",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction7()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "bc15ed4f-ea02-40ed-8c57-ff2b5a6fde79",
                    "58ede2bd-f8af-4ab7-9877-9d41583d367f",
                    "097edc00-6956-41cd-9110-e5cbeb4bbf0d"
                ) {
                    BearPointShopId = "4544fa27-ae4c-4ee8-a062-1a36b5010a83",
                    MoneyAmount = 7738,
                    PointAmount = 9893,
                    PointExpiresAt = "2018-11-24T19:11:05.000000+09:00",
                    Description = "ZmTEKGX1SkT5zwt9W8FZETahQ5WyzbN8xl4m20ctj19dBZSDMTCErQybPySUAtwuvk2Wy37wDaD4TUnchplAdyeIDpXYVHgGf2JDTmwXPhsNlxkRuqGjdb5V3XJtbaCMsrCjSdFSLaE2Qg1AJhBJvf",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "a68cea63-e146-4c3c-8632-4c3f19cefed5",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
