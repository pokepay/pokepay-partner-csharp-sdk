// DO NOT EDIT: File is generated by code generator.
#nullable enable
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTopupTransaction
    {
        private Client? client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTopupTransaction0()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "714ae247-b68c-4542-93db-005699bd57cc",
                    "b23cdd26-76f0-468a-8b32-ccd657594e6d",
                    "d7c06467-3e1d-45a0-be33-87e5f9b30da8"
                );
                Response.Transaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction1()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "714ae247-b68c-4542-93db-005699bd57cc",
                    "b23cdd26-76f0-468a-8b32-ccd657594e6d",
                    "d7c06467-3e1d-45a0-be33-87e5f9b30da8"
                ) {
                    RequestId = "12873ff0-f0a7-4f8d-b2ad-25cf642cb155",
                };
                Response.Transaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction2()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "714ae247-b68c-4542-93db-005699bd57cc",
                    "b23cdd26-76f0-468a-8b32-ccd657594e6d",
                    "d7c06467-3e1d-45a0-be33-87e5f9b30da8"
                ) {
                    Description = "7ktZcH",
                    RequestId = "cc474057-b105-4273-8bda-3c8a04992c7f",
                };
                Response.Transaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction3()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "714ae247-b68c-4542-93db-005699bd57cc",
                    "b23cdd26-76f0-468a-8b32-ccd657594e6d",
                    "d7c06467-3e1d-45a0-be33-87e5f9b30da8"
                ) {
                    PointExpiresAt = "2024-10-27T05:25:48.000000+09:00",
                    Description = "EtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1",
                    RequestId = "7508f855-4d79-48d0-9202-02e1456064c7",
                };
                Response.Transaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction4()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "714ae247-b68c-4542-93db-005699bd57cc",
                    "b23cdd26-76f0-468a-8b32-ccd657594e6d",
                    "d7c06467-3e1d-45a0-be33-87e5f9b30da8"
                ) {
                    PointAmount = 3784,
                    PointExpiresAt = "2021-01-16T15:18:32.000000+09:00",
                    Description = "kyMSdmemZcovbEUc9TiM3DTSa7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xl",
                    RequestId = "4f57728f-a26e-4378-b631-80dc19de3382",
                };
                Response.Transaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction5()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "714ae247-b68c-4542-93db-005699bd57cc",
                    "b23cdd26-76f0-468a-8b32-ccd657594e6d",
                    "d7c06467-3e1d-45a0-be33-87e5f9b30da8"
                ) {
                    MoneyAmount = 6761,
                    PointAmount = 1028,
                    PointExpiresAt = "2025-04-10T20:20:59.000000+09:00",
                    Description = "BdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3PolsdbrxUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYv",
                    RequestId = "686f83c8-1ae9-4867-a4c2-0116c175ee8a",
                };
                Response.Transaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction6()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "714ae247-b68c-4542-93db-005699bd57cc",
                    "b23cdd26-76f0-468a-8b32-ccd657594e6d",
                    "d7c06467-3e1d-45a0-be33-87e5f9b30da8"
                ) {
                    BearPointShopId = "ccd1df59-d82b-4776-914b-b45b160fddd6",
                    MoneyAmount = 137,
                    PointAmount = 1422,
                    PointExpiresAt = "2020-02-19T21:22:44.000000+09:00",
                    Description = "VdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzH",
                    RequestId = "0d5219fc-8b40-4265-901f-51ecc6802c77",
                };
                Response.Transaction response = await request.Send(client!);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.StatusCode!, (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.StatusCode >= 300, "Should be larger than 300");
            }
        }

    }
}
