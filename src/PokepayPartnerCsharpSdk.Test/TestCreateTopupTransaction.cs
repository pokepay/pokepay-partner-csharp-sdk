// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTopupTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTopupTransaction0()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "21016bb1-28e3-46c5-9390-4fe62758a318",
                    "3c034475-2d91-4bd6-b6d5-67ea159c0a34",
                    "2b21c048-5a6d-4322-8933-91de0737101a"
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction1()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "21016bb1-28e3-46c5-9390-4fe62758a318",
                    "3c034475-2d91-4bd6-b6d5-67ea159c0a34",
                    "2b21c048-5a6d-4322-8933-91de0737101a"
                ) {
                    RequestId = "10cba062-a97b-4ab6-8426-4041bfbad922",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction2()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "21016bb1-28e3-46c5-9390-4fe62758a318",
                    "3c034475-2d91-4bd6-b6d5-67ea159c0a34",
                    "2b21c048-5a6d-4322-8933-91de0737101a"
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "f0b7e044-eed6-4f54-b907-3efae58b2157",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction3()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "21016bb1-28e3-46c5-9390-4fe62758a318",
                    "3c034475-2d91-4bd6-b6d5-67ea159c0a34",
                    "2b21c048-5a6d-4322-8933-91de0737101a"
                ) {
                    Description = "NDMCbgVBJmMVod1JdFQPVV7P4djvdmVzGpPUqhrEXZrUk8KulCnSixhTNidjoa9LrFOkF92wJTXEkWBQq8J1b0xO05eVqx7oh8fOwW4uFGjggiU",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "6da139bd-343e-4df2-8e77-40df98924094",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction4()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "21016bb1-28e3-46c5-9390-4fe62758a318",
                    "3c034475-2d91-4bd6-b6d5-67ea159c0a34",
                    "2b21c048-5a6d-4322-8933-91de0737101a"
                ) {
                    PointExpiresAt = "2020-08-05T10:38:47.000000+09:00",
                    Description = "rqGbmuoZFimh",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "355e2349-97b1-4539-b997-5012ee9b188d",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction5()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "21016bb1-28e3-46c5-9390-4fe62758a318",
                    "3c034475-2d91-4bd6-b6d5-67ea159c0a34",
                    "2b21c048-5a6d-4322-8933-91de0737101a"
                ) {
                    PointAmount = 8446,
                    PointExpiresAt = "2019-08-11T07:17:24.000000+09:00",
                    Description = "JZIXl8JlKYTAplbJhLfHG0gwXcUtWV0rMGyzgdZEWWt8M1jijrxPI9neXoIE03KamtoeThshbrWt5D0FSdQHzC3V2oVwROyiqwgLwvded0o1xVSrIivnDMwZB3W9",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "c27921a7-5785-4110-b8ac-70f1b7285a9c",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction6()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "21016bb1-28e3-46c5-9390-4fe62758a318",
                    "3c034475-2d91-4bd6-b6d5-67ea159c0a34",
                    "2b21c048-5a6d-4322-8933-91de0737101a"
                ) {
                    MoneyAmount = 9755,
                    PointAmount = 3060,
                    PointExpiresAt = "2025-07-22T09:48:28.000000+09:00",
                    Description = "RybHpm",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "4563dccf-f642-44da-8a5e-3a86102b7d43",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction7()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "21016bb1-28e3-46c5-9390-4fe62758a318",
                    "3c034475-2d91-4bd6-b6d5-67ea159c0a34",
                    "2b21c048-5a6d-4322-8933-91de0737101a"
                ) {
                    BearPointShopId = "70bcd777-9d29-4fdc-a7ab-06c30c3f2080",
                    MoneyAmount = 4416,
                    PointAmount = 1046,
                    PointExpiresAt = "2020-04-14T07:56:18.000000+09:00",
                    Description = "a8WrQXIliZIdREMFsMROkCRk8ddkQvKQc7LYKlNIoRslqvCDErhbbwDeUUJ8xv7yWHBGykFCcSXMYmtxcFjtWeSaTyxpuIKf5a9xKgjgWEiyaCe8DAsIwwECgrsFCzflWcFZIGaL6GTHKfQALRPPaDP9EQCPYQGXaoO9axZRisPqhYNQM3YmoT",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "fb34980e-5b56-49a8-b345-db466bd6b8db",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
