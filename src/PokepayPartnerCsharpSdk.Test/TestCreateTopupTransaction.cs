// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestCreateTopupTransaction
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task CreateTopupTransaction0()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
                    "157ad3a6-4dfb-43e0-8174-37663bb26e02",
                    "fb5859a0-0527-4500-b247-f1d09e5ac666"
                );
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction1()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
                    "157ad3a6-4dfb-43e0-8174-37663bb26e02",
                    "fb5859a0-0527-4500-b247-f1d09e5ac666"
                ) {
                    RequestId = "1fa09f3e-e948-4e59-9be5-6c9c3f60a365",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction2()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
                    "157ad3a6-4dfb-43e0-8174-37663bb26e02",
                    "fb5859a0-0527-4500-b247-f1d09e5ac666"
                ) {
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "44ff57ca-bed7-4016-a9ca-ffbf67947e4c",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction3()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
                    "157ad3a6-4dfb-43e0-8174-37663bb26e02",
                    "fb5859a0-0527-4500-b247-f1d09e5ac666"
                ) {
                    Description = "n1TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4dOhcXy",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "d5777316-5b45-4656-ba5f-91e81a558c8f",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction4()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
                    "157ad3a6-4dfb-43e0-8174-37663bb26e02",
                    "fb5859a0-0527-4500-b247-f1d09e5ac666"
                ) {
                    PointExpiresAt = "2020-02-19T04:07:07.000000Z",
                    Description = "2OJwUM0ktk1yse",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "0a12dd2d-bb34-4fc3-aee4-0502dbfefb4e",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction5()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
                    "157ad3a6-4dfb-43e0-8174-37663bb26e02",
                    "fb5859a0-0527-4500-b247-f1d09e5ac666"
                ) {
                    PointAmount = 4747,
                    PointExpiresAt = "2021-01-17T22:24:07.000000Z",
                    Description = "hZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcN",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "4972ef25-bddd-4ac5-846c-579ba3aa113a",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction6()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
                    "157ad3a6-4dfb-43e0-8174-37663bb26e02",
                    "fb5859a0-0527-4500-b247-f1d09e5ac666"
                ) {
                    MoneyAmount = 275,
                    PointAmount = 3582,
                    PointExpiresAt = "2021-09-11T04:09:06.000000Z",
                    Description = "x",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "3a05f98e-a93f-4b9f-b44b-0db720e31d6f",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task CreateTopupTransaction7()
        {
            try {
                Request.CreateTopupTransaction request = new Request.CreateTopupTransaction(
                    "b60aa8f7-2eda-47b1-94d9-78d1f45a9888",
                    "157ad3a6-4dfb-43e0-8174-37663bb26e02",
                    "fb5859a0-0527-4500-b247-f1d09e5ac666"
                ) {
                    BearPointShopId = "98e4476d-ab81-40f0-8e84-07bed8a8f4fd",
                    MoneyAmount = 4638,
                    PointAmount = 8603,
                    PointExpiresAt = "2024-02-09T08:48:33.000000Z",
                    Description = "BLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmphkziTG6p4HsLeIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK",
                    Metadata = "{\"key\":\"value\"}",
                    RequestId = "fb7a439a-37b2-45f9-90e2-4499681094c4",
                };
                Response.TransactionDetail response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
