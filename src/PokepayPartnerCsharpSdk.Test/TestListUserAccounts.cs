// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListUserAccounts
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListUserAccounts0()
        {
            try {
                Request.ListUserAccounts request = new Request.ListUserAccounts(
                    "9d33d9f7-9445-4a64-8f50-7e4757d26b58"
                );
                Response.PaginatedAccountDetails response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListUserAccounts1()
        {
            try {
                Request.ListUserAccounts request = new Request.ListUserAccounts(
                    "9d33d9f7-9445-4a64-8f50-7e4757d26b58"
                ) {
                    PerPage = 2445,
                };
                Response.PaginatedAccountDetails response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListUserAccounts2()
        {
            try {
                Request.ListUserAccounts request = new Request.ListUserAccounts(
                    "9d33d9f7-9445-4a64-8f50-7e4757d26b58"
                ) {
                    Page = 6688,
                    PerPage = 5523,
                };
                Response.PaginatedAccountDetails response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
