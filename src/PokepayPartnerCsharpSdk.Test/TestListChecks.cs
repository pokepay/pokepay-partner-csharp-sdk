// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListChecks
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListChecks0()
        {
            try {
                Request.ListChecks request = new Request.ListChecks();
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks1()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks2()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks3()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    Description = "UsFd5",
                    IsOnetime = false,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks4()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    IssuerShopId = "5b61a890-dc9c-4a18-a3f9-d8f3352def4b",
                    Description = "z",
                    IsOnetime = false,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks5()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    CreatedTo = "2017-03-19T16:56:24.000000+09:00",
                    IssuerShopId = "9e1d0a30-ebb6-47e2-b5ba-2f9a943a973a",
                    Description = "TF",
                    IsOnetime = true,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks6()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    CreatedFrom = "2022-07-03T10:57:19.000000+09:00",
                    CreatedTo = "2020-12-28T10:28:54.000000+09:00",
                    IssuerShopId = "83ca3240-63d9-4dde-af8e-beb45465f916",
                    Description = "EubGw6j",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks7()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    ExpiresTo = "2020-01-07T03:04:44.000000+09:00",
                    CreatedFrom = "2024-05-18T14:13:04.000000+09:00",
                    CreatedTo = "2016-02-16T12:19:49.000000+09:00",
                    IssuerShopId = "905bcc05-b66a-40a3-83ce-467966a039d0",
                    Description = "oW",
                    IsOnetime = false,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks8()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    ExpiresFrom = "2018-02-20T04:06:03.000000+09:00",
                    ExpiresTo = "2022-09-03T19:18:04.000000+09:00",
                    CreatedFrom = "2022-06-18T17:00:00.000000+09:00",
                    CreatedTo = "2021-02-18T17:17:54.000000+09:00",
                    IssuerShopId = "4834c23e-0a59-4f73-8363-6d9cebd3ad05",
                    Description = "QIY",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks9()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    OrganizationCode = "FXsspdkpVkTBJa3OTrsXs88kJNoIZaz",
                    ExpiresFrom = "2019-02-04T21:36:33.000000+09:00",
                    ExpiresTo = "2018-09-29T16:15:24.000000+09:00",
                    CreatedFrom = "2024-08-25T11:07:04.000000+09:00",
                    CreatedTo = "2025-07-10T10:40:20.000000+09:00",
                    IssuerShopId = "53bbc7db-7b18-465a-841c-138130a02537",
                    Description = "efHVp4Du",
                    IsOnetime = false,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks10()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    PrivateMoneyId = "70719c62-b871-4b02-9607-b98bac5b48e0",
                    OrganizationCode = "zq0H9hNDIpWOGR",
                    ExpiresFrom = "2016-01-19T16:21:48.000000+09:00",
                    ExpiresTo = "2023-08-23T11:48:29.000000+09:00",
                    CreatedFrom = "2022-07-15T10:26:04.000000+09:00",
                    CreatedTo = "2024-03-10T08:46:17.000000+09:00",
                    IssuerShopId = "3cfb1a43-4749-40d7-b28f-66cc6a8b4efe",
                    Description = "zYwdZH6RY",
                    IsOnetime = true,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks11()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    PerPage = 9706,
                    PrivateMoneyId = "69158873-5d4c-4eee-9ee7-ae8240b2456d",
                    OrganizationCode = "ui2yyfAvCUPPfC6gPSyCFjnlF5wS89",
                    ExpiresFrom = "2020-12-05T16:47:27.000000+09:00",
                    ExpiresTo = "2019-05-19T11:38:42.000000+09:00",
                    CreatedFrom = "2023-06-09T09:12:00.000000+09:00",
                    CreatedTo = "2022-02-10T12:40:00.000000+09:00",
                    IssuerShopId = "86f08a53-0d0c-4cbe-b447-30eb8bc182a6",
                    Description = "uJSc",
                    IsOnetime = false,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks12()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    Page = 5393,
                    PerPage = 4788,
                    PrivateMoneyId = "e84744f5-ddc9-4836-99e2-954ef4e1e1cd",
                    OrganizationCode = "4YS",
                    ExpiresFrom = "2020-03-01T01:30:32.000000+09:00",
                    ExpiresTo = "2019-05-06T03:25:49.000000+09:00",
                    CreatedFrom = "2018-10-28T11:05:52.000000+09:00",
                    CreatedTo = "2025-01-30T10:19:36.000000+09:00",
                    IssuerShopId = "5a8d9a91-96eb-4587-ad7f-d5615ef4f4f6",
                    Description = "UABs7zcSSc",
                    IsOnetime = false,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
