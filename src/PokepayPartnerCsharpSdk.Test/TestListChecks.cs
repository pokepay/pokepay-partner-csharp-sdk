// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListChecks
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListChecks0()
        {
            try {
                Request.ListChecks request = new Request.ListChecks();
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks1()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks2()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks3()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    Description = "HR",
                    IsOnetime = false,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks4()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    IssuerShopId = "c09173a9-38c4-47ae-a6cd-1dbf767be412",
                    Description = "3LCAS",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks5()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    CreatedTo = "2020-11-29T18:13:57.000000Z",
                    IssuerShopId = "a95626e0-cc96-42e5-98b9-08e292a990d9",
                    Description = "sHOG",
                    IsOnetime = true,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks6()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    CreatedFrom = "2021-09-30T14:14:20.000000Z",
                    CreatedTo = "2023-01-10T03:03:49.000000Z",
                    IssuerShopId = "3ff659a5-a0b3-4a2a-8d85-c516ed220bfc",
                    Description = "i4",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks7()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    ExpiresTo = "2023-04-26T10:51:35.000000Z",
                    CreatedFrom = "2023-09-27T03:56:30.000000Z",
                    CreatedTo = "2022-05-30T20:39:11.000000Z",
                    IssuerShopId = "a83d2837-4b37-41aa-8abd-0b9bf6620f26",
                    Description = "RN8AasC",
                    IsOnetime = false,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks8()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    ExpiresFrom = "2020-07-04T15:44:08.000000Z",
                    ExpiresTo = "2023-04-23T18:30:13.000000Z",
                    CreatedFrom = "2020-12-04T19:50:30.000000Z",
                    CreatedTo = "2022-06-14T21:14:35.000000Z",
                    IssuerShopId = "c09b2bad-6cb6-49e7-addd-0a6e4351aa9f",
                    Description = "uHFpFsNPJm",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks9()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    OrganizationCode = "uH1GHYOOmiUvKwy",
                    ExpiresFrom = "2023-09-04T23:43:12.000000Z",
                    ExpiresTo = "2022-06-02T14:38:33.000000Z",
                    CreatedFrom = "2023-01-01T15:46:03.000000Z",
                    CreatedTo = "2020-06-18T01:18:09.000000Z",
                    IssuerShopId = "6f04fcd9-d253-4bac-9253-25ef4e15462b",
                    Description = "K",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks10()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    PrivateMoneyId = "055fb6ce-ce08-4e0a-b55a-3c9826318e47",
                    OrganizationCode = "mU0unMptspEioBBqGcJ",
                    ExpiresFrom = "2023-12-14T08:42:56.000000Z",
                    ExpiresTo = "2022-11-30T14:16:44.000000Z",
                    CreatedFrom = "2021-08-24T14:05:27.000000Z",
                    CreatedTo = "2021-03-13T03:07:07.000000Z",
                    IssuerShopId = "0f38b0e1-af01-4fd8-a3e0-a8928df81f84",
                    Description = "pDTPRH",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks11()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    PerPage = 3853,
                    PrivateMoneyId = "899befc5-fe6c-4be0-ac9b-ccde0397b840",
                    OrganizationCode = "NQrvWUnk17KWA",
                    ExpiresFrom = "2022-08-12T19:43:37.000000Z",
                    ExpiresTo = "2021-07-13T02:37:35.000000Z",
                    CreatedFrom = "2020-04-20T01:38:22.000000Z",
                    CreatedTo = "2021-07-31T11:29:45.000000Z",
                    IssuerShopId = "f33264e9-eec6-4bc9-8e47-e2e01c125c48",
                    Description = "shpxz5S2",
                    IsOnetime = true,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks12()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    Page = 2202,
                    PerPage = 4497,
                    PrivateMoneyId = "03afc5f2-3a5d-44a1-b485-0daea0b50c43",
                    OrganizationCode = "ar2DsC6IO",
                    ExpiresFrom = "2022-05-13T22:07:21.000000Z",
                    ExpiresTo = "2021-11-23T07:06:20.000000Z",
                    CreatedFrom = "2023-05-22T07:06:37.000000Z",
                    CreatedTo = "2021-05-19T00:39:45.000000Z",
                    IssuerShopId = "deb706e0-5aaf-4db3-98da-7543ffb37461",
                    Description = "lZmMT5mAF",
                    IsOnetime = true,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
