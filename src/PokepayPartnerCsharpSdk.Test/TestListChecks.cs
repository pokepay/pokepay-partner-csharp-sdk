// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListChecks
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListChecks0()
        {
            try {
                Request.ListChecks request = new Request.ListChecks();
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks1()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks2()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks3()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    Description = "UvsfgVWj",
                    IsOnetime = false,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks4()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    IssuerShopId = "a39a4204-6f49-425d-bf79-519c3f57c317",
                    Description = "I5zKNAqc0Y",
                    IsOnetime = false,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks5()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    CreatedTo = "2020-01-04T10:15:03.000000+09:00",
                    IssuerShopId = "97b1db09-da0e-43e0-ac62-c26512f4f313",
                    Description = "K0HGjYnzf",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks6()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    CreatedFrom = "2020-08-09T11:59:16.000000+09:00",
                    CreatedTo = "2016-07-08T13:44:42.000000+09:00",
                    IssuerShopId = "d1c43006-593f-4871-bbd4-f29e5f894399",
                    Description = "G8VgQ",
                    IsOnetime = false,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks7()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    ExpiresTo = "2017-12-03T14:25:29.000000+09:00",
                    CreatedFrom = "2018-06-12T11:48:53.000000+09:00",
                    CreatedTo = "2024-01-27T22:21:59.000000+09:00",
                    IssuerShopId = "46511612-d1d6-4ad2-bf5e-306c6bf08f62",
                    Description = "G4nlzD",
                    IsOnetime = false,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks8()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    ExpiresFrom = "2015-12-04T15:40:30.000000+09:00",
                    ExpiresTo = "2023-11-03T20:24:53.000000+09:00",
                    CreatedFrom = "2017-09-12T20:30:40.000000+09:00",
                    CreatedTo = "2020-01-18T15:11:18.000000+09:00",
                    IssuerShopId = "39f96b34-89c2-454c-932f-c2883a6fac4f",
                    Description = "0E5uh8B",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks9()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    OrganizationCode = "z4NUHbeQ7CDR9RqtbnQs4I",
                    ExpiresFrom = "2015-12-10T09:00:35.000000+09:00",
                    ExpiresTo = "2016-01-28T04:27:32.000000+09:00",
                    CreatedFrom = "2024-06-08T00:58:59.000000+09:00",
                    CreatedTo = "2022-01-21T07:40:23.000000+09:00",
                    IssuerShopId = "01d8b87f-4386-40ef-87e7-2c30c32df185",
                    Description = "4Us8G2vwV1",
                    IsOnetime = false,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks10()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    PrivateMoneyId = "5a336dde-8c76-48db-a2cf-37475f8398b9",
                    OrganizationCode = "0ZkAgxAGBgE1fHPSj7",
                    ExpiresFrom = "2019-01-06T11:36:43.000000+09:00",
                    ExpiresTo = "2015-11-29T02:11:19.000000+09:00",
                    CreatedFrom = "2023-11-12T18:33:23.000000+09:00",
                    CreatedTo = "2020-06-27T04:48:31.000000+09:00",
                    IssuerShopId = "94a6ea99-1994-4348-8c15-c7433d1024f2",
                    Description = "nOhncUih8",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks11()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    PerPage = 7305,
                    PrivateMoneyId = "71bfdc16-0fab-45be-8ae9-70f8ae5a0c4e",
                    OrganizationCode = "Z32J4hoJSbskqX8w5aRLTsSDtxt",
                    ExpiresFrom = "2019-01-26T23:08:15.000000+09:00",
                    ExpiresTo = "2022-05-08T04:09:35.000000+09:00",
                    CreatedFrom = "2017-09-04T01:09:36.000000+09:00",
                    CreatedTo = "2022-09-13T02:30:07.000000+09:00",
                    IssuerShopId = "15d65a8c-e6e4-414b-85c7-cb6387c32b01",
                    Description = "QiF",
                    IsOnetime = true,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks12()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    Page = 7748,
                    PerPage = 8726,
                    PrivateMoneyId = "2a7e4f96-bdda-4cc3-b8a9-1aab06eb31b1",
                    OrganizationCode = "PQjbSvzbJIk5X",
                    ExpiresFrom = "2023-05-20T06:00:25.000000+09:00",
                    ExpiresTo = "2018-05-22T11:06:59.000000+09:00",
                    CreatedFrom = "2024-06-12T03:59:26.000000+09:00",
                    CreatedTo = "2021-02-17T16:26:01.000000+09:00",
                    IssuerShopId = "e3a82354-2d51-4dcd-b0d5-43a023e26235",
                    Description = "GU0",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
