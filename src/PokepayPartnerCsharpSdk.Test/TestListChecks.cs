// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListChecks
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListChecks0()
        {
            try {
                Request.ListChecks request = new Request.ListChecks();
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks1()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks2()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    IsOnetime = false,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks3()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    Description = "1XO5",
                    IsOnetime = false,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks4()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    IssuerShopId = "55424007-bb4b-4f49-84cb-b89c649a1070",
                    Description = "OvAp",
                    IsOnetime = false,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks5()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    CreatedTo = "2017-03-02T20:23:14.000000+09:00",
                    IssuerShopId = "9497379a-4bd1-4f3a-9ffc-3e9cd7250208",
                    Description = "9",
                    IsOnetime = false,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks6()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    CreatedFrom = "2021-07-02T10:57:07.000000+09:00",
                    CreatedTo = "2018-06-15T10:22:00.000000+09:00",
                    IssuerShopId = "434dbf4b-de2f-4c8a-ab99-c6556e8f50bc",
                    Description = "8V1yX4T",
                    IsOnetime = true,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks7()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    ExpiresTo = "2024-02-10T10:18:56.000000+09:00",
                    CreatedFrom = "2025-03-18T20:08:25.000000+09:00",
                    CreatedTo = "2017-05-20T03:19:24.000000+09:00",
                    IssuerShopId = "1e8172c4-4b60-488c-b41e-b447aed819f7",
                    Description = "GnoOtU",
                    IsOnetime = false,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks8()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    ExpiresFrom = "2017-11-20T10:27:08.000000+09:00",
                    ExpiresTo = "2016-04-26T21:58:30.000000+09:00",
                    CreatedFrom = "2018-04-23T14:03:48.000000+09:00",
                    CreatedTo = "2016-10-29T03:41:59.000000+09:00",
                    IssuerShopId = "dad79700-0440-4dac-8ead-8b3ae767a4e3",
                    Description = "n4OF5WPA",
                    IsOnetime = true,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks9()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    OrganizationCode = "gmprUHVPLFnM6T5Xx3zAk8",
                    ExpiresFrom = "2018-03-20T22:32:29.000000+09:00",
                    ExpiresTo = "2023-10-04T01:46:55.000000+09:00",
                    CreatedFrom = "2025-06-10T10:12:08.000000+09:00",
                    CreatedTo = "2018-12-31T09:29:45.000000+09:00",
                    IssuerShopId = "bc38e7ec-8eb7-4cb3-b78a-b708b9c0f049",
                    Description = "LQj",
                    IsOnetime = true,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks10()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    PrivateMoneyId = "64662f02-a307-4582-b83f-2d1e68eb33ea",
                    OrganizationCode = "8McBUxpHbGyJOe571t24",
                    ExpiresFrom = "2024-09-17T05:27:30.000000+09:00",
                    ExpiresTo = "2021-09-26T05:17:19.000000+09:00",
                    CreatedFrom = "2019-09-25T12:46:27.000000+09:00",
                    CreatedTo = "2017-05-04T04:09:30.000000+09:00",
                    IssuerShopId = "589b2b37-eda3-4867-bfab-3ba3824bd5fe",
                    Description = "E",
                    IsOnetime = false,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks11()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    PerPage = 7044,
                    PrivateMoneyId = "3be2b4a7-1070-4e61-8b6f-9cc08ea06e47",
                    OrganizationCode = "BJ3v3J2jv9b71206Wx",
                    ExpiresFrom = "2017-06-09T10:52:02.000000+09:00",
                    ExpiresTo = "2018-10-01T10:54:05.000000+09:00",
                    CreatedFrom = "2020-05-22T02:42:11.000000+09:00",
                    CreatedTo = "2024-05-12T12:39:29.000000+09:00",
                    IssuerShopId = "8a895e26-a3d4-42a1-afe6-5e3dee9c0851",
                    Description = "o2qh",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks12()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    Page = 6031,
                    PerPage = 2852,
                    PrivateMoneyId = "5055ffff-c8f0-4dfe-9472-b0e4c1c3cc0f",
                    OrganizationCode = "3oqtrH8qYeTeReOXjUS2m6RGuwGFs",
                    ExpiresFrom = "2017-10-26T03:22:17.000000+09:00",
                    ExpiresTo = "2017-10-30T09:26:28.000000+09:00",
                    CreatedFrom = "2017-04-25T01:27:22.000000+09:00",
                    CreatedTo = "2017-06-22T11:42:03.000000+09:00",
                    IssuerShopId = "bef90214-433a-4b94-812c-29bcc68ba937",
                    Description = "1",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
