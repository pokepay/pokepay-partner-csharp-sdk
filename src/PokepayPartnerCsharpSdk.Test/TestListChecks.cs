// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestListChecks
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task ListChecks0()
        {
            try {
                Request.ListChecks request = new Request.ListChecks();
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks1()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks2()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks3()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    Description = "CH7EY",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks4()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    IssuerShopId = "049b2e4c-764e-4058-8cdc-ffa7eec51539",
                    Description = "Ii",
                    IsOnetime = false,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks5()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    CreatedTo = "2020-09-25T09:43:12.000000+09:00",
                    IssuerShopId = "b0e4dc1c-dabb-4f8b-8c5e-a17bc81356c0",
                    Description = "RQk3f",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks6()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    CreatedFrom = "2020-07-10T16:04:45.000000+09:00",
                    CreatedTo = "2022-11-22T10:49:38.000000+09:00",
                    IssuerShopId = "ec73114a-17ee-4b26-b708-7cf5cb1a3d0f",
                    Description = "HPQ4OYAjA",
                    IsOnetime = true,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks7()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    ExpiresTo = "2022-03-24T00:21:43.000000+09:00",
                    CreatedFrom = "2023-02-20T13:24:43.000000+09:00",
                    CreatedTo = "2023-07-14T15:04:46.000000+09:00",
                    IssuerShopId = "f0b1ebe3-64b4-4e0b-9bc9-ed1124b57f24",
                    Description = "qnXCcPoL",
                    IsOnetime = false,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks8()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    ExpiresFrom = "2022-05-12T01:16:47.000000+09:00",
                    ExpiresTo = "2022-10-19T13:02:13.000000+09:00",
                    CreatedFrom = "2022-02-09T04:06:13.000000+09:00",
                    CreatedTo = "2022-04-23T05:29:54.000000+09:00",
                    IssuerShopId = "69fdedf1-8afb-4069-b64c-d36816b18770",
                    Description = "WBbJDA6SPD",
                    IsOnetime = false,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks9()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    OrganizationCode = "cVI",
                    ExpiresFrom = "2020-04-01T21:23:35.000000+09:00",
                    ExpiresTo = "2022-11-30T08:40:10.000000+09:00",
                    CreatedFrom = "2020-05-18T06:00:29.000000+09:00",
                    CreatedTo = "2023-09-04T09:34:22.000000+09:00",
                    IssuerShopId = "6c2035b9-436b-408d-ac4c-b9493396a868",
                    Description = "vYU3vTnf",
                    IsOnetime = true,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks10()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    PrivateMoneyId = "a88cf200-fa0d-42cd-a488-2db6e7830fb2",
                    OrganizationCode = "kL5r1",
                    ExpiresFrom = "2023-10-04T23:18:18.000000+09:00",
                    ExpiresTo = "2021-11-18T23:33:18.000000+09:00",
                    CreatedFrom = "2020-06-06T04:20:27.000000+09:00",
                    CreatedTo = "2021-06-06T12:55:12.000000+09:00",
                    IssuerShopId = "6600823d-3c36-4701-804e-a1295a996e4d",
                    Description = "24v",
                    IsOnetime = false,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks11()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    PerPage = 1731,
                    PrivateMoneyId = "23bc84a1-bbd4-42bf-a10e-2b0a211341a1",
                    OrganizationCode = "alA01cafNurgRSmD8GxUqSRw1hOyZsM",
                    ExpiresFrom = "2023-08-22T08:55:13.000000+09:00",
                    ExpiresTo = "2022-06-02T03:36:30.000000+09:00",
                    CreatedFrom = "2021-04-05T03:59:53.000000+09:00",
                    CreatedTo = "2023-11-06T03:32:57.000000+09:00",
                    IssuerShopId = "dcb5ff67-767c-439e-9caf-5e65d8e786d0",
                    Description = "7m",
                    IsOnetime = false,
                    IsDisabled = true,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task ListChecks12()
        {
            try {
                Request.ListChecks request = new Request.ListChecks() {
                    Page = 4582,
                    PerPage = 3820,
                    PrivateMoneyId = "18a17dda-5e6b-437f-8580-cbcbacc878e2",
                    OrganizationCode = "HCjmI9ZZQf72",
                    ExpiresFrom = "2020-03-28T14:15:10.000000+09:00",
                    ExpiresTo = "2023-08-10T17:11:27.000000+09:00",
                    CreatedFrom = "2021-01-23T12:24:00.000000+09:00",
                    CreatedTo = "2021-01-29T16:40:32.000000+09:00",
                    IssuerShopId = "c57ba665-47d3-4b75-9c6a-655efdd38b1f",
                    Description = "kGb",
                    IsOnetime = false,
                    IsDisabled = false,
                };
                Response.PaginatedChecks response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
