// DO NOT EDIT: File is generated by code generator.
using System;
using System.Net;
using System.Net.Http;
using NUnit.Framework;
using System.Threading.Tasks;
using System.Collections.Generic;

using PokepayPartnerCsharpSdk;

namespace PokepayPartnerCsharpSdk.Test
{
    public class TestUpdateCampaign
    {
        private Client client;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            client = new Client("~/.pokepay/test-config.ini");
        }

        [Test]
        public async Task UpdateCampaign0()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                );
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign1()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign2()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    MaxTotalPointAmount = 5177,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign3()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    MaxPointAmount = 6524,
                    MaxTotalPointAmount = 4055,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign4()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 4083,
                    MaxTotalPointAmount = 5406,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign5()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    MinimumNumberForCombinationPurchase = 8234,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 4283,
                    MaxTotalPointAmount = 5918,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign6()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    ApplicableShopIds = new string[]{"a8b152ea-8101-441f-adca-3b2ad703dbc1", "e4395c2b-c2b0-470e-b103-01c6bff84005", "482fa4dc-1b72-4301-8358-65aa6375ccde", "b3744d1d-b758-4dba-b6bf-1d03a1bf12b2", "6a24cb73-74a6-411c-b788-ff450ee39764", "6a936a24-4056-4aec-bbfb-698d494c462e", "326065e3-e945-4407-b170-1bc4b07e398c", "435b9220-cc5d-4666-b1c2-87a23f0ca918"},
                    MinimumNumberForCombinationPurchase = 5911,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 3955,
                    MaxTotalPointAmount = 4777,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign7()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"3722372b-5511-4a59-a476-1ce0443ee09f", "0875bd95-cde4-4f6d-a515-504679f665a3", "3732f803-99f9-442f-b7c7-c37bd781c803", "e4f89130-9c9b-4333-b73a-0ba997100ecf", "2b8de5b2-5a74-4d91-b79c-ce9d5ac48fb9", "431dc8e2-1016-4539-9a98-c6e77ea22753", "86564467-9a98-4663-9402-16a25701f68d", "1cb25914-b5ee-4156-9b35-8711230711a3", "d7de5a80-2daa-4133-8cf3-98543955bbe1", "ccd2830a-f851-4d13-8fba-243c04800826"},
                    MinimumNumberForCombinationPurchase = 9678,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 8954,
                    MaxTotalPointAmount = 5867,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign8()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    ApplicableDaysOfWeek = new int[]{4},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"b015d746-2f7e-466d-ae32-8614d78ba7ff", "bb508e49-d401-4291-aca4-d20be63107eb", "42fa2956-e357-4e34-b607-2a9934e0180f", "002ed5c1-f961-42af-98df-e49f782b095d", "67ef3f99-ec54-4ccc-aea3-3627fe46aaa3", "1e449dc9-47e2-4231-bff0-03de07e30533", "424d95de-fe8f-4956-ab09-d52a775328b5", "dcffb8af-d87f-4e30-894f-e3ccd4efc35e"},
                    MinimumNumberForCombinationPurchase = 2823,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 2532,
                    MaxTotalPointAmount = 6793,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign9()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{3, 2, 2, 3, 1, 1, 6, 1},
                    ApplicableTimeRanges = new object[]{},
                    ApplicableShopIds = new string[]{"5eba7bd9-a6f0-4a60-9272-212a46dd2cee", "8507558d-e304-4a57-b365-5b0b13690a1a", "4c627cc2-6215-4665-bbde-e6cdbc341a49", "0f98f846-d2c4-443c-aa87-e09b70d68969", "6d5da064-9ee2-4b92-a3e7-f8fdb4590f07", "855c9915-6810-4dc3-b319-7921b9b7fb93", "cab3541d-7a6d-47b4-9d32-3f7cb822118e"},
                    MinimumNumberForCombinationPurchase = 8556,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 2341,
                    MaxTotalPointAmount = 3915,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign10()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{2, 3, 6, 6, 3, 6, 3, 4, 5, 5},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{},
                    MinimumNumberForCombinationPurchase = 1780,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 4124,
                    MaxTotalPointAmount = 9188,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign11()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    Subject = "all",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{3, 4, 4, 0, 4, 2, 6, 4, 0},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"ddfc396c-848a-4917-98e0-9fd37beb43df", "cc33f468-deae-4bfa-8e7f-c3eb2d60d5ac", "e0d04215-bfec-45fa-b491-9abfc5505ce6", "344bc899-8bca-43b2-809b-ec24e638ed63", "8956ec35-6a64-43ff-8557-a5dc3b7dcd27", "a02e79b4-9f4f-4040-8bb1-3ccadd427baa", "dd6cdf51-bf1e-4e93-b04e-03e258dc7f5e"},
                    MinimumNumberForCombinationPurchase = 2624,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 4399,
                    MaxTotalPointAmount = 8595,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign12()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    IsExclusive = true,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{0, 5, 3, 2, 4, 5, 1, 6},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"4326eb9c-4e8f-45b4-8cb8-9fda161eb7e9", "c3b50569-3848-4802-b555-b52ac140c510", "1c146d5d-0599-4575-b1b8-5d8cb1a76b7e"},
                    MinimumNumberForCombinationPurchase = 9487,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 4400,
                    MaxTotalPointAmount = 7395,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign13()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    PointExpiresInDays = 5930,
                    IsExclusive = true,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"7b6c9821-0de9-4033-84e2-bb99a195d42b", "f248e746-2f08-4de9-8380-f1ba8ba89d31", "836db60f-c19b-45d7-bef8-78adab3d5ed9", "2b03fd39-2b75-495f-a3ae-796c32e4f860"},
                    MinimumNumberForCombinationPurchase = 8978,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 6752,
                    MaxTotalPointAmount = 3876,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign14()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    PointExpiresAt = "2025-01-16T17:47:24.000000+09:00",
                    PointExpiresInDays = 2254,
                    IsExclusive = true,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{1, 6},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{},
                    MinimumNumberForCombinationPurchase = 1371,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 4089,
                    MaxTotalPointAmount = 479,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign15()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    Status = "disabled",
                    PointExpiresAt = "2017-12-23T17:49:10.000000+09:00",
                    PointExpiresInDays = 6029,
                    IsExclusive = false,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{6, 2, 2, 0, 1, 2, 2, 1},
                    ApplicableTimeRanges = new object[]{},
                    ApplicableShopIds = new string[]{"3c705a4c-6cdb-45dd-b181-971b692b9b70", "cf6d3620-ef46-4625-b114-0c370618c32e", "17829261-af50-4f31-b23b-c2ecdf5546e8", "d4b9d81c-07d7-4bd3-b290-7f86b8843b26", "d941b408-850c-4097-baaf-4005568840de", "e39da77f-1013-4156-9d0a-1f9785487b83", "73e32ab1-5c5f-4c72-a8bd-6f934d805ebd"},
                    MinimumNumberForCombinationPurchase = 4606,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 4744,
                    MaxTotalPointAmount = 9626,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign16()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    Description = "iy4lf0taUmJXr2jIuan84UJDT9Kfa354idc7T4cl6Omh3J2HoJxII1NsD8Uq2wrA",
                    Status = "enabled",
                    PointExpiresAt = "2024-03-22T07:18:12.000000+09:00",
                    PointExpiresInDays = 9858,
                    IsExclusive = false,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{0, 3, 5, 6, 3, 2, 3, 1, 5, 0},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"25faef90-c8eb-41c4-a51b-07e789f87cde", "c5564dfb-1811-44a5-9034-cf2f4add95e7", "a62f146a-ecd6-40f9-ab11-1175b6e8e31e"},
                    MinimumNumberForCombinationPurchase = 4508,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 9020,
                    MaxTotalPointAmount = 8620,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign17()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    Event = "external-transaction",
                    Description = "VMq78tqhsvJ09ER3EthQazAaryImnpCzzyji5vL8THrw6ILkvbk0qddiq9gvsLFZF1AzuNB8wUCXl3vJ0MgFlZUgHOjnu31nDswSuNYxtDA3",
                    Status = "enabled",
                    PointExpiresAt = "2025-03-08T02:56:35.000000+09:00",
                    PointExpiresInDays = 4760,
                    IsExclusive = false,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{2, 6, 2, 6, 3},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"954e3a73-b382-445a-acb4-c456fcb6f107", "d234af01-2ff5-4af9-8692-66d10cff1e97", "a15e2c8e-eb7e-416d-afab-83573b420134", "550d5fe1-2d6d-415a-a9a2-467e41afecae"},
                    MinimumNumberForCombinationPurchase = 4464,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 212,
                    MaxTotalPointAmount = 5477,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign18()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    Priority = 6420,
                    Event = "topup",
                    Description = "54n44RoheHahFy2Sm7h8AGlSSRwiNOYIornZxRDBxQGvN",
                    Status = "enabled",
                    PointExpiresAt = "2021-09-29T03:01:27.000000+09:00",
                    PointExpiresInDays = 9459,
                    IsExclusive = false,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{6, 6, 4},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"dfbd630e-f11a-45ed-880e-0584c64fdbed", "9eb2fce0-2c54-4d61-971f-88efebcca549", "d589ffd6-8a3e-422c-9b0f-0b810c8276a8", "5e3782ff-cdb3-4487-8072-d92fc3c8b649"},
                    MinimumNumberForCombinationPurchase = 5257,
                    ExistInEachProductGroups = false,
                    MaxPointAmount = 690,
                    MaxTotalPointAmount = 9473,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign19()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    EndsAt = "2020-07-21T22:45:55.000000+09:00",
                    Priority = 626,
                    Event = "payment",
                    Description = "bDoooZnmxf3OApojLQO5NyfEcEDKhAl4wqj5ILZ0cxtylI2X3gC8rH7tPBZ52j7jOx",
                    Status = "disabled",
                    PointExpiresAt = "2019-05-27T03:55:16.000000+09:00",
                    PointExpiresInDays = 6920,
                    IsExclusive = false,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{1, 6, 2},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"85a615f4-2877-4ffd-9191-a2affe4aab93", "fea546e4-2a29-4f79-8950-167f8744eead", "a6475130-5cd4-4370-bf41-7a9990145aca", "7b4cdd65-b9d4-49c6-ac83-b677c5939b02", "e51ab459-cd1a-4bd1-a06a-1907fd4a553c"},
                    MinimumNumberForCombinationPurchase = 9436,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 3284,
                    MaxTotalPointAmount = 8040,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign20()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    StartsAt = "2017-01-04T01:37:29.000000+09:00",
                    EndsAt = "2016-08-24T17:01:33.000000+09:00",
                    Priority = 3541,
                    Event = "payment",
                    Description = "fankGviSVykrl3jIX4Z40weWFSUkrIkfeW5764EHvvGXcIfmnFXVxW6jk1K5S",
                    Status = "disabled",
                    PointExpiresAt = "2017-05-11T14:56:35.000000+09:00",
                    PointExpiresInDays = 9284,
                    IsExclusive = true,
                    Subject = "all",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{6, 2, 0, 0, 5},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{"0c298be5-2dac-4f5f-9e82-04ead56f8a66", "3fc63fe8-99d2-47eb-b9e6-19a7dab8b34e", "f4245910-7c6c-490d-b25f-d38559610c67"},
                    MinimumNumberForCombinationPurchase = 1291,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 1075,
                    MaxTotalPointAmount = 3636,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

        [Test]
        public async Task UpdateCampaign21()
        {
            try {
                Request.UpdateCampaign request = new Request.UpdateCampaign(
                    "b3e3747f-eb0e-46a7-acd0-08de115dfe2b"
                ) {
                    Name = "k1NTli7WC6NPV5u9mRTkyNyaeCWdLMs9trw4BRSAcsFY7jzwXn55",
                    StartsAt = "2016-08-06T07:52:28.000000+09:00",
                    EndsAt = "2022-11-07T12:23:11.000000+09:00",
                    Priority = 8461,
                    Event = "external-transaction",
                    Description = "rdoGeAl9DZPRjKIsTAwwXxMloYc4AXYbMu3a2NJ80wYAbrh8b4mOAsBMQ2yuMN8yTYiFBy2g2JG7lyjcI89G9MKPH1Zgx85S",
                    Status = "enabled",
                    PointExpiresAt = "2023-12-12T16:49:40.000000+09:00",
                    PointExpiresInDays = 3346,
                    IsExclusive = true,
                    Subject = "money",
                    AmountBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"subject_more_than_or_equal",1000}, {"subject_less_than",5000}}},
                    ProductBasedPointRules = new object[]{new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}, new Dictionary<string, object>(){{"point_amount",5}, {"point_amount_unit","percent"}, {"product_code","4912345678904"}, {"is_multiply_by_count",true}, {"required_count",2}}},
                    ApplicableDaysOfWeek = new int[]{3, 1, 5},
                    ApplicableTimeRanges = new object[]{new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}, new Dictionary<string, object>(){{"from","12:00"}, {"to","23:59"}}},
                    ApplicableShopIds = new string[]{},
                    MinimumNumberForCombinationPurchase = 1574,
                    ExistInEachProductGroups = true,
                    MaxPointAmount = 7455,
                    MaxTotalPointAmount = 6474,
                    ApplicableAccountMetadata = new Dictionary<string, object>(){{"key","sex"}, {"value","male"}},
                };
                Response.Campaign response = await request.Send(client);
                Assert.NotNull(response, "Shouldn't be null at least");
            } catch (HttpRequestException e) {
                Assert.AreNotEqual((int) e.Data["StatusCode"], (int) HttpStatusCode.BadRequest, "Shouldn't be BadRequest");
                Assert.True((int) e.Data["StatusCode"] >= 300, "Should be larger than 300");
            }
        }

    }
}
